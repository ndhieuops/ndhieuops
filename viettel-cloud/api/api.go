// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

const (
	BasicAuthScopes  = "basicAuth.Scopes"
	CookieAuthScopes = "cookieAuth.Scopes"
)

// Defines values for AccessLevelEnum.
const (
	Ro AccessLevelEnum = "ro"
	Rw AccessLevelEnum = "rw"
)

// Defines values for AclEnum.
const (
	Private    AclEnum = "private"
	PublicRead AclEnum = "public-read"
)

// Defines values for ActionE9cEnum.
const (
	REDIRECTPREFIX        ActionE9cEnum = "REDIRECT_PREFIX"
	REDIRECTTOSERVERGROUP ActionE9cEnum = "REDIRECT_TO_SERVER_GROUP"
	REDIRECTTOURL         ActionE9cEnum = "REDIRECT_TO_URL"
	REJECT                ActionE9cEnum = "REJECT"
)

// Defines values for AlgorithmEnum.
const (
	AlgorithmEnumLEASTCONNECTIONS AlgorithmEnum = "LEAST_CONNECTIONS"
	AlgorithmEnumROUNDROBIN       AlgorithmEnum = "ROUND_ROBIN"
	AlgorithmEnumSOURCEIP         AlgorithmEnum = "SOURCE_IP"
	AlgorithmEnumSOURCEIPPORT     AlgorithmEnum = "SOURCE_IP_PORT"
)

// Defines values for AllowedMethodsEnum.
const (
	AllowedMethodsEnumDELETE AllowedMethodsEnum = "DELETE"
	AllowedMethodsEnumGET    AllowedMethodsEnum = "GET"
	AllowedMethodsEnumHEAD   AllowedMethodsEnum = "HEAD"
	AllowedMethodsEnumPOST   AllowedMethodsEnum = "POST"
	AllowedMethodsEnumPUT    AllowedMethodsEnum = "PUT"
)

// Defines values for BackupIntervalEnum.
const (
	Daily  BackupIntervalEnum = "daily"
	Weekly BackupIntervalEnum = "weekly"
)

// Defines values for BackupPlanDetailStatusEnum.
const (
	BackupPlanDetailStatusEnumEnabled          BackupPlanDetailStatusEnum = "enabled"
	BackupPlanDetailStatusEnumFailedValidation BackupPlanDetailStatusEnum = "failed_validation"
	BackupPlanDetailStatusEnumNew              BackupPlanDetailStatusEnum = "new"
	BackupPlanDetailStatusEnumUnknown          BackupPlanDetailStatusEnum = "unknown"
)

// Defines values for BackupScopeTypeEnum.
const (
	All     BackupScopeTypeEnum = "all"
	Exclude BackupScopeTypeEnum = "exclude"
	Include BackupScopeTypeEnum = "include"
)

// Defines values for BackupType45cEnum.
const (
	BackupType45cEnumManual    BackupType45cEnum = "manual"
	BackupType45cEnumScheduled BackupType45cEnum = "scheduled"
)

// Defines values for BaseObjectVersionTypeEnum.
const (
	BaseObjectVersionTypeEnumDELETEMARKER BaseObjectVersionTypeEnum = "DELETE_MARKER"
	BaseObjectVersionTypeEnumDIR          BaseObjectVersionTypeEnum = "DIR"
	BaseObjectVersionTypeEnumOBJ          BaseObjectVersionTypeEnum = "OBJ"
)

// Defines values for CNITypeEnum.
const (
	CNITypeEnumCalico  CNITypeEnum = "calico"
	CNITypeEnumCanal   CNITypeEnum = "canal"
	CNITypeEnumFlannel CNITypeEnum = "flannel"
	CNITypeEnumWeave   CNITypeEnum = "weave"
)

// Defines values for CSITypeEnum.
const (
	CSITypeEnumCephFs  CSITypeEnum = "ceph-fs"
	CSITypeEnumCephRbd CSITypeEnum = "ceph-rbd"
	CSITypeEnumCinder  CSITypeEnum = "cinder"
	CSITypeEnumNfs     CSITypeEnum = "nfs"
)

// Defines values for CompareTypeEnum.
const (
	CONTAINS   CompareTypeEnum = "CONTAINS"
	ENDSWITH   CompareTypeEnum = "ENDS_WITH"
	EQUALTO    CompareTypeEnum = "EQUAL_TO"
	REGEX      CompareTypeEnum = "REGEX"
	STARTSWITH CompareTypeEnum = "STARTS_WITH"
)

// Defines values for ContainerFormatEnum.
const (
	ContainerFormatEnumAki    ContainerFormatEnum = "aki"
	ContainerFormatEnumAmi    ContainerFormatEnum = "ami"
	ContainerFormatEnumAri    ContainerFormatEnum = "ari"
	ContainerFormatEnumBare   ContainerFormatEnum = "bare"
	ContainerFormatEnumDocker ContainerFormatEnum = "docker"
	ContainerFormatEnumOva    ContainerFormatEnum = "ova"
	ContainerFormatEnumOvf    ContainerFormatEnum = "ovf"
)

// Defines values for DBInstanceBackupBackupTypeEnum.
const (
	Automatic DBInstanceBackupBackupTypeEnum = "automatic"
)

// Defines values for DBInstanceBackupStatusEnum.
const (
	DBInstanceBackupStatusEnumCOMPLETED DBInstanceBackupStatusEnum = "COMPLETED"
	DBInstanceBackupStatusEnumCREATING  DBInstanceBackupStatusEnum = "CREATING"
	DBInstanceBackupStatusEnumERROR     DBInstanceBackupStatusEnum = "ERROR"
)

// Defines values for DBInstanceStatusEnum.
const (
	DBInstanceStatusEnumACTIVE         DBInstanceStatusEnum = "ACTIVE"
	DBInstanceStatusEnumCREATING       DBInstanceStatusEnum = "CREATING"
	DBInstanceStatusEnumDELETING       DBInstanceStatusEnum = "DELETING"
	DBInstanceStatusEnumERROR          DBInstanceStatusEnum = "ERROR"
	DBInstanceStatusEnumFAILOVERING    DBInstanceStatusEnum = "FAILOVERING"
	DBInstanceStatusEnumFLAVORRESIZING DBInstanceStatusEnum = "FLAVOR_RESIZING"
	DBInstanceStatusEnumUPDATING       DBInstanceStatusEnum = "UPDATING"
	DBInstanceStatusEnumUPGRADING      DBInstanceStatusEnum = "UPGRADING"
	DBInstanceStatusEnumVOLUMERESIZING DBInstanceStatusEnum = "VOLUME_RESIZING"
)

// Defines values for DashboardVersionTypeEnum.
const (
	DashboardVersionTypeEnumHeadlamp      DashboardVersionTypeEnum = "headlamp"
	DashboardVersionTypeEnumKubedashboard DashboardVersionTypeEnum = "kubedashboard"
)

// Defines values for DatabaseTypeEnum.
const (
	DatabaseTypeEnumMysql DatabaseTypeEnum = "mysql"
)

// Defines values for DayOfWeekEnum.
const (
	DayOfWeekEnumFriday    DayOfWeekEnum = "friday"
	DayOfWeekEnumMonday    DayOfWeekEnum = "monday"
	DayOfWeekEnumSaturday  DayOfWeekEnum = "saturday"
	DayOfWeekEnumSunday    DayOfWeekEnum = "sunday"
	DayOfWeekEnumThursday  DayOfWeekEnum = "thursday"
	DayOfWeekEnumTuesday   DayOfWeekEnum = "tuesday"
	DayOfWeekEnumWednesday DayOfWeekEnum = "wednesday"
)

// Defines values for DaysOfWeekEnum.
const (
	DaysOfWeekEnumFri DaysOfWeekEnum = "fri"
	DaysOfWeekEnumMon DaysOfWeekEnum = "mon"
	DaysOfWeekEnumSat DaysOfWeekEnum = "sat"
	DaysOfWeekEnumSun DaysOfWeekEnum = "sun"
	DaysOfWeekEnumThu DaysOfWeekEnum = "thu"
	DaysOfWeekEnumTue DaysOfWeekEnum = "tue"
	DaysOfWeekEnumWed DaysOfWeekEnum = "wed"
)

// Defines values for DeviceOwnerEnum.
const (
	DeviceOwnerEnumNetwork DeviceOwnerEnum = "network"
	DeviceOwnerEnumService DeviceOwnerEnum = "service"
	DeviceOwnerEnumUser    DeviceOwnerEnum = "user"
)

// Defines values for DirectionEnum.
const (
	Egress  DirectionEnum = "egress"
	Ingress DirectionEnum = "ingress"
)

// Defines values for DiskFormatEnum.
const (
	DiskFormatEnumAki    DiskFormatEnum = "aki"
	DiskFormatEnumAmi    DiskFormatEnum = "ami"
	DiskFormatEnumAri    DiskFormatEnum = "ari"
	DiskFormatEnumDocker DiskFormatEnum = "docker"
	DiskFormatEnumIso    DiskFormatEnum = "iso"
	DiskFormatEnumOva    DiskFormatEnum = "ova"
	DiskFormatEnumPloop  DiskFormatEnum = "ploop"
	DiskFormatEnumQcow2  DiskFormatEnum = "qcow2"
	DiskFormatEnumRaw    DiskFormatEnum = "raw"
	DiskFormatEnumVdi    DiskFormatEnum = "vdi"
	DiskFormatEnumVhd    DiskFormatEnum = "vhd"
	DiskFormatEnumVhdx   DiskFormatEnum = "vhdx"
	DiskFormatEnumVmdk   DiskFormatEnum = "vmdk"
)

// Defines values for DiskSpeedEnum.
const (
	DiskSpeedEnumN100k DiskSpeedEnum = "100k"
	DiskSpeedEnumN10k  DiskSpeedEnum = "10k"
	DiskSpeedEnumN20k  DiskSpeedEnum = "20k"
	DiskSpeedEnumN30k  DiskSpeedEnum = "30k"
	DiskSpeedEnumN50k  DiskSpeedEnum = "50k"
)

// Defines values for ElasticIPStatusEnum.
const (
	ElasticIPStatusEnumActive ElasticIPStatusEnum = "active"
	ElasticIPStatusEnumDown   ElasticIPStatusEnum = "down"
)

// Defines values for EncryptionKeySizeEnum.
const (
	EncryptionKeySizeEnumN0   EncryptionKeySizeEnum = "0"
	EncryptionKeySizeEnumN128 EncryptionKeySizeEnum = "128"
	EncryptionKeySizeEnumN256 EncryptionKeySizeEnum = "256"
)

// Defines values for ExecutionStrategyEnum.
const (
	DaysOfMonth ExecutionStrategyEnum = "days_of_month"
	Periodic    ExecutionStrategyEnum = "periodic"
)

// Defines values for FilesystemAccessRuleStateEnum.
const (
	FilesystemAccessRuleStateEnumActive   FilesystemAccessRuleStateEnum = "active"
	FilesystemAccessRuleStateEnumApplying FilesystemAccessRuleStateEnum = "applying"
	FilesystemAccessRuleStateEnumDenying  FilesystemAccessRuleStateEnum = "denying"
	FilesystemAccessRuleStateEnumFail     FilesystemAccessRuleStateEnum = "fail"
)

// Defines values for FilesystemSnapshotStatusEnum.
const (
	FilesystemSnapshotStatusEnumAvailable FilesystemSnapshotStatusEnum = "available"
	FilesystemSnapshotStatusEnumCreating  FilesystemSnapshotStatusEnum = "creating"
	FilesystemSnapshotStatusEnumDeleting  FilesystemSnapshotStatusEnum = "deleting"
	FilesystemSnapshotStatusEnumFail      FilesystemSnapshotStatusEnum = "fail"
	FilesystemSnapshotStatusEnumUpdating  FilesystemSnapshotStatusEnum = "updating"
)

// Defines values for FilesystemStatusEnum.
const (
	FilesystemStatusEnumAvailable FilesystemStatusEnum = "available"
	FilesystemStatusEnumCreating  FilesystemStatusEnum = "creating"
	FilesystemStatusEnumDeleting  FilesystemStatusEnum = "deleting"
	FilesystemStatusEnumFail      FilesystemStatusEnum = "fail"
	FilesystemStatusEnumMigrating FilesystemStatusEnum = "migrating"
	FilesystemStatusEnumResizing  FilesystemStatusEnum = "resizing"
	FilesystemStatusEnumUpdating  FilesystemStatusEnum = "updating"
)

// Defines values for FilesystemTypeEnum.
const (
	Classic FilesystemTypeEnum = "Classic"
)

// Defines values for FlavorStatusEnum.
const (
	FlavorStatusEnumDisable FlavorStatusEnum = "disable"
	FlavorStatusEnumEnable  FlavorStatusEnum = "enable"
)

// Defines values for FrequencyUnitEnum.
const (
	Day   FrequencyUnitEnum = "day"
	Month FrequencyUnitEnum = "month"
	Week  FrequencyUnitEnum = "week"
)

// Defines values for IdTypeEnum.
const (
	BUS IdTypeEnum = "BUS"
	ID  IdTypeEnum = "ID"
	IDC IdTypeEnum = "IDC"
	TIN IdTypeEnum = "TIN"
)

// Defines values for ImageStateEnum.
const (
	ImageStateEnumDisable ImageStateEnum = "disable"
	ImageStateEnumEnable  ImageStateEnum = "enable"
)

// Defines values for ImageStatusEnum.
const (
	ImageStatusEnumActive        ImageStatusEnum = "active"
	ImageStatusEnumDeactivated   ImageStatusEnum = "deactivated"
	ImageStatusEnumDeleted       ImageStatusEnum = "deleted"
	ImageStatusEnumImporting     ImageStatusEnum = "importing"
	ImageStatusEnumKilled        ImageStatusEnum = "killed"
	ImageStatusEnumPendingDelete ImageStatusEnum = "pending_delete"
	ImageStatusEnumQueued        ImageStatusEnum = "queued"
	ImageStatusEnumSaving        ImageStatusEnum = "saving"
	ImageStatusEnumUploading     ImageStatusEnum = "uploading"
)

// Defines values for KeyPairTypeEnum.
const (
	Rsa KeyPairTypeEnum = "rsa"
)

// Defines values for LifecycleStatusEnum.
const (
	LifecycleStatusEnumDisabled LifecycleStatusEnum = "Disabled"
	LifecycleStatusEnumEnabled  LifecycleStatusEnum = "Enabled"
)

// Defines values for LoadBalancerPackageEnum.
const (
	LoadBalancerPackageEnumLARGE  LoadBalancerPackageEnum = "LARGE"
	LoadBalancerPackageEnumMEDIUM LoadBalancerPackageEnum = "MEDIUM"
	LoadBalancerPackageEnumSMALL  LoadBalancerPackageEnum = "SMALL"
)

// Defines values for LoadBalancingMonitorTypeEnum.
const (
	LoadBalancingMonitorTypeEnumHTTP       LoadBalancingMonitorTypeEnum = "HTTP"
	LoadBalancingMonitorTypeEnumHTTPS      LoadBalancingMonitorTypeEnum = "HTTPS"
	LoadBalancingMonitorTypeEnumPING       LoadBalancingMonitorTypeEnum = "PING"
	LoadBalancingMonitorTypeEnumSCTP       LoadBalancingMonitorTypeEnum = "SCTP"
	LoadBalancingMonitorTypeEnumTCP        LoadBalancingMonitorTypeEnum = "TCP"
	LoadBalancingMonitorTypeEnumTLSHELLO   LoadBalancingMonitorTypeEnum = "TLS-HELLO"
	LoadBalancingMonitorTypeEnumUDPCONNECT LoadBalancingMonitorTypeEnum = "UDP-CONNECT"
)

// Defines values for LoadBalancingProtocolTypeEnum.
const (
	LoadBalancingProtocolTypeEnumHTTP            LoadBalancingProtocolTypeEnum = "HTTP"
	LoadBalancingProtocolTypeEnumHTTPS           LoadBalancingProtocolTypeEnum = "HTTPS"
	LoadBalancingProtocolTypeEnumPROXY           LoadBalancingProtocolTypeEnum = "PROXY"
	LoadBalancingProtocolTypeEnumPROXYV2         LoadBalancingProtocolTypeEnum = "PROXYV2"
	LoadBalancingProtocolTypeEnumSCTP            LoadBalancingProtocolTypeEnum = "SCTP"
	LoadBalancingProtocolTypeEnumTCP             LoadBalancingProtocolTypeEnum = "TCP"
	LoadBalancingProtocolTypeEnumTERMINATEDHTTPS LoadBalancingProtocolTypeEnum = "TERMINATED_HTTPS"
	LoadBalancingProtocolTypeEnumUDP             LoadBalancingProtocolTypeEnum = "UDP"
)

// Defines values for LoadBalancingProvisioningStatusEnum.
const (
	LoadBalancingProvisioningStatusEnumACTIVE        LoadBalancingProvisioningStatusEnum = "ACTIVE"
	LoadBalancingProvisioningStatusEnumDELETED       LoadBalancingProvisioningStatusEnum = "DELETED"
	LoadBalancingProvisioningStatusEnumERROR         LoadBalancingProvisioningStatusEnum = "ERROR"
	LoadBalancingProvisioningStatusEnumPENDINGCREATE LoadBalancingProvisioningStatusEnum = "PENDING_CREATE"
	LoadBalancingProvisioningStatusEnumPENDINGDELETE LoadBalancingProvisioningStatusEnum = "PENDING_DELETE"
	LoadBalancingProvisioningStatusEnumPENDINGUPDATE LoadBalancingProvisioningStatusEnum = "PENDING_UPDATE"
)

// Defines values for LoadBalancingStatusEnum.
const (
	LoadBalancingStatusEnumDEGRADED  LoadBalancingStatusEnum = "DEGRADED"
	LoadBalancingStatusEnumDRAINING  LoadBalancingStatusEnum = "DRAINING"
	LoadBalancingStatusEnumERROR     LoadBalancingStatusEnum = "ERROR"
	LoadBalancingStatusEnumNOMONITOR LoadBalancingStatusEnum = "NO_MONITOR"
	LoadBalancingStatusEnumOFFLINE   LoadBalancingStatusEnum = "OFFLINE"
	LoadBalancingStatusEnumONLINE    LoadBalancingStatusEnum = "ONLINE"
)

// Defines values for MDowEnum.
const (
	MDowEnumFriday    MDowEnum = "friday"
	MDowEnumMonday    MDowEnum = "monday"
	MDowEnumSaturday  MDowEnum = "saturday"
	MDowEnumSunday    MDowEnum = "sunday"
	MDowEnumThursday  MDowEnum = "thursday"
	MDowEnumTuesday   MDowEnum = "tuesday"
	MDowEnumWednesday MDowEnum = "wednesday"
)

// Defines values for MonitorHttpMethodEnum.
const (
	MonitorHttpMethodEnumCONNECT MonitorHttpMethodEnum = "CONNECT"
	MonitorHttpMethodEnumDELETE  MonitorHttpMethodEnum = "DELETE"
	MonitorHttpMethodEnumGET     MonitorHttpMethodEnum = "GET"
	MonitorHttpMethodEnumHEAD    MonitorHttpMethodEnum = "HEAD"
	MonitorHttpMethodEnumOPTIONS MonitorHttpMethodEnum = "OPTIONS"
	MonitorHttpMethodEnumPATCH   MonitorHttpMethodEnum = "PATCH"
	MonitorHttpMethodEnumPOST    MonitorHttpMethodEnum = "POST"
	MonitorHttpMethodEnumPUT     MonitorHttpMethodEnum = "PUT"
	MonitorHttpMethodEnumTRACE   MonitorHttpMethodEnum = "TRACE"
)

// Defines values for MountAsEnum.
const (
	Data MountAsEnum = "data"
	Root MountAsEnum = "root"
)

// Defines values for ObjectUploadTypeEnum.
const (
	ObjectUploadTypeEnumOBJ ObjectUploadTypeEnum = "OBJ"
)

// Defines values for OperationEnum.
const (
	Empty OperationEnum = ">"
	Equal OperationEnum = "="
	N1    OperationEnum = "<"
	N2    OperationEnum = ">="
	N3    OperationEnum = "<="
)

// Defines values for OrderStatusEnum.
const (
	OrderStatusEnumActivating     OrderStatusEnum = "activating"
	OrderStatusEnumCanceled       OrderStatusEnum = "canceled"
	OrderStatusEnumDone           OrderStatusEnum = "done"
	OrderStatusEnumNew            OrderStatusEnum = "new"
	OrderStatusEnumPaid           OrderStatusEnum = "paid"
	OrderStatusEnumPaymentError   OrderStatusEnum = "payment_error"
	OrderStatusEnumPaymentPending OrderStatusEnum = "payment_pending"
)

// Defines values for PackageEnum.
const (
	PackageEnumLARGE  PackageEnum = "LARGE"
	PackageEnumMEDIUM PackageEnum = "MEDIUM"
	PackageEnumSMALL  PackageEnum = "SMALL"
)

// Defines values for PolicyEnum.
const (
	PolicyEnumAffinity         PolicyEnum = "affinity"
	PolicyEnumAntiAffinity     PolicyEnum = "anti-affinity"
	PolicyEnumSoftAffinity     PolicyEnum = "soft-affinity"
	PolicyEnumSoftAntiAffinity PolicyEnum = "soft-anti-affinity"
)

// Defines values for PowerStateEnum.
const (
	PowerStateEnumPaused    PowerStateEnum = "paused"
	PowerStateEnumPending   PowerStateEnum = "pending"
	PowerStateEnumRunning   PowerStateEnum = "running"
	PowerStateEnumShutdown  PowerStateEnum = "shutdown"
	PowerStateEnumSuspended PowerStateEnum = "suspended"
)

// Defines values for PricingModelEnum.
const (
	PricingModelEnumPayAsYouGo   PricingModelEnum = "pay-as-you-go"
	PricingModelEnumSubscription PricingModelEnum = "subscription"
)

// Defines values for ProtocolAb6Enum.
const (
	NFS ProtocolAb6Enum = "NFS"
	SMB ProtocolAb6Enum = "SMB"
)

// Defines values for ProtocolEnum.
const (
	Http  ProtocolEnum = "http"
	Https ProtocolEnum = "https"
)

// Defines values for QuestionStatusEnum.
const (
	QuestionStatusEnumNew            QuestionStatusEnum = "new"
	QuestionStatusEnumResponded      QuestionStatusEnum = "responded"
	QuestionStatusEnumWorkInProgress QuestionStatusEnum = "work-in-progress"
)

// Defines values for RepeatEnum.
const (
	DAY   RepeatEnum = "DAY"
	MONTH RepeatEnum = "MONTH"
	WEEK  RepeatEnum = "WEEK"
)

// Defines values for Role520Enum.
const (
	Admin  Role520Enum = "admin"
	Member Role520Enum = "member"
)

// Defines values for SGREtherTypeEnum.
const (
	Ipv4 SGREtherTypeEnum = "ipv4"
	Ipv6 SGREtherTypeEnum = "ipv6"
)

// Defines values for ScaleTypeEnum.
const (
	ScaleTypeEnumManual    ScaleTypeEnum = "manual"
	ScaleTypeEnumScaleIn   ScaleTypeEnum = "scale_in"
	ScaleTypeEnumScaleOut  ScaleTypeEnum = "scale_out"
	ScaleTypeEnumScheduled ScaleTypeEnum = "scheduled"
)

// Defines values for ScalingGroupStatusEnum.
const (
	ScalingGroupStatusEnumActive   ScalingGroupStatusEnum = "active"
	ScalingGroupStatusEnumCreating ScalingGroupStatusEnum = "creating"
	ScalingGroupStatusEnumDeleting ScalingGroupStatusEnum = "deleting"
	ScalingGroupStatusEnumError    ScalingGroupStatusEnum = "error"
	ScalingGroupStatusEnumUpdating ScalingGroupStatusEnum = "updating"
)

// Defines values for ScalingServerStatusEnum.
const (
	ScalingServerStatusEnumDeleted   ScalingServerStatusEnum = "deleted"
	ScalingServerStatusEnumPaused    ScalingServerStatusEnum = "paused"
	ScalingServerStatusEnumPending   ScalingServerStatusEnum = "pending"
	ScalingServerStatusEnumRunning   ScalingServerStatusEnum = "running"
	ScalingServerStatusEnumShutdown  ScalingServerStatusEnum = "shutdown"
	ScalingServerStatusEnumSuspended ScalingServerStatusEnum = "suspended"
)

// Defines values for SecurityGroupRuleProtocolEnum.
const (
	Ah        SecurityGroupRuleProtocolEnum = "ah"
	Dccp      SecurityGroupRuleProtocolEnum = "dccp"
	Egp       SecurityGroupRuleProtocolEnum = "egp"
	Esp       SecurityGroupRuleProtocolEnum = "esp"
	Gre       SecurityGroupRuleProtocolEnum = "gre"
	Hopopt    SecurityGroupRuleProtocolEnum = "hopopt"
	Icmp      SecurityGroupRuleProtocolEnum = "icmp"
	Igmp      SecurityGroupRuleProtocolEnum = "igmp"
	Ip        SecurityGroupRuleProtocolEnum = "ip"
	Ipip      SecurityGroupRuleProtocolEnum = "ipip"
	Ipv6Encap SecurityGroupRuleProtocolEnum = "ipv6-encap"
	Ipv6Frag  SecurityGroupRuleProtocolEnum = "ipv6-frag"
	Ipv6Icmp  SecurityGroupRuleProtocolEnum = "ipv6-icmp"
	Ipv6Nonxt SecurityGroupRuleProtocolEnum = "ipv6-nonxt"
	Ipv6Opts  SecurityGroupRuleProtocolEnum = "ipv6-opts"
	Ipv6Route SecurityGroupRuleProtocolEnum = "ipv6-route"
	Ospf      SecurityGroupRuleProtocolEnum = "ospf"
	Pgm       SecurityGroupRuleProtocolEnum = "pgm"
	Rsvp      SecurityGroupRuleProtocolEnum = "rsvp"
	Sctp      SecurityGroupRuleProtocolEnum = "sctp"
	Tcp       SecurityGroupRuleProtocolEnum = "tcp"
	Udp       SecurityGroupRuleProtocolEnum = "udp"
	Udplite   SecurityGroupRuleProtocolEnum = "udplite"
	Vrrp      SecurityGroupRuleProtocolEnum = "vrrp"
)

// Defines values for ServerStatusEnum.
const (
	ServerStatusEnumActive           ServerStatusEnum = "active"
	ServerStatusEnumBuilding         ServerStatusEnum = "building"
	ServerStatusEnumDeleted          ServerStatusEnum = "deleted"
	ServerStatusEnumPaused           ServerStatusEnum = "paused"
	ServerStatusEnumRescued          ServerStatusEnum = "rescued"
	ServerStatusEnumShelved          ServerStatusEnum = "shelved"
	ServerStatusEnumShelvedOffloaded ServerStatusEnum = "shelved_offloaded"
	ServerStatusEnumShutoff          ServerStatusEnum = "shutoff"
	ServerStatusEnumStopped          ServerStatusEnum = "stopped"
	ServerStatusEnumSuspended        ServerStatusEnum = "suspended"
)

// Defines values for SessionPersistenceTypeEnum.
const (
	SessionPersistenceTypeEnumAPPCOOKIE  SessionPersistenceTypeEnum = "APP_COOKIE"
	SessionPersistenceTypeEnumHTTPCOOKIE SessionPersistenceTypeEnum = "HTTP_COOKIE"
	SessionPersistenceTypeEnumNONE       SessionPersistenceTypeEnum = "NONE"
	SessionPersistenceTypeEnumSOURCEIP   SessionPersistenceTypeEnum = "SOURCE_IP"
)

// Defines values for SexEnum.
const (
	F SexEnum = "F"
	M SexEnum = "M"
)

// Defines values for SnapshotStatusEnum.
const (
	SnapshotStatusEnumAvailable SnapshotStatusEnum = "available"
	SnapshotStatusEnumCreating  SnapshotStatusEnum = "creating"
	SnapshotStatusEnumDeleting  SnapshotStatusEnum = "deleting"
	SnapshotStatusEnumFail      SnapshotStatusEnum = "fail"
	SnapshotStatusEnumRestoring SnapshotStatusEnum = "restoring"
	SnapshotStatusEnumUpdating  SnapshotStatusEnum = "updating"
)

// Defines values for SolutionEnum.
const (
	Basic    SolutionEnum = "basic"
	Business SolutionEnum = "business"
)

// Defines values for SpeedEnum.
const (
	SpeedEnumN100k SpeedEnum = "100k"
	SpeedEnumN10k  SpeedEnum = "10k"
	SpeedEnumN20k  SpeedEnum = "20k"
	SpeedEnumN30k  SpeedEnum = "30k"
	SpeedEnumN50k  SpeedEnum = "50k"
)

// Defines values for State6abEnum.
const (
	State6abEnumDone    State6abEnum = "done"
	State6abEnumFail    State6abEnum = "fail"
	State6abEnumReady   State6abEnum = "ready"
	State6abEnumRunning State6abEnum = "running"
)

// Defines values for StateDf2Enum.
const (
	StateDf2EnumActive     StateDf2Enum = "active"
	StateDf2EnumExpired    StateDf2Enum = "expired"
	StateDf2EnumLocked     StateDf2Enum = "locked"
	StateDf2EnumNew        StateDf2Enum = "new"
	StateDf2EnumTerminated StateDf2Enum = "terminated"
)

// Defines values for Status01cEnum.
const (
	Status01cEnumActive  Status01cEnum = "active"
	Status01cEnumExpired Status01cEnum = "expired"
)

// Defines values for Status5afEnum.
const (
	Status5afEnumCompleted        Status5afEnum = "completed"
	Status5afEnumFailed           Status5afEnum = "failed"
	Status5afEnumFailedValidation Status5afEnum = "failed_validation"
	Status5afEnumInProgress       Status5afEnum = "in_progress"
	Status5afEnumNew              Status5afEnum = "new"
	Status5afEnumPartiallyFailed  Status5afEnum = "partially_failed"
	Status5afEnumUnknown          Status5afEnum = "unknown"
)

// Defines values for TopologyEnum.
const (
	ACTIVESTANDBY TopologyEnum = "ACTIVE_STANDBY"
	SINGLE        TopologyEnum = "SINGLE"
)

// Defines values for Type18dEnum.
const (
	Type18dEnumDIR Type18dEnum = "DIR"
)

// Defines values for Type4feEnum.
const (
	Type4feEnumDIR Type4feEnum = "DIR"
	Type4feEnumOBJ Type4feEnum = "OBJ"
)

// Defines values for TypeFc4Enum.
const (
	COOKIE   TypeFc4Enum = "COOKIE"
	FILETYPE TypeFc4Enum = "FILE_TYPE"
	HEADER   TypeFc4Enum = "HEADER"
	HOSTNAME TypeFc4Enum = "HOST_NAME"
	PATH     TypeFc4Enum = "PATH"
)

// Defines values for VKEMachineRoleEnum.
const (
	ControlPlane VKEMachineRoleEnum = "control-plane"
	Worker       VKEMachineRoleEnum = "worker"
)

// Defines values for VersionTypeEnum.
const (
	DELETEMARKER VersionTypeEnum = "DELETE_MARKER"
	OBJ          VersionTypeEnum = "OBJ"
)

// Defines values for VersioningStatusEnum.
const (
	VersioningStatusEnumDisabled  VersioningStatusEnum = "Disabled"
	VersioningStatusEnumEnabled   VersioningStatusEnum = "Enabled"
	VersioningStatusEnumSuspended VersioningStatusEnum = "Suspended"
)

// Defines values for VkeClusterStatusEnum.
const (
	VkeClusterStatusEnumDeleting     VkeClusterStatusEnum = "deleting"
	VkeClusterStatusEnumFailed       VkeClusterStatusEnum = "failed"
	VkeClusterStatusEnumPending      VkeClusterStatusEnum = "pending"
	VkeClusterStatusEnumProvisioned  VkeClusterStatusEnum = "provisioned"
	VkeClusterStatusEnumProvisioning VkeClusterStatusEnum = "provisioning"
	VkeClusterStatusEnumUnknown      VkeClusterStatusEnum = "unknown"
)

// Defines values for VkeNodePoolStatusEnum.
const (
	VkeNodePoolStatusEnumFailed      VkeNodePoolStatusEnum = "failed"
	VkeNodePoolStatusEnumRunning     VkeNodePoolStatusEnum = "running"
	VkeNodePoolStatusEnumScalingDown VkeNodePoolStatusEnum = "scaling-down"
	VkeNodePoolStatusEnumScalingUp   VkeNodePoolStatusEnum = "scaling-up"
	VkeNodePoolStatusEnumUnknown     VkeNodePoolStatusEnum = "unknown"
)

// Defines values for VolumeStatusEnum.
const (
	VolumeStatusEnumAvailable     VolumeStatusEnum = "available"
	VolumeStatusEnumBackingUp     VolumeStatusEnum = "backing-up"
	VolumeStatusEnumCreating      VolumeStatusEnum = "creating"
	VolumeStatusEnumDeleting      VolumeStatusEnum = "deleting"
	VolumeStatusEnumFail          VolumeStatusEnum = "fail"
	VolumeStatusEnumFailBackingUp VolumeStatusEnum = "fail_backing-up"
	VolumeStatusEnumFailRestoring VolumeStatusEnum = "fail_restoring"
	VolumeStatusEnumInUse         VolumeStatusEnum = "in-use"
	VolumeStatusEnumRestoring     VolumeStatusEnum = "restoring"
	VolumeStatusEnumUpdating      VolumeStatusEnum = "updating"
)

// Defines values for VolumeTypeEnum.
const (
	VolumeTypeEnumHdd  VolumeTypeEnum = "hdd"
	VolumeTypeEnumNvme VolumeTypeEnum = "nvme"
	VolumeTypeEnumSas  VolumeTypeEnum = "sas"
	VolumeTypeEnumSsd  VolumeTypeEnum = "ssd"
)

// Defines values for VolumeTypeStateEnum.
const (
	Down VolumeTypeStateEnum = "down"
	Up   VolumeTypeStateEnum = "up"
)

// Defines values for VolumeTypeStatusEnum.
const (
	VolumeTypeStatusEnumDisabled VolumeTypeStatusEnum = "disabled"
	VolumeTypeStatusEnumEnabled  VolumeTypeStatusEnum = "enabled"
)

// Defines values for BccsVolumesListParamsStatus.
const (
	BccsVolumesListParamsStatusAvailable     BccsVolumesListParamsStatus = "available"
	BccsVolumesListParamsStatusBackingUp     BccsVolumesListParamsStatus = "backing-up"
	BccsVolumesListParamsStatusCreating      BccsVolumesListParamsStatus = "creating"
	BccsVolumesListParamsStatusDeleting      BccsVolumesListParamsStatus = "deleting"
	BccsVolumesListParamsStatusFail          BccsVolumesListParamsStatus = "fail"
	BccsVolumesListParamsStatusFailBackingUp BccsVolumesListParamsStatus = "fail_backing-up"
	BccsVolumesListParamsStatusFailRestoring BccsVolumesListParamsStatus = "fail_restoring"
	BccsVolumesListParamsStatusInUse         BccsVolumesListParamsStatus = "in-use"
	BccsVolumesListParamsStatusRestoring     BccsVolumesListParamsStatus = "restoring"
	BccsVolumesListParamsStatusUpdating      BccsVolumesListParamsStatus = "updating"
)

// Defines values for DbaasDbInstanceBackupsListParamsStatus.
const (
	DbaasDbInstanceBackupsListParamsStatusCOMPLETED DbaasDbInstanceBackupsListParamsStatus = "COMPLETED"
	DbaasDbInstanceBackupsListParamsStatusCREATING  DbaasDbInstanceBackupsListParamsStatus = "CREATING"
	DbaasDbInstanceBackupsListParamsStatusERROR     DbaasDbInstanceBackupsListParamsStatus = "ERROR"
)

// Defines values for DbaasDbInstancesListParamsStatus.
const (
	DbaasDbInstancesListParamsStatusACTIVE         DbaasDbInstancesListParamsStatus = "ACTIVE"
	DbaasDbInstancesListParamsStatusCREATING       DbaasDbInstancesListParamsStatus = "CREATING"
	DbaasDbInstancesListParamsStatusDELETING       DbaasDbInstancesListParamsStatus = "DELETING"
	DbaasDbInstancesListParamsStatusERROR          DbaasDbInstancesListParamsStatus = "ERROR"
	DbaasDbInstancesListParamsStatusFAILOVERING    DbaasDbInstancesListParamsStatus = "FAILOVERING"
	DbaasDbInstancesListParamsStatusFLAVORRESIZING DbaasDbInstancesListParamsStatus = "FLAVOR_RESIZING"
	DbaasDbInstancesListParamsStatusUPDATING       DbaasDbInstancesListParamsStatus = "UPDATING"
	DbaasDbInstancesListParamsStatusUPGRADING      DbaasDbInstancesListParamsStatus = "UPGRADING"
	DbaasDbInstancesListParamsStatusVOLUMERESIZING DbaasDbInstancesListParamsStatus = "VOLUME_RESIZING"
)

// Defines values for DbaasDbVersionsListParamsDatabaseType.
const (
	DbaasDbVersionsListParamsDatabaseTypeMysql DbaasDbVersionsListParamsDatabaseType = "mysql"
)

// Defines values for InfraAutoScalingScalingGroupListParamsStatus.
const (
	InfraAutoScalingScalingGroupListParamsStatusActive   InfraAutoScalingScalingGroupListParamsStatus = "active"
	InfraAutoScalingScalingGroupListParamsStatusCreating InfraAutoScalingScalingGroupListParamsStatus = "creating"
	InfraAutoScalingScalingGroupListParamsStatusDeleting InfraAutoScalingScalingGroupListParamsStatus = "deleting"
	InfraAutoScalingScalingGroupListParamsStatusError    InfraAutoScalingScalingGroupListParamsStatus = "error"
	InfraAutoScalingScalingGroupListParamsStatusUpdating InfraAutoScalingScalingGroupListParamsStatus = "updating"
)

// Defines values for InfraAutoScalingScalingGroupMetricsRetrieveParamsMetric.
const (
	CpuUsageAvg    InfraAutoScalingScalingGroupMetricsRetrieveParamsMetric = "cpu_usage_avg"
	MemoryUsageAvg InfraAutoScalingScalingGroupMetricsRetrieveParamsMetric = "memory_usage_avg"
)

// Defines values for InfraAutoScalingScalingServerListParamsStatus.
const (
	InfraAutoScalingScalingServerListParamsStatusDeleted   InfraAutoScalingScalingServerListParamsStatus = "deleted"
	InfraAutoScalingScalingServerListParamsStatusPaused    InfraAutoScalingScalingServerListParamsStatus = "paused"
	InfraAutoScalingScalingServerListParamsStatusPending   InfraAutoScalingScalingServerListParamsStatus = "pending"
	InfraAutoScalingScalingServerListParamsStatusRunning   InfraAutoScalingScalingServerListParamsStatus = "running"
	InfraAutoScalingScalingServerListParamsStatusShutdown  InfraAutoScalingScalingServerListParamsStatus = "shutdown"
	InfraAutoScalingScalingServerListParamsStatusSuspended InfraAutoScalingScalingServerListParamsStatus = "suspended"
)

// Defines values for InfraFilesystemAccessRulesListParamsState.
const (
	InfraFilesystemAccessRulesListParamsStateActive   InfraFilesystemAccessRulesListParamsState = "active"
	InfraFilesystemAccessRulesListParamsStateApplying InfraFilesystemAccessRulesListParamsState = "applying"
	InfraFilesystemAccessRulesListParamsStateDenying  InfraFilesystemAccessRulesListParamsState = "denying"
	InfraFilesystemAccessRulesListParamsStateFail     InfraFilesystemAccessRulesListParamsState = "fail"
)

// Defines values for InfraFilesystemSnapshotPoliciesParamsDaysOfWeek.
const (
	InfraFilesystemSnapshotPoliciesListParamsDaysOfWeekFri InfraFilesystemSnapshotPoliciesListParamsDaysOfWeek = "fri"
	InfraFilesystemSnapshotPoliciesListParamsDaysOfWeekMon InfraFilesystemSnapshotPoliciesListParamsDaysOfWeek = "mon"
	InfraFilesystemSnapshotPoliciesListParamsDaysOfWeekSat InfraFilesystemSnapshotPoliciesListParamsDaysOfWeek = "sat"
	InfraFilesystemSnapshotPoliciesListParamsDaysOfWeekSun InfraFilesystemSnapshotPoliciesListParamsDaysOfWeek = "sun"
	InfraFilesystemSnapshotPoliciesListParamsDaysOfWeekThu InfraFilesystemSnapshotPoliciesListParamsDaysOfWeek = "thu"
	InfraFilesystemSnapshotPoliciesListParamsDaysOfWeekTue InfraFilesystemSnapshotPoliciesListParamsDaysOfWeek = "tue"
	InfraFilesystemSnapshotPoliciesListParamsDaysOfWeekWed InfraFilesystemSnapshotPoliciesListParamsDaysOfWeek = "wed"
)

// Defines values for InfraFilesystemSnapshotPoliciesListParamsStatus.
const (
	InfraFilesystemSnapshotPoliciesListParamsStatusDisabled InfraFilesystemSnapshotPoliciesListParamsStatus = "disabled"
	InfraFilesystemSnapshotPoliciesListParamsStatusEnabled  InfraFilesystemSnapshotPoliciesListParamsStatus = "enabled"
)

// Defines values for InfraFilesystemSnapshotsListParamsStatus.
const (
	InfraFilesystemSnapshotsListParamsStatusAvailable InfraFilesystemSnapshotsListParamsStatus = "available"
	InfraFilesystemSnapshotsListParamsStatusCreating  InfraFilesystemSnapshotsListParamsStatus = "creating"
	InfraFilesystemSnapshotsListParamsStatusDeleting  InfraFilesystemSnapshotsListParamsStatus = "deleting"
	InfraFilesystemSnapshotsListParamsStatusFail      InfraFilesystemSnapshotsListParamsStatus = "fail"
	InfraFilesystemSnapshotsListParamsStatusUpdating  InfraFilesystemSnapshotsListParamsStatus = "updating"
)

// Defines values for InfraFilesystemTypesListParamsStatus.
const (
	InfraFilesystemTypesListParamsStatusDisabled InfraFilesystemTypesListParamsStatus = "disabled"
	InfraFilesystemTypesListParamsStatusEnabled  InfraFilesystemTypesListParamsStatus = "enabled"
)

// Defines values for InfraFilesystemsListParamsStatus.
const (
	InfraFilesystemsListParamsStatusAvailable InfraFilesystemsListParamsStatus = "available"
	InfraFilesystemsListParamsStatusCreating  InfraFilesystemsListParamsStatus = "creating"
	InfraFilesystemsListParamsStatusDeleting  InfraFilesystemsListParamsStatus = "deleting"
	InfraFilesystemsListParamsStatusFail      InfraFilesystemsListParamsStatus = "fail"
	InfraFilesystemsListParamsStatusMigrating InfraFilesystemsListParamsStatus = "migrating"
	InfraFilesystemsListParamsStatusResizing  InfraFilesystemsListParamsStatus = "resizing"
	InfraFilesystemsListParamsStatusUpdating  InfraFilesystemsListParamsStatus = "updating"
)

// Defines values for InfraFlavorsListParamsStatus.
const (
	InfraFlavorsListParamsStatusDisable InfraFlavorsListParamsStatus = "disable"
	InfraFlavorsListParamsStatusEnable  InfraFlavorsListParamsStatus = "enable"
)

// Defines values for InfraImagesListParamsState.
const (
	InfraImagesListParamsStateDisable InfraImagesListParamsState = "disable"
	InfraImagesListParamsStateEnable  InfraImagesListParamsState = "enable"
)

// Defines values for InfraLoadBalancingListenerMetricsRetrieveParamsMetric.
const (
	ListenerActiveServers InfraLoadBalancingListenerMetricsRetrieveParamsMetric = "listener_active_servers"
	ListenerHttpRequests  InfraLoadBalancingListenerMetricsRetrieveParamsMetric = "listener_http_requests"
	ListenerHttpResponses InfraLoadBalancingListenerMetricsRetrieveParamsMetric = "listener_http_responses"
	ListenerRequestErrors InfraLoadBalancingListenerMetricsRetrieveParamsMetric = "listener_request_errors"
	ListenerResponseTime  InfraLoadBalancingListenerMetricsRetrieveParamsMetric = "listener_response_time"
	ListenerThroughputIn  InfraLoadBalancingListenerMetricsRetrieveParamsMetric = "listener_throughput_in"
	ListenerThroughputOut InfraLoadBalancingListenerMetricsRetrieveParamsMetric = "listener_throughput_out"
)

// Defines values for InfraLoadBalancingLoadBalancerMetricsRetrieveParamsMetric.
const (
	LbActiveServers            InfraLoadBalancingLoadBalancerMetricsRetrieveParamsMetric = "lb_active_servers"
	LbBandwidth                InfraLoadBalancingLoadBalancerMetricsRetrieveParamsMetric = "lb_bandwidth"
	LbCpuUtilizationPercent    InfraLoadBalancingLoadBalancerMetricsRetrieveParamsMetric = "lb_cpu_utilization_percent"
	LbMemoryUtilizationPercent InfraLoadBalancingLoadBalancerMetricsRetrieveParamsMetric = "lb_memory_utilization_percent"
	LbRequestErrors            InfraLoadBalancingLoadBalancerMetricsRetrieveParamsMetric = "lb_request_errors"
	LbRequests                 InfraLoadBalancingLoadBalancerMetricsRetrieveParamsMetric = "lb_requests"
	LbResponseTime             InfraLoadBalancingLoadBalancerMetricsRetrieveParamsMetric = "lb_response_time"
	LbThroughputIn             InfraLoadBalancingLoadBalancerMetricsRetrieveParamsMetric = "lb_throughput_in"
	LbThroughputOut            InfraLoadBalancingLoadBalancerMetricsRetrieveParamsMetric = "lb_throughput_out"
)

// Defines values for InfraPlacementgroupsListParamsPolicy.
const (
	InfraPlacementgroupsListParamsPolicyAffinity         InfraPlacementgroupsListParamsPolicy = "affinity"
	InfraPlacementgroupsListParamsPolicyAntiAffinity     InfraPlacementgroupsListParamsPolicy = "anti-affinity"
	InfraPlacementgroupsListParamsPolicySoftAffinity     InfraPlacementgroupsListParamsPolicy = "soft-affinity"
	InfraPlacementgroupsListParamsPolicySoftAntiAffinity InfraPlacementgroupsListParamsPolicy = "soft-anti-affinity"
)

// Defines values for InfraServersListParamsPowerState.
const (
	InfraServersListParamsPowerStatePaused    InfraServersListParamsPowerState = "paused"
	InfraServersListParamsPowerStatePending   InfraServersListParamsPowerState = "pending"
	InfraServersListParamsPowerStateRunning   InfraServersListParamsPowerState = "running"
	InfraServersListParamsPowerStateShutdown  InfraServersListParamsPowerState = "shutdown"
	InfraServersListParamsPowerStateSuspended InfraServersListParamsPowerState = "suspended"
)

// Defines values for InfraServersListParamsStatus.
const (
	InfraServersListParamsStatusActive           InfraServersListParamsStatus = "active"
	InfraServersListParamsStatusBuilding         InfraServersListParamsStatus = "building"
	InfraServersListParamsStatusDeleted          InfraServersListParamsStatus = "deleted"
	InfraServersListParamsStatusPaused           InfraServersListParamsStatus = "paused"
	InfraServersListParamsStatusRescued          InfraServersListParamsStatus = "rescued"
	InfraServersListParamsStatusShelved          InfraServersListParamsStatus = "shelved"
	InfraServersListParamsStatusShelvedOffloaded InfraServersListParamsStatus = "shelved_offloaded"
	InfraServersListParamsStatusShutoff          InfraServersListParamsStatus = "shutoff"
	InfraServersListParamsStatusStopped          InfraServersListParamsStatus = "stopped"
	InfraServersListParamsStatusSuspended        InfraServersListParamsStatus = "suspended"
)

// Defines values for InfraServersMetricsRetrieveParamsMetric.
const (
	CpuUsageTimeseries       InfraServersMetricsRetrieveParamsMetric = "cpu_usage_timeseries"
	DiskTotal                InfraServersMetricsRetrieveParamsMetric = "disk_total"
	IopsPerDisk              InfraServersMetricsRetrieveParamsMetric = "iops_per_disk"
	MemoryUsageTimeseries    InfraServersMetricsRetrieveParamsMetric = "memory_usage_timeseries"
	ReadDiskRate             InfraServersMetricsRetrieveParamsMetric = "read_disk_rate"
	ReceiveErrorPackets      InfraServersMetricsRetrieveParamsMetric = "receive_error_packets"
	ReceivePacketsPerSecond  InfraServersMetricsRetrieveParamsMetric = "receive_packets_per_second"
	TransmitBytesRate        InfraServersMetricsRetrieveParamsMetric = "transmit_bytes_rate"
	TransmitErrorPackets     InfraServersMetricsRetrieveParamsMetric = "transmit_error_packets"
	TransmitPacketsPerSecond InfraServersMetricsRetrieveParamsMetric = "transmit_packets_per_second"
	WriteDiskRate            InfraServersMetricsRetrieveParamsMetric = "write_disk_rate"
)

// Defines values for InfraSnapshotpolicyParamsDaysOfWeek.
const (
	Fri InfraSnapshotpolicyParamsDaysOfWeek = "fri"
	Mon InfraSnapshotpolicyParamsDaysOfWeek = "mon"
	Sat InfraSnapshotpolicyParamsDaysOfWeek = "sat"
	Sun InfraSnapshotpolicyParamsDaysOfWeek = "sun"
	Thu InfraSnapshotpolicyParamsDaysOfWeek = "thu"
	Tue InfraSnapshotpolicyParamsDaysOfWeek = "tue"
	Wed InfraSnapshotpolicyParamsDaysOfWeek = "wed"
)

// Defines values for InfraSnapshotpolicyListParamsStatus.
const (
	InfraSnapshotpolicyListParamsStatusDisabled InfraSnapshotpolicyListParamsStatus = "disabled"
	InfraSnapshotpolicyListParamsStatusEnabled  InfraSnapshotpolicyListParamsStatus = "enabled"
)

// Defines values for InfraSnapshotsListParamsStatus.
const (
	InfraSnapshotsListParamsStatusAvailable InfraSnapshotsListParamsStatus = "available"
	InfraSnapshotsListParamsStatusCreating  InfraSnapshotsListParamsStatus = "creating"
	InfraSnapshotsListParamsStatusDeleting  InfraSnapshotsListParamsStatus = "deleting"
	InfraSnapshotsListParamsStatusFail      InfraSnapshotsListParamsStatus = "fail"
	InfraSnapshotsListParamsStatusRestoring InfraSnapshotsListParamsStatus = "restoring"
	InfraSnapshotsListParamsStatusUpdating  InfraSnapshotsListParamsStatus = "updating"
)

// Defines values for InfraVolumeBackupPoliciesListParamsStatus.
const (
	InfraVolumeBackupPoliciesListParamsStatusDisabled InfraVolumeBackupPoliciesListParamsStatus = "disabled"
	InfraVolumeBackupPoliciesListParamsStatusEnabled  InfraVolumeBackupPoliciesListParamsStatus = "enabled"
)

// Defines values for InfraVolumeBackupsListParamsStatus.
const (
	InfraVolumeBackupsListParamsStatusAvailable InfraVolumeBackupsListParamsStatus = "available"
	InfraVolumeBackupsListParamsStatusCreating  InfraVolumeBackupsListParamsStatus = "creating"
	InfraVolumeBackupsListParamsStatusDeleting  InfraVolumeBackupsListParamsStatus = "deleting"
	InfraVolumeBackupsListParamsStatusFail      InfraVolumeBackupsListParamsStatus = "fail"
	InfraVolumeBackupsListParamsStatusRestoring InfraVolumeBackupsListParamsStatus = "restoring"
	InfraVolumeBackupsListParamsStatusUpdating  InfraVolumeBackupsListParamsStatus = "updating"
)

// Defines values for InfraVolumeTypeListParamsDiskType.
const (
	InfraVolumeTypeListParamsDiskTypeHdd  InfraVolumeTypeListParamsDiskType = "hdd"
	InfraVolumeTypeListParamsDiskTypeNvme InfraVolumeTypeListParamsDiskType = "nvme"
	InfraVolumeTypeListParamsDiskTypeSas  InfraVolumeTypeListParamsDiskType = "sas"
	InfraVolumeTypeListParamsDiskTypeSsd  InfraVolumeTypeListParamsDiskType = "ssd"
)

// Defines values for InfraVolumeTypeListParamsEncryptionKeySize.
const (
	InfraVolumeTypeListParamsEncryptionKeySizeN0   InfraVolumeTypeListParamsEncryptionKeySize = "0"
	InfraVolumeTypeListParamsEncryptionKeySizeN128 InfraVolumeTypeListParamsEncryptionKeySize = "128"
	InfraVolumeTypeListParamsEncryptionKeySizeN256 InfraVolumeTypeListParamsEncryptionKeySize = "256"
)

// Defines values for InfraVolumeTypeListParamsSpeed.
const (
	N100k InfraVolumeTypeListParamsSpeed = "100k"
	N10k  InfraVolumeTypeListParamsSpeed = "10k"
	N20k  InfraVolumeTypeListParamsSpeed = "20k"
	N30k  InfraVolumeTypeListParamsSpeed = "30k"
	N50k  InfraVolumeTypeListParamsSpeed = "50k"
)

// Defines values for InfraVolumeTypeListParamsStatus.
const (
	InfraVolumeTypeListParamsStatusDisabled InfraVolumeTypeListParamsStatus = "disabled"
	InfraVolumeTypeListParamsStatusEnabled  InfraVolumeTypeListParamsStatus = "enabled"
)

// Defines values for InfraVolumesListParamsStatus.
const (
	InfraVolumesListParamsStatusAvailable     InfraVolumesListParamsStatus = "available"
	InfraVolumesListParamsStatusBackingUp     InfraVolumesListParamsStatus = "backing-up"
	InfraVolumesListParamsStatusCreating      InfraVolumesListParamsStatus = "creating"
	InfraVolumesListParamsStatusDeleting      InfraVolumesListParamsStatus = "deleting"
	InfraVolumesListParamsStatusFail          InfraVolumesListParamsStatus = "fail"
	InfraVolumesListParamsStatusFailBackingUp InfraVolumesListParamsStatus = "fail_backing-up"
	InfraVolumesListParamsStatusFailRestoring InfraVolumesListParamsStatus = "fail_restoring"
	InfraVolumesListParamsStatusInUse         InfraVolumesListParamsStatus = "in-use"
	InfraVolumesListParamsStatusRestoring     InfraVolumesListParamsStatus = "restoring"
	InfraVolumesListParamsStatusUpdating      InfraVolumesListParamsStatus = "updating"
)

// Defines values for KaasCniVersionsListParamsType.
const (
	KaasCniVersionsListParamsTypeCalico  KaasCniVersionsListParamsType = "calico"
	KaasCniVersionsListParamsTypeCanal   KaasCniVersionsListParamsType = "canal"
	KaasCniVersionsListParamsTypeFlannel KaasCniVersionsListParamsType = "flannel"
	KaasCniVersionsListParamsTypeWeave   KaasCniVersionsListParamsType = "weave"
)

// Defines values for KaasCsiVersionsListParamsType.
const (
	KaasCsiVersionsListParamsTypeCephFs  KaasCsiVersionsListParamsType = "ceph-fs"
	KaasCsiVersionsListParamsTypeCephRbd KaasCsiVersionsListParamsType = "ceph-rbd"
	KaasCsiVersionsListParamsTypeCinder  KaasCsiVersionsListParamsType = "cinder"
	KaasCsiVersionsListParamsTypeNfs     KaasCsiVersionsListParamsType = "nfs"
)

// Defines values for KaasDashboardVersionsListParamsType.
const (
	KaasDashboardVersionsListParamsTypeHeadlamp      KaasDashboardVersionsListParamsType = "headlamp"
	KaasDashboardVersionsListParamsTypeKubedashboard KaasDashboardVersionsListParamsType = "kubedashboard"
)

// Defines values for KaasK8sVersionsListParamsStatus.
const (
	KaasK8sVersionsListParamsStatusDisabled KaasK8sVersionsListParamsStatus = "disabled"
	KaasK8sVersionsListParamsStatusEnabled  KaasK8sVersionsListParamsStatus = "enabled"
)

// Defines values for MarketplacePricingPlansListParamsPricingModel.
const (
	MarketplacePricingPlansListParamsPricingModelPayAsYouGo   MarketplacePricingPlansListParamsPricingModel = "pay-as-you-go"
	MarketplacePricingPlansListParamsPricingModelSubscription MarketplacePricingPlansListParamsPricingModel = "subscription"
)

// Defines values for MarketplaceProductsListParamsPricingModel.
const (
	MarketplaceProductsListParamsPricingModelPayAsYouGo   MarketplaceProductsListParamsPricingModel = "pay-as-you-go"
	MarketplaceProductsListParamsPricingModelSubscription MarketplaceProductsListParamsPricingModel = "subscription"
)

// AccessLevelEnum defines model for AccessLevelEnum.
type AccessLevelEnum string

// AclEnum defines model for AclEnum.
type AclEnum string

// ActionE9cEnum defines model for ActionE9cEnum.
type ActionE9cEnum string

// AdministrativeDivision defines model for AdministrativeDivision.
type AdministrativeDivision struct {
	Code string `json:"code"`
	Name string `json:"name"`
}

// Alarm Extract owner and project from request and update to serializer data
type Alarm struct {
	CreatedAt *time.Time          `json:"created_at,omitempty"`
	Duration  string              `json:"duration"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
	Metric    string              `json:"metric"`

	// Name The unique name of the alarm.
	Name         string              `json:"name"`
	Operation    OperationEnum       `json:"operation"`
	Receiver     openapi_types.Email `json:"receiver"`
	ResourceId   openapi_types.UUID  `json:"resource_id"`
	ResourceType string              `json:"resource_type"`
	Status       *bool               `json:"status,omitempty"`
	Threshold    int                 `json:"threshold"`
}

// AlarmUpdate Extract owner and project from request and update to serializer data
type AlarmUpdate struct {
	Duration  string `json:"duration"`
	Status    *bool  `json:"status,omitempty"`
	Threshold int    `json:"threshold"`
}

// AlgorithmEnum defines model for AlgorithmEnum.
type AlgorithmEnum string

// AllowedMethodsEnum defines model for AllowedMethodsEnum.
type AllowedMethodsEnum string

// ArtifactBuildHistory defines model for ArtifactBuildHistory.
type ArtifactBuildHistory struct {
	Created   *time.Time `json:"created,omitempty"`
	CreatedBy *string    `json:"created_by,omitempty"`
}

// ArtifactExtraAttrs defines model for ArtifactExtraAttrs.
type ArtifactExtraAttrs struct {
	Architecture *string                 `json:"architecture,omitempty"`
	Author       *string                 `json:"author,omitempty"`
	Config       *map[string]interface{} `json:"config,omitempty"`
	Created      *string                 `json:"created,omitempty"`
	Os           *string                 `json:"os,omitempty"`
}

// ArtifactVulnerability The container registry image artifact vulnerabilities
type ArtifactVulnerability struct {
	Description      *string                 `json:"description,omitempty"`
	FixVersion       *string                 `json:"fix_version,omitempty"`
	Id               *string                 `json:"id,omitempty"`
	Links            *string                 `json:"links,omitempty"`
	Package          *string                 `json:"package,omitempty"`
	Severity         *string                 `json:"severity,omitempty"`
	VendorAttributes *map[string]interface{} `json:"vendor_attributes,omitempty"`
	Version          *string                 `json:"version,omitempty"`
}

// AutoBackupConfig defines model for AutoBackupConfig.
type AutoBackupConfig struct {
	BackupInterval BackupIntervalEnum          `json:"backup_interval"`
	DayOfWeek      *AutoBackupConfig_DayOfWeek `json:"day_of_week,omitempty"`
	MaxAutoBackup  int                         `json:"max_auto_backup"`
	StartHour      int                         `json:"start_hour"`
}

// AutoBackupConfig_DayOfWeek defines model for AutoBackupConfig.DayOfWeek.
type AutoBackupConfig_DayOfWeek struct {
	union json.RawMessage
}

// BCCSCRPlan defines model for BCCSCRPlan.
type BCCSCRPlan struct {
	// ExpiresAt The timestamp at which plan is expired
	ExpiresAt *time.Time          `json:"expires_at"`
	Id        *openapi_types.UUID `json:"id,omitempty"`

	// InitialData Additional metadata for plan for auditing purpose
	InitialData *map[string]interface{} `json:"initial_data,omitempty"`

	// Period The effective period of the plan (in months)
	Period *int `json:"period,omitempty"`

	// ProjectId The project to initialize the plan
	ProjectId *openapi_types.UUID `json:"project_id"`

	// RegionName The name of the region where plan resources are created
	RegionName *string `json:"region_name,omitempty"`

	// StartedAt The timestamp at which plan is activated
	StartedAt *time.Time `json:"started_at"`

	// State Plan state
	State *StateDf2Enum `json:"state,omitempty"`

	// Template The template data of the associated plan
	Template *ContainerRegistryPlanTemplate `json:"template,omitempty"`

	// TemplateCode The template code identifying which kind of plan is being created
	TemplateCode *string `json:"template_code,omitempty"`

	// Username The username of user who requested the plan
	Username string `json:"username"`
}

// BCCSFilesystemPlan defines model for BCCSFilesystemPlan.
type BCCSFilesystemPlan struct {
	// ExpiresAt The timestamp at which plan is expired
	ExpiresAt *time.Time          `json:"expires_at"`
	Id        *openapi_types.UUID `json:"id,omitempty"`

	// InitialData Additional metadata for plan for auditing purpose
	InitialData *map[string]interface{} `json:"initial_data,omitempty"`

	// Period The effective period of the plan (in months)
	Period *int `json:"period,omitempty"`

	// ProjectId The project to initialize the plan
	ProjectId *openapi_types.UUID `json:"project_id"`

	// RegionName The name of the region where plan resources are created
	RegionName *string `json:"region_name,omitempty"`

	// StartedAt The timestamp at which plan is activated
	StartedAt *time.Time `json:"started_at"`

	// State Plan state
	State *StateDf2Enum `json:"state,omitempty"`

	// Template The template data of the associated plan
	Template *FilesystemPlanTemplate `json:"template,omitempty"`

	// TemplateCode The template code identifying which kind of plan is being created
	TemplateCode *string `json:"template_code,omitempty"`

	// Username The username of user who requested the plan
	Username string `json:"username"`
}

// BCCSK8SClusterPlan defines model for BCCSK8SClusterPlan.
type BCCSK8SClusterPlan struct {
	// ExpiresAt The timestamp at which plan is expired
	ExpiresAt *time.Time          `json:"expires_at"`
	Id        *openapi_types.UUID `json:"id,omitempty"`

	// InitialData Additional metadata for plan for auditing purpose
	InitialData *map[string]interface{} `json:"initial_data,omitempty"`

	// Period The effective period of the plan (in months)
	Period *int `json:"period,omitempty"`

	// ProjectId The project to initialize the plan
	ProjectId *openapi_types.UUID `json:"project_id"`

	// RegionName The name of the region where plan resources are created
	RegionName *string `json:"region_name,omitempty"`

	// StartedAt The timestamp at which plan is activated
	StartedAt *time.Time `json:"started_at"`

	// State Plan state
	State *StateDf2Enum `json:"state,omitempty"`

	// Template The template data of the associated plan
	Template *K8SClusterPlanTemplate `json:"template,omitempty"`

	// TemplateCode The template code identifying which kind of plan is being created
	TemplateCode *string `json:"template_code,omitempty"`

	// Username The username of user who requested the plan
	Username string  `json:"username"`
	Version  *string `json:"version,omitempty"`
}

// BCCSLoadBalancerPlan defines model for BCCSLoadBalancerPlan.
type BCCSLoadBalancerPlan struct {
	// ExpiresAt The timestamp at which plan is expired
	ExpiresAt *time.Time          `json:"expires_at"`
	Id        *openapi_types.UUID `json:"id,omitempty"`

	// InitialData Additional metadata for plan for auditing purpose
	InitialData *map[string]interface{} `json:"initial_data,omitempty"`

	// Period The effective period of the plan (in months)
	Period *int `json:"period,omitempty"`

	// ProjectId The project to initialize the plan
	ProjectId *openapi_types.UUID `json:"project_id"`

	// RegionName The name of the region where plan resources are created
	RegionName *string `json:"region_name,omitempty"`

	// StartedAt The timestamp at which plan is activated
	StartedAt *time.Time `json:"started_at"`

	// State Plan state
	State *StateDf2Enum `json:"state,omitempty"`

	// Template The template data of the associated plan
	Template *LoadBalancerPlanTemplate `json:"template,omitempty"`

	// TemplateCode The template code identifying which kind of plan is being created
	TemplateCode string `json:"template_code"`

	// Username The username of user who requested the plan
	Username string `json:"username"`
}

// BCCSObjectStoragePlan defines model for BCCSObjectStoragePlan.
type BCCSObjectStoragePlan struct {
	// ExpiresAt The timestamp at which plan is expired
	ExpiresAt *time.Time          `json:"expires_at"`
	Id        *openapi_types.UUID `json:"id,omitempty"`

	// InitialData Additional metadata for plan for auditing purpose
	InitialData *map[string]interface{} `json:"initial_data,omitempty"`

	// Period The effective period of the plan (in months)
	Period *int `json:"period,omitempty"`

	// ProjectId The project to initialize the plan
	ProjectId *openapi_types.UUID `json:"project_id"`

	// RegionName The name of the region where plan resources are created
	RegionName *string `json:"region_name,omitempty"`

	// StartedAt The timestamp at which plan is activated
	StartedAt *time.Time `json:"started_at"`

	// State Plan state
	State *StateDf2Enum `json:"state,omitempty"`

	// Template The template data of the associated plan
	Template *ObjectStoragePlanTemplate `json:"template,omitempty"`

	// TemplateCode The template code identifying which kind of plan is being created
	TemplateCode *string `json:"template_code,omitempty"`

	// Username The username of user who requested the plan
	Username string `json:"username"`
}

// BCCSOrderPurchaseCallback defines model for BCCSOrderPurchaseCallback.
type BCCSOrderPurchaseCallback struct {
	OrderCode string `json:"order_code"`
	Status    int    `json:"status"`
}

// BCCSServerPlan defines model for BCCSServerPlan.
type BCCSServerPlan struct {
	// ExpiresAt The timestamp at which plan is expired
	ExpiresAt *time.Time          `json:"expires_at"`
	Id        *openapi_types.UUID `json:"id,omitempty"`

	// ImageName The OS image name to boot up server
	ImageName *string `json:"image_name,omitempty"`

	// InitialData Additional metadata for plan for auditing purpose
	InitialData *map[string]interface{} `json:"initial_data,omitempty"`

	// Period The effective period of the plan (in months)
	Period *int `json:"period,omitempty"`

	// ProjectId The project to initialize the plan
	ProjectId *openapi_types.UUID `json:"project_id"`

	// RegionName The name of the region where plan resources are created
	RegionName *string `json:"region_name,omitempty"`

	// StartedAt The timestamp at which plan is activated
	StartedAt *time.Time `json:"started_at"`

	// State Plan state
	State *StateDf2Enum `json:"state,omitempty"`

	// Template The template data of the associated plan
	Template *ServerPlanTemplate `json:"template,omitempty"`

	// TemplateCode The template code identifying which kind of plan is being created
	TemplateCode *string `json:"template_code,omitempty"`

	// Username The username of user who requested the plan
	Username string `json:"username"`
}

// BCCSUser defines model for BCCSUser.
type BCCSUser struct {
	Email     openapi_types.Email `json:"email"`
	FirstName *string             `json:"first_name,omitempty"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
	LastName  *string             `json:"last_name,omitempty"`

	// Username Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
	Username string `json:"username"`
}

// BCCSVolumeBackupPlan defines model for BCCSVolumeBackupPlan.
type BCCSVolumeBackupPlan struct {
	// ExpiresAt The timestamp at which plan is expired
	ExpiresAt      *time.Time          `json:"expires_at"`
	FirstExecution time.Time           `json:"first_execution"`
	Frequency      *int                `json:"frequency,omitempty"`
	FrequencyUnit  FrequencyUnitEnum   `json:"frequency_unit"`
	Id             *openapi_types.UUID `json:"id,omitempty"`

	// InitialData Additional metadata for plan for auditing purpose
	InitialData *map[string]interface{} `json:"initial_data,omitempty"`

	// Period The effective period of the plan (in months)
	Period *int `json:"period,omitempty"`

	// ProjectId The project to initialize the plan
	ProjectId *openapi_types.UUID `json:"project_id"`

	// RegionName The name of the region where plan resources are created
	RegionName *string `json:"region_name,omitempty"`
	Retention  *int    `json:"retention,omitempty"`

	// StartedAt The timestamp at which plan is activated
	StartedAt *time.Time `json:"started_at"`

	// State Plan state
	State *StateDf2Enum `json:"state,omitempty"`

	// Username The username of user who requested the plan
	Username string `json:"username"`

	// Volumes The list ID of volume to backup
	Volumes *[]openapi_types.UUID `json:"volumes,omitempty"`
}

// BCCSVolumePlan defines model for BCCSVolumePlan.
type BCCSVolumePlan struct {
	// ExpiresAt The timestamp at which plan is expired
	ExpiresAt *time.Time          `json:"expires_at"`
	Id        *openapi_types.UUID `json:"id,omitempty"`

	// InitialData Additional metadata for plan for auditing purpose
	InitialData *map[string]interface{} `json:"initial_data,omitempty"`

	// Period The effective period of the plan (in months)
	Period *int `json:"period,omitempty"`

	// ProjectId The project to initialize the plan
	ProjectId *openapi_types.UUID `json:"project_id"`

	// RegionName The name of the region where plan resources are created
	RegionName *string `json:"region_name,omitempty"`

	// StartedAt The timestamp at which plan is activated
	StartedAt *time.Time `json:"started_at"`

	// State Plan state
	State *StateDf2Enum `json:"state,omitempty"`

	// Template The template data of the associated plan
	Template *VolumePlanTemplate `json:"template,omitempty"`

	// TemplateCode The template code identifying which kind of plan is being created
	TemplateCode *string `json:"template_code,omitempty"`

	// Username The username of user who requested the plan
	Username string `json:"username"`

	// ZoneName The name of the zone where plan resources are created
	ZoneName *string `json:"zone_name,omitempty"`
}

// Backup Extract owner and project from request and update to serializer data
type Backup struct {
	BackupPlan openapi_types.UUID  `json:"backup_plan"`
	BackupType *BackupType45cEnum  `json:"backup_type,omitempty"`
	Id         *openapi_types.UUID `json:"id,omitempty"`
	Name       string              `json:"name"`
}

// BackupDetail Extract owner and project from request and update to serializer data
type BackupDetail struct {
	BackupPlan NestedBackupPlan     `json:"backup_plan"`
	BackupType BackupType45cEnum    `json:"backup_type"`
	CreatedAt  *time.Time           `json:"created_at,omitempty"`
	Id         *openapi_types.UUID  `json:"id,omitempty"`
	Name       string               `json:"name"`
	Size       *string              `json:"size"`
	Slug       *string              `json:"slug,omitempty"`
	Status     *BackupDetail_Status `json:"status"`
	UpdatedAt  *time.Time           `json:"updated_at,omitempty"`
	Url        *string              `json:"url,omitempty"`
}

// BackupDetail_Status defines model for BackupDetail.Status.
type BackupDetail_Status struct {
	union json.RawMessage
}

// BackupIntervalEnum defines model for BackupIntervalEnum.
type BackupIntervalEnum string

// BackupPlan Extract owner and project from request and update to serializer data
type BackupPlan struct {
	BackupNamespaces *string             `json:"backup_namespaces"`
	BackupScopeType  BackupScopeTypeEnum `json:"backup_scope_type"`
	BackupVolume     bool                `json:"backup_volume"`
	Cluster          openapi_types.UUID  `json:"cluster"`
	CronExpression   string              `json:"cron_expression"`
	Duration         int                 `json:"duration"`
	Id               *openapi_types.UUID `json:"id,omitempty"`
	Name             string              `json:"name"`
	Region           openapi_types.UUID  `json:"region"`
}

// BackupPlanDetail Extract owner and project from request and update to serializer data
type BackupPlanDetail struct {
	BackupNamespaces *string                  `json:"backup_namespaces"`
	BackupQuantity   *int                     `json:"backup_quantity,omitempty"`
	BackupScopeType  BackupScopeTypeEnum      `json:"backup_scope_type"`
	BackupVolume     bool                     `json:"backup_volume"`
	Cluster          NestedVKECluster         `json:"cluster"`
	CreatedAt        *time.Time               `json:"created_at,omitempty"`
	CronExpression   string                   `json:"cron_expression"`
	Duration         int                      `json:"duration"`
	Id               *openapi_types.UUID      `json:"id,omitempty"`
	LastBackupTime   *time.Time               `json:"last_backup_time,omitempty"`
	Name             string                   `json:"name"`
	NextBackupTime   *time.Time               `json:"next_backup_time,omitempty"`
	Region           openapi_types.UUID       `json:"region"`
	Status           *BackupPlanDetail_Status `json:"status"`
	UpdatedAt        *time.Time               `json:"updated_at,omitempty"`
	Url              *string                  `json:"url,omitempty"`
}

// BackupPlanDetail_Status defines model for BackupPlanDetail.Status.
type BackupPlanDetail_Status struct {
	union json.RawMessage
}

// BackupPlanDetailStatusEnum defines model for BackupPlanDetailStatusEnum.
type BackupPlanDetailStatusEnum string

// BackupScopeTypeEnum defines model for BackupScopeTypeEnum.
type BackupScopeTypeEnum string

// BackupType45cEnum defines model for BackupType45cEnum.
type BackupType45cEnum string

// BaseObject defines model for BaseObject.
type BaseObject struct {
	// Name The name of object or name of folder (with slash at end).
	Name string `json:"name"`

	// Type Type of object
	Type Type4feEnum `json:"type"`
}

// BaseObjectVersion defines model for BaseObjectVersion.
type BaseObjectVersion struct {
	// Name The name of object or name of folder (with slash at end).
	Name string `json:"name"`

	// Type Type of object
	Type BaseObjectVersionTypeEnum `json:"type"`

	// VersionId Version id of the object.
	VersionId *string `json:"version_id,omitempty"`
}

// BaseObjectVersionTypeEnum defines model for BaseObjectVersionTypeEnum.
type BaseObjectVersionTypeEnum string

// BlankEnum defines model for BlankEnum.
type BlankEnum = interface{}

// Bucket Extract owner and project from request and update to serializer data
type Bucket struct {
	// Acl The ACL of the object or bucket.
	Acl       *AclEnum            `json:"acl,omitempty"`
	CreatedAt *time.Time          `json:"created_at,omitempty"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
	Name      string              `json:"name"`
	Owner     *openapi_types.UUID `json:"owner,omitempty"`
	Project   *openapi_types.UUID `json:"project,omitempty"`
	Region    openapi_types.UUID  `json:"region"`
	UpdatedAt *time.Time          `json:"updated_at,omitempty"`
}

// BucketACL defines model for BucketACL.
type BucketACL struct {
	// Acl The ACL of the object or bucket.
	Acl AclEnum `json:"acl"`
}

// BucketCORS defines model for BucketCORS.
type BucketCORS struct {
	AllowedHeaders []string             `json:"AllowedHeaders"`
	AllowedMethods []AllowedMethodsEnum `json:"AllowedMethods"`
	AllowedOrigins []string             `json:"AllowedOrigins"`
	MaxAgeSeconds  int64                `json:"MaxAgeSeconds"`
}

// BucketStaticWebCreate defines model for BucketStaticWebCreate.
type BucketStaticWebCreate struct {
	ErrorDocument         *ErrorDocument               `json:"ErrorDocument,omitempty"`
	IndexDocument         *IndexDocument               `json:"IndexDocument,omitempty"`
	RedirectAllRequestsTo *RedirectAllRequestsToCreate `json:"RedirectAllRequestsTo,omitempty"`
}

// BucketStaticWebShow defines model for BucketStaticWebShow.
type BucketStaticWebShow struct {
	ErrorDocument         *ErrorDocument             `json:"ErrorDocument,omitempty"`
	IndexDocument         *IndexDocument             `json:"IndexDocument,omitempty"`
	RedirectAllRequestsTo *RedirectAllRequestsToShow `json:"RedirectAllRequestsTo,omitempty"`
}

// BucketVersioning defines model for BucketVersioning.
type BucketVersioning struct {
	// VersioningStatus The versioning status of the bucket.
	VersioningStatus VersioningStatusEnum `json:"versioning_status"`
}

// BusinessLisense defines model for BusinessLisense.
type BusinessLisense struct {
	Address    string              `json:"address"`
	District   string              `json:"district"`
	IdNumber   string              `json:"id_number"`
	IssueDate  *openapi_types.Date `json:"issue_date"`
	IssuePlace string              `json:"issue_place"`
	Name       string              `json:"name"`
	Precinct   string              `json:"precinct"`
	Province   string              `json:"province"`
}

// CLISecret defines model for CLISecret.
type CLISecret struct {
	Secret *string `json:"secret,omitempty"`
}

// CNITypeEnum defines model for CNITypeEnum.
type CNITypeEnum string

// CNIVersion Extract owner and project from request and update to serializer data
type CNIVersion struct {
	Id      *openapi_types.UUID `json:"id,omitempty"`
	Type    CNITypeEnum         `json:"type"`
	Url     *string             `json:"url,omitempty"`
	Version string              `json:"version"`
}

// CSITypeEnum defines model for CSITypeEnum.
type CSITypeEnum string

// CSIVersion Extract owner and project from request and update to serializer data
type CSIVersion struct {
	Id      *openapi_types.UUID `json:"id,omitempty"`
	Type    CSITypeEnum         `json:"type"`
	Url     *string             `json:"url,omitempty"`
	Version string              `json:"version"`
}

// Category defines model for Category.
type Category struct {
	Description *string             `json:"description,omitempty"`
	IconCode    *int                `json:"icon_code"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Name        string              `json:"name"`
	Title       string              `json:"title"`
}

// Certificate Extract owner and project from request and update to serializer data
type Certificate struct {
	Certificate          *string             `json:"certificate,omitempty"`
	CommonName           *string             `json:"common_name"`
	CreatedAt            *time.Time          `json:"created_at,omitempty"`
	ExpiresOn            *time.Time          `json:"expires_on"`
	Id                   *openapi_types.UUID `json:"id,omitempty"`
	Intermediates        *string             `json:"intermediates,omitempty"`
	IssuedOn             *time.Time          `json:"issued_on"`
	Name                 string              `json:"name"`
	PrivateKey           *string             `json:"private_key,omitempty"`
	PrivateKeyPassphrase *string             `json:"private_key_passphrase,omitempty"`
	Region               openapi_types.UUID  `json:"region"`
}

// CompareTypeEnum defines model for CompareTypeEnum.
type CompareTypeEnum string

// ContainerArtifactTag The container registry image artifact tag
type ContainerArtifactTag struct {
	Name     *string    `json:"name,omitempty"`
	PullTime *time.Time `json:"pull_time,omitempty"`
	PushTime *time.Time `json:"push_time,omitempty"`
}

// ContainerFormatEnum defines model for ContainerFormatEnum.
type ContainerFormatEnum string

// ContainerImage The container registry image
type ContainerImage struct {
	ArtifactCount *int       `json:"artifact_count,omitempty"`
	CreatedAt     *time.Time `json:"created_at,omitempty"`
	Name          *string    `json:"name,omitempty"`
	PullCount     *int       `json:"pull_count,omitempty"`
	UpdatedAt     *time.Time `json:"updated_at,omitempty"`
}

// ContainerImageArtifact The container registry image artifact
type ContainerImageArtifact struct {
	Digest       *string                 `json:"digest,omitempty"`
	ExtraAttrs   *ArtifactExtraAttrs     `json:"extra_attrs,omitempty"`
	PullTime     *time.Time              `json:"pull_time,omitempty"`
	PushTime     *time.Time              `json:"push_time,omitempty"`
	ScanOverview *map[string]interface{} `json:"scan_overview"`
	Size         *int                    `json:"size,omitempty"`
	Tags         *[]ContainerArtifactTag `json:"tags,omitempty"`
}

// ContainerRegistryPlanTemplate defines model for ContainerRegistryPlanTemplate.
type ContainerRegistryPlanTemplate struct {
	// Code The code which identifies plan templates
	Code string              `json:"code"`
	Id   *openapi_types.UUID `json:"id,omitempty"`

	// Quota Registry Quota (GB)
	Quota *int `json:"quota,omitempty"`
}

// ContractPreview defines model for ContractPreview.
type ContractPreview struct {
	Contract string `json:"contract"`
}

// CreateDBInstance Create new DB Instance request format
type CreateDBInstance struct {
	AutoBackupConfig *AutoBackupConfig `json:"auto_backup_config,omitempty"`
	DatabaseType     DatabaseTypeEnum  `json:"database_type"`

	// DbVersion DB Version UUID picked from DB Version List
	DbVersion          openapi_types.UUID `json:"db_version"`
	Description        *string            `json:"description,omitempty"`
	DiskSize           int                `json:"disk_size"`
	EnableAutoBackup   bool               `json:"enable_auto_backup"`
	EnablePublicAccess *bool              `json:"enable_public_access,omitempty"`

	// Flavor Flavor UUID Picked from DBaaS Flavor List, must be in the same Region with DB Instance Region
	Flavor openapi_types.UUID  `json:"flavor"`
	Id     *openapi_types.UUID `json:"id,omitempty"`

	// InitBackup DB Instance Backup UUID which is source data for new DB Instance
	InitBackup *openapi_types.UUID `json:"init_backup"`

	// MDow Maintenance day. Select from monday to sunday
	MDow       *MDowEnum `json:"m_dow,omitempty"`
	MStartHour *int      `json:"m_start_hour,omitempty"`
	Name       string    `json:"name"`

	// Region Region UUID which install this DB Instance
	Region       openapi_types.UUID `json:"region"`
	RootPassword *string            `json:"root_password,omitempty"`
	Solution     SolutionEnum       `json:"solution"`
	Subnet       openapi_types.UUID `json:"subnet"`

	// VolumeType Volume Type UUID Picked from DBaaS Volume Type List, must be in the same Region with DB Instance Region
	VolumeType openapi_types.UUID `json:"volume_type"`
}

// Customer defines model for Customer.
type Customer struct {
	Address           string              `json:"address"`
	BirthDate         openapi_types.Date  `json:"birth_date"`
	ContactEmail      openapi_types.Email `json:"contact_email"`
	CustomerId        *string             `json:"customer_id"`
	CustomerType      string              `json:"customer_type"`
	District          string              `json:"district"`
	DistrictName      *string             `json:"district_name,omitempty"`
	GroupType         string              `json:"group_type"`
	IdentityDocuments *[]IdentityDocument `json:"identity_documents,omitempty"`
	Name              string              `json:"name"`
	Nationality       *string             `json:"nationality"`
	PhoneNumber       string              `json:"phone_number"`
	Precinct          string              `json:"precinct"`
	PrecinctName      *string             `json:"precinct_name,omitempty"`
	Province          string              `json:"province"`
	ProvinceName      *string             `json:"province_name,omitempty"`
	Representative    *NestedCustomer     `json:"representative"`
	Sex               *SexEnum            `json:"sex,omitempty"`
}

// CustomerResponse defines model for CustomerResponse.
type CustomerResponse struct {
	Address           string               `json:"address"`
	BirthDate         openapi_types.Date   `json:"birth_date"`
	ContactEmail      *openapi_types.Email `json:"contact_email"`
	CustomerId        *string              `json:"customer_id"`
	CustomerType      string               `json:"customer_type"`
	District          string               `json:"district"`
	DistrictName      *string              `json:"district_name,omitempty"`
	GroupType         string               `json:"group_type"`
	IdentityDocuments *[]IdentityDocument  `json:"identity_documents,omitempty"`
	Name              string               `json:"name"`
	Nationality       *string              `json:"nationality"`
	PhoneNumber       *string              `json:"phone_number"`
	Precinct          string               `json:"precinct"`
	PrecinctName      *string              `json:"precinct_name,omitempty"`
	Province          string               `json:"province"`
	ProvinceName      *string              `json:"province_name,omitempty"`
	Representative    *NestedCustomer      `json:"representative"`
	Sex               *SexEnum             `json:"sex,omitempty"`
}

// CustomerType defines model for CustomerType.
type CustomerType struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// DBInstance Extract owner and project from request and update to serializer data
type DBInstance struct {
	AutoBackupConfig   *AutoBackupConfig      `json:"auto_backup_config,omitempty"`
	CreatedAt          *time.Time             `json:"created_at,omitempty"`
	DatabaseType       DatabaseTypeEnum       `json:"database_type"`
	DbVersion          *DBVersion             `json:"db_version,omitempty"`
	Description        *string                `json:"description,omitempty"`
	EnableAutoBackup   bool                   `json:"enable_auto_backup"`
	EnablePublicAccess *bool                  `json:"enable_public_access,omitempty"`
	ErrorMessage       *string                `json:"error_message,omitempty"`
	Flavor             *DBaaSRegionFlavor     `json:"flavor,omitempty"`
	Id                 *openapi_types.UUID    `json:"id,omitempty"`
	InitBackup         *openapi_types.UUID    `json:"init_backup"`
	KeepBackup         *bool                  `json:"keep_backup,omitempty"`
	MDow               *MDowEnum              `json:"m_dow,omitempty"`
	MStartHour         *int                   `json:"m_start_hour,omitempty"`
	Name               string                 `json:"name"`
	Port               *int                   `json:"port,omitempty"`
	PrivateUrl         *string                `json:"private_url,omitempty"`
	Project            openapi_types.UUID     `json:"project"`
	PublicUrl          *string                `json:"public_url,omitempty"`
	Region             *Region                `json:"region,omitempty"`
	Solution           SolutionEnum           `json:"solution"`
	Status             DBInstanceStatusEnum   `json:"status"`
	Subnet             *Subnet                `json:"subnet,omitempty"`
	UpdatedAt          *time.Time             `json:"updated_at,omitempty"`
	VolumeType         *DBaaSRegionVolumeType `json:"volume_type,omitempty"`
}

// DBInstanceBackup Extract owner and project from request and update to serializer data
type DBInstanceBackup struct {
	BackupInfo         *string                         `json:"backup_info,omitempty"`
	BackupType         *DBInstanceBackupBackupTypeEnum `json:"backup_type,omitempty"`
	CreatedAt          *time.Time                      `json:"created_at,omitempty"`
	DatabaseType       *DatabaseTypeEnum               `json:"database_type,omitempty"`
	DbInstance         openapi_types.UUID              `json:"db_instance"`
	DbVersion          *DBVersion                      `json:"db_version,omitempty"`
	Description        *string                         `json:"description,omitempty"`
	DisplayName        *string                         `json:"display_name,omitempty"`
	ErrorMessage       *string                         `json:"error_message,omitempty"`
	Id                 *openapi_types.UUID             `json:"id,omitempty"`
	Name               string                          `json:"name"`
	Owner              *openapi_types.UUID             `json:"owner,omitempty"`
	Project            *openapi_types.UUID             `json:"project,omitempty"`
	Region             *Region                         `json:"region,omitempty"`
	RequiredVolumeSize *int                            `json:"required_volume_size,omitempty"`
	Size               *int                            `json:"size,omitempty"`
	Status             *DBInstanceBackupStatusEnum     `json:"status,omitempty"`
	UpdatedAt          *time.Time                      `json:"updated_at,omitempty"`
	Zone               *openapi_types.UUID             `json:"zone"`
}

// DBInstanceBackupBackupTypeEnum defines model for DBInstanceBackupBackupTypeEnum.
type DBInstanceBackupBackupTypeEnum string

// DBInstanceBackupStatusEnum defines model for DBInstanceBackupStatusEnum.
type DBInstanceBackupStatusEnum string

// DBInstanceStatusEnum defines model for DBInstanceStatusEnum.
type DBInstanceStatusEnum string

// DBVersion defines model for DBVersion.
type DBVersion struct {
	DatabaseType DatabaseTypeEnum    `json:"database_type"`
	Id           *openapi_types.UUID `json:"id,omitempty"`
	Region       openapi_types.UUID  `json:"region"`
	Version      string              `json:"version"`
}

// DBaaSRegion defines model for DBaaSRegion.
type DBaaSRegion struct {
	Id         *openapi_types.UUID `json:"id,omitempty"`
	IsActive   *bool               `json:"is_active,omitempty"`
	Region     openapi_types.UUID  `json:"region"`
	RegionName *string             `json:"region_name,omitempty"`
}

// DBaaSRegionFlavor defines model for DBaaSRegionFlavor.
type DBaaSRegionFlavor struct {
	Description *string             `json:"description"`
	FlavorName  string              `json:"flavor_name"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Ram         *int                `json:"ram,omitempty"`
	Region      openapi_types.UUID  `json:"region"`
	Vcpus       *int                `json:"vcpus,omitempty"`
}

// DBaaSRegionVolumeType defines model for DBaaSRegionVolumeType.
type DBaaSRegionVolumeType struct {
	Description *string             `json:"description"`
	DiskType    VolumeTypeEnum      `json:"disk_type"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Name        string              `json:"name"`
	Region      openapi_types.UUID  `json:"region"`
	Speed       SpeedEnum           `json:"speed"`
}

// DBaaSZone defines model for DBaaSZone.
type DBaaSZone struct {
	DbaasRegion openapi_types.UUID  `json:"dbaas_region"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	IsActive    *bool               `json:"is_active,omitempty"`
	Region      *openapi_types.UUID `json:"region,omitempty"`
	RegionName  *string             `json:"region_name,omitempty"`
	Zone        openapi_types.UUID  `json:"zone"`
}

// DashboardVersion Extract owner and project from request and update to serializer data
type DashboardVersion struct {
	Id      *openapi_types.UUID      `json:"id,omitempty"`
	Type    DashboardVersionTypeEnum `json:"type"`
	Url     *string                  `json:"url,omitempty"`
	Version string                   `json:"version"`
}

// DashboardVersionTypeEnum defines model for DashboardVersionTypeEnum.
type DashboardVersionTypeEnum string

// DatabaseTypeEnum defines model for DatabaseTypeEnum.
type DatabaseTypeEnum string

// DayOfWeekEnum defines model for DayOfWeekEnum.
type DayOfWeekEnum string

// DaysOfWeekEnum defines model for DaysOfWeekEnum.
type DaysOfWeekEnum string

// DeleteServer defines model for DeleteServer.
type DeleteServer struct {
	// Eips List of Elastic IP ids.
	Eips *[]openapi_types.UUID `json:"eips,omitempty"`

	// PrivateIps List of Private IP ids.
	PrivateIps *[]openapi_types.UUID `json:"private_ips,omitempty"`

	// Volumes List of volume ids.
	Volumes *[]openapi_types.UUID `json:"volumes,omitempty"`
}

// DeviceOwnerEnum defines model for DeviceOwnerEnum.
type DeviceOwnerEnum string

// DirectionEnum defines model for DirectionEnum.
type DirectionEnum string

// DiskFormatEnum defines model for DiskFormatEnum.
type DiskFormatEnum string

// DiskSpeedEnum defines model for DiskSpeedEnum.
type DiskSpeedEnum string

// ElasticIP Extract owner and project from request and update to serializer data
type ElasticIP struct {
	CreatedAt   *time.Time           `json:"created_at,omitempty"`
	DisplayName *string              `json:"display_name,omitempty"`
	EnableIpv6  *bool                `json:"enable_ipv6,omitempty"`
	Id          *openapi_types.UUID  `json:"id,omitempty"`
	IpAddress   *string              `json:"ip_address"`
	Ipv6Address *string              `json:"ipv6_address"`
	MacAddress  *string              `json:"mac_address"`
	Owner       *openapi_types.UUID  `json:"owner,omitempty"`
	Project     *openapi_types.UUID  `json:"project,omitempty"`
	Region      openapi_types.UUID   `json:"region"`
	Server      *NestedServer        `json:"server,omitempty"`
	Status      *ElasticIPStatusEnum `json:"status,omitempty"`
	UpdatedAt   *time.Time           `json:"updated_at,omitempty"`
}

// ElasticIPDetail defines model for ElasticIPDetail.
type ElasticIPDetail struct {
	CreatedAt   *time.Time              `json:"created_at,omitempty"`
	DisplayName *string                 `json:"display_name,omitempty"`
	EnableIpv6  *bool                   `json:"enable_ipv6,omitempty"`
	Id          *openapi_types.UUID     `json:"id,omitempty"`
	IpAddress   *string                 `json:"ip_address"`
	Ipv6Address *string                 `json:"ipv6_address"`
	MacAddress  *string                 `json:"mac_address"`
	Status      *ElasticIPDetail_Status `json:"status"`
	UpdatedAt   *time.Time              `json:"updated_at,omitempty"`
}

// ElasticIPDetail_Status defines model for ElasticIPDetail.Status.
type ElasticIPDetail_Status struct {
	union json.RawMessage
}

// ElasticIPStatusEnum defines model for ElasticIPStatusEnum.
type ElasticIPStatusEnum string

// EncryptionKeySizeEnum defines model for EncryptionKeySizeEnum.
type EncryptionKeySizeEnum string

// ErrorDocument defines model for ErrorDocument.
type ErrorDocument struct {
	// Key The object key name to use when a 4XX class error occurs.
	Key string `json:"Key"`
}

// ExecutionStrategyEnum defines model for ExecutionStrategyEnum.
type ExecutionStrategyEnum string

// ExtendVolume defines model for ExtendVolume.
type ExtendVolume struct {
	NewSize int `json:"new_size"`
}

// FavoriteService defines model for FavoriteService.
type FavoriteService struct {
	Id      *openapi_types.UUID `json:"id,omitempty"`
	Service openapi_types.UUID  `json:"service"`
}

// Filesystem Extract owner and project from request and update to serializer data
type Filesystem struct {
	CreateFrom          FilesystemOrigin      `json:"create_from"`
	CreatedAt           *time.Time            `json:"created_at,omitempty"`
	Description         *string               `json:"description"`
	FilesystemTypeName  *string               `json:"filesystem_type_name,omitempty"`
	Id                  *openapi_types.UUID   `json:"id,omitempty"`
	MigrationPercentage *int                  `json:"migration_percentage,omitempty"`
	MountTargetAddress  *string               `json:"mount_target_address,omitempty"`
	Name                string                `json:"name"`
	Owner               *openapi_types.UUID   `json:"owner,omitempty"`
	Project             *openapi_types.UUID   `json:"project,omitempty"`
	Protocol            *ProtocolAb6Enum      `json:"protocol,omitempty"`
	Region              *string               `json:"region,omitempty"`
	RegionId            *openapi_types.UUID   `json:"region_id,omitempty"`
	Size                *int                  `json:"size,omitempty"`
	SnapshotPolicy      *openapi_types.UUID   `json:"snapshot_policy"`
	Status              *FilesystemStatusEnum `json:"status,omitempty"`
	Subnet              *openapi_types.UUID   `json:"subnet,omitempty"`
	SubnetName          *string               `json:"subnet_name,omitempty"`
	UpdatedAt           *time.Time            `json:"updated_at,omitempty"`
	Zone                *string               `json:"zone,omitempty"`
	ZoneId              *openapi_types.UUID   `json:"zone_id,omitempty"`
}

// FilesystemAccessRule Extract owner and project from request and update to serializer data
type FilesystemAccessRule struct {
	AccessLevel    AccessLevelEnum                `json:"access_level"`
	AccessTo       string                         `json:"access_to"`
	CreatedAt      *time.Time                     `json:"created_at,omitempty"`
	Filesystem     openapi_types.UUID             `json:"filesystem"`
	FilesystemName *string                        `json:"filesystem_name,omitempty"`
	Id             *openapi_types.UUID            `json:"id,omitempty"`
	Owner          *openapi_types.UUID            `json:"owner,omitempty"`
	Project        *openapi_types.UUID            `json:"project,omitempty"`
	State          *FilesystemAccessRuleStateEnum `json:"state,omitempty"`
	UpdatedAt      *time.Time                     `json:"updated_at,omitempty"`
}

// FilesystemAccessRuleStateEnum defines model for FilesystemAccessRuleStateEnum.
type FilesystemAccessRuleStateEnum string

// FilesystemApplymentPolicy defines model for FilesystemApplymentPolicy.
type FilesystemApplymentPolicy struct {
	// SnapshotPolicy ID of the snapshot policy to apply.
	SnapshotPolicy openapi_types.UUID `json:"snapshot_policy"`
	UpdatedAt      *time.Time         `json:"updated_at,omitempty"`
}

// FilesystemMigrate defines model for FilesystemMigrate.
type FilesystemMigrate struct {
	NewFilesystemType *openapi_types.UUID `json:"new_filesystem_type,omitempty"`
	NewSubnet         *openapi_types.UUID `json:"new_subnet,omitempty"`
}

// FilesystemOrigin defines model for FilesystemOrigin.
type FilesystemOrigin struct {
	FilesystemType *openapi_types.UUID `json:"filesystem_type,omitempty"`
	Snapshot       *openapi_types.UUID `json:"snapshot,omitempty"`
}

// FilesystemPlanTemplate defines model for FilesystemPlanTemplate.
type FilesystemPlanTemplate struct {
	// Code The code which identifies plan templates
	Code string `json:"code"`

	// FilesystemType Type of filesystem resource
	FilesystemType *FilesystemTypeEnum `json:"filesystem_type,omitempty"`
	Id             *openapi_types.UUID `json:"id,omitempty"`

	// Protocol Mount protocol for this filesystem
	Protocol *ProtocolAb6Enum `json:"protocol,omitempty"`

	// Size Filesystem Size (GiB)
	Size *int `json:"size,omitempty"`
}

// FilesystemResize defines model for FilesystemResize.
type FilesystemResize struct {
	NewSize int `json:"new_size"`
}

// FilesystemSnapshot Extract owner and project from request and update to serializer data
type FilesystemSnapshot struct {
	CreatedAt      *time.Time                    `json:"created_at,omitempty"`
	Description    *string                       `json:"description"`
	Filesystem     openapi_types.UUID            `json:"filesystem"`
	FilesystemName *string                       `json:"filesystem_name,omitempty"`
	FromPolicy     *bool                         `json:"from_policy,omitempty"`
	Id             *openapi_types.UUID           `json:"id,omitempty"`
	Name           string                        `json:"name"`
	Owner          *openapi_types.UUID           `json:"owner,omitempty"`
	Project        *openapi_types.UUID           `json:"project,omitempty"`
	Size           *int                          `json:"size"`
	Status         *FilesystemSnapshotStatusEnum `json:"status,omitempty"`
	UpdatedAt      *time.Time                    `json:"updated_at,omitempty"`
}

// FilesystemSnapshotPolicy Extract owner and project from request and update to serializer data
type FilesystemSnapshotPolicy struct {
	CreatedAt       *time.Time           `json:"created_at,omitempty"`
	DaysOfWeek      []DaysOfWeekEnum     `json:"days_of_week"`
	Description     *string              `json:"description"`
	FilesystemCount *int                 `json:"filesystem_count,omitempty"`
	Id              *openapi_types.UUID  `json:"id,omitempty"`
	Name            string               `json:"name"`
	Owner           *openapi_types.UUID  `json:"owner,omitempty"`
	Project         *openapi_types.UUID  `json:"project,omitempty"`
	Region          openapi_types.UUID   `json:"region"`
	Retention       *int                 `json:"retention,omitempty"`
	State           *State6abEnum        `json:"state,omitempty"`
	Status          VolumeTypeStatusEnum `json:"status"`
	Time            string               `json:"time"`
	UpdatedAt       *time.Time           `json:"updated_at,omitempty"`
}

// FilesystemSnapshotPolicyUpdate defines model for FilesystemSnapshotPolicyUpdate.
type FilesystemSnapshotPolicyUpdate struct {
	DaysOfWeek  []DaysOfWeekEnum     `json:"days_of_week"`
	Description *string              `json:"description"`
	Name        string               `json:"name"`
	Retention   *int                 `json:"retention,omitempty"`
	Status      VolumeTypeStatusEnum `json:"status"`
	Time        string               `json:"time"`
	UpdatedAt   *time.Time           `json:"updated_at,omitempty"`
}

// FilesystemSnapshotStatusEnum defines model for FilesystemSnapshotStatusEnum.
type FilesystemSnapshotStatusEnum string

// FilesystemSnapshotUpdate defines model for FilesystemSnapshotUpdate.
type FilesystemSnapshotUpdate struct {
	Description *string    `json:"description"`
	Name        string     `json:"name"`
	UpdatedAt   *time.Time `json:"updated_at,omitempty"`
}

// FilesystemStatusEnum defines model for FilesystemStatusEnum.
type FilesystemStatusEnum string

// FilesystemType Extends the built-in ModelSerializer to enforce calling full_clean()
// on a copy of the associated instance during validation.
// (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)
type FilesystemType struct {
	CreatedAt   *time.Time             `json:"created_at,omitempty"`
	Description *string                `json:"description"`
	Id          *openapi_types.UUID    `json:"id,omitempty"`
	Name        string                 `json:"name"`
	Status      *FilesystemType_Status `json:"status"`
	UpdatedAt   *time.Time             `json:"updated_at,omitempty"`
	Zone        openapi_types.UUID     `json:"zone"`
}

// FilesystemType_Status defines model for FilesystemType.Status.
type FilesystemType_Status struct {
	union json.RawMessage
}

// FilesystemTypeEnum defines model for FilesystemTypeEnum.
type FilesystemTypeEnum string

// FilesystemUpdate defines model for FilesystemUpdate.
type FilesystemUpdate struct {
	Description *string    `json:"description"`
	Name        string     `json:"name"`
	UpdatedAt   *time.Time `json:"updated_at,omitempty"`
}

// Flavor defines model for Flavor.
type Flavor struct {
	DisplayName *string             `json:"display_name,omitempty"`
	Family      *string             `json:"family,omitempty"`
	Gpus        *int                `json:"gpus,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Name        *string             `json:"name,omitempty"`
	Ram         *int                `json:"ram,omitempty"`
	Region      *openapi_types.UUID `json:"region,omitempty"`
	Vcpus       *int                `json:"vcpus,omitempty"`
	Zone        *openapi_types.UUID `json:"zone,omitempty"`
}

// FlavorDetail defines model for FlavorDetail.
type FlavorDetail struct {
	CreatedAt   *time.Time              `json:"created_at,omitempty"`
	Description *string                 `json:"description"`
	DisplayName *string                 `json:"display_name,omitempty"`
	Family      string                  `json:"family"`
	Gpus        int                     `json:"gpus"`
	Id          *openapi_types.UUID     `json:"id,omitempty"`
	Metadata    *map[string]interface{} `json:"metadata"`
	Name        string                  `json:"name"`
	Ram         int                     `json:"ram"`
	Region      *openapi_types.UUID     `json:"region,omitempty"`
	Status      FlavorStatusEnum        `json:"status"`
	UpdatedAt   *time.Time              `json:"updated_at,omitempty"`
	Vcpus       int                     `json:"vcpus"`
	Zone        openapi_types.UUID      `json:"zone"`
}

// FlavorMapping defines model for FlavorMapping.
type FlavorMapping struct {
	CreatedAt        *time.Time          `json:"created_at,omitempty"`
	Id               *openapi_types.UUID `json:"id,omitempty"`
	InfraFlavor      openapi_types.UUID  `json:"infra_flavor"`
	InfraFlavorCpu   *int                `json:"infra_flavor_cpu,omitempty"`
	InfraFlavorName  *string             `json:"infra_flavor_name,omitempty"`
	InfraFlavorRam   *int                `json:"infra_flavor_ram,omitempty"`
	Region           *openapi_types.UUID `json:"region,omitempty"`
	RegionFlavor     openapi_types.UUID  `json:"region_flavor"`
	RegionFlavorCpu  *int                `json:"region_flavor_cpu,omitempty"`
	RegionFlavorName *string             `json:"region_flavor_name,omitempty"`
	RegionFlavorRam  *int                `json:"region_flavor_ram,omitempty"`
	RegionName       *string             `json:"region_name,omitempty"`
	UpdatedAt        *time.Time          `json:"updated_at,omitempty"`
	Zone             openapi_types.UUID  `json:"zone"`
	ZoneName         *string             `json:"zone_name,omitempty"`
}

// FlavorStatusEnum defines model for FlavorStatusEnum.
type FlavorStatusEnum string

// FlavorUpdate defines model for FlavorUpdate.
type FlavorUpdate struct {
	CreatedAt   *time.Time              `json:"created_at,omitempty"`
	Description *string                 `json:"description"`
	Family      *string                 `json:"family,omitempty"`
	Gpus        *int                    `json:"gpus,omitempty"`
	Id          *openapi_types.UUID     `json:"id,omitempty"`
	Metadata    *map[string]interface{} `json:"metadata"`
	Name        string                  `json:"name"`
	Ram         *int                    `json:"ram,omitempty"`
	Region      *openapi_types.UUID     `json:"region,omitempty"`
	Status      FlavorStatusEnum        `json:"status"`
	UpdatedAt   *time.Time              `json:"updated_at,omitempty"`
	Vcpus       *int                    `json:"vcpus,omitempty"`
	Zone        *openapi_types.UUID     `json:"zone,omitempty"`
}

// FolderUpload defines model for FolderUpload.
type FolderUpload struct {
	// Name The name of object or name of folder (with slash at end). Unit of length is bytes.
	Name string `json:"name"`

	// Type Type of object
	Type Type18dEnum `json:"type"`
}

// FrequencyUnitEnum defines model for FrequencyUnitEnum.
type FrequencyUnitEnum string

// GroupType defines model for GroupType.
type GroupType struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// IdTypeEnum defines model for IdTypeEnum.
type IdTypeEnum string

// IdentityCard defines model for IdentityCard.
type IdentityCard struct {
	Address    string              `json:"address"`
	Birthday   *openapi_types.Date `json:"birthday"`
	District   string              `json:"district"`
	ExpireDate *openapi_types.Date `json:"expire_date"`
	IdNumber   string              `json:"id_number"`
	IssueDate  *openapi_types.Date `json:"issue_date"`
	IssuePlace string              `json:"issue_place"`
	Name       string              `json:"name"`
	Precinct   string              `json:"precinct"`
	Province   string              `json:"province"`
	Sex        *IdentityCard_Sex   `json:"sex"`
}

// IdentityCard_Sex defines model for IdentityCard.Sex.
type IdentityCard_Sex struct {
	union json.RawMessage
}

// IdentityDocument defines model for IdentityDocument.
type IdentityDocument struct {
	ExpireDate *openapi_types.Date `json:"expire_date"`
	IdNumber   string              `json:"id_number"`
	IdType     IdTypeEnum          `json:"id_type"`
	IssueDate  openapi_types.Date  `json:"issue_date"`
	IssuePlace string              `json:"issue_place"`
}

// IdentityDocumentsResponse defines model for IdentityDocumentsResponse.
type IdentityDocumentsResponse struct {
	BusinessLisense *BusinessLisense `json:"business_lisense"`
	IdentityCard    *IdentityCard    `json:"identity_card"`
}

// IdentityDocumentsUpload defines model for IdentityDocumentsUpload.
type IdentityDocumentsUpload struct {
	BusinessLisenseImage *string `json:"business_lisense_image,omitempty"`
	IdBackImage          string  `json:"id_back_image"`
	IdFrontImage         string  `json:"id_front_image"`
}

// Image defines model for Image.
type Image struct {
	DisplayName   *string             `json:"display_name,omitempty"`
	Id            *openapi_types.UUID `json:"id,omitempty"`
	MinVolumeSize *int                `json:"min_volume_size,omitempty"`
	Name          *string             `json:"name,omitempty"`
	Os            *string             `json:"os,omitempty"`
	Version       *string             `json:"version,omitempty"`
}

// ImageStateEnum defines model for ImageStateEnum.
type ImageStateEnum string

// ImageStatusEnum defines model for ImageStatusEnum.
type ImageStatusEnum string

// ImageUpdate defines model for ImageUpdate.
type ImageUpdate struct {
	Description   *string                 `json:"description"`
	Metadata      *map[string]interface{} `json:"metadata"`
	MinVolumeSize *int                    `json:"min_volume_size,omitempty"`
	Name          string                  `json:"name"`
	Os            *string                 `json:"os,omitempty"`
	State         *ImageStateEnum         `json:"state,omitempty"`
	Version       *string                 `json:"version,omitempty"`
}

// IndexDocument defines model for IndexDocument.
type IndexDocument struct {
	// Suffix A suffix that is appended to a request that is for a directory on the website endpoint.
	Suffix string `json:"Suffix"`
}

// K8SClusterPlanTemplate defines model for K8SClusterPlanTemplate.
type K8SClusterPlanTemplate struct {
	// Code The code which identifies plan templates
	Code string `json:"code"`

	// ControlPlaneNodes Number of master nodes
	ControlPlaneNodes int     `json:"control_plane_nodes"`
	DisplayName       *string `json:"display_name,omitempty"`

	// Flavor Flavor
	Flavor openapi_types.UUID  `json:"flavor"`
	Id     *openapi_types.UUID `json:"id,omitempty"`

	// LoadBalancerPackage Load balancer package type
	LoadBalancerPackage LoadBalancerPackageEnum `json:"load_balancer_package"`

	// LoadBalancers Number of load balancers
	LoadBalancers int `json:"load_balancers"`

	// PersistentStorage Persistent Storage (GiB)
	PersistentStorage int `json:"persistent_storage"`

	// WorkerNodes Number of worker nodes
	WorkerNodes int `json:"worker_nodes"`
}

// K8SVersion Extract owner and project from request and update to serializer data
type K8SVersion struct {
	Id     *openapi_types.UUID   `json:"id,omitempty"`
	Image  openapi_types.UUID    `json:"image"`
	Name   string                `json:"name"`
	Status *VolumeTypeStatusEnum `json:"status,omitempty"`
	Url    *string               `json:"url,omitempty"`
}

// KeyPairTypeEnum defines model for KeyPairTypeEnum.
type KeyPairTypeEnum string

// Keypair defines model for Keypair.
type Keypair struct {
	CreatedAt   *time.Time          `json:"created_at,omitempty"`
	DisplayName *string             `json:"display_name,omitempty"`
	Fingerprint *string             `json:"fingerprint,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Name        string              `json:"name"`
	Owner       *openapi_types.UUID `json:"owner,omitempty"`
	PrivateKey  *string             `json:"private_key,omitempty"`
	Project     *openapi_types.UUID `json:"project,omitempty"`
	PublicKey   *string             `json:"public_key,omitempty"`
	Type        KeyPairTypeEnum     `json:"type"`
	UpdatedAt   *time.Time          `json:"updated_at,omitempty"`
}

// KeypairUpdate defines model for KeypairUpdate.
type KeypairUpdate struct {
	Name string `json:"name"`
}

// L7Policy Adds nested create feature
type L7Policy struct {
	Action              ActionE9cEnum                `json:"action"`
	CreatedAt           *time.Time                   `json:"created_at,omitempty"`
	Description         *string                      `json:"description"`
	Id                  *openapi_types.UUID          `json:"id,omitempty"`
	Listener            openapi_types.UUID           `json:"listener"`
	Name                string                       `json:"name"`
	Position            *int                         `json:"position,omitempty"`
	ProvisioningStatus  *L7Policy_ProvisioningStatus `json:"provisioning_status"`
	RedirectHttpCode    *int                         `json:"redirect_http_code"`
	RedirectPrefix      *string                      `json:"redirect_prefix"`
	RedirectServerGroup *openapi_types.UUID          `json:"redirect_server_group"`
	RedirectUrl         *string                      `json:"redirect_url"`
	Status              *L7Policy_Status             `json:"status"`
	UpdatedAt           *time.Time                   `json:"updated_at,omitempty"`
}

// L7Policy_ProvisioningStatus defines model for L7Policy.ProvisioningStatus.
type L7Policy_ProvisioningStatus struct {
	union json.RawMessage
}

// L7Policy_Status defines model for L7Policy.Status.
type L7Policy_Status struct {
	union json.RawMessage
}

// L7PolicyDetail defines model for L7PolicyDetail.
type L7PolicyDetail struct {
	Action                  ActionE9cEnum                      `json:"action"`
	CreatedAt               *time.Time                         `json:"created_at,omitempty"`
	Description             *string                            `json:"description"`
	Id                      *openapi_types.UUID                `json:"id,omitempty"`
	Name                    *string                            `json:"name"`
	Position                *int                               `json:"position,omitempty"`
	ProvisioningStatus      *L7PolicyDetail_ProvisioningStatus `json:"provisioning_status"`
	RedirectHttpCode        *int                               `json:"redirect_http_code"`
	RedirectPrefix          *string                            `json:"redirect_prefix"`
	RedirectServerGroup     *openapi_types.UUID                `json:"redirect_server_group"`
	RedirectServerGroupName *string                            `json:"redirect_server_group_name,omitempty"`
	RedirectUrl             *string                            `json:"redirect_url"`
	Rules                   *[]L7RuleList                      `json:"rules,omitempty"`
	Status                  *L7PolicyDetail_Status             `json:"status"`
	UpdatedAt               *time.Time                         `json:"updated_at,omitempty"`
}

// L7PolicyDetail_ProvisioningStatus defines model for L7PolicyDetail.ProvisioningStatus.
type L7PolicyDetail_ProvisioningStatus struct {
	union json.RawMessage
}

// L7PolicyDetail_Status defines model for L7PolicyDetail.Status.
type L7PolicyDetail_Status struct {
	union json.RawMessage
}

// L7PolicyList defines model for L7PolicyList.
type L7PolicyList struct {
	Action                  ActionE9cEnum       `json:"action"`
	Id                      *openapi_types.UUID `json:"id,omitempty"`
	Name                    *string             `json:"name"`
	Position                *int                `json:"position,omitempty"`
	RedirectPrefix          *string             `json:"redirect_prefix"`
	RedirectServerGroup     *openapi_types.UUID `json:"redirect_server_group"`
	RedirectServerGroupName *string             `json:"redirect_server_group_name,omitempty"`
	RedirectUrl             *string             `json:"redirect_url"`
	Rules                   *int                `json:"rules,omitempty"`
}

// L7PolicyUpdate Adds nested create feature
type L7PolicyUpdate struct {
	Action              ActionE9cEnum                      `json:"action"`
	CreatedAt           *time.Time                         `json:"created_at,omitempty"`
	Description         *string                            `json:"description"`
	Id                  *openapi_types.UUID                `json:"id,omitempty"`
	Listener            *openapi_types.UUID                `json:"listener,omitempty"`
	Name                string                             `json:"name"`
	Position            *int                               `json:"position,omitempty"`
	ProvisioningStatus  *L7PolicyUpdate_ProvisioningStatus `json:"provisioning_status"`
	RedirectHttpCode    *int                               `json:"redirect_http_code"`
	RedirectPrefix      *string                            `json:"redirect_prefix"`
	RedirectServerGroup *openapi_types.UUID                `json:"redirect_server_group"`
	RedirectUrl         *string                            `json:"redirect_url"`
	Status              *L7PolicyUpdate_Status             `json:"status"`
	UpdatedAt           *time.Time                         `json:"updated_at,omitempty"`
}

// L7PolicyUpdate_ProvisioningStatus defines model for L7PolicyUpdate.ProvisioningStatus.
type L7PolicyUpdate_ProvisioningStatus struct {
	union json.RawMessage
}

// L7PolicyUpdate_Status defines model for L7PolicyUpdate.Status.
type L7PolicyUpdate_Status struct {
	union json.RawMessage
}

// L7Rule defines model for L7Rule.
type L7Rule struct {
	CompareType        CompareTypeEnum            `json:"compare_type"`
	CreatedAt          *time.Time                 `json:"created_at,omitempty"`
	Id                 *openapi_types.UUID        `json:"id,omitempty"`
	Invert             *bool                      `json:"invert,omitempty"`
	Key                *string                    `json:"key"`
	L7policy           openapi_types.UUID         `json:"l7policy"`
	ProvisioningStatus *L7Rule_ProvisioningStatus `json:"provisioning_status"`
	Status             *L7Rule_Status             `json:"status"`
	Type               TypeFc4Enum                `json:"type"`
	UpdatedAt          *time.Time                 `json:"updated_at,omitempty"`
	Value              string                     `json:"value"`
}

// L7Rule_ProvisioningStatus defines model for L7Rule.ProvisioningStatus.
type L7Rule_ProvisioningStatus struct {
	union json.RawMessage
}

// L7Rule_Status defines model for L7Rule.Status.
type L7Rule_Status struct {
	union json.RawMessage
}

// L7RuleList defines model for L7RuleList.
type L7RuleList struct {
	CompareType CompareTypeEnum     `json:"compare_type"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Invert      *bool               `json:"invert,omitempty"`
	Key         *string             `json:"key"`
	Type        TypeFc4Enum         `json:"type"`
	Value       string              `json:"value"`
}

// L7RuleUpdate defines model for L7RuleUpdate.
type L7RuleUpdate struct {
	CompareType        CompareTypeEnum                  `json:"compare_type"`
	CreatedAt          *time.Time                       `json:"created_at,omitempty"`
	Id                 *openapi_types.UUID              `json:"id,omitempty"`
	Invert             *bool                            `json:"invert,omitempty"`
	Key                *string                          `json:"key"`
	L7policy           *openapi_types.UUID              `json:"l7policy,omitempty"`
	ProvisioningStatus *L7RuleUpdate_ProvisioningStatus `json:"provisioning_status"`
	Status             *L7RuleUpdate_Status             `json:"status"`
	Type               TypeFc4Enum                      `json:"type"`
	UpdatedAt          *time.Time                       `json:"updated_at,omitempty"`
	Value              string                           `json:"value"`
}

// L7RuleUpdate_ProvisioningStatus defines model for L7RuleUpdate.ProvisioningStatus.
type L7RuleUpdate_ProvisioningStatus struct {
	union json.RawMessage
}

// L7RuleUpdate_Status defines model for L7RuleUpdate.Status.
type L7RuleUpdate_Status struct {
	union json.RawMessage
}

// LaunchTemplate Extract owner and project from request and update to serializer data
type LaunchTemplate struct {
	Description       *string                        `json:"description"`
	Flavor            *openapi_types.UUID            `json:"flavor"`
	Id                *openapi_types.UUID            `json:"id,omitempty"`
	Image             *openapi_types.UUID            `json:"image"`
	KeyPair           *openapi_types.UUID            `json:"key_pair"`
	Name              string                         `json:"name"`
	NetworkTemplates  *[]LaunchTemplateNetwork       `json:"network_templates,omitempty"`
	PlacementGroup    *openapi_types.UUID            `json:"placement_group"`
	Region            *openapi_types.UUID            `json:"region"`
	SecurityTemplates *[]LaunchTemplateSecurityGroup `json:"security_templates,omitempty"`
	UserData          *string                        `json:"user_data"`
	VolumeTemplates   *[]LaunchTemplateVolume        `json:"volume_templates,omitempty"`
	Zone              *openapi_types.UUID            `json:"zone"`
}

// LaunchTemplateDetail defines model for LaunchTemplateDetail.
type LaunchTemplateDetail struct {
	CreatedAt         *time.Time                     `json:"created_at,omitempty"`
	Description       *string                        `json:"description"`
	DisplayName       *string                        `json:"display_name,omitempty"`
	Flavor            NestedFlavor                   `json:"flavor"`
	Id                *openapi_types.UUID            `json:"id,omitempty"`
	Image             NestedImage                    `json:"image"`
	KeyPair           NestedKeyPair                  `json:"key_pair"`
	Name              string                         `json:"name"`
	NetworkTemplates  *[]LaunchTemplateNetwork       `json:"network_templates,omitempty"`
	Owner             openapi_types.UUID             `json:"owner"`
	PlacementGroup    NestedPlacementGroup           `json:"placement_group"`
	Project           openapi_types.UUID             `json:"project"`
	Region            NestedRegion                   `json:"region"`
	SecurityTemplates *[]LaunchTemplateSecurityGroup `json:"security_templates,omitempty"`
	UpdatedAt         *time.Time                     `json:"updated_at,omitempty"`
	UserData          *string                        `json:"user_data"`
	VolumeTemplates   *[]LaunchTemplateVolume        `json:"volume_templates,omitempty"`
	Zone              NestedZone                     `json:"zone"`
}

// LaunchTemplateNetwork defines model for LaunchTemplateNetwork.
type LaunchTemplateNetwork struct {
	ElasticIp  *bool               `json:"elastic_ip,omitempty"`
	EnableIpv6 *bool               `json:"enable_ipv6,omitempty"`
	Id         *openapi_types.UUID `json:"id,omitempty"`
	Subnet     *openapi_types.UUID `json:"subnet"`
	Vpc        *openapi_types.UUID `json:"vpc"`
}

// LaunchTemplateSecurityGroup defines model for LaunchTemplateSecurityGroup.
type LaunchTemplateSecurityGroup struct {
	Id            *openapi_types.UUID `json:"id,omitempty"`
	SecurityGroup *openapi_types.UUID `json:"security_group"`
}

// LaunchTemplateVolume defines model for LaunchTemplateVolume.
type LaunchTemplateVolume struct {
	Id         *openapi_types.UUID `json:"id,omitempty"`
	MountAs    *MountAsEnum        `json:"mount_as,omitempty"`
	Size       *int                `json:"size,omitempty"`
	VolumeType *openapi_types.UUID `json:"volume_type"`
}

// Lifecycle defines model for Lifecycle.
type Lifecycle struct {
	// Expiration Specifies whether objects with expired delete markers or objects that have expired (based on the date or days) should be removed automatically.
	Expiration *LifecycleExpiration `json:"expiration,omitempty"`

	// Filter The filter is used to identify objects that a lifecycle rule applies to.
	Filter LifecycleFilter `json:"filter"`

	// Id Unique identifier for the rule. Unit of length is bytes.
	Id *string `json:"id,omitempty"`

	// NonCurrentVersionExpiration Specifies when noncurrent version objects expire. Upon expiration, object storage permanently deletes them.
	NonCurrentVersionExpiration *LifecycleNoncurrentVersionExpiration `json:"non_current_version_expiration,omitempty"`

	// NonCurrentVersionTransitions Specifies when noncurrent version objects transition to a specified storage class. The array's maximum length is 7659 elements.
	NonCurrentVersionTransitions *[]LifecycleNoncurrentVersionTransition `json:"non_current_version_transitions,omitempty"`

	// Status Status of lifecycle rule.
	Status LifecycleStatusEnum `json:"status"`

	// Transitions Specifies when objects transition to a specified storage class. The array's maximum length is 11512 elements.
	Transitions *[]LifecycleTransition `json:"transitions,omitempty"`
}

// LifecycleExpiration defines model for LifecycleExpiration.
type LifecycleExpiration struct {
	// Date Specifies the date that the objects will be moved or removed. GMT ISO 8601 Format is used for date. The Date must represent a date between 1970-1-1 and 2554-7-21.
	Date *openapi_types.Date `json:"date,omitempty"`

	// Days Specifies the number of days objects live before they are moved or deleted. The value must be a non-negative integer.
	Days *int64 `json:"days,omitempty"`

	// ExpiredObjectDeleteMarker Indicates whether object storage will remove a delete marker with no noncurrent versions. If set to true, the delete marker will be expired; if set to false the policy takes no action.
	ExpiredObjectDeleteMarker *bool `json:"expired_object_delete_marker,omitempty"`
}

// LifecycleFilter defines model for LifecycleFilter.
type LifecycleFilter struct {
	// Prefix Prefix specifying one or more objects to which the rule applies. Bytes are the length unit. The prefix can be left empty.
	Prefix string `json:"prefix"`

	// Tags All of these tags must exist in the object's tag set in order for the rule to apply. List tag can have maximum 22775 tag.
	Tags *[]Tag `json:"tags,omitempty"`
}

// LifecycleNoncurrentVersionExpiration defines model for LifecycleNoncurrentVersionExpiration.
type LifecycleNoncurrentVersionExpiration struct {
	// NonCurrentDays Specifies the number of days objects live before they are moved or deleted. The value must be a non-negative integer.
	NonCurrentDays int64 `json:"non_current_days"`
}

// LifecycleNoncurrentVersionTransition defines model for LifecycleNoncurrentVersionTransition.
type LifecycleNoncurrentVersionTransition struct {
	// NonCurrentDays Specifies the number of days objects live before they are moved or deleted. The value must be a non-negative integer.
	NonCurrentDays int64 `json:"non_current_days"`

	// StorageClass The class of storage used to store the object.
	StorageClass string `json:"storage_class"`
}

// LifecycleStatusEnum defines model for LifecycleStatusEnum.
type LifecycleStatusEnum string

// LifecycleTransition defines model for LifecycleTransition.
type LifecycleTransition struct {
	// Date Specifies the date that the objects will be moved or removed. GMT ISO 8601 Format is used for date. The Date must represent a date between 1970-1-1 and 2554-7-21.
	Date *openapi_types.Date `json:"date,omitempty"`

	// Days Specifies the number of days objects live before they are moved or deleted. The value must be a non-negative integer.
	Days *int64 `json:"days,omitempty"`

	// StorageClass The class of storage used to store the object.
	StorageClass string `json:"storage_class"`
}

// ListObject defines model for ListObject.
type ListObject struct {
	// NextMarker Specifies the first key not returned that satisfies the search criteria. It can be empty.
	NextMarker string   `json:"next_marker"`
	Objects    []Object `json:"objects"`
}

// ListObjectVersion defines model for ListObjectVersion.
type ListObjectVersion struct {
	// NextMarker Specifies the first key not returned that satisfies the search criteria. It can be empty.
	NextMarker string `json:"next_marker"`

	// NextVersionIdMarker Specifies the first object version not returned that satisfies the search criteria. It can be empty.
	NextVersionIdMarker string          `json:"next_version_id_marker"`
	Objects             []ObjectVersion `json:"objects"`
}

// Listener Adds nested create feature
type Listener struct {
	AllowedCidrs            *[]string                     `json:"allowed_cidrs,omitempty"`
	DefaultTlsCert          *openapi_types.UUID           `json:"default_tls_cert"`
	Description             *string                       `json:"description"`
	Id                      *openapi_types.UUID           `json:"id,omitempty"`
	ListenerTimeout         *int                          `json:"listener_timeout,omitempty"`
	LoadBalancer            openapi_types.UUID            `json:"load_balancer"`
	Name                    string                        `json:"name"`
	Protocol                LoadBalancingProtocolTypeEnum `json:"protocol"`
	ProtocolPort            int                           `json:"protocol_port"`
	ProvisioningStatus      *Listener_ProvisioningStatus  `json:"provisioning_status"`
	ServerConnectingTimeout *int                          `json:"server_connecting_timeout,omitempty"`
	ServerGroup             *openapi_types.UUID           `json:"server_group"`
	ServerTimeout           *int                          `json:"server_timeout,omitempty"`
	SetXForwardedFor        *bool                         `json:"set_x_forwarded_for"`
	SetXForwardedPort       *bool                         `json:"set_x_forwarded_port"`
	SetXForwardedProto      *bool                         `json:"set_x_forwarded_proto"`
	SniTlsCerts             *[]openapi_types.UUID         `json:"sni_tls_certs,omitempty"`
	Status                  *Listener_Status              `json:"status"`
}

// Listener_ProvisioningStatus defines model for Listener.ProvisioningStatus.
type Listener_ProvisioningStatus struct {
	union json.RawMessage
}

// Listener_Status defines model for Listener.Status.
type Listener_Status struct {
	union json.RawMessage
}

// ListenerCertificate defines model for ListenerCertificate.
type ListenerCertificate struct {
	CommonName *string             `json:"common_name"`
	CreatedAt  *time.Time          `json:"created_at,omitempty"`
	ExpiresOn  *time.Time          `json:"expires_on"`
	Id         *openapi_types.UUID `json:"id,omitempty"`
	IssuedOn   *time.Time          `json:"issued_on"`
	Name       string              `json:"name"`
	Region     openapi_types.UUID  `json:"region"`
}

// ListenerDetail defines model for ListenerDetail.
type ListenerDetail struct {
	AllowedCidrs            *[]string                          `json:"allowed_cidrs,omitempty"`
	CreatedAt               *time.Time                         `json:"created_at,omitempty"`
	DefaultTlsCert          *openapi_types.UUID                `json:"default_tls_cert"`
	Id                      *openapi_types.UUID                `json:"id,omitempty"`
	ListenerTimeout         *int                               `json:"listener_timeout,omitempty"`
	Name                    string                             `json:"name"`
	Protocol                LoadBalancingProtocolTypeEnum      `json:"protocol"`
	ProtocolPort            int                                `json:"protocol_port"`
	ProvisioningStatus      *ListenerDetail_ProvisioningStatus `json:"provisioning_status"`
	ServerConnectingTimeout *int                               `json:"server_connecting_timeout,omitempty"`
	ServerGroup             *openapi_types.UUID                `json:"server_group"`
	ServerGroupName         *string                            `json:"server_group_name,omitempty"`
	ServerTimeout           *int                               `json:"server_timeout,omitempty"`
	SetXForwardedFor        *bool                              `json:"set_x_forwarded_for"`
	SetXForwardedPort       *bool                              `json:"set_x_forwarded_port"`
	SetXForwardedProto      *bool                              `json:"set_x_forwarded_proto"`
	SniTlsCerts             *[]ListenerCertificate             `json:"sni_tls_certs,omitempty"`
	Status                  *ListenerDetail_Status             `json:"status"`
	UpdatedAt               *time.Time                         `json:"updated_at,omitempty"`
}

// ListenerDetail_ProvisioningStatus defines model for ListenerDetail.ProvisioningStatus.
type ListenerDetail_ProvisioningStatus struct {
	union json.RawMessage
}

// ListenerDetail_Status defines model for ListenerDetail.Status.
type ListenerDetail_Status struct {
	union json.RawMessage
}

// ListenerList defines model for ListenerList.
type ListenerList struct {
	CreatedAt          *time.Time                       `json:"created_at,omitempty"`
	Id                 *openapi_types.UUID              `json:"id,omitempty"`
	Name               string                           `json:"name"`
	Protocol           LoadBalancingProtocolTypeEnum    `json:"protocol"`
	ProtocolPort       int                              `json:"protocol_port"`
	ProvisioningStatus *ListenerList_ProvisioningStatus `json:"provisioning_status"`
	ServerGroup        *openapi_types.UUID              `json:"server_group"`
	ServerGroupName    *string                          `json:"server_group_name,omitempty"`
	Status             *ListenerList_Status             `json:"status"`
}

// ListenerList_ProvisioningStatus defines model for ListenerList.ProvisioningStatus.
type ListenerList_ProvisioningStatus struct {
	union json.RawMessage
}

// ListenerList_Status defines model for ListenerList.Status.
type ListenerList_Status struct {
	union json.RawMessage
}

// ListenerUpdate Adds nested create feature
type ListenerUpdate struct {
	AllowedCidrs            *[]string                          `json:"allowed_cidrs,omitempty"`
	DefaultTlsCert          *openapi_types.UUID                `json:"default_tls_cert"`
	Description             *string                            `json:"description"`
	Id                      *openapi_types.UUID                `json:"id,omitempty"`
	ListenerTimeout         *int                               `json:"listener_timeout,omitempty"`
	LoadBalancer            *openapi_types.UUID                `json:"load_balancer,omitempty"`
	Name                    string                             `json:"name"`
	Protocol                *LoadBalancingProtocolTypeEnum     `json:"protocol,omitempty"`
	ProtocolPort            *int                               `json:"protocol_port,omitempty"`
	ProvisioningStatus      *ListenerUpdate_ProvisioningStatus `json:"provisioning_status"`
	ServerConnectingTimeout *int                               `json:"server_connecting_timeout,omitempty"`
	ServerGroup             *openapi_types.UUID                `json:"server_group"`
	ServerTimeout           *int                               `json:"server_timeout,omitempty"`
	SetXForwardedFor        *bool                              `json:"set_x_forwarded_for"`
	SetXForwardedPort       *bool                              `json:"set_x_forwarded_port"`
	SetXForwardedProto      *bool                              `json:"set_x_forwarded_proto"`
	SniTlsCerts             *[]openapi_types.UUID              `json:"sni_tls_certs,omitempty"`
	Status                  *ListenerUpdate_Status             `json:"status"`
}

// ListenerUpdate_ProvisioningStatus defines model for ListenerUpdate.ProvisioningStatus.
type ListenerUpdate_ProvisioningStatus struct {
	union json.RawMessage
}

// ListenerUpdate_Status defines model for ListenerUpdate.Status.
type ListenerUpdate_Status struct {
	union json.RawMessage
}

// LoadBalancer Extract owner and project from request and update to serializer data
type LoadBalancer struct {
	Description        *string                          `json:"description"`
	Id                 *openapi_types.UUID              `json:"id,omitempty"`
	Listeners          *[]NestedListener                `json:"listeners,omitempty"`
	Name               string                           `json:"name"`
	Package            PackageEnum                      `json:"package"`
	ProvisioningStatus *LoadBalancer_ProvisioningStatus `json:"provisioning_status"`
	PublicAddress      *string                          `json:"public_address"`
	Region             openapi_types.UUID               `json:"region"`
	ServerGroups       *[]NestedServerGroup             `json:"server_groups,omitempty"`
	Status             *LoadBalancer_Status             `json:"status"`
	Topology           TopologyEnum                     `json:"topology"`
	VipAddress         *string                          `json:"vip_address"`
	Vpc                openapi_types.UUID               `json:"vpc"`
}

// LoadBalancer_ProvisioningStatus defines model for LoadBalancer.ProvisioningStatus.
type LoadBalancer_ProvisioningStatus struct {
	union json.RawMessage
}

// LoadBalancer_Status defines model for LoadBalancer.Status.
type LoadBalancer_Status struct {
	union json.RawMessage
}

// LoadBalancerDetail defines model for LoadBalancerDetail.
type LoadBalancerDetail struct {
	CreatedAt          *time.Time                             `json:"created_at,omitempty"`
	Description        *string                                `json:"description"`
	Id                 *openapi_types.UUID                    `json:"id,omitempty"`
	Name               string                                 `json:"name"`
	Package            PackageEnum                            `json:"package"`
	ProvisioningStatus *LoadBalancerDetail_ProvisioningStatus `json:"provisioning_status"`
	PublicAddress      *string                                `json:"public_address"`
	Region             *string                                `json:"region,omitempty"`
	Status             *LoadBalancerDetail_Status             `json:"status"`
	Topology           TopologyEnum                           `json:"topology"`
	UpdatedAt          *time.Time                             `json:"updated_at,omitempty"`
	VipAddress         *string                                `json:"vip_address"`
	Vpc                openapi_types.UUID                     `json:"vpc"`
	VpcName            *string                                `json:"vpc_name,omitempty"`
}

// LoadBalancerDetail_ProvisioningStatus defines model for LoadBalancerDetail.ProvisioningStatus.
type LoadBalancerDetail_ProvisioningStatus struct {
	union json.RawMessage
}

// LoadBalancerDetail_Status defines model for LoadBalancerDetail.Status.
type LoadBalancerDetail_Status struct {
	union json.RawMessage
}

// LoadBalancerList defines model for LoadBalancerList.
type LoadBalancerList struct {
	CreatedAt          *time.Time                           `json:"created_at,omitempty"`
	Id                 *openapi_types.UUID                  `json:"id,omitempty"`
	Name               string                               `json:"name"`
	ProvisioningStatus *LoadBalancerList_ProvisioningStatus `json:"provisioning_status"`
	PublicAddress      *string                              `json:"public_address"`
	Region             *string                              `json:"region,omitempty"`
	Status             *LoadBalancerList_Status             `json:"status"`
	Topology           TopologyEnum                         `json:"topology"`
	VipAddress         *string                              `json:"vip_address"`
}

// LoadBalancerList_ProvisioningStatus defines model for LoadBalancerList.ProvisioningStatus.
type LoadBalancerList_ProvisioningStatus struct {
	union json.RawMessage
}

// LoadBalancerList_Status defines model for LoadBalancerList.Status.
type LoadBalancerList_Status struct {
	union json.RawMessage
}

// LoadBalancerPackageEnum defines model for LoadBalancerPackageEnum.
type LoadBalancerPackageEnum string

// LoadBalancerPlanTemplate defines model for LoadBalancerPlanTemplate.
type LoadBalancerPlanTemplate struct {
	// ActiveConnections Connections at a time (req/s)
	ActiveConnections *int `json:"active_connections,omitempty"`

	// Bandwidth Bandwidth (Mb/s)
	Bandwidth *int `json:"bandwidth,omitempty"`

	// Code The code which identifies plan templates
	Code string              `json:"code"`
	Id   *openapi_types.UUID `json:"id,omitempty"`

	// NewConnections Connections served every second (req/s)
	NewConnections *int `json:"new_connections,omitempty"`

	// Topology Load balancer topology
	Topology TopologyEnum `json:"topology"`
}

// LoadBalancerUpdate defines model for LoadBalancerUpdate.
type LoadBalancerUpdate struct {
	Description        *string                                `json:"description"`
	Id                 *openapi_types.UUID                    `json:"id,omitempty"`
	Name               string                                 `json:"name"`
	Package            PackageEnum                            `json:"package"`
	ProvisioningStatus *LoadBalancerUpdate_ProvisioningStatus `json:"provisioning_status"`
	PublicAddress      *string                                `json:"public_address"`
	Region             *openapi_types.UUID                    `json:"region,omitempty"`
	Status             *LoadBalancerUpdate_Status             `json:"status"`
	Topology           TopologyEnum                           `json:"topology"`
	VipAddress         *string                                `json:"vip_address"`
}

// LoadBalancerUpdate_ProvisioningStatus defines model for LoadBalancerUpdate.ProvisioningStatus.
type LoadBalancerUpdate_ProvisioningStatus struct {
	union json.RawMessage
}

// LoadBalancerUpdate_Status defines model for LoadBalancerUpdate.Status.
type LoadBalancerUpdate_Status struct {
	union json.RawMessage
}

// LoadBalancingMonitorTypeEnum defines model for LoadBalancingMonitorTypeEnum.
type LoadBalancingMonitorTypeEnum string

// LoadBalancingProtocolTypeEnum defines model for LoadBalancingProtocolTypeEnum.
type LoadBalancingProtocolTypeEnum string

// LoadBalancingProvisioningStatusEnum defines model for LoadBalancingProvisioningStatusEnum.
type LoadBalancingProvisioningStatusEnum string

// LoadBalancingStatusEnum defines model for LoadBalancingStatusEnum.
type LoadBalancingStatusEnum string

// MDowEnum defines model for MDowEnum.
type MDowEnum string

// MonitorHttpMethodEnum defines model for MonitorHttpMethodEnum.
type MonitorHttpMethodEnum string

// MonitorResponse Serializer for response of core API query metrics
type MonitorResponse struct {
	Data map[string]interface{} `json:"data"`
	Name string                 `json:"name"`
}

// MountAsEnum defines model for MountAsEnum.
type MountAsEnum string

// NestedBackup defines model for NestedBackup.
type NestedBackup struct {
	DisplayName *string             `json:"display_name,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
}

// NestedBackupPlan defines model for NestedBackupPlan.
type NestedBackupPlan struct {
	Cluster     NestedVKECluster    `json:"cluster"`
	DisplayName *string             `json:"display_name,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
}

// NestedBucket defines model for NestedBucket.
type NestedBucket struct {
	DisplayName *string             `json:"display_name,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Name        string              `json:"name"`
}

// NestedCategory defines model for NestedCategory.
type NestedCategory struct {
	Description *string             `json:"description,omitempty"`
	IconCode    *int                `json:"icon_code"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Name        string              `json:"name"`
	Title       string              `json:"title"`
}

// NestedCustomer defines model for NestedCustomer.
type NestedCustomer struct {
	Address           string              `json:"address"`
	BirthDate         openapi_types.Date  `json:"birth_date"`
	CustomerId        *string             `json:"customer_id"`
	CustomerType      string              `json:"customer_type"`
	District          string              `json:"district"`
	DistrictName      *string             `json:"district_name,omitempty"`
	IdentityDocuments *[]IdentityDocument `json:"identity_documents,omitempty"`
	Name              string              `json:"name"`
	Nationality       *string             `json:"nationality"`
	Precinct          string              `json:"precinct"`
	PrecinctName      *string             `json:"precinct_name,omitempty"`
	Province          string              `json:"province"`
	ProvinceName      *string             `json:"province_name,omitempty"`
	Sex               *SexEnum            `json:"sex,omitempty"`
}

// NestedFlavor defines model for NestedFlavor.
type NestedFlavor struct {
	DisplayName *string             `json:"display_name,omitempty"`
	Family      *string             `json:"family,omitempty"`
	Gpus        *int                `json:"gpus,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Name        string              `json:"name"`
	Ram         *int                `json:"ram,omitempty"`
	Status      *FlavorStatusEnum   `json:"status,omitempty"`
	Vcpus       *int                `json:"vcpus,omitempty"`
	Zone        openapi_types.UUID  `json:"zone"`
}

// NestedImage defines model for NestedImage.
type NestedImage struct {
	ContainerFormat *ContainerFormatEnum `json:"container_format,omitempty"`
	DiskFormat      *DiskFormatEnum      `json:"disk_format,omitempty"`
	DisplayName     *string              `json:"display_name,omitempty"`
	Id              *openapi_types.UUID  `json:"id,omitempty"`
	Name            string               `json:"name"`
	Os              *string              `json:"os,omitempty"`
	State           *ImageStateEnum      `json:"state,omitempty"`
	Status          *ImageStatusEnum     `json:"status,omitempty"`
	Version         *string              `json:"version,omitempty"`
}

// NestedK8SVersion defines model for NestedK8SVersion.
type NestedK8SVersion struct {
	DisplayName *string             `json:"display_name,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
}

// NestedKeyPair defines model for NestedKeyPair.
type NestedKeyPair struct {
	DisplayName *string             `json:"display_name,omitempty"`
	Fingerprint string              `json:"fingerprint"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Name        string              `json:"name"`
	PublicKey   string              `json:"public_key"`
	Type        *KeyPairTypeEnum    `json:"type,omitempty"`
}

// NestedListener Adds nested create feature
type NestedListener struct {
	AllowedCidrs            *[]string                          `json:"allowed_cidrs,omitempty"`
	DefaultTlsCert          *openapi_types.UUID                `json:"default_tls_cert"`
	Description             *string                            `json:"description"`
	Id                      *openapi_types.UUID                `json:"id,omitempty"`
	ListenerTimeout         *int                               `json:"listener_timeout,omitempty"`
	LoadBalancer            *openapi_types.UUID                `json:"load_balancer,omitempty"`
	Name                    string                             `json:"name"`
	Protocol                LoadBalancingProtocolTypeEnum      `json:"protocol"`
	ProtocolPort            int                                `json:"protocol_port"`
	ProvisioningStatus      *NestedListener_ProvisioningStatus `json:"provisioning_status"`
	ServerConnectingTimeout *int                               `json:"server_connecting_timeout,omitempty"`
	ServerGroup             *openapi_types.UUID                `json:"server_group"`
	ServerTimeout           *int                               `json:"server_timeout,omitempty"`
	SetXForwardedFor        *bool                              `json:"set_x_forwarded_for"`
	SetXForwardedPort       *bool                              `json:"set_x_forwarded_port"`
	SetXForwardedProto      *bool                              `json:"set_x_forwarded_proto"`
	SniTlsCerts             *[]openapi_types.UUID              `json:"sni_tls_certs,omitempty"`
	Status                  *NestedListener_Status             `json:"status"`
}

// NestedListener_ProvisioningStatus defines model for NestedListener.ProvisioningStatus.
type NestedListener_ProvisioningStatus struct {
	union json.RawMessage
}

// NestedListener_Status defines model for NestedListener.Status.
type NestedListener_Status struct {
	union json.RawMessage
}

// NestedPlacementGroup defines model for NestedPlacementGroup.
type NestedPlacementGroup struct {
	DisplayName *string                      `json:"display_name,omitempty"`
	Id          *openapi_types.UUID          `json:"id,omitempty"`
	Name        string                       `json:"name"`
	Policy      *NestedPlacementGroup_Policy `json:"policy"`
	Region      openapi_types.UUID           `json:"region"`
}

// NestedPlacementGroup_Policy defines model for NestedPlacementGroup.Policy.
type NestedPlacementGroup_Policy struct {
	union json.RawMessage
}

// NestedProductPrice defines model for NestedProductPrice.
type NestedProductPrice struct {
	Name          string  `json:"name"`
	Price         string  `json:"price"`
	PriceCurrency *string `json:"price_currency,omitempty"`
}

// NestedRegion defines model for NestedRegion.
type NestedRegion struct {
	DisplayName *string             `json:"display_name,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Name        string              `json:"name"`
}

// NestedScalingPolicy Adds nested create feature
type NestedScalingPolicy struct {
	Cooldown int                     `json:"cooldown"`
	Duration int                     `json:"duration"`
	Id       *openapi_types.UUID     `json:"id,omitempty"`
	Rules    []ScalingQueryThreshold `json:"rules"`
	Step     *int                    `json:"step,omitempty"`
	Type     ScaleTypeEnum           `json:"type"`
}

// NestedScalingSchedule Adds nested create feature
type NestedScalingSchedule struct {
	ExpectedInstance int                     `json:"expected_instance"`
	FromDate         time.Time               `json:"from_date"`
	FromMonthDay     *int                    `json:"from_month_day"`
	FromWeekDay      *int                    `json:"from_week_day"`
	Id               *openapi_types.UUID     `json:"id,omitempty"`
	Name             string                  `json:"name"`
	Repeat           RepeatEnum              `json:"repeat"`
	Status           *Status01cEnum          `json:"status,omitempty"`
	ToDate           time.Time               `json:"to_date"`
	ToMonthDay       *int                    `json:"to_month_day"`
	ToWeekDay        *int                    `json:"to_week_day"`
	WeekDays         *map[string]interface{} `json:"week_days"`
}

// NestedServer defines model for NestedServer.
type NestedServer struct {
	DisplayName *string             `json:"display_name,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Name        string              `json:"name"`
}

// NestedServerGroup Adds nested create feature
type NestedServerGroup struct {
	Algorithm                    AlgorithmEnum                             `json:"algorithm"`
	CreatedAt                    *time.Time                                `json:"created_at,omitempty"`
	Description                  *string                                   `json:"description"`
	EnableHealthCheck            bool                                      `json:"enable_health_check"`
	Id                           *openapi_types.UUID                       `json:"id,omitempty"`
	LoadBalancer                 *openapi_types.UUID                       `json:"load_balancer,omitempty"`
	Members                      *[]NestedServerGroupMember                `json:"members,omitempty"`
	MonitorDelay                 *int                                      `json:"monitor_delay"`
	MonitorExpectedCodes         *string                                   `json:"monitor_expected_codes"`
	MonitorHttpMethod            *NestedServerGroup_MonitorHttpMethod      `json:"monitor_http_method"`
	MonitorMaxRetries            *int                                      `json:"monitor_max_retries"`
	MonitorMaxRetriesDown        *int                                      `json:"monitor_max_retries_down"`
	MonitorPath                  *string                                   `json:"monitor_path"`
	MonitorTimeout               *int                                      `json:"monitor_timeout"`
	MonitorType                  *NestedServerGroup_MonitorType            `json:"monitor_type"`
	Name                         string                                    `json:"name"`
	Protocol                     LoadBalancingProtocolTypeEnum             `json:"protocol"`
	ProvisioningStatus           *NestedServerGroup_ProvisioningStatus     `json:"provisioning_status"`
	SessionPersistenceCookieName *string                                   `json:"session_persistence_cookie_name"`
	SessionPersistenceType       *NestedServerGroup_SessionPersistenceType `json:"session_persistence_type"`
	Status                       *NestedServerGroup_Status                 `json:"status"`
	UpdatedAt                    *time.Time                                `json:"updated_at,omitempty"`
}

// NestedServerGroup_MonitorHttpMethod defines model for NestedServerGroup.MonitorHttpMethod.
type NestedServerGroup_MonitorHttpMethod struct {
	union json.RawMessage
}

// NestedServerGroup_MonitorType defines model for NestedServerGroup.MonitorType.
type NestedServerGroup_MonitorType struct {
	union json.RawMessage
}

// NestedServerGroup_ProvisioningStatus defines model for NestedServerGroup.ProvisioningStatus.
type NestedServerGroup_ProvisioningStatus struct {
	union json.RawMessage
}

// NestedServerGroup_SessionPersistenceType defines model for NestedServerGroup.SessionPersistenceType.
type NestedServerGroup_SessionPersistenceType struct {
	union json.RawMessage
}

// NestedServerGroup_Status defines model for NestedServerGroup.Status.
type NestedServerGroup_Status struct {
	union json.RawMessage
}

// NestedServerGroupMember defines model for NestedServerGroupMember.
type NestedServerGroupMember struct {
	Address            string                                      `json:"address"`
	Backup             *bool                                       `json:"backup,omitempty"`
	CreatedAt          *time.Time                                  `json:"created_at,omitempty"`
	Id                 *openapi_types.UUID                         `json:"id,omitempty"`
	Name               string                                      `json:"name"`
	ProtocolPort       int                                         `json:"protocol_port"`
	ProvisioningStatus *NestedServerGroupMember_ProvisioningStatus `json:"provisioning_status"`
	ServerGroup        *openapi_types.UUID                         `json:"server_group,omitempty"`
	Status             *NestedServerGroupMember_Status             `json:"status"`
	UpdatedAt          *time.Time                                  `json:"updated_at,omitempty"`
	Weight             *int                                        `json:"weight,omitempty"`
}

// NestedServerGroupMember_ProvisioningStatus defines model for NestedServerGroupMember.ProvisioningStatus.
type NestedServerGroupMember_ProvisioningStatus struct {
	union json.RawMessage
}

// NestedServerGroupMember_Status defines model for NestedServerGroupMember.Status.
type NestedServerGroupMember_Status struct {
	union json.RawMessage
}

// NestedSubnet defines model for NestedSubnet.
type NestedSubnet struct {
	DisplayName *string             `json:"display_name,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
}

// NestedUser defines model for NestedUser.
type NestedUser struct {
	DisplayName *string              `json:"display_name,omitempty"`
	Email       *openapi_types.Email `json:"email,omitempty"`
	FirstName   *string              `json:"first_name,omitempty"`
	Id          *openapi_types.UUID  `json:"id,omitempty"`
	LastName    *string              `json:"last_name,omitempty"`

	// Username Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
	Username string `json:"username"`
}

// NestedVKECluster defines model for NestedVKECluster.
type NestedVKECluster struct {
	DisplayName *string             `json:"display_name,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
}

// NestedVPC defines model for NestedVPC.
type NestedVPC struct {
	DisplayName *string             `json:"display_name,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Name        string              `json:"name"`
}

// NestedVolume defines model for NestedVolume.
type NestedVolume struct {
	DisplayName *string             `json:"display_name,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Name        string              `json:"name"`
}

// NestedVolumeAttachment defines model for NestedVolumeAttachment.
type NestedVolumeAttachment struct {
	MountAs    *MountAsEnum       `json:"mount_as,omitempty"`
	Server     openapi_types.UUID `json:"server"`
	ServerName *string            `json:"server_name,omitempty"`
}

// NestedVolumeType defines model for NestedVolumeType.
type NestedVolumeType struct {
	DisplayName *string             `json:"display_name,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
}

// NestedZone defines model for NestedZone.
type NestedZone struct {
	DisplayName *string             `json:"display_name,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Name        string              `json:"name"`
	Region      openapi_types.UUID  `json:"region"`
}

// NullEnum defines model for NullEnum.
type NullEnum = interface{}

// Object defines model for Object.
type Object struct {
	// LastModified Last modified of object in iso-8601 format.
	LastModified *time.Time `json:"last_modified,omitempty"`

	// Name The name of object or name of folder (with slash at end).
	Name string `json:"name"`

	// Size Size in bytes of the object.
	Size *int `json:"size,omitempty"`

	// StorageClass Storage class of the object.
	StorageClass *string `json:"storage_class,omitempty"`

	// Type Type of object
	Type Type4feEnum `json:"type"`
}

// ObjectAcl defines model for ObjectAcl.
type ObjectAcl struct {
	// Acl The ACL of the object or bucket.
	Acl AclEnum `json:"acl"`
}

// ObjectDetails defines model for ObjectDetails.
type ObjectDetails struct {
	// Acl The ACL of the object or bucket.
	Acl AclEnum `json:"acl"`

	// ContentType Content type of the object.
	ContentType string `json:"content_type"`

	// Etag Etag of the object.
	Etag string `json:"etag"`

	// LastModified Last modified of object in iso-8601 format.
	LastModified time.Time `json:"last_modified"`

	// Name The name of object or name of folder (with slash at end).
	Name string `json:"name"`

	// Size Size in bytes of the object.
	Size int `json:"size"`

	// StorageClass Storage class of the object.
	StorageClass string `json:"storage_class"`

	// Type Type of object
	Type Type4feEnum `json:"type"`

	// Url The public URL of the object.
	Url string `json:"url"`

	// VersionId Version id of the object.
	VersionId *string `json:"version_id,omitempty"`
}

// ObjectPostRequest defines model for ObjectPostRequest.
type ObjectPostRequest struct {
	union json.RawMessage
}

// ObjectPostResponse defines model for ObjectPostResponse.
type ObjectPostResponse struct {
	union json.RawMessage
}

// ObjectPublicUrl defines model for ObjectPublicUrl.
type ObjectPublicUrl struct {
	// PublicUrl Temporary public url of the object.
	PublicUrl string `json:"public_url"`
}

// ObjectStorageOrderItem defines model for ObjectStorageOrderItem.
type ObjectStorageOrderItem struct {
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Period The active period of order items (in month)
	Period   *int `json:"period,omitempty"`
	Quantity int  `json:"quantity"`

	// Region The region where plan resources are created
	Region *openapi_types.UUID `json:"region"`

	// SubAmount The sub amount to pay
	SubAmount *string `json:"sub_amount"`

	// Template The associated object storage plan template
	Template     *openapi_types.UUID `json:"template"`
	TemplateCode *string             `json:"template_code,omitempty"`
}

// ObjectStoragePlan defines model for ObjectStoragePlan.
type ObjectStoragePlan struct {
	Bucket    NestedBucket `json:"bucket"`
	CreatedAt *time.Time   `json:"created_at,omitempty"`

	// ExpiresAt The timestamp at which plan is expired
	ExpiresAt *time.Time          `json:"expires_at"`
	Id        *openapi_types.UUID `json:"id,omitempty"`

	// InitialData Additional metadata for plan for auditing purpose
	InitialData *map[string]interface{} `json:"initial_data,omitempty"`

	// Period The effective period of the plan (in months)
	Period *int `json:"period,omitempty"`

	// Project The project on which plan is activated
	Project *openapi_types.UUID `json:"project"`
	Region  NestedRegion        `json:"region"`

	// StartedAt The timestamp at which plan is activated
	StartedAt *time.Time `json:"started_at"`

	// State Plan state
	State     *StateDf2Enum             `json:"state,omitempty"`
	Template  ObjectStoragePlanTemplate `json:"template"`
	UpdatedAt *time.Time                `json:"updated_at,omitempty"`

	// User The owner of this plan
	User *openapi_types.UUID `json:"user"`
}

// ObjectStoragePlanTemplate defines model for ObjectStoragePlanTemplate.
type ObjectStoragePlanTemplate struct {
	// BucketSize Bucket Size (GiB)
	BucketSize *int `json:"bucket_size,omitempty"`

	// Code The code which identifies plan templates
	Code string              `json:"code"`
	Id   *openapi_types.UUID `json:"id,omitempty"`

	// MonthlyBandwidth Monthly Bandwidth (GB/Month)
	MonthlyBandwidth *int                         `json:"monthly_bandwidth,omitempty"`
	PaymentOptions   *[]PlanTemplatePaymentOption `json:"payment_options"`
}

// ObjectUpload defines model for ObjectUpload.
type ObjectUpload struct {
	// ContentType Content type of the object.
	ContentType string `json:"content_type"`

	// Name The name of object or name of folder (with slash at end). Unit of length is bytes.
	Name string `json:"name"`

	// Type Type of object
	Type ObjectUploadTypeEnum `json:"type"`
}

// ObjectUploadSig defines model for ObjectUploadSig.
type ObjectUploadSig struct {
	// Authorization Authorization upload object.
	Authorization string `json:"authorization"`

	// XAmzDate The ISO 8601 format datetime when upload object.
	XAmzDate time.Time `json:"x_amz_date"`
}

// ObjectUploadTypeEnum defines model for ObjectUploadTypeEnum.
type ObjectUploadTypeEnum string

// ObjectVersion defines model for ObjectVersion.
type ObjectVersion struct {
	// Name The name of object or name of folder (with slash at end).
	Name string `json:"name"`

	// Type Type of folder
	Type     *Type18dEnum `json:"type,omitempty"`
	Versions *[]Version   `json:"versions,omitempty"`
}

// OperationEnum defines model for OperationEnum.
type OperationEnum string

// Order Extract owner and project from request and update to serializer data
type Order struct {
	CreatedAt *time.Time          `json:"created_at,omitempty"`
	Id        *openapi_types.UUID `json:"id,omitempty"`

	// InvoiceCode The invoice code returned by the Order API
	InvoiceCode    *string                   `json:"invoice_code"`
	ObjectStorages *[]ObjectStorageOrderItem `json:"object_storages,omitempty"`

	// OrderCode The order code returned by the Order API
	OrderCode *string             `json:"order_code"`
	Owner     *openapi_types.UUID `json:"owner,omitempty"`

	// PaymentCode The payment code for order
	PaymentCode *string `json:"payment_code"`

	// PaymentUrl The payment URL link for order
	PaymentUrl *string             `json:"payment_url"`
	Project    *openapi_types.UUID `json:"project,omitempty"`
	Servers    *[]ServerOrderItem  `json:"servers,omitempty"`

	// Status The order status
	Status *OrderStatusEnum `json:"status,omitempty"`

	// TotalAmount The sum amount to pay
	TotalAmount *string            `json:"total_amount"`
	UpdatedAt   *time.Time         `json:"updated_at,omitempty"`
	Volumes     *[]VolumeOrderItem `json:"volumes,omitempty"`
}

// OrderInvoice defines model for OrderInvoice.
type OrderInvoice struct {
	Invoice *string `json:"invoice"`
}

// OrderStatusEnum defines model for OrderStatusEnum.
type OrderStatusEnum string

// PackageEnum defines model for PackageEnum.
type PackageEnum string

// PaginatedAlarmList defines model for PaginatedAlarmList.
type PaginatedAlarmList struct {
	Count    *int     `json:"count,omitempty"`
	Next     *string  `json:"next"`
	Previous *string  `json:"previous"`
	Results  *[]Alarm `json:"results,omitempty"`
}

// PaginatedBCCSCRPlanList defines model for PaginatedBCCSCRPlanList.
type PaginatedBCCSCRPlanList struct {
	Count    *int          `json:"count,omitempty"`
	Next     *string       `json:"next"`
	Previous *string       `json:"previous"`
	Results  *[]BCCSCRPlan `json:"results,omitempty"`
}

// PaginatedBCCSFilesystemPlanList defines model for PaginatedBCCSFilesystemPlanList.
type PaginatedBCCSFilesystemPlanList struct {
	Count    *int                  `json:"count,omitempty"`
	Next     *string               `json:"next"`
	Previous *string               `json:"previous"`
	Results  *[]BCCSFilesystemPlan `json:"results,omitempty"`
}

// PaginatedBCCSK8SClusterPlanList defines model for PaginatedBCCSK8SClusterPlanList.
type PaginatedBCCSK8SClusterPlanList struct {
	Count    *int                  `json:"count,omitempty"`
	Next     *string               `json:"next"`
	Previous *string               `json:"previous"`
	Results  *[]BCCSK8SClusterPlan `json:"results,omitempty"`
}

// PaginatedBCCSLoadBalancerPlanList defines model for PaginatedBCCSLoadBalancerPlanList.
type PaginatedBCCSLoadBalancerPlanList struct {
	Count    *int                    `json:"count,omitempty"`
	Next     *string                 `json:"next"`
	Previous *string                 `json:"previous"`
	Results  *[]BCCSLoadBalancerPlan `json:"results,omitempty"`
}

// PaginatedBCCSObjectStoragePlanList defines model for PaginatedBCCSObjectStoragePlanList.
type PaginatedBCCSObjectStoragePlanList struct {
	Count    *int                     `json:"count,omitempty"`
	Next     *string                  `json:"next"`
	Previous *string                  `json:"previous"`
	Results  *[]BCCSObjectStoragePlan `json:"results,omitempty"`
}

// PaginatedBCCSServerPlanList defines model for PaginatedBCCSServerPlanList.
type PaginatedBCCSServerPlanList struct {
	Count    *int              `json:"count,omitempty"`
	Next     *string           `json:"next"`
	Previous *string           `json:"previous"`
	Results  *[]BCCSServerPlan `json:"results,omitempty"`
}

// PaginatedBCCSUserList defines model for PaginatedBCCSUserList.
type PaginatedBCCSUserList struct {
	Count    *int        `json:"count,omitempty"`
	Next     *string     `json:"next"`
	Previous *string     `json:"previous"`
	Results  *[]BCCSUser `json:"results,omitempty"`
}

// PaginatedBCCSVolumeBackupPlanList defines model for PaginatedBCCSVolumeBackupPlanList.
type PaginatedBCCSVolumeBackupPlanList struct {
	Count    *int                    `json:"count,omitempty"`
	Next     *string                 `json:"next"`
	Previous *string                 `json:"previous"`
	Results  *[]BCCSVolumeBackupPlan `json:"results,omitempty"`
}

// PaginatedBCCSVolumePlanList defines model for PaginatedBCCSVolumePlanList.
type PaginatedBCCSVolumePlanList struct {
	Count    *int              `json:"count,omitempty"`
	Next     *string           `json:"next"`
	Previous *string           `json:"previous"`
	Results  *[]BCCSVolumePlan `json:"results,omitempty"`
}

// PaginatedBackupDetailList defines model for PaginatedBackupDetailList.
type PaginatedBackupDetailList struct {
	Count    *int            `json:"count,omitempty"`
	Next     *string         `json:"next"`
	Previous *string         `json:"previous"`
	Results  *[]BackupDetail `json:"results,omitempty"`
}

// PaginatedBackupPlanDetailList defines model for PaginatedBackupPlanDetailList.
type PaginatedBackupPlanDetailList struct {
	Count    *int                `json:"count,omitempty"`
	Next     *string             `json:"next"`
	Previous *string             `json:"previous"`
	Results  *[]BackupPlanDetail `json:"results,omitempty"`
}

// PaginatedBucketList defines model for PaginatedBucketList.
type PaginatedBucketList struct {
	Count    *int      `json:"count,omitempty"`
	Next     *string   `json:"next"`
	Previous *string   `json:"previous"`
	Results  *[]Bucket `json:"results,omitempty"`
}

// PaginatedCNIVersionList defines model for PaginatedCNIVersionList.
type PaginatedCNIVersionList struct {
	Count    *int          `json:"count,omitempty"`
	Next     *string       `json:"next"`
	Previous *string       `json:"previous"`
	Results  *[]CNIVersion `json:"results,omitempty"`
}

// PaginatedCSIVersionList defines model for PaginatedCSIVersionList.
type PaginatedCSIVersionList struct {
	Count    *int          `json:"count,omitempty"`
	Next     *string       `json:"next"`
	Previous *string       `json:"previous"`
	Results  *[]CSIVersion `json:"results,omitempty"`
}

// PaginatedCategoryList defines model for PaginatedCategoryList.
type PaginatedCategoryList struct {
	Count    *int        `json:"count,omitempty"`
	Next     *string     `json:"next"`
	Previous *string     `json:"previous"`
	Results  *[]Category `json:"results,omitempty"`
}

// PaginatedCertificateList defines model for PaginatedCertificateList.
type PaginatedCertificateList struct {
	Count    *int           `json:"count,omitempty"`
	Next     *string        `json:"next"`
	Previous *string        `json:"previous"`
	Results  *[]Certificate `json:"results,omitempty"`
}

// PaginatedContainerArtifactTagList defines model for PaginatedContainerArtifactTagList.
type PaginatedContainerArtifactTagList struct {
	Count    int                    `json:"count"`
	Next     *string                `json:"next"`
	Previous *string                `json:"previous"`
	Results  []ContainerArtifactTag `json:"results"`
}

// PaginatedContainerImageArtifactList defines model for PaginatedContainerImageArtifactList.
type PaginatedContainerImageArtifactList struct {
	Count    int                      `json:"count"`
	Next     *string                  `json:"next"`
	Previous *string                  `json:"previous"`
	Results  []ContainerImageArtifact `json:"results"`
}

// PaginatedContainerImageList defines model for PaginatedContainerImageList.
type PaginatedContainerImageList struct {
	Count    int              `json:"count"`
	Next     *string          `json:"next"`
	Previous *string          `json:"previous"`
	Results  []ContainerImage `json:"results"`
}

// PaginatedDBInstanceBackupList defines model for PaginatedDBInstanceBackupList.
type PaginatedDBInstanceBackupList struct {
	Count    *int                `json:"count,omitempty"`
	Next     *string             `json:"next"`
	Previous *string             `json:"previous"`
	Results  *[]DBInstanceBackup `json:"results,omitempty"`
}

// PaginatedDBInstanceList defines model for PaginatedDBInstanceList.
type PaginatedDBInstanceList struct {
	Count    *int          `json:"count,omitempty"`
	Next     *string       `json:"next"`
	Previous *string       `json:"previous"`
	Results  *[]DBInstance `json:"results,omitempty"`
}

// PaginatedDBVersionList defines model for PaginatedDBVersionList.
type PaginatedDBVersionList struct {
	Count    *int         `json:"count,omitempty"`
	Next     *string      `json:"next"`
	Previous *string      `json:"previous"`
	Results  *[]DBVersion `json:"results,omitempty"`
}

// PaginatedDBaaSRegionFlavorList defines model for PaginatedDBaaSRegionFlavorList.
type PaginatedDBaaSRegionFlavorList struct {
	Count    *int                 `json:"count,omitempty"`
	Next     *string              `json:"next"`
	Previous *string              `json:"previous"`
	Results  *[]DBaaSRegionFlavor `json:"results,omitempty"`
}

// PaginatedDBaaSRegionList defines model for PaginatedDBaaSRegionList.
type PaginatedDBaaSRegionList struct {
	Count    *int           `json:"count,omitempty"`
	Next     *string        `json:"next"`
	Previous *string        `json:"previous"`
	Results  *[]DBaaSRegion `json:"results,omitempty"`
}

// PaginatedDBaaSRegionVolumeTypeList defines model for PaginatedDBaaSRegionVolumeTypeList.
type PaginatedDBaaSRegionVolumeTypeList struct {
	Count    *int                     `json:"count,omitempty"`
	Next     *string                  `json:"next"`
	Previous *string                  `json:"previous"`
	Results  *[]DBaaSRegionVolumeType `json:"results,omitempty"`
}

// PaginatedDBaaSZoneList defines model for PaginatedDBaaSZoneList.
type PaginatedDBaaSZoneList struct {
	Count    *int         `json:"count,omitempty"`
	Next     *string      `json:"next"`
	Previous *string      `json:"previous"`
	Results  *[]DBaaSZone `json:"results,omitempty"`
}

// PaginatedDashboardVersionList defines model for PaginatedDashboardVersionList.
type PaginatedDashboardVersionList struct {
	Count    *int                `json:"count,omitempty"`
	Next     *string             `json:"next"`
	Previous *string             `json:"previous"`
	Results  *[]DashboardVersion `json:"results,omitempty"`
}

// PaginatedElasticIPList defines model for PaginatedElasticIPList.
type PaginatedElasticIPList struct {
	Count    *int         `json:"count,omitempty"`
	Next     *string      `json:"next"`
	Previous *string      `json:"previous"`
	Results  *[]ElasticIP `json:"results,omitempty"`
}

// PaginatedFavoriteServiceList defines model for PaginatedFavoriteServiceList.
type PaginatedFavoriteServiceList struct {
	Count    *int               `json:"count,omitempty"`
	Next     *string            `json:"next"`
	Previous *string            `json:"previous"`
	Results  *[]FavoriteService `json:"results,omitempty"`
}

// PaginatedFilesystemAccessRuleList defines model for PaginatedFilesystemAccessRuleList.
type PaginatedFilesystemAccessRuleList struct {
	Count    *int                    `json:"count,omitempty"`
	Next     *string                 `json:"next"`
	Previous *string                 `json:"previous"`
	Results  *[]FilesystemAccessRule `json:"results,omitempty"`
}

// PaginatedFilesystemList defines model for PaginatedFilesystemList.
type PaginatedFilesystemList struct {
	Count    *int          `json:"count,omitempty"`
	Next     *string       `json:"next"`
	Previous *string       `json:"previous"`
	Results  *[]Filesystem `json:"results,omitempty"`
}

// PaginatedFilesystemSnapshotList defines model for PaginatedFilesystemSnapshotList.
type PaginatedFilesystemSnapshotList struct {
	Count    *int                  `json:"count,omitempty"`
	Next     *string               `json:"next"`
	Previous *string               `json:"previous"`
	Results  *[]FilesystemSnapshot `json:"results,omitempty"`
}

// PaginatedFilesystemSnapshotPolicyList defines model for PaginatedFilesystemSnapshotPolicyList.
type PaginatedFilesystemSnapshotPolicyList struct {
	Count    *int                        `json:"count,omitempty"`
	Next     *string                     `json:"next"`
	Previous *string                     `json:"previous"`
	Results  *[]FilesystemSnapshotPolicy `json:"results,omitempty"`
}

// PaginatedFilesystemTypeList defines model for PaginatedFilesystemTypeList.
type PaginatedFilesystemTypeList struct {
	Count    *int              `json:"count,omitempty"`
	Next     *string           `json:"next"`
	Previous *string           `json:"previous"`
	Results  *[]FilesystemType `json:"results,omitempty"`
}

// PaginatedFlavorList defines model for PaginatedFlavorList.
type PaginatedFlavorList struct {
	Count    *int      `json:"count,omitempty"`
	Next     *string   `json:"next"`
	Previous *string   `json:"previous"`
	Results  *[]Flavor `json:"results,omitempty"`
}

// PaginatedFlavorMappingList defines model for PaginatedFlavorMappingList.
type PaginatedFlavorMappingList struct {
	Count    *int             `json:"count,omitempty"`
	Next     *string          `json:"next"`
	Previous *string          `json:"previous"`
	Results  *[]FlavorMapping `json:"results,omitempty"`
}

// PaginatedImageList defines model for PaginatedImageList.
type PaginatedImageList struct {
	Count    *int     `json:"count,omitempty"`
	Next     *string  `json:"next"`
	Previous *string  `json:"previous"`
	Results  *[]Image `json:"results,omitempty"`
}

// PaginatedK8SVersionList defines model for PaginatedK8SVersionList.
type PaginatedK8SVersionList struct {
	Count    *int          `json:"count,omitempty"`
	Next     *string       `json:"next"`
	Previous *string       `json:"previous"`
	Results  *[]K8SVersion `json:"results,omitempty"`
}

// PaginatedKeypairList defines model for PaginatedKeypairList.
type PaginatedKeypairList struct {
	Count    *int       `json:"count,omitempty"`
	Next     *string    `json:"next"`
	Previous *string    `json:"previous"`
	Results  *[]Keypair `json:"results,omitempty"`
}

// PaginatedL7PolicyListList defines model for PaginatedL7PolicyListList.
type PaginatedL7PolicyListList struct {
	Count    *int            `json:"count,omitempty"`
	Next     *string         `json:"next"`
	Previous *string         `json:"previous"`
	Results  *[]L7PolicyList `json:"results,omitempty"`
}

// PaginatedL7RuleListList defines model for PaginatedL7RuleListList.
type PaginatedL7RuleListList struct {
	Count    *int          `json:"count,omitempty"`
	Next     *string       `json:"next"`
	Previous *string       `json:"previous"`
	Results  *[]L7RuleList `json:"results,omitempty"`
}

// PaginatedLaunchTemplateDetailList defines model for PaginatedLaunchTemplateDetailList.
type PaginatedLaunchTemplateDetailList struct {
	Count    *int                    `json:"count,omitempty"`
	Next     *string                 `json:"next"`
	Previous *string                 `json:"previous"`
	Results  *[]LaunchTemplateDetail `json:"results,omitempty"`
}

// PaginatedListenerListList defines model for PaginatedListenerListList.
type PaginatedListenerListList struct {
	Count    *int            `json:"count,omitempty"`
	Next     *string         `json:"next"`
	Previous *string         `json:"previous"`
	Results  *[]ListenerList `json:"results,omitempty"`
}

// PaginatedLoadBalancerListList defines model for PaginatedLoadBalancerListList.
type PaginatedLoadBalancerListList struct {
	Count    *int                `json:"count,omitempty"`
	Next     *string             `json:"next"`
	Previous *string             `json:"previous"`
	Results  *[]LoadBalancerList `json:"results,omitempty"`
}

// PaginatedMonitorResponseList defines model for PaginatedMonitorResponseList.
type PaginatedMonitorResponseList struct {
	Count    *int               `json:"count,omitempty"`
	Next     *string            `json:"next"`
	Previous *string            `json:"previous"`
	Results  *[]MonitorResponse `json:"results,omitempty"`
}

// PaginatedObjectStoragePlanList defines model for PaginatedObjectStoragePlanList.
type PaginatedObjectStoragePlanList struct {
	Count    *int                 `json:"count,omitempty"`
	Next     *string              `json:"next"`
	Previous *string              `json:"previous"`
	Results  *[]ObjectStoragePlan `json:"results,omitempty"`
}

// PaginatedObjectStoragePlanTemplateList defines model for PaginatedObjectStoragePlanTemplateList.
type PaginatedObjectStoragePlanTemplateList struct {
	Count    *int                         `json:"count,omitempty"`
	Next     *string                      `json:"next"`
	Previous *string                      `json:"previous"`
	Results  *[]ObjectStoragePlanTemplate `json:"results,omitempty"`
}

// PaginatedOrderList defines model for PaginatedOrderList.
type PaginatedOrderList struct {
	Count    *int     `json:"count,omitempty"`
	Next     *string  `json:"next"`
	Previous *string  `json:"previous"`
	Results  *[]Order `json:"results,omitempty"`
}

// PaginatedPlacementGroupList defines model for PaginatedPlacementGroupList.
type PaginatedPlacementGroupList struct {
	Count    *int              `json:"count,omitempty"`
	Next     *string           `json:"next"`
	Previous *string           `json:"previous"`
	Results  *[]PlacementGroup `json:"results,omitempty"`
}

// PaginatedPricingPlanList defines model for PaginatedPricingPlanList.
type PaginatedPricingPlanList struct {
	Count    *int           `json:"count,omitempty"`
	Next     *string        `json:"next"`
	Previous *string        `json:"previous"`
	Results  *[]PricingPlan `json:"results,omitempty"`
}

// PaginatedPrivateIPList defines model for PaginatedPrivateIPList.
type PaginatedPrivateIPList struct {
	Count    *int         `json:"count,omitempty"`
	Next     *string      `json:"next"`
	Previous *string      `json:"previous"`
	Results  *[]PrivateIP `json:"results,omitempty"`
}

// PaginatedProductList defines model for PaginatedProductList.
type PaginatedProductList struct {
	Count    *int       `json:"count,omitempty"`
	Next     *string    `json:"next"`
	Previous *string    `json:"previous"`
	Results  *[]Product `json:"results,omitempty"`
}

// PaginatedProjectList defines model for PaginatedProjectList.
type PaginatedProjectList struct {
	Count    *int       `json:"count,omitempty"`
	Next     *string    `json:"next"`
	Previous *string    `json:"previous"`
	Results  *[]Project `json:"results,omitempty"`
}

// PaginatedProjectLogList defines model for PaginatedProjectLogList.
type PaginatedProjectLogList struct {
	Count    int          `json:"count"`
	Next     *string      `json:"next"`
	Previous *string      `json:"previous"`
	Results  []ProjectLog `json:"results"`
}

// PaginatedProjectUserList defines model for PaginatedProjectUserList.
type PaginatedProjectUserList struct {
	Count    *int           `json:"count,omitempty"`
	Next     *string        `json:"next"`
	Previous *string        `json:"previous"`
	Results  *[]ProjectUser `json:"results,omitempty"`
}

// PaginatedQuestionList defines model for PaginatedQuestionList.
type PaginatedQuestionList struct {
	Count    *int        `json:"count,omitempty"`
	Next     *string     `json:"next"`
	Previous *string     `json:"previous"`
	Results  *[]Question `json:"results,omitempty"`
}

// PaginatedRegionList defines model for PaginatedRegionList.
type PaginatedRegionList struct {
	Count    *int      `json:"count,omitempty"`
	Next     *string   `json:"next"`
	Previous *string   `json:"previous"`
	Results  *[]Region `json:"results,omitempty"`
}

// PaginatedRestoreDetailList defines model for PaginatedRestoreDetailList.
type PaginatedRestoreDetailList struct {
	Count    *int             `json:"count,omitempty"`
	Next     *string          `json:"next"`
	Previous *string          `json:"previous"`
	Results  *[]RestoreDetail `json:"results,omitempty"`
}

// PaginatedRouteTableList defines model for PaginatedRouteTableList.
type PaginatedRouteTableList struct {
	Count    *int          `json:"count,omitempty"`
	Next     *string       `json:"next"`
	Previous *string       `json:"previous"`
	Results  *[]RouteTable `json:"results,omitempty"`
}

// PaginatedScalingActionList defines model for PaginatedScalingActionList.
type PaginatedScalingActionList struct {
	Count    *int             `json:"count,omitempty"`
	Next     *string          `json:"next"`
	Previous *string          `json:"previous"`
	Results  *[]ScalingAction `json:"results,omitempty"`
}

// PaginatedScalingGroupListList defines model for PaginatedScalingGroupListList.
type PaginatedScalingGroupListList struct {
	Count    *int                `json:"count,omitempty"`
	Next     *string             `json:"next"`
	Previous *string             `json:"previous"`
	Results  *[]ScalingGroupList `json:"results,omitempty"`
}

// PaginatedScalingPolicyListList defines model for PaginatedScalingPolicyListList.
type PaginatedScalingPolicyListList struct {
	Count    *int                 `json:"count,omitempty"`
	Next     *string              `json:"next"`
	Previous *string              `json:"previous"`
	Results  *[]ScalingPolicyList `json:"results,omitempty"`
}

// PaginatedScalingQueryList defines model for PaginatedScalingQueryList.
type PaginatedScalingQueryList struct {
	Count    *int            `json:"count,omitempty"`
	Next     *string         `json:"next"`
	Previous *string         `json:"previous"`
	Results  *[]ScalingQuery `json:"results,omitempty"`
}

// PaginatedScalingScheduleListList defines model for PaginatedScalingScheduleListList.
type PaginatedScalingScheduleListList struct {
	Count    *int                   `json:"count,omitempty"`
	Next     *string                `json:"next"`
	Previous *string                `json:"previous"`
	Results  *[]ScalingScheduleList `json:"results,omitempty"`
}

// PaginatedScalingServerList defines model for PaginatedScalingServerList.
type PaginatedScalingServerList struct {
	Count    *int             `json:"count,omitempty"`
	Next     *string          `json:"next"`
	Previous *string          `json:"previous"`
	Results  *[]ScalingServer `json:"results,omitempty"`
}

// PaginatedSecretListList defines model for PaginatedSecretListList.
type PaginatedSecretListList struct {
	Count    *int          `json:"count,omitempty"`
	Next     *string       `json:"next"`
	Previous *string       `json:"previous"`
	Results  *[]SecretList `json:"results,omitempty"`
}

// PaginatedSecurityGroupList defines model for PaginatedSecurityGroupList.
type PaginatedSecurityGroupList struct {
	Count    *int             `json:"count,omitempty"`
	Next     *string          `json:"next"`
	Previous *string          `json:"previous"`
	Results  *[]SecurityGroup `json:"results,omitempty"`
}

// PaginatedSecurityGroupRuleList defines model for PaginatedSecurityGroupRuleList.
type PaginatedSecurityGroupRuleList struct {
	Count    *int                 `json:"count,omitempty"`
	Next     *string              `json:"next"`
	Previous *string              `json:"previous"`
	Results  *[]SecurityGroupRule `json:"results,omitempty"`
}

// PaginatedServerGroupListList defines model for PaginatedServerGroupListList.
type PaginatedServerGroupListList struct {
	Count    *int               `json:"count,omitempty"`
	Next     *string            `json:"next"`
	Previous *string            `json:"previous"`
	Results  *[]ServerGroupList `json:"results,omitempty"`
}

// PaginatedServerGroupMemberListList defines model for PaginatedServerGroupMemberListList.
type PaginatedServerGroupMemberListList struct {
	Count    *int                     `json:"count,omitempty"`
	Next     *string                  `json:"next"`
	Previous *string                  `json:"previous"`
	Results  *[]ServerGroupMemberList `json:"results,omitempty"`
}

// PaginatedServerListList defines model for PaginatedServerListList.
type PaginatedServerListList struct {
	Count    *int          `json:"count,omitempty"`
	Next     *string       `json:"next"`
	Previous *string       `json:"previous"`
	Results  *[]ServerList `json:"results,omitempty"`
}

// PaginatedServerPlanList defines model for PaginatedServerPlanList.
type PaginatedServerPlanList struct {
	Count    *int          `json:"count,omitempty"`
	Next     *string       `json:"next"`
	Previous *string       `json:"previous"`
	Results  *[]ServerPlan `json:"results,omitempty"`
}

// PaginatedServerPlanTemplateList defines model for PaginatedServerPlanTemplateList.
type PaginatedServerPlanTemplateList struct {
	Count    *int                  `json:"count,omitempty"`
	Next     *string               `json:"next"`
	Previous *string               `json:"previous"`
	Results  *[]ServerPlanTemplate `json:"results,omitempty"`
}

// PaginatedServiceList defines model for PaginatedServiceList.
type PaginatedServiceList struct {
	Count    *int       `json:"count,omitempty"`
	Next     *string    `json:"next"`
	Previous *string    `json:"previous"`
	Results  *[]Service `json:"results,omitempty"`
}

// PaginatedSnapshotList defines model for PaginatedSnapshotList.
type PaginatedSnapshotList struct {
	Count    *int        `json:"count,omitempty"`
	Next     *string     `json:"next"`
	Previous *string     `json:"previous"`
	Results  *[]Snapshot `json:"results,omitempty"`
}

// PaginatedSnapshotPolicyList defines model for PaginatedSnapshotPolicyList.
type PaginatedSnapshotPolicyList struct {
	Count    *int              `json:"count,omitempty"`
	Next     *string           `json:"next"`
	Previous *string           `json:"previous"`
	Results  *[]SnapshotPolicy `json:"results,omitempty"`
}

// PaginatedSubnetAssociateList defines model for PaginatedSubnetAssociateList.
type PaginatedSubnetAssociateList struct {
	Count    *int               `json:"count,omitempty"`
	Next     *string            `json:"next"`
	Previous *string            `json:"previous"`
	Results  *[]SubnetAssociate `json:"results,omitempty"`
}

// PaginatedSubnetList defines model for PaginatedSubnetList.
type PaginatedSubnetList struct {
	Count    *int      `json:"count,omitempty"`
	Next     *string   `json:"next"`
	Previous *string   `json:"previous"`
	Results  *[]Subnet `json:"results,omitempty"`
}

// PaginatedSubscriptionList defines model for PaginatedSubscriptionList.
type PaginatedSubscriptionList struct {
	Count    *int            `json:"count,omitempty"`
	Next     *string         `json:"next"`
	Previous *string         `json:"previous"`
	Results  *[]Subscription `json:"results,omitempty"`
}

// PaginatedUserList defines model for PaginatedUserList.
type PaginatedUserList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Previous *string `json:"previous"`
	Results  *[]User `json:"results,omitempty"`
}

// PaginatedVKEClusterDetailList defines model for PaginatedVKEClusterDetailList.
type PaginatedVKEClusterDetailList struct {
	Count    *int                `json:"count,omitempty"`
	Next     *string             `json:"next"`
	Previous *string             `json:"previous"`
	Results  *[]VKEClusterDetail `json:"results,omitempty"`
}

// PaginatedVKEMachineList defines model for PaginatedVKEMachineList.
type PaginatedVKEMachineList struct {
	Count    *int          `json:"count,omitempty"`
	Next     *string       `json:"next"`
	Previous *string       `json:"previous"`
	Results  *[]VKEMachine `json:"results,omitempty"`
}

// PaginatedVKENodePoolDetailList defines model for PaginatedVKENodePoolDetailList.
type PaginatedVKENodePoolDetailList struct {
	Count    *int                 `json:"count,omitempty"`
	Next     *string              `json:"next"`
	Previous *string              `json:"previous"`
	Results  *[]VKENodePoolDetail `json:"results,omitempty"`
}

// PaginatedVPCList defines model for PaginatedVPCList.
type PaginatedVPCList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Previous *string `json:"previous"`
	Results  *[]VPC  `json:"results,omitempty"`
}

// PaginatedVendorList defines model for PaginatedVendorList.
type PaginatedVendorList struct {
	Count    *int      `json:"count,omitempty"`
	Next     *string   `json:"next"`
	Previous *string   `json:"previous"`
	Results  *[]Vendor `json:"results,omitempty"`
}

// PaginatedVolumeBackupList defines model for PaginatedVolumeBackupList.
type PaginatedVolumeBackupList struct {
	Count    *int            `json:"count,omitempty"`
	Next     *string         `json:"next"`
	Previous *string         `json:"previous"`
	Results  *[]VolumeBackup `json:"results,omitempty"`
}

// PaginatedVolumeBackupPolicyList defines model for PaginatedVolumeBackupPolicyList.
type PaginatedVolumeBackupPolicyList struct {
	Count    *int                  `json:"count,omitempty"`
	Next     *string               `json:"next"`
	Previous *string               `json:"previous"`
	Results  *[]VolumeBackupPolicy `json:"results,omitempty"`
}

// PaginatedVolumeList defines model for PaginatedVolumeList.
type PaginatedVolumeList struct {
	Count    *int      `json:"count,omitempty"`
	Next     *string   `json:"next"`
	Previous *string   `json:"previous"`
	Results  *[]Volume `json:"results,omitempty"`
}

// PaginatedVolumePlanList defines model for PaginatedVolumePlanList.
type PaginatedVolumePlanList struct {
	Count    *int          `json:"count,omitempty"`
	Next     *string       `json:"next"`
	Previous *string       `json:"previous"`
	Results  *[]VolumePlan `json:"results,omitempty"`
}

// PaginatedVolumePlanTemplateList defines model for PaginatedVolumePlanTemplateList.
type PaginatedVolumePlanTemplateList struct {
	Count    *int                  `json:"count,omitempty"`
	Next     *string               `json:"next"`
	Previous *string               `json:"previous"`
	Results  *[]VolumePlanTemplate `json:"results,omitempty"`
}

// PaginatedVolumeTypeList defines model for PaginatedVolumeTypeList.
type PaginatedVolumeTypeList struct {
	Count    *int          `json:"count,omitempty"`
	Next     *string       `json:"next"`
	Previous *string       `json:"previous"`
	Results  *[]VolumeType `json:"results,omitempty"`
}

// PaginatedVolumeTypeMappingList defines model for PaginatedVolumeTypeMappingList.
type PaginatedVolumeTypeMappingList struct {
	Count    *int                 `json:"count,omitempty"`
	Next     *string              `json:"next"`
	Previous *string              `json:"previous"`
	Results  *[]VolumeTypeMapping `json:"results,omitempty"`
}

// PaginatedZoneList defines model for PaginatedZoneList.
type PaginatedZoneList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Previous *string `json:"previous"`
	Results  *[]Zone `json:"results,omitempty"`
}

// Password defines model for Password.
type Password struct {
	NewPassword string `json:"new_password"`
}

// PatchedAlarmUpdate Extract owner and project from request and update to serializer data
type PatchedAlarmUpdate struct {
	Duration  *string `json:"duration,omitempty"`
	Status    *bool   `json:"status,omitempty"`
	Threshold *int    `json:"threshold,omitempty"`
}

// PatchedBackup Extract owner and project from request and update to serializer data
type PatchedBackup struct {
	BackupPlan *openapi_types.UUID `json:"backup_plan,omitempty"`
	BackupType *BackupType45cEnum  `json:"backup_type,omitempty"`
	Id         *openapi_types.UUID `json:"id,omitempty"`
	Name       *string             `json:"name,omitempty"`
}

// PatchedBackupPlan Extract owner and project from request and update to serializer data
type PatchedBackupPlan struct {
	BackupNamespaces *string              `json:"backup_namespaces"`
	BackupScopeType  *BackupScopeTypeEnum `json:"backup_scope_type,omitempty"`
	BackupVolume     *bool                `json:"backup_volume,omitempty"`
	Cluster          *openapi_types.UUID  `json:"cluster,omitempty"`
	CronExpression   *string              `json:"cron_expression,omitempty"`
	Duration         *int                 `json:"duration,omitempty"`
	Id               *openapi_types.UUID  `json:"id,omitempty"`
	Name             *string              `json:"name,omitempty"`
	Region           *openapi_types.UUID  `json:"region,omitempty"`
}

// PatchedBucketACL defines model for PatchedBucketACL.
type PatchedBucketACL struct {
	// Acl The ACL of the object or bucket.
	Acl *AclEnum `json:"acl,omitempty"`
}

// PatchedCategory defines model for PatchedCategory.
type PatchedCategory struct {
	Description *string             `json:"description,omitempty"`
	IconCode    *int                `json:"icon_code"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Name        *string             `json:"name,omitempty"`
	Title       *string             `json:"title,omitempty"`
}

// PatchedCertificate Extract owner and project from request and update to serializer data
type PatchedCertificate struct {
	Certificate          *string             `json:"certificate,omitempty"`
	CommonName           *string             `json:"common_name"`
	CreatedAt            *time.Time          `json:"created_at,omitempty"`
	ExpiresOn            *time.Time          `json:"expires_on"`
	Id                   *openapi_types.UUID `json:"id,omitempty"`
	Intermediates        *string             `json:"intermediates,omitempty"`
	IssuedOn             *time.Time          `json:"issued_on"`
	Name                 *string             `json:"name,omitempty"`
	PrivateKey           *string             `json:"private_key,omitempty"`
	PrivateKeyPassphrase *string             `json:"private_key_passphrase,omitempty"`
	Region               *openapi_types.UUID `json:"region,omitempty"`
}

// PatchedExtendVolumeSize defines model for PatchedExtendVolumeSize.
type PatchedExtendVolumeSize struct {
	// NewSize DB Instance new disk size. Must be larger than current disk size
	NewSize *int `json:"new_size,omitempty"`
}

// PatchedFilesystemAccessRule Extract owner and project from request and update to serializer data
type PatchedFilesystemAccessRule struct {
	AccessLevel    *AccessLevelEnum               `json:"access_level,omitempty"`
	AccessTo       *string                        `json:"access_to,omitempty"`
	CreatedAt      *time.Time                     `json:"created_at,omitempty"`
	Filesystem     *openapi_types.UUID            `json:"filesystem,omitempty"`
	FilesystemName *string                        `json:"filesystem_name,omitempty"`
	Id             *openapi_types.UUID            `json:"id,omitempty"`
	Owner          *openapi_types.UUID            `json:"owner,omitempty"`
	Project        *openapi_types.UUID            `json:"project,omitempty"`
	State          *FilesystemAccessRuleStateEnum `json:"state,omitempty"`
	UpdatedAt      *time.Time                     `json:"updated_at,omitempty"`
}

// PatchedFilesystemSnapshotPolicyUpdate defines model for PatchedFilesystemSnapshotPolicyUpdate.
type PatchedFilesystemSnapshotPolicyUpdate struct {
	DaysOfWeek  *[]DaysOfWeekEnum     `json:"days_of_week,omitempty"`
	Description *string               `json:"description"`
	Name        *string               `json:"name,omitempty"`
	Retention   *int                  `json:"retention,omitempty"`
	Status      *VolumeTypeStatusEnum `json:"status,omitempty"`
	Time        *string               `json:"time,omitempty"`
	UpdatedAt   *time.Time            `json:"updated_at,omitempty"`
}

// PatchedFilesystemSnapshotUpdate defines model for PatchedFilesystemSnapshotUpdate.
type PatchedFilesystemSnapshotUpdate struct {
	Description *string    `json:"description"`
	Name        *string    `json:"name,omitempty"`
	UpdatedAt   *time.Time `json:"updated_at,omitempty"`
}

// PatchedFilesystemUpdate defines model for PatchedFilesystemUpdate.
type PatchedFilesystemUpdate struct {
	Description *string    `json:"description"`
	Name        *string    `json:"name,omitempty"`
	UpdatedAt   *time.Time `json:"updated_at,omitempty"`
}

// PatchedFlavorUpdate defines model for PatchedFlavorUpdate.
type PatchedFlavorUpdate struct {
	CreatedAt   *time.Time              `json:"created_at,omitempty"`
	Description *string                 `json:"description"`
	Family      *string                 `json:"family,omitempty"`
	Gpus        *int                    `json:"gpus,omitempty"`
	Id          *openapi_types.UUID     `json:"id,omitempty"`
	Metadata    *map[string]interface{} `json:"metadata"`
	Name        *string                 `json:"name,omitempty"`
	Ram         *int                    `json:"ram,omitempty"`
	Region      *openapi_types.UUID     `json:"region,omitempty"`
	Status      *FlavorStatusEnum       `json:"status,omitempty"`
	UpdatedAt   *time.Time              `json:"updated_at,omitempty"`
	Vcpus       *int                    `json:"vcpus,omitempty"`
	Zone        *openapi_types.UUID     `json:"zone,omitempty"`
}

// PatchedImageUpdate defines model for PatchedImageUpdate.
type PatchedImageUpdate struct {
	Description   *string                 `json:"description"`
	Metadata      *map[string]interface{} `json:"metadata"`
	MinVolumeSize *int                    `json:"min_volume_size,omitempty"`
	Name          *string                 `json:"name,omitempty"`
	Os            *string                 `json:"os,omitempty"`
	State         *ImageStateEnum         `json:"state,omitempty"`
	Version       *string                 `json:"version,omitempty"`
}

// PatchedKeypairUpdate defines model for PatchedKeypairUpdate.
type PatchedKeypairUpdate struct {
	Name *string `json:"name,omitempty"`
}

// PatchedL7PolicyUpdate Adds nested create feature
type PatchedL7PolicyUpdate struct {
	Action              *ActionE9cEnum                            `json:"action,omitempty"`
	CreatedAt           *time.Time                                `json:"created_at,omitempty"`
	Description         *string                                   `json:"description"`
	Id                  *openapi_types.UUID                       `json:"id,omitempty"`
	Listener            *openapi_types.UUID                       `json:"listener,omitempty"`
	Name                *string                                   `json:"name,omitempty"`
	Position            *int                                      `json:"position,omitempty"`
	ProvisioningStatus  *PatchedL7PolicyUpdate_ProvisioningStatus `json:"provisioning_status"`
	RedirectHttpCode    *int                                      `json:"redirect_http_code"`
	RedirectPrefix      *string                                   `json:"redirect_prefix"`
	RedirectServerGroup *openapi_types.UUID                       `json:"redirect_server_group"`
	RedirectUrl         *string                                   `json:"redirect_url"`
	Status              *PatchedL7PolicyUpdate_Status             `json:"status"`
	UpdatedAt           *time.Time                                `json:"updated_at,omitempty"`
}

// PatchedL7PolicyUpdate_ProvisioningStatus defines model for PatchedL7PolicyUpdate.ProvisioningStatus.
type PatchedL7PolicyUpdate_ProvisioningStatus struct {
	union json.RawMessage
}

// PatchedL7PolicyUpdate_Status defines model for PatchedL7PolicyUpdate.Status.
type PatchedL7PolicyUpdate_Status struct {
	union json.RawMessage
}

// PatchedL7RuleUpdate defines model for PatchedL7RuleUpdate.
type PatchedL7RuleUpdate struct {
	CompareType        *CompareTypeEnum                        `json:"compare_type,omitempty"`
	CreatedAt          *time.Time                              `json:"created_at,omitempty"`
	Id                 *openapi_types.UUID                     `json:"id,omitempty"`
	Invert             *bool                                   `json:"invert,omitempty"`
	Key                *string                                 `json:"key"`
	L7policy           *openapi_types.UUID                     `json:"l7policy,omitempty"`
	ProvisioningStatus *PatchedL7RuleUpdate_ProvisioningStatus `json:"provisioning_status"`
	Status             *PatchedL7RuleUpdate_Status             `json:"status"`
	Type               *TypeFc4Enum                            `json:"type,omitempty"`
	UpdatedAt          *time.Time                              `json:"updated_at,omitempty"`
	Value              *string                                 `json:"value,omitempty"`
}

// PatchedL7RuleUpdate_ProvisioningStatus defines model for PatchedL7RuleUpdate.ProvisioningStatus.
type PatchedL7RuleUpdate_ProvisioningStatus struct {
	union json.RawMessage
}

// PatchedL7RuleUpdate_Status defines model for PatchedL7RuleUpdate.Status.
type PatchedL7RuleUpdate_Status struct {
	union json.RawMessage
}

// PatchedLaunchTemplate Extract owner and project from request and update to serializer data
type PatchedLaunchTemplate struct {
	Description       *string                        `json:"description"`
	Flavor            *openapi_types.UUID            `json:"flavor"`
	Id                *openapi_types.UUID            `json:"id,omitempty"`
	Image             *openapi_types.UUID            `json:"image"`
	KeyPair           *openapi_types.UUID            `json:"key_pair"`
	Name              *string                        `json:"name,omitempty"`
	NetworkTemplates  *[]LaunchTemplateNetwork       `json:"network_templates,omitempty"`
	PlacementGroup    *openapi_types.UUID            `json:"placement_group"`
	Region            *openapi_types.UUID            `json:"region"`
	SecurityTemplates *[]LaunchTemplateSecurityGroup `json:"security_templates,omitempty"`
	UserData          *string                        `json:"user_data"`
	VolumeTemplates   *[]LaunchTemplateVolume        `json:"volume_templates,omitempty"`
	Zone              *openapi_types.UUID            `json:"zone"`
}

// PatchedListenerUpdate Adds nested create feature
type PatchedListenerUpdate struct {
	AllowedCidrs            *[]string                                 `json:"allowed_cidrs,omitempty"`
	DefaultTlsCert          *openapi_types.UUID                       `json:"default_tls_cert"`
	Description             *string                                   `json:"description"`
	Id                      *openapi_types.UUID                       `json:"id,omitempty"`
	ListenerTimeout         *int                                      `json:"listener_timeout,omitempty"`
	LoadBalancer            *openapi_types.UUID                       `json:"load_balancer,omitempty"`
	Name                    *string                                   `json:"name,omitempty"`
	Protocol                *LoadBalancingProtocolTypeEnum            `json:"protocol,omitempty"`
	ProtocolPort            *int                                      `json:"protocol_port,omitempty"`
	ProvisioningStatus      *PatchedListenerUpdate_ProvisioningStatus `json:"provisioning_status"`
	ServerConnectingTimeout *int                                      `json:"server_connecting_timeout,omitempty"`
	ServerGroup             *openapi_types.UUID                       `json:"server_group"`
	ServerTimeout           *int                                      `json:"server_timeout,omitempty"`
	SetXForwardedFor        *bool                                     `json:"set_x_forwarded_for"`
	SetXForwardedPort       *bool                                     `json:"set_x_forwarded_port"`
	SetXForwardedProto      *bool                                     `json:"set_x_forwarded_proto"`
	SniTlsCerts             *[]openapi_types.UUID                     `json:"sni_tls_certs,omitempty"`
	Status                  *PatchedListenerUpdate_Status             `json:"status"`
}

// PatchedListenerUpdate_ProvisioningStatus defines model for PatchedListenerUpdate.ProvisioningStatus.
type PatchedListenerUpdate_ProvisioningStatus struct {
	union json.RawMessage
}

// PatchedListenerUpdate_Status defines model for PatchedListenerUpdate.Status.
type PatchedListenerUpdate_Status struct {
	union json.RawMessage
}

// PatchedLoadBalancerUpdate defines model for PatchedLoadBalancerUpdate.
type PatchedLoadBalancerUpdate struct {
	Description        *string                                       `json:"description"`
	Id                 *openapi_types.UUID                           `json:"id,omitempty"`
	Name               *string                                       `json:"name,omitempty"`
	Package            *PackageEnum                                  `json:"package,omitempty"`
	ProvisioningStatus *PatchedLoadBalancerUpdate_ProvisioningStatus `json:"provisioning_status"`
	PublicAddress      *string                                       `json:"public_address"`
	Region             *openapi_types.UUID                           `json:"region,omitempty"`
	Status             *PatchedLoadBalancerUpdate_Status             `json:"status"`
	Topology           *TopologyEnum                                 `json:"topology,omitempty"`
	VipAddress         *string                                       `json:"vip_address"`
}

// PatchedLoadBalancerUpdate_ProvisioningStatus defines model for PatchedLoadBalancerUpdate.ProvisioningStatus.
type PatchedLoadBalancerUpdate_ProvisioningStatus struct {
	union json.RawMessage
}

// PatchedLoadBalancerUpdate_Status defines model for PatchedLoadBalancerUpdate.Status.
type PatchedLoadBalancerUpdate_Status struct {
	union json.RawMessage
}

// PatchedObjectAcl defines model for PatchedObjectAcl.
type PatchedObjectAcl struct {
	// Acl The ACL of the object or bucket.
	Acl *AclEnum `json:"acl,omitempty"`
}

// PatchedPlacementGroupUpdate defines model for PatchedPlacementGroupUpdate.
type PatchedPlacementGroupUpdate struct {
	Description *string `json:"description"`
	Name        *string `json:"name,omitempty"`
}

// PatchedPricingPlan defines model for PatchedPricingPlan.
type PatchedPricingPlan struct {
	Description  *string               `json:"description,omitempty"`
	Id           *openapi_types.UUID   `json:"id,omitempty"`
	PricingModel *PricingModelEnum     `json:"pricing_model,omitempty"`
	ProductPrice *[]NestedProductPrice `json:"product_price,omitempty"`
}

// PatchedPrivateIPUpdate defines model for PatchedPrivateIPUpdate.
type PatchedPrivateIPUpdate struct {
	Description *string `json:"description"`
}

// PatchedProduct Extends the built-in ModelSerializer to enforce calling full_clean()
// on a copy of the associated instance during validation.
// (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)
type PatchedProduct struct {
	Category    *[]openapi_types.UUID `json:"category,omitempty"`
	Description *string               `json:"description,omitempty"`
	Featured    *bool                 `json:"featured,omitempty"`
	Id          *openapi_types.UUID   `json:"id,omitempty"`
	Logo        *string               `json:"logo"`
	Name        *string               `json:"name,omitempty"`
	Overview    *string               `json:"overview,omitempty"`
	PricingPlan *openapi_types.UUID   `json:"pricing_plan"`
	Url         *string               `json:"url,omitempty"`
	Vendor      *openapi_types.UUID   `json:"vendor,omitempty"`
}

// PatchedProject defines model for PatchedProject.
type PatchedProject struct {
	Description *string             `json:"description,omitempty"`
	DisplayName *string             `json:"display_name,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Name        *string             `json:"name,omitempty"`
	Slug        *string             `json:"slug,omitempty"`
	Url         *string             `json:"url,omitempty"`
}

// PatchedProjectUser defines model for PatchedProjectUser.
type PatchedProjectUser struct {
	CreatedAt *time.Time          `json:"created_at,omitempty"`
	Id        *openapi_types.UUID `json:"id,omitempty"`

	// Role Member role
	Role      *Role520Enum `json:"role,omitempty"`
	UpdatedAt *time.Time   `json:"updated_at,omitempty"`
	User      *NestedUser  `json:"user,omitempty"`
}

// PatchedQuestionUpdate defines model for PatchedQuestionUpdate.
type PatchedQuestionUpdate struct {
	Status *QuestionStatusEnum `json:"status,omitempty"`
}

// PatchedRestore Extract owner and project from request and update to serializer data
type PatchedRestore struct {
	Backup  *openapi_types.UUID `json:"backup,omitempty"`
	Cluster *openapi_types.UUID `json:"cluster,omitempty"`
	Id      *openapi_types.UUID `json:"id,omitempty"`
	Name    *string             `json:"name,omitempty"`
}

// PatchedRouteTableUpdate defines model for PatchedRouteTableUpdate.
type PatchedRouteTableUpdate struct {
	Description *string `json:"description"`
}

// PatchedScalingGroupUpdate Extract owner and project from request and update to serializer data
type PatchedScalingGroupUpdate struct {
	Description      *string             `json:"description"`
	ExpectedInstance *int                `json:"expected_instance,omitempty"`
	MaxInstance      *int                `json:"max_instance,omitempty"`
	MinInstance      *int                `json:"min_instance,omitempty"`
	Name             *string             `json:"name,omitempty"`
	ServerGroup      *openapi_types.UUID `json:"server_group"`
	ServicePort      *int                `json:"service_port"`
	Template         *openapi_types.UUID `json:"template,omitempty"`
}

// PatchedScalingPolicyUpdate Adds nested create feature
type PatchedScalingPolicyUpdate struct {
	Cooldown *int                     `json:"cooldown,omitempty"`
	Duration *int                     `json:"duration,omitempty"`
	Id       *openapi_types.UUID      `json:"id,omitempty"`
	Rules    *[]ScalingQueryThreshold `json:"rules,omitempty"`
	Step     *int                     `json:"step,omitempty"`
	Type     *ScaleTypeEnum           `json:"type,omitempty"`
}

// PatchedScalingScheduleUpdate Adds nested create feature
type PatchedScalingScheduleUpdate struct {
	ExpectedInstance *int                    `json:"expected_instance,omitempty"`
	FromDate         *time.Time              `json:"from_date,omitempty"`
	FromMonthDay     *int                    `json:"from_month_day"`
	FromWeekDay      *int                    `json:"from_week_day"`
	Name             *string                 `json:"name,omitempty"`
	Repeat           *RepeatEnum             `json:"repeat,omitempty"`
	Status           *Status01cEnum          `json:"status,omitempty"`
	ToDate           *time.Time              `json:"to_date,omitempty"`
	ToMonthDay       *int                    `json:"to_month_day"`
	ToWeekDay        *int                    `json:"to_week_day"`
	WeekDays         *map[string]interface{} `json:"week_days"`
}

// PatchedSecretUpdate defines model for PatchedSecretUpdate.
type PatchedSecretUpdate struct {
	Secret *map[string]interface{} `json:"secret,omitempty"`
}

// PatchedSecurityGroupRuleUpdate defines model for PatchedSecurityGroupRuleUpdate.
type PatchedSecurityGroupRuleUpdate struct {
	Description *string `json:"description"`
}

// PatchedSecurityGroupUpdate defines model for PatchedSecurityGroupUpdate.
type PatchedSecurityGroupUpdate struct {
	Description *string `json:"description"`
	Name        *string `json:"name,omitempty"`
}

// PatchedServerGroupMemberUpdate defines model for PatchedServerGroupMemberUpdate.
type PatchedServerGroupMemberUpdate struct {
	Address            *string                                            `json:"address,omitempty"`
	Backup             *bool                                              `json:"backup,omitempty"`
	CreatedAt          *time.Time                                         `json:"created_at,omitempty"`
	Id                 *openapi_types.UUID                                `json:"id,omitempty"`
	Name               *string                                            `json:"name,omitempty"`
	ProtocolPort       *int                                               `json:"protocol_port,omitempty"`
	ProvisioningStatus *PatchedServerGroupMemberUpdate_ProvisioningStatus `json:"provisioning_status"`
	Status             *PatchedServerGroupMemberUpdate_Status             `json:"status"`
	UpdatedAt          *time.Time                                         `json:"updated_at,omitempty"`
	Weight             *int                                               `json:"weight,omitempty"`
}

// PatchedServerGroupMemberUpdate_ProvisioningStatus defines model for PatchedServerGroupMemberUpdate.ProvisioningStatus.
type PatchedServerGroupMemberUpdate_ProvisioningStatus struct {
	union json.RawMessage
}

// PatchedServerGroupMemberUpdate_Status defines model for PatchedServerGroupMemberUpdate.Status.
type PatchedServerGroupMemberUpdate_Status struct {
	union json.RawMessage
}

// PatchedServerGroupUpdate Adds nested create feature
type PatchedServerGroupUpdate struct {
	Algorithm                    *AlgorithmEnum                                   `json:"algorithm,omitempty"`
	CreatedAt                    *time.Time                                       `json:"created_at,omitempty"`
	Description                  *string                                          `json:"description"`
	EnableHealthCheck            *bool                                            `json:"enable_health_check,omitempty"`
	Id                           *openapi_types.UUID                              `json:"id,omitempty"`
	LoadBalancer                 *openapi_types.UUID                              `json:"load_balancer,omitempty"`
	MonitorDelay                 *int                                             `json:"monitor_delay"`
	MonitorExpectedCodes         *string                                          `json:"monitor_expected_codes"`
	MonitorHttpMethod            *PatchedServerGroupUpdate_MonitorHttpMethod      `json:"monitor_http_method"`
	MonitorMaxRetries            *int                                             `json:"monitor_max_retries"`
	MonitorMaxRetriesDown        *int                                             `json:"monitor_max_retries_down"`
	MonitorPath                  *string                                          `json:"monitor_path"`
	MonitorTimeout               *int                                             `json:"monitor_timeout"`
	MonitorType                  *PatchedServerGroupUpdate_MonitorType            `json:"monitor_type"`
	Name                         *string                                          `json:"name,omitempty"`
	Protocol                     *LoadBalancingProtocolTypeEnum                   `json:"protocol,omitempty"`
	ProvisioningStatus           *PatchedServerGroupUpdate_ProvisioningStatus     `json:"provisioning_status"`
	SessionPersistenceCookieName *string                                          `json:"session_persistence_cookie_name"`
	SessionPersistenceType       *PatchedServerGroupUpdate_SessionPersistenceType `json:"session_persistence_type"`
	Status                       *PatchedServerGroupUpdate_Status                 `json:"status"`
	UpdatedAt                    *time.Time                                       `json:"updated_at,omitempty"`
}

// PatchedServerGroupUpdate_MonitorHttpMethod defines model for PatchedServerGroupUpdate.MonitorHttpMethod.
type PatchedServerGroupUpdate_MonitorHttpMethod struct {
	union json.RawMessage
}

// PatchedServerGroupUpdate_MonitorType defines model for PatchedServerGroupUpdate.MonitorType.
type PatchedServerGroupUpdate_MonitorType struct {
	union json.RawMessage
}

// PatchedServerGroupUpdate_ProvisioningStatus defines model for PatchedServerGroupUpdate.ProvisioningStatus.
type PatchedServerGroupUpdate_ProvisioningStatus struct {
	union json.RawMessage
}

// PatchedServerGroupUpdate_SessionPersistenceType defines model for PatchedServerGroupUpdate.SessionPersistenceType.
type PatchedServerGroupUpdate_SessionPersistenceType struct {
	union json.RawMessage
}

// PatchedServerGroupUpdate_Status defines model for PatchedServerGroupUpdate.Status.
type PatchedServerGroupUpdate_Status struct {
	union json.RawMessage
}

// PatchedService defines model for PatchedService.
type PatchedService struct {
	Category    *openapi_types.UUID `json:"category,omitempty"`
	Description *string             `json:"description"`
	IconCode    *int                `json:"icon_code,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Name        *string             `json:"name,omitempty"`
	Url         *string             `json:"url,omitempty"`
}

// PatchedSnapshotPolicyUpdate defines model for PatchedSnapshotPolicyUpdate.
type PatchedSnapshotPolicyUpdate struct {
	DaysOfWeek  *[]DaysOfWeekEnum     `json:"days_of_week,omitempty"`
	Description *string               `json:"description"`
	Name        *string               `json:"name,omitempty"`
	Retention   *int                  `json:"retention,omitempty"`
	Status      *VolumeTypeStatusEnum `json:"status,omitempty"`
	Time        *string               `json:"time,omitempty"`
	UpdatedAt   *time.Time            `json:"updated_at,omitempty"`
}

// PatchedSnapshotUpdate defines model for PatchedSnapshotUpdate.
type PatchedSnapshotUpdate struct {
	Description *string    `json:"description"`
	Name        *string    `json:"name,omitempty"`
	UpdatedAt   *time.Time `json:"updated_at,omitempty"`
}

// PatchedSubnetUpdate defines model for PatchedSubnetUpdate.
type PatchedSubnetUpdate struct {
	Description *string `json:"description"`
	Name        *string `json:"name,omitempty"`
}

// PatchedUpdateBackupPolicy defines model for PatchedUpdateBackupPolicy.
type PatchedUpdateBackupPolicy struct {
	BackupInterval   *BackupIntervalEnum `json:"backup_interval,omitempty"`
	DayOfWeek        *DayOfWeekEnum      `json:"day_of_week,omitempty"`
	EnableAutoBackup *bool               `json:"enable_auto_backup,omitempty"`
	MaxAutoBackup    *int                `json:"max_auto_backup,omitempty"`
	StartHour        *int                `json:"start_hour,omitempty"`
}

// PatchedUpdateFlavor defines model for PatchedUpdateFlavor.
type PatchedUpdateFlavor struct {
	NewFlavor *openapi_types.UUID `json:"new_flavor,omitempty"`
}

// PatchedUpdateKeepBackupPolicy Setup keep Backups or not when delete this DB Instance
type PatchedUpdateKeepBackupPolicy struct {
	KeepBackup *bool `json:"keep_backup,omitempty"`
}

// PatchedUpdateRootPassword defines model for PatchedUpdateRootPassword.
type PatchedUpdateRootPassword struct {
	NewRootPassword *string `json:"new_root_password,omitempty"`
}

// PatchedUpdateServer defines model for PatchedUpdateServer.
type PatchedUpdateServer struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// PatchedUserUpdate defines model for PatchedUserUpdate.
type PatchedUserUpdate struct {
	FirstName *string             `json:"first_name,omitempty"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
	LastName  *string             `json:"last_name,omitempty"`
}

// PatchedVKEClusterUpdate Extract owner and project from request and update to serializer data
type PatchedVKEClusterUpdate struct {
	ControlPlaneReplicas *int                `json:"control_plane_replicas,omitempty"`
	EnableBackup         *bool               `json:"enable_backup,omitempty"`
	Version              *openapi_types.UUID `json:"version,omitempty"`
}

// PatchedVPCUpdate defines model for PatchedVPCUpdate.
type PatchedVPCUpdate struct {
	Description *string `json:"description"`
	Name        *string `json:"name,omitempty"`
}

// PatchedVendor defines model for PatchedVendor.
type PatchedVendor struct {
	Description *string             `json:"description,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Name        *string             `json:"name,omitempty"`
	Title       *string             `json:"title,omitempty"`
}

// PatchedVkeNodePoolUpdate Extract owner and project from request and update to serializer data
type PatchedVkeNodePoolUpdate struct {
	EnableAutoscaler *bool               `json:"enable_autoscaler,omitempty"`
	MaxSize          *int                `json:"max_size"`
	MinSize          *int                `json:"min_size"`
	Owner            *openapi_types.UUID `json:"owner,omitempty"`
	Project          *openapi_types.UUID `json:"project,omitempty"`
	Replicas         *int                `json:"replicas"`
}

// PatchedVolumeBackupPolicyUpdate Extract owner and project from request and update to serializer data
type PatchedVolumeBackupPolicyUpdate struct {
	DaysOfMonth       *[]int                                         `json:"days_of_month,omitempty"`
	Description       *string                                        `json:"description"`
	ExecutionStrategy *ExecutionStrategyEnum                         `json:"execution_strategy,omitempty"`
	FirstExecution    *time.Time                                     `json:"first_execution"`
	Frequency         *int                                           `json:"frequency"`
	FrequencyUnit     *PatchedVolumeBackupPolicyUpdate_FrequencyUnit `json:"frequency_unit"`
	Name              *string                                        `json:"name,omitempty"`
	Retention         *int                                           `json:"retention,omitempty"`
	Status            *VolumeTypeStatusEnum                          `json:"status,omitempty"`
	Time              *string                                        `json:"time"`
	UpdatedAt         *time.Time                                     `json:"updated_at,omitempty"`
}

// PatchedVolumeBackupPolicyUpdate_FrequencyUnit defines model for PatchedVolumeBackupPolicyUpdate.FrequencyUnit.
type PatchedVolumeBackupPolicyUpdate_FrequencyUnit struct {
	union json.RawMessage
}

// PatchedVolumeBackupUpdate defines model for PatchedVolumeBackupUpdate.
type PatchedVolumeBackupUpdate struct {
	Description *string    `json:"description"`
	Name        *string    `json:"name,omitempty"`
	UpdatedAt   *time.Time `json:"updated_at,omitempty"`
}

// PatchedVolumeTypeUpdate defines model for PatchedVolumeTypeUpdate.
type PatchedVolumeTypeUpdate struct {
	Description    *string               `json:"description"`
	DisabledReason *string               `json:"disabled_reason"`
	Name           *string               `json:"name,omitempty"`
	Status         *VolumeTypeStatusEnum `json:"status,omitempty"`
	UpdatedAt      *time.Time            `json:"updated_at,omitempty"`
}

// PatchedVolumeUpdate defines model for PatchedVolumeUpdate.
type PatchedVolumeUpdate struct {
	Description *string    `json:"description"`
	Name        *string    `json:"name,omitempty"`
	UpdatedAt   *time.Time `json:"updated_at,omitempty"`
}

// PlacementGroup defines model for PlacementGroup.
type PlacementGroup struct {
	CreatedAt   *time.Time             `json:"created_at,omitempty"`
	Description *string                `json:"description"`
	DisplayName *string                `json:"display_name,omitempty"`
	Id          *openapi_types.UUID    `json:"id,omitempty"`
	Name        string                 `json:"name"`
	Owner       *openapi_types.UUID    `json:"owner,omitempty"`
	Policy      *PlacementGroup_Policy `json:"policy"`
	Project     *openapi_types.UUID    `json:"project,omitempty"`
	Region      openapi_types.UUID     `json:"region"`
	ServerCount *int                   `json:"server_count,omitempty"`
	UpdatedAt   *time.Time             `json:"updated_at,omitempty"`
}

// PlacementGroup_Policy defines model for PlacementGroup.Policy.
type PlacementGroup_Policy struct {
	union json.RawMessage
}

// PlacementGroupUpdate defines model for PlacementGroupUpdate.
type PlacementGroupUpdate struct {
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// PlanTemplatePaymentOption defines model for PlanTemplatePaymentOption.
type PlanTemplatePaymentOption struct {
	Period int    `json:"period"`
	Price  string `json:"price"`
}

// PolicyEnum defines model for PolicyEnum.
type PolicyEnum string

// PowerStateEnum defines model for PowerStateEnum.
type PowerStateEnum string

// PricingModelEnum defines model for PricingModelEnum.
type PricingModelEnum string

// PricingPlan defines model for PricingPlan.
type PricingPlan struct {
	Description  *string              `json:"description,omitempty"`
	Id           *openapi_types.UUID  `json:"id,omitempty"`
	PricingModel PricingModelEnum     `json:"pricing_model"`
	ProductPrice []NestedProductPrice `json:"product_price"`
}

// PrivateIP Extract owner and project from request and update to serializer data
type PrivateIP struct {
	CreatedAt   *time.Time             `json:"created_at,omitempty"`
	Description *string                `json:"description"`
	DeviceOwner *PrivateIP_DeviceOwner `json:"device_owner"`
	DisplayName *string                `json:"display_name,omitempty"`
	Id          *openapi_types.UUID    `json:"id,omitempty"`
	IpAddress   *string                `json:"ip_address"`
	MacAddress  *string                `json:"mac_address"`
	Owner       openapi_types.UUID     `json:"owner"`
	Project     *openapi_types.UUID    `json:"project,omitempty"`
	Region      *string                `json:"region,omitempty"`
	Server      *NestedServer          `json:"server,omitempty"`
	Subnet      openapi_types.UUID     `json:"subnet"`
	UpdatedAt   *time.Time             `json:"updated_at,omitempty"`
}

// PrivateIP_DeviceOwner defines model for PrivateIP.DeviceOwner.
type PrivateIP_DeviceOwner struct {
	union json.RawMessage
}

// PrivateIPCreate Extract owner and project from request and update to serializer data
type PrivateIPCreate struct {
	CreatedAt   *time.Time          `json:"created_at,omitempty"`
	Description *string             `json:"description"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	IpAddress   *string             `json:"ip_address"`
	MacAddress  *string             `json:"mac_address"`
	Owner       *openapi_types.UUID `json:"owner,omitempty"`
	Project     *openapi_types.UUID `json:"project,omitempty"`
	Region      *string             `json:"region,omitempty"`
	Server      *openapi_types.UUID `json:"server"`
	Subnet      openapi_types.UUID  `json:"subnet"`
	UpdatedAt   *time.Time          `json:"updated_at,omitempty"`
}

// PrivateIPUpdate defines model for PrivateIPUpdate.
type PrivateIPUpdate struct {
	Description *string `json:"description"`
}

// Product Extends the built-in ModelSerializer to enforce calling full_clean()
// on a copy of the associated instance during validation.
// (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)
type Product struct {
	Category    []openapi_types.UUID `json:"category"`
	Description *string              `json:"description,omitempty"`
	Featured    *bool                `json:"featured,omitempty"`
	Id          *openapi_types.UUID  `json:"id,omitempty"`
	Logo        *string              `json:"logo"`
	Name        string               `json:"name"`
	Overview    *string              `json:"overview,omitempty"`
	PricingPlan *openapi_types.UUID  `json:"pricing_plan"`
	Url         *string              `json:"url,omitempty"`
	Vendor      openapi_types.UUID   `json:"vendor"`
}

// ProductDetail Extends the built-in ModelSerializer to enforce calling full_clean()
// on a copy of the associated instance during validation.
// (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)
type ProductDetail struct {
	Category    *[]Category         `json:"category,omitempty"`
	Description *string             `json:"description,omitempty"`
	Featured    *bool               `json:"featured,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Logo        *string             `json:"logo"`
	Name        string              `json:"name"`
	Overview    *string             `json:"overview,omitempty"`
	PricingPlan *PricingPlan        `json:"pricing_plan,omitempty"`
	UpdatedAt   *time.Time          `json:"updated_at,omitempty"`
	Url         *string             `json:"url,omitempty"`
	Vendor      *Vendor             `json:"vendor,omitempty"`
}

// Project defines model for Project.
type Project struct {
	Description *string             `json:"description,omitempty"`
	DisplayName *string             `json:"display_name,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Name        string              `json:"name"`
	Slug        *string             `json:"slug,omitempty"`
	Url         *string             `json:"url,omitempty"`
}

// ProjectAccept defines model for ProjectAccept.
type ProjectAccept struct {
	// Key The invitation key sent to user
	Key string `json:"key"`
}

// ProjectAcceptResponse defines model for ProjectAcceptResponse.
type ProjectAcceptResponse struct {
	ProjectId openapi_types.UUID `json:"project_id"`
}

// ProjectInvitation defines model for ProjectInvitation.
type ProjectInvitation struct {
	Email openapi_types.Email `json:"email"`
	Role  Role520Enum         `json:"role"`
}

// ProjectLog The container registry project log
type ProjectLog struct {
	Operation    *string    `json:"operation,omitempty"`
	Resource     *string    `json:"resource,omitempty"`
	ResourceType *string    `json:"resource_type,omitempty"`
	Timestamp    *time.Time `json:"timestamp,omitempty"`
	Username     *string    `json:"username,omitempty"`
}

// ProjectQuota The container registry project quota
type ProjectQuota struct {
	Total *int `json:"total,omitempty"`
	Used  *int `json:"used,omitempty"`
}

// ProjectUser defines model for ProjectUser.
type ProjectUser struct {
	CreatedAt *time.Time          `json:"created_at,omitempty"`
	Id        *openapi_types.UUID `json:"id,omitempty"`

	// Role Member role
	Role      Role520Enum `json:"role"`
	UpdatedAt *time.Time  `json:"updated_at,omitempty"`
	User      *NestedUser `json:"user,omitempty"`
}

// ProtocolAb6Enum defines model for ProtocolAb6Enum.
type ProtocolAb6Enum string

// ProtocolEnum defines model for ProtocolEnum.
type ProtocolEnum string

// Question defines model for Question.
type Question struct {
	CreatedAt    *time.Time          `json:"created_at,omitempty"`
	CustomerName string              `json:"customer_name"`
	Email        openapi_types.Email `json:"email"`
	Id           *openapi_types.UUID `json:"id,omitempty"`
	Question     string              `json:"question"`
	Status       *Question_Status    `json:"status"`
	UpdatedAt    *time.Time          `json:"updated_at,omitempty"`
	Url          *string             `json:"url,omitempty"`
	User         *openapi_types.UUID `json:"user,omitempty"`
}

// Question_Status defines model for Question.Status.
type Question_Status struct {
	union json.RawMessage
}

// QuestionStatusEnum defines model for QuestionStatusEnum.
type QuestionStatusEnum string

// QuestionUpdate defines model for QuestionUpdate.
type QuestionUpdate struct {
	Status QuestionStatusEnum `json:"status"`
}

// RedirectAllRequestsToCreate defines model for RedirectAllRequestsToCreate.
type RedirectAllRequestsToCreate struct {
	// HostName The object key name to use when a 4XX class error occurs.
	HostName string `json:"HostName"`

	// Protocol Protocol to use when redirecting requests. The default is the protocol that is used in the original request.
	Protocol *ProtocolEnum `json:"Protocol,omitempty"`
}

// RedirectAllRequestsToShow defines model for RedirectAllRequestsToShow.
type RedirectAllRequestsToShow struct {
	// HostName The hostname to be used in the Location header that is returned in the response.
	HostName string `json:"HostName"`

	// Protocol Protocol to use when redirecting requests. The default is the protocol that is used in the original request.
	Protocol *string `json:"Protocol,omitempty"`
}

// Region defines model for Region.
type Region struct {
	Description *string             `json:"description,omitempty"`
	DisplayName *string             `json:"display_name,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Name        string              `json:"name"`
	Url         *string             `json:"url,omitempty"`
}

// RepeatEnum defines model for RepeatEnum.
type RepeatEnum string

// RequestServerPrivateIP defines model for RequestServerPrivateIP.
type RequestServerPrivateIP struct {
	Privateip openapi_types.UUID `json:"privateip"`
}

// RequestServerSubnetAttachment defines model for RequestServerSubnetAttachment.
type RequestServerSubnetAttachment struct {
	Subnet openapi_types.UUID `json:"subnet"`
}

// ResizeServer defines model for ResizeServer.
type ResizeServer struct {
	Flavor openapi_types.UUID `json:"flavor"`
}

// Restore Extract owner and project from request and update to serializer data
type Restore struct {
	Backup  openapi_types.UUID  `json:"backup"`
	Cluster openapi_types.UUID  `json:"cluster"`
	Id      *openapi_types.UUID `json:"id,omitempty"`
	Name    string              `json:"name"`
}

// RestoreDetail Extract owner and project from request and update to serializer data
type RestoreDetail struct {
	Backup    NestedBackup          `json:"backup"`
	Cluster   NestedVKECluster      `json:"cluster"`
	CreatedAt *time.Time            `json:"created_at,omitempty"`
	Id        *openapi_types.UUID   `json:"id,omitempty"`
	Name      string                `json:"name"`
	Slug      *string               `json:"slug,omitempty"`
	Status    *RestoreDetail_Status `json:"status"`
	UpdatedAt *time.Time            `json:"updated_at,omitempty"`
	Url       *string               `json:"url,omitempty"`
}

// RestoreDetail_Status defines model for RestoreDetail.Status.
type RestoreDetail_Status struct {
	union json.RawMessage
}

// Role520Enum defines model for Role520Enum.
type Role520Enum string

// RouteTable Extract owner and project from request and update to serializer data
type RouteTable struct {
	CreatedAt      *time.Time          `json:"created_at,omitempty"`
	Description    *string             `json:"description"`
	DisplayName    *string             `json:"display_name,omitempty"`
	Id             *openapi_types.UUID `json:"id,omitempty"`
	InternetAccess *bool               `json:"internet_access,omitempty"`
	Name           string              `json:"name"`
	Owner          *openapi_types.UUID `json:"owner,omitempty"`
	Project        *openapi_types.UUID `json:"project,omitempty"`
	Region         openapi_types.UUID  `json:"region"`
	UpdatedAt      *time.Time          `json:"updated_at,omitempty"`
	Vpc            *NestedVPC          `json:"vpc,omitempty"`
}

// RouteTableUpdate defines model for RouteTableUpdate.
type RouteTableUpdate struct {
	Description *string `json:"description"`
}

// S3Key defines model for S3Key.
type S3Key struct {
	// AccessKey The S3 access key string.
	AccessKey string `json:"access_key"`

	// SecretKey The S3 secret key string.
	SecretKey string `json:"secret_key"`
}

// SGREtherTypeEnum defines model for SGREtherTypeEnum.
type SGREtherTypeEnum string

// ScaleTypeEnum defines model for ScaleTypeEnum.
type ScaleTypeEnum string

// ScalingAction Extract owner and project from request and update to serializer data
type ScalingAction struct {
	Action          *ScalingAction_Action `json:"action"`
	EventTime       *time.Time            `json:"event_time,omitempty"`
	Id              *openapi_types.UUID   `json:"id,omitempty"`
	NewInstance     int                   `json:"new_instance"`
	OldInstance     int                   `json:"old_instance"`
	Region          openapi_types.UUID    `json:"region"`
	ScalingGroup    openapi_types.UUID    `json:"scaling_group"`
	ScalingPolicy   *openapi_types.UUID   `json:"scaling_policy"`
	ScalingSchedule *openapi_types.UUID   `json:"scaling_schedule"`
}

// ScalingAction_Action defines model for ScalingAction.Action.
type ScalingAction_Action struct {
	union json.RawMessage
}

// ScalingGroup Extract owner and project from request and update to serializer data
type ScalingGroup struct {
	Description      *string                  `json:"description"`
	ExpectedInstance int                      `json:"expected_instance"`
	Id               *openapi_types.UUID      `json:"id,omitempty"`
	MaxInstance      int                      `json:"max_instance"`
	MinInstance      int                      `json:"min_instance"`
	Name             string                   `json:"name"`
	Region           openapi_types.UUID       `json:"region"`
	ScalingPolicies  *[]NestedScalingPolicy   `json:"scaling_policies,omitempty"`
	ScalingSchedules *[]NestedScalingSchedule `json:"scaling_schedules,omitempty"`
	ServerGroup      *openapi_types.UUID      `json:"server_group"`
	ServicePort      *int                     `json:"service_port"`
	Template         openapi_types.UUID       `json:"template"`
}

// ScalingGroupDetail defines model for ScalingGroupDetail.
type ScalingGroupDetail struct {
	CreatedAt        *time.Time              `json:"created_at,omitempty"`
	CurrentInstance  *int                    `json:"current_instance,omitempty"`
	Description      *string                 `json:"description"`
	DisplayName      *string                 `json:"display_name,omitempty"`
	ExpectedInstance int                     `json:"expected_instance"`
	Id               *openapi_types.UUID     `json:"id,omitempty"`
	IdentifyString   *string                 `json:"identify_string"`
	LoadBalancerName *string                 `json:"load_balancer_name,omitempty"`
	MaxInstance      int                     `json:"max_instance"`
	MinInstance      int                     `json:"min_instance"`
	Name             string                  `json:"name"`
	Region           *string                 `json:"region,omitempty"`
	ScalingServers   *[]ScalingServer        `json:"scaling_servers,omitempty"`
	ServerGroup      *string                 `json:"server_group,omitempty"`
	ServerGroupId    *openapi_types.UUID     `json:"server_group_id,omitempty"`
	ServicePort      *int                    `json:"service_port"`
	Status           *ScalingGroupStatusEnum `json:"status,omitempty"`
	Template         *string                 `json:"template,omitempty"`
	TemplateId       *openapi_types.UUID     `json:"template_id,omitempty"`
	UpdatedAt        *time.Time              `json:"updated_at,omitempty"`
}

// ScalingGroupList defines model for ScalingGroupList.
type ScalingGroupList struct {
	CreatedAt        *time.Time              `json:"created_at,omitempty"`
	CurrentInstance  *int                    `json:"current_instance,omitempty"`
	ExpectedInstance int                     `json:"expected_instance"`
	Id               *openapi_types.UUID     `json:"id,omitempty"`
	LoadBalancerId   *openapi_types.UUID     `json:"load_balancer_id,omitempty"`
	LoadBalancerName *string                 `json:"load_balancer_name,omitempty"`
	MaxInstance      int                     `json:"max_instance"`
	MinInstance      int                     `json:"min_instance"`
	Name             string                  `json:"name"`
	Region           *string                 `json:"region,omitempty"`
	ServerGroupId    *openapi_types.UUID     `json:"server_group_id,omitempty"`
	Status           *ScalingGroupStatusEnum `json:"status,omitempty"`
	Template         *string                 `json:"template,omitempty"`
	TemplateId       *openapi_types.UUID     `json:"template_id,omitempty"`
	UpdatedAt        *time.Time              `json:"updated_at,omitempty"`
}

// ScalingGroupStatusEnum defines model for ScalingGroupStatusEnum.
type ScalingGroupStatusEnum string

// ScalingGroupUpdate Extract owner and project from request and update to serializer data
type ScalingGroupUpdate struct {
	Description      *string             `json:"description"`
	ExpectedInstance int                 `json:"expected_instance"`
	MaxInstance      int                 `json:"max_instance"`
	MinInstance      int                 `json:"min_instance"`
	Name             *string             `json:"name,omitempty"`
	ServerGroup      *openapi_types.UUID `json:"server_group"`
	ServicePort      *int                `json:"service_port"`
	Template         *openapi_types.UUID `json:"template,omitempty"`
}

// ScalingPolicy Adds nested create feature
type ScalingPolicy struct {
	Cooldown     int                     `json:"cooldown"`
	Duration     int                     `json:"duration"`
	Id           *openapi_types.UUID     `json:"id,omitempty"`
	Region       *openapi_types.UUID     `json:"region,omitempty"`
	Rules        []ScalingQueryThreshold `json:"rules"`
	ScalingGroup openapi_types.UUID      `json:"scaling_group"`
	Step         *int                    `json:"step,omitempty"`
	Type         ScaleTypeEnum           `json:"type"`
}

// ScalingPolicyDetail defines model for ScalingPolicyDetail.
type ScalingPolicyDetail struct {
	Cooldown int                     `json:"cooldown"`
	Duration int                     `json:"duration"`
	Id       *openapi_types.UUID     `json:"id,omitempty"`
	Rules    []ScalingQueryThreshold `json:"rules"`
	Step     *int                    `json:"step,omitempty"`
	Type     ScaleTypeEnum           `json:"type"`
}

// ScalingPolicyList Adds nested create feature
type ScalingPolicyList struct {
	Cooldown   int                     `json:"cooldown"`
	Duration   int                     `json:"duration"`
	Id         *openapi_types.UUID     `json:"id,omitempty"`
	Region     *string                 `json:"region,omitempty"`
	Rules      []ScalingQueryThreshold `json:"rules"`
	RulesCount *int                    `json:"rules_count,omitempty"`
	Step       *int                    `json:"step,omitempty"`
	Type       ScaleTypeEnum           `json:"type"`
}

// ScalingPolicyUpdate Adds nested create feature
type ScalingPolicyUpdate struct {
	Cooldown int                     `json:"cooldown"`
	Duration int                     `json:"duration"`
	Id       *openapi_types.UUID     `json:"id,omitempty"`
	Rules    []ScalingQueryThreshold `json:"rules"`
	Step     *int                    `json:"step,omitempty"`
	Type     ScaleTypeEnum           `json:"type"`
}

// ScalingQuery defines model for ScalingQuery.
type ScalingQuery struct {
	Id   *openapi_types.UUID `json:"id,omitempty"`
	Name string              `json:"name"`
}

// ScalingQueryThreshold defines model for ScalingQueryThreshold.
type ScalingQueryThreshold struct {
	Id        *openapi_types.UUID `json:"id,omitempty"`
	Query     openapi_types.UUID  `json:"query"`
	QueryName *string             `json:"query_name,omitempty"`
	Threshold int                 `json:"threshold"`
}

// ScalingSchedule Adds nested create feature
type ScalingSchedule struct {
	ExpectedInstance int                     `json:"expected_instance"`
	FromDate         time.Time               `json:"from_date"`
	FromMonthDay     *int                    `json:"from_month_day"`
	FromWeekDay      *int                    `json:"from_week_day"`
	Id               *openapi_types.UUID     `json:"id,omitempty"`
	Name             string                  `json:"name"`
	Region           *openapi_types.UUID     `json:"region,omitempty"`
	Repeat           RepeatEnum              `json:"repeat"`
	ScalingGroup     openapi_types.UUID      `json:"scaling_group"`
	Status           *Status01cEnum          `json:"status,omitempty"`
	ToDate           time.Time               `json:"to_date"`
	ToMonthDay       *int                    `json:"to_month_day"`
	ToWeekDay        *int                    `json:"to_week_day"`
	WeekDays         *map[string]interface{} `json:"week_days"`
}

// ScalingScheduleList Adds nested create feature
type ScalingScheduleList struct {
	ExpectedInstance int                     `json:"expected_instance"`
	FromDate         time.Time               `json:"from_date"`
	FromMonthDay     *int                    `json:"from_month_day"`
	FromWeekDay      *int                    `json:"from_week_day"`
	Id               *openapi_types.UUID     `json:"id,omitempty"`
	Name             string                  `json:"name"`
	Region           *string                 `json:"region,omitempty"`
	Repeat           RepeatEnum              `json:"repeat"`
	Status           *Status01cEnum          `json:"status,omitempty"`
	ToDate           time.Time               `json:"to_date"`
	ToMonthDay       *int                    `json:"to_month_day"`
	ToWeekDay        *int                    `json:"to_week_day"`
	WeekDays         *map[string]interface{} `json:"week_days"`
}

// ScalingScheduleUpdate Adds nested create feature
type ScalingScheduleUpdate struct {
	ExpectedInstance int                     `json:"expected_instance"`
	FromDate         time.Time               `json:"from_date"`
	FromMonthDay     *int                    `json:"from_month_day"`
	FromWeekDay      *int                    `json:"from_week_day"`
	Name             string                  `json:"name"`
	Repeat           RepeatEnum              `json:"repeat"`
	Status           *Status01cEnum          `json:"status,omitempty"`
	ToDate           time.Time               `json:"to_date"`
	ToMonthDay       *int                    `json:"to_month_day"`
	ToWeekDay        *int                    `json:"to_week_day"`
	WeekDays         *map[string]interface{} `json:"week_days"`
}

// ScalingServer Extract owner and project from request and update to serializer data
type ScalingServer struct {
	Addresses map[string]interface{} `json:"addresses"`
	Id        *openapi_types.UUID    `json:"id,omitempty"`
	Name      string                 `json:"name"`
	Region    openapi_types.UUID     `json:"region"`
	RemovedAt *time.Time             `json:"removed_at"`
	StartedAt *time.Time             `json:"started_at"`
	Status    *ScalingServer_Status  `json:"status"`
}

// ScalingServer_Status defines model for ScalingServer.Status.
type ScalingServer_Status struct {
	union json.RawMessage
}

// ScalingServerStatusEnum defines model for ScalingServerStatusEnum.
type ScalingServerStatusEnum string

// Secret Extract owner and project from request and update to serializer data
type Secret struct {
	CreatedAt *time.Time              `json:"created_at,omitempty"`
	Id        *openapi_types.UUID     `json:"id,omitempty"`
	Name      string                  `json:"name"`
	Secret    *map[string]interface{} `json:"secret,omitempty"`
}

// SecretList defines model for SecretList.
type SecretList struct {
	CreatedAt *time.Time          `json:"created_at,omitempty"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
	Name      string              `json:"name"`
}

// SecretRetrieve defines model for SecretRetrieve.
type SecretRetrieve struct {
	CreatedAt *time.Time              `json:"created_at,omitempty"`
	Id        *openapi_types.UUID     `json:"id,omitempty"`
	Metadata  *map[string]interface{} `json:"metadata,omitempty"`
	Name      string                  `json:"name"`
	Secret    *map[string]interface{} `json:"secret,omitempty"`
}

// SecretUpdate defines model for SecretUpdate.
type SecretUpdate struct {
	Secret *map[string]interface{} `json:"secret,omitempty"`
}

// SecurityGroup Extract owner and project from request and update to serializer data
type SecurityGroup struct {
	CreatedAt   *time.Time          `json:"created_at,omitempty"`
	Description *string             `json:"description"`
	DisplayName *string             `json:"display_name,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Name        string              `json:"name"`
	Owner       *openapi_types.UUID `json:"owner"`
	Project     *openapi_types.UUID `json:"project,omitempty"`
	Region      openapi_types.UUID  `json:"region"`
	UpdatedAt   *time.Time          `json:"updated_at,omitempty"`
}

// SecurityGroupRule Extract owner and project from request and update to serializer data
type SecurityGroupRule struct {
	CloudObjectId  *string                      `json:"cloud_object_id"`
	CreatedAt      *time.Time                   `json:"created_at,omitempty"`
	Description    *string                      `json:"description"`
	Direction      DirectionEnum                `json:"direction"`
	DisplayName    *string                      `json:"display_name,omitempty"`
	Ethertype      *SecurityGroupRule_Ethertype `json:"ethertype"`
	Id             *openapi_types.UUID          `json:"id,omitempty"`
	Owner          *openapi_types.UUID          `json:"owner"`
	PortRangeMax   *int                         `json:"port_range_max"`
	PortRangeMin   *int                         `json:"port_range_min"`
	Project        *openapi_types.UUID          `json:"project,omitempty"`
	Protocol       *SecurityGroupRule_Protocol  `json:"protocol"`
	RemoteGroup    *openapi_types.UUID          `json:"remote_group"`
	RemoteIpPrefix *string                      `json:"remote_ip_prefix"`
	SecurityGroup  openapi_types.UUID           `json:"security_group"`
	UpdatedAt      *time.Time                   `json:"updated_at,omitempty"`
}

// SecurityGroupRule_Ethertype defines model for SecurityGroupRule.Ethertype.
type SecurityGroupRule_Ethertype struct {
	union json.RawMessage
}

// SecurityGroupRule_Protocol defines model for SecurityGroupRule.Protocol.
type SecurityGroupRule_Protocol struct {
	union json.RawMessage
}

// SecurityGroupRuleProtocolEnum defines model for SecurityGroupRuleProtocolEnum.
type SecurityGroupRuleProtocolEnum string

// SecurityGroupRuleUpdate defines model for SecurityGroupRuleUpdate.
type SecurityGroupRuleUpdate struct {
	Description *string `json:"description"`
}

// SecurityGroupUpdate defines model for SecurityGroupUpdate.
type SecurityGroupUpdate struct {
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// Server defines model for Server.
type Server struct {
	Description    *string               `json:"description,omitempty"`
	DisplayName    *string               `json:"display_name,omitempty"`
	ElasticIp      *[]openapi_types.UUID `json:"elastic_ip,omitempty"`
	Flavor         openapi_types.UUID    `json:"flavor"`
	Id             *openapi_types.UUID   `json:"id,omitempty"`
	Image          *openapi_types.UUID   `json:"image"`
	KeyPair        *openapi_types.UUID   `json:"key_pair"`
	Name           string                `json:"name"`
	Owner          openapi_types.UUID    `json:"owner"`
	PlacementGroup *openapi_types.UUID   `json:"placement_group"`
	PowerState     *Server_PowerState    `json:"power_state"`
	PrivateIp      *[]openapi_types.UUID `json:"private_ip,omitempty"`
	Project        openapi_types.UUID    `json:"project"`
	SecurityGroups *[]openapi_types.UUID `json:"security_groups,omitempty"`
	UserData       *string               `json:"user_data,omitempty"`
	Zone           openapi_types.UUID    `json:"zone"`
	Volume         openapi_types.UUID    `json:"volume"`
}

// Server_PowerState defines model for Server.PowerState.
type Server_PowerState struct {
	union json.RawMessage
}

// ServerDetail Extract owner and project from request and update to serializer data
type ServerDetail struct {
	CreatedAt      *time.Time                     `json:"created_at,omitempty"`
	Description    *string                        `json:"description,omitempty"`
	ElasticIp      []ElasticIPDetail              `json:"elastic_ip"`
	Flavor         FlavorDetail                   `json:"flavor"`
	Id             *openapi_types.UUID            `json:"id,omitempty"`
	Image          *openapi_types.UUID            `json:"image"`
	KeyPair        Keypair                        `json:"key_pair"`
	Name           string                         `json:"name"`
	Owner          openapi_types.UUID             `json:"owner"`
	PlacementGroup PlacementGroup                 `json:"placement_group"`
	PowerState     *ServerDetail_PowerState       `json:"power_state"`
	PrivateIp      []PrivateIP                    `json:"private_ip"`
	Project        openapi_types.UUID             `json:"project"`
	SecurityGroups []SecurityGroup                `json:"security_groups"`
	Status         *ServerDetail_Status           `json:"status"`
	UserData       *string                        `json:"user_data,omitempty"`
	Volumes        []ServerVolumeAttachmentDetail `json:"volumes"`
	Zone           openapi_types.UUID             `json:"zone"`
}

// ServerDetail_PowerState defines model for ServerDetail.PowerState.
type ServerDetail_PowerState struct {
	union json.RawMessage
}

// ServerDetail_Status defines model for ServerDetail.Status.
type ServerDetail_Status struct {
	union json.RawMessage
}

// ServerElasticIPRequest defines model for ServerElasticIPRequest.
type ServerElasticIPRequest struct {
	Eip openapi_types.UUID `json:"eip"`
}

// ServerGroup Adds nested create feature
type ServerGroup struct {
	Algorithm                    AlgorithmEnum                       `json:"algorithm"`
	CreatedAt                    *time.Time                          `json:"created_at,omitempty"`
	Description                  *string                             `json:"description"`
	EnableHealthCheck            bool                                `json:"enable_health_check"`
	Id                           *openapi_types.UUID                 `json:"id,omitempty"`
	LoadBalancer                 openapi_types.UUID                  `json:"load_balancer"`
	MonitorDelay                 *int                                `json:"monitor_delay"`
	MonitorExpectedCodes         *string                             `json:"monitor_expected_codes"`
	MonitorHttpMethod            *ServerGroup_MonitorHttpMethod      `json:"monitor_http_method"`
	MonitorMaxRetries            *int                                `json:"monitor_max_retries"`
	MonitorMaxRetriesDown        *int                                `json:"monitor_max_retries_down"`
	MonitorPath                  *string                             `json:"monitor_path"`
	MonitorTimeout               *int                                `json:"monitor_timeout"`
	MonitorType                  *ServerGroup_MonitorType            `json:"monitor_type"`
	Name                         string                              `json:"name"`
	Protocol                     LoadBalancingProtocolTypeEnum       `json:"protocol"`
	ProvisioningStatus           *ServerGroup_ProvisioningStatus     `json:"provisioning_status"`
	SessionPersistenceCookieName *string                             `json:"session_persistence_cookie_name"`
	SessionPersistenceType       *ServerGroup_SessionPersistenceType `json:"session_persistence_type"`
	Status                       *ServerGroup_Status                 `json:"status"`
	UpdatedAt                    *time.Time                          `json:"updated_at,omitempty"`
}

// ServerGroup_MonitorHttpMethod defines model for ServerGroup.MonitorHttpMethod.
type ServerGroup_MonitorHttpMethod struct {
	union json.RawMessage
}

// ServerGroup_MonitorType defines model for ServerGroup.MonitorType.
type ServerGroup_MonitorType struct {
	union json.RawMessage
}

// ServerGroup_ProvisioningStatus defines model for ServerGroup.ProvisioningStatus.
type ServerGroup_ProvisioningStatus struct {
	union json.RawMessage
}

// ServerGroup_SessionPersistenceType defines model for ServerGroup.SessionPersistenceType.
type ServerGroup_SessionPersistenceType struct {
	union json.RawMessage
}

// ServerGroup_Status defines model for ServerGroup.Status.
type ServerGroup_Status struct {
	union json.RawMessage
}

// ServerGroupDetail defines model for ServerGroupDetail.
type ServerGroupDetail struct {
	Algorithm                    AlgorithmEnum                             `json:"algorithm"`
	CreatedAt                    *time.Time                                `json:"created_at,omitempty"`
	Description                  *string                                   `json:"description"`
	EnableHealthCheck            *bool                                     `json:"enable_health_check,omitempty"`
	Id                           *openapi_types.UUID                       `json:"id,omitempty"`
	MonitorDelay                 *int                                      `json:"monitor_delay"`
	MonitorExpectedCodes         *string                                   `json:"monitor_expected_codes"`
	MonitorHttpMethod            *ServerGroupDetail_MonitorHttpMethod      `json:"monitor_http_method"`
	MonitorMaxRetries            *int                                      `json:"monitor_max_retries"`
	MonitorMaxRetriesDown        *int                                      `json:"monitor_max_retries_down"`
	MonitorPath                  *string                                   `json:"monitor_path"`
	MonitorTimeout               *int                                      `json:"monitor_timeout"`
	MonitorType                  *ServerGroupDetail_MonitorType            `json:"monitor_type"`
	Name                         string                                    `json:"name"`
	Protocol                     LoadBalancingProtocolTypeEnum             `json:"protocol"`
	ProvisioningStatus           *ServerGroupDetail_ProvisioningStatus     `json:"provisioning_status"`
	SessionPersistenceCookieName *string                                   `json:"session_persistence_cookie_name"`
	SessionPersistenceType       *ServerGroupDetail_SessionPersistenceType `json:"session_persistence_type"`
	Status                       *ServerGroupDetail_Status                 `json:"status"`
	UpdatedAt                    *time.Time                                `json:"updated_at,omitempty"`
}

// ServerGroupDetail_MonitorHttpMethod defines model for ServerGroupDetail.MonitorHttpMethod.
type ServerGroupDetail_MonitorHttpMethod struct {
	union json.RawMessage
}

// ServerGroupDetail_MonitorType defines model for ServerGroupDetail.MonitorType.
type ServerGroupDetail_MonitorType struct {
	union json.RawMessage
}

// ServerGroupDetail_ProvisioningStatus defines model for ServerGroupDetail.ProvisioningStatus.
type ServerGroupDetail_ProvisioningStatus struct {
	union json.RawMessage
}

// ServerGroupDetail_SessionPersistenceType defines model for ServerGroupDetail.SessionPersistenceType.
type ServerGroupDetail_SessionPersistenceType struct {
	union json.RawMessage
}

// ServerGroupDetail_Status defines model for ServerGroupDetail.Status.
type ServerGroupDetail_Status struct {
	union json.RawMessage
}

// ServerGroupList defines model for ServerGroupList.
type ServerGroupList struct {
	Id                 *openapi_types.UUID                 `json:"id,omitempty"`
	Members            *int                                `json:"members,omitempty"`
	Name               string                              `json:"name"`
	Protocol           LoadBalancingProtocolTypeEnum       `json:"protocol"`
	ProvisioningStatus *ServerGroupList_ProvisioningStatus `json:"provisioning_status"`
	Status             *ServerGroupList_Status             `json:"status"`
}

// ServerGroupList_ProvisioningStatus defines model for ServerGroupList.ProvisioningStatus.
type ServerGroupList_ProvisioningStatus struct {
	union json.RawMessage
}

// ServerGroupList_Status defines model for ServerGroupList.Status.
type ServerGroupList_Status struct {
	union json.RawMessage
}

// ServerGroupMember defines model for ServerGroupMember.
type ServerGroupMember struct {
	Address            string                                `json:"address"`
	Backup             *bool                                 `json:"backup,omitempty"`
	CreatedAt          *time.Time                            `json:"created_at,omitempty"`
	Id                 *openapi_types.UUID                   `json:"id,omitempty"`
	Name               string                                `json:"name"`
	ProtocolPort       int                                   `json:"protocol_port"`
	ProvisioningStatus *ServerGroupMember_ProvisioningStatus `json:"provisioning_status"`
	ServerGroup        openapi_types.UUID                    `json:"server_group"`
	Status             *ServerGroupMember_Status             `json:"status"`
	UpdatedAt          *time.Time                            `json:"updated_at,omitempty"`
	Weight             *int                                  `json:"weight,omitempty"`
}

// ServerGroupMember_ProvisioningStatus defines model for ServerGroupMember.ProvisioningStatus.
type ServerGroupMember_ProvisioningStatus struct {
	union json.RawMessage
}

// ServerGroupMember_Status defines model for ServerGroupMember.Status.
type ServerGroupMember_Status struct {
	union json.RawMessage
}

// ServerGroupMemberList defines model for ServerGroupMemberList.
type ServerGroupMemberList struct {
	Address            string                                    `json:"address"`
	Backup             *bool                                     `json:"backup,omitempty"`
	CreatedAt          *time.Time                                `json:"created_at,omitempty"`
	Id                 *openapi_types.UUID                       `json:"id,omitempty"`
	Name               string                                    `json:"name"`
	ProtocolPort       int                                       `json:"protocol_port"`
	ProvisioningStatus *ServerGroupMemberList_ProvisioningStatus `json:"provisioning_status"`
	Status             *ServerGroupMemberList_Status             `json:"status"`
	UpdatedAt          *time.Time                                `json:"updated_at,omitempty"`
	Weight             *int                                      `json:"weight,omitempty"`
}

// ServerGroupMemberList_ProvisioningStatus defines model for ServerGroupMemberList.ProvisioningStatus.
type ServerGroupMemberList_ProvisioningStatus struct {
	union json.RawMessage
}

// ServerGroupMemberList_Status defines model for ServerGroupMemberList.Status.
type ServerGroupMemberList_Status struct {
	union json.RawMessage
}

// ServerGroupMemberUpdate defines model for ServerGroupMemberUpdate.
type ServerGroupMemberUpdate struct {
	Address            *string                                     `json:"address,omitempty"`
	Backup             *bool                                       `json:"backup,omitempty"`
	CreatedAt          *time.Time                                  `json:"created_at,omitempty"`
	Id                 *openapi_types.UUID                         `json:"id,omitempty"`
	Name               string                                      `json:"name"`
	ProtocolPort       *int                                        `json:"protocol_port,omitempty"`
	ProvisioningStatus *ServerGroupMemberUpdate_ProvisioningStatus `json:"provisioning_status"`
	Status             *ServerGroupMemberUpdate_Status             `json:"status"`
	UpdatedAt          *time.Time                                  `json:"updated_at,omitempty"`
	Weight             *int                                        `json:"weight,omitempty"`
}

// ServerGroupMemberUpdate_ProvisioningStatus defines model for ServerGroupMemberUpdate.ProvisioningStatus.
type ServerGroupMemberUpdate_ProvisioningStatus struct {
	union json.RawMessage
}

// ServerGroupMemberUpdate_Status defines model for ServerGroupMemberUpdate.Status.
type ServerGroupMemberUpdate_Status struct {
	union json.RawMessage
}

// ServerGroupUpdate Adds nested create feature
type ServerGroupUpdate struct {
	Algorithm                    AlgorithmEnum                             `json:"algorithm"`
	CreatedAt                    *time.Time                                `json:"created_at,omitempty"`
	Description                  *string                                   `json:"description"`
	EnableHealthCheck            bool                                      `json:"enable_health_check"`
	Id                           *openapi_types.UUID                       `json:"id,omitempty"`
	LoadBalancer                 *openapi_types.UUID                       `json:"load_balancer,omitempty"`
	MonitorDelay                 *int                                      `json:"monitor_delay"`
	MonitorExpectedCodes         *string                                   `json:"monitor_expected_codes"`
	MonitorHttpMethod            *ServerGroupUpdate_MonitorHttpMethod      `json:"monitor_http_method"`
	MonitorMaxRetries            *int                                      `json:"monitor_max_retries"`
	MonitorMaxRetriesDown        *int                                      `json:"monitor_max_retries_down"`
	MonitorPath                  *string                                   `json:"monitor_path"`
	MonitorTimeout               *int                                      `json:"monitor_timeout"`
	MonitorType                  *ServerGroupUpdate_MonitorType            `json:"monitor_type"`
	Name                         string                                    `json:"name"`
	Protocol                     *LoadBalancingProtocolTypeEnum            `json:"protocol,omitempty"`
	ProvisioningStatus           *ServerGroupUpdate_ProvisioningStatus     `json:"provisioning_status"`
	SessionPersistenceCookieName *string                                   `json:"session_persistence_cookie_name"`
	SessionPersistenceType       *ServerGroupUpdate_SessionPersistenceType `json:"session_persistence_type"`
	Status                       *ServerGroupUpdate_Status                 `json:"status"`
	UpdatedAt                    *time.Time                                `json:"updated_at,omitempty"`
}

// ServerGroupUpdate_MonitorHttpMethod defines model for ServerGroupUpdate.MonitorHttpMethod.
type ServerGroupUpdate_MonitorHttpMethod struct {
	union json.RawMessage
}

// ServerGroupUpdate_MonitorType defines model for ServerGroupUpdate.MonitorType.
type ServerGroupUpdate_MonitorType struct {
	union json.RawMessage
}

// ServerGroupUpdate_ProvisioningStatus defines model for ServerGroupUpdate.ProvisioningStatus.
type ServerGroupUpdate_ProvisioningStatus struct {
	union json.RawMessage
}

// ServerGroupUpdate_SessionPersistenceType defines model for ServerGroupUpdate.SessionPersistenceType.
type ServerGroupUpdate_SessionPersistenceType struct {
	union json.RawMessage
}

// ServerGroupUpdate_Status defines model for ServerGroupUpdate.Status.
type ServerGroupUpdate_Status struct {
	union json.RawMessage
}

// ServerList Extract owner and project from request and update to serializer data
type ServerList struct {
	ElasticIp  []ElasticIPDetail      `json:"elastic_ip"`
	Id         *openapi_types.UUID    `json:"id,omitempty"`
	Name       string                 `json:"name"`
	Owner      openapi_types.UUID     `json:"owner"`
	PowerState *ServerList_PowerState `json:"power_state"`
	PrivateIp  []PrivateIP            `json:"private_ip"`
	Project    openapi_types.UUID     `json:"project"`
	Zone       openapi_types.UUID     `json:"zone"`
}

// ServerList_PowerState defines model for ServerList.PowerState.
type ServerList_PowerState struct {
	union json.RawMessage
}

// ServerOrderItem defines model for ServerOrderItem.
type ServerOrderItem struct {
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Image The OS image to boot up server
	Image *openapi_types.UUID `json:"image"`

	// Period The active period of order items (in month)
	Period   *int `json:"period,omitempty"`
	Quantity int  `json:"quantity"`

	// Region The region where plan resources are created
	Region *openapi_types.UUID `json:"region"`

	// SubAmount The sub amount to pay
	SubAmount *string `json:"sub_amount"`

	// Template The template to initialize order resources
	Template     *openapi_types.UUID `json:"template"`
	TemplateCode *string             `json:"template_code,omitempty"`
}

// ServerPlan defines model for ServerPlan.
type ServerPlan struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// ExpiresAt The timestamp at which plan is expired
	ExpiresAt *time.Time          `json:"expires_at"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
	Image     NestedImage         `json:"image"`

	// InitialData Additional metadata for plan for auditing purpose
	InitialData *map[string]interface{} `json:"initial_data,omitempty"`
	Instance    NestedServer            `json:"instance"`

	// Period The effective period of the plan (in months)
	Period *int `json:"period,omitempty"`

	// Project The project on which plan is activated
	Project *openapi_types.UUID `json:"project"`
	Region  NestedRegion        `json:"region"`

	// StartedAt The timestamp at which plan is activated
	StartedAt *time.Time `json:"started_at"`

	// State Plan state
	State     *StateDf2Enum      `json:"state,omitempty"`
	Template  ServerPlanTemplate `json:"template"`
	UpdatedAt *time.Time         `json:"updated_at,omitempty"`

	// User The owner of this plan
	User *openapi_types.UUID `json:"user"`
}

// ServerPlanTemplate defines model for ServerPlanTemplate.
type ServerPlanTemplate struct {
	// Code The code which identifies plan templates
	Code string `json:"code"`

	// Gpus Number of gpus
	Gpus           *int                         `json:"gpus,omitempty"`
	Id             *openapi_types.UUID          `json:"id,omitempty"`
	PaymentOptions *[]PlanTemplatePaymentOption `json:"payment_options"`

	// Ram RAM (GiB)
	Ram *int `json:"ram,omitempty"`

	// Vcpus Number of vcpus
	Vcpus *int `json:"vcpus,omitempty"`
}

// ServerStatusEnum defines model for ServerStatusEnum.
type ServerStatusEnum string

// ServerVolumeAttachment Extends the built-in ModelSerializer to enforce calling full_clean()
// on a copy of the associated instance during validation.
// (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)
type ServerVolumeAttachment struct {
	MountAs *MountAsEnum       `json:"mount_as,omitempty"`
	Server  openapi_types.UUID `json:"server"`
	Volume  openapi_types.UUID `json:"volume"`
}

// ServerVolumeAttachmentDetail defines model for ServerVolumeAttachmentDetail.
type ServerVolumeAttachmentDetail struct {
	MountAs *MountAsEnum `json:"mount_as,omitempty"`

	// Volume Extract owner and project from request and update to serializer data
	Volume Volume `json:"volume"`
}

// Service defines model for Service.
type Service struct {
	Category    openapi_types.UUID  `json:"category"`
	Description *string             `json:"description"`
	IconCode    int                 `json:"icon_code"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Name        string              `json:"name"`
	Url         *string             `json:"url,omitempty"`
}

// ServiceDetail defines model for ServiceDetail.
type ServiceDetail struct {
	Category    *NestedCategory     `json:"category,omitempty"`
	Description *string             `json:"description"`
	IconCode    int                 `json:"icon_code"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Name        string              `json:"name"`
	Url         *string             `json:"url,omitempty"`
}

// SessionPersistenceTypeEnum defines model for SessionPersistenceTypeEnum.
type SessionPersistenceTypeEnum string

// SexEnum defines model for SexEnum.
type SexEnum string

// ShowBucket defines model for ShowBucket.
type ShowBucket struct {
	// Acl The ACL of the object or bucket.
	Acl AclEnum `json:"acl"`

	// CreatedAt The ISO 8601 format datetime when the resource was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Name The unique name of the bucket.
	Name string `json:"name"`

	// NumObjects The number objects of the bucket.
	NumObjects int `json:"num_objects"`

	// RegionId The region uuid of the bucket.
	RegionId openapi_types.UUID `json:"region_id"`

	// SizeKb The used size in kilobytes of the bucket.
	SizeKb int `json:"size_kb"`

	// SizeKbActual The actual size in kilobytes of the bucket.
	SizeKbActual int `json:"size_kb_actual"`

	// StorageClass The storage class of the bucket.
	StorageClass string `json:"storage_class"`
}

// Snapshot Extract owner and project from request and update to serializer data
type Snapshot struct {
	CreatedAt   *time.Time          `json:"created_at,omitempty"`
	Description *string             `json:"description"`
	FromPolicy  *bool               `json:"from_policy,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Name        string              `json:"name"`
	Owner       *openapi_types.UUID `json:"owner,omitempty"`
	Project     *openapi_types.UUID `json:"project,omitempty"`
	Size        *int                `json:"size"`
	Status      *SnapshotStatusEnum `json:"status,omitempty"`
	UpdatedAt   *time.Time          `json:"updated_at,omitempty"`
	Volume      openapi_types.UUID  `json:"volume"`
	VolumeName  *string             `json:"volume_name,omitempty"`
}

// SnapshotPolicy Extract owner and project from request and update to serializer data
type SnapshotPolicy struct {
	CreatedAt   *time.Time           `json:"created_at,omitempty"`
	DaysOfWeek  []DaysOfWeekEnum     `json:"days_of_week"`
	Description *string              `json:"description"`
	Id          *openapi_types.UUID  `json:"id,omitempty"`
	Name        string               `json:"name"`
	Owner       *openapi_types.UUID  `json:"owner,omitempty"`
	Project     *openapi_types.UUID  `json:"project,omitempty"`
	Region      openapi_types.UUID   `json:"region"`
	Retention   *int                 `json:"retention,omitempty"`
	State       *State6abEnum        `json:"state,omitempty"`
	Status      VolumeTypeStatusEnum `json:"status"`
	Time        string               `json:"time"`
	UpdatedAt   *time.Time           `json:"updated_at,omitempty"`
	VolumeCount *int                 `json:"volume_count,omitempty"`
}

// SnapshotPolicyUpdate defines model for SnapshotPolicyUpdate.
type SnapshotPolicyUpdate struct {
	DaysOfWeek  []DaysOfWeekEnum     `json:"days_of_week"`
	Description *string              `json:"description"`
	Name        string               `json:"name"`
	Retention   *int                 `json:"retention,omitempty"`
	Status      VolumeTypeStatusEnum `json:"status"`
	Time        string               `json:"time"`
	UpdatedAt   *time.Time           `json:"updated_at,omitempty"`
}

// SnapshotStatusEnum defines model for SnapshotStatusEnum.
type SnapshotStatusEnum string

// SnapshotUpdate defines model for SnapshotUpdate.
type SnapshotUpdate struct {
	Description *string    `json:"description"`
	Name        string     `json:"name"`
	UpdatedAt   *time.Time `json:"updated_at,omitempty"`
}

// SolutionEnum defines model for SolutionEnum.
type SolutionEnum string

// SpeedEnum defines model for SpeedEnum.
type SpeedEnum string

// State6abEnum defines model for State6abEnum.
type State6abEnum string

// StateDf2Enum defines model for StateDf2Enum.
type StateDf2Enum string

// Status01cEnum defines model for Status01cEnum.
type Status01cEnum string

// Status5afEnum defines model for Status5afEnum.
type Status5afEnum string

// Subnet Extract owner and project from request and update to serializer data
type Subnet struct {
	Cidr        *string             `json:"cidr,omitempty"`
	CreatedAt   *time.Time          `json:"created_at,omitempty"`
	Description *string             `json:"description"`
	DisplayName *string             `json:"display_name,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Name        *string             `json:"name,omitempty"`
	Owner       *openapi_types.UUID `json:"owner,omitempty"`
	Project     *openapi_types.UUID `json:"project,omitempty"`
	Region      *string             `json:"region,omitempty"`
	UpdatedAt   *time.Time          `json:"updated_at,omitempty"`
	Vpc         *NestedVPC          `json:"vpc,omitempty"`
}

// SubnetAssociate defines model for SubnetAssociate.
type SubnetAssociate struct {
	CreatedAt  *time.Time         `json:"created_at,omitempty"`
	Owner      openapi_types.UUID `json:"owner"`
	Project    openapi_types.UUID `json:"project"`
	RouteTable openapi_types.UUID `json:"route_table"`
	Subnet     *NestedSubnet      `json:"subnet,omitempty"`
	UpdatedAt  *time.Time         `json:"updated_at,omitempty"`
}

// SubnetCreate Extract owner and project from request and update to serializer data
type SubnetCreate struct {
	Cidr        string              `json:"cidr"`
	CreatedAt   *time.Time          `json:"created_at,omitempty"`
	Description *string             `json:"description"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Name        string              `json:"name"`
	Owner       *openapi_types.UUID `json:"owner,omitempty"`
	Project     *openapi_types.UUID `json:"project,omitempty"`
	UpdatedAt   *time.Time          `json:"updated_at,omitempty"`
	Vpc         openapi_types.UUID  `json:"vpc"`
}

// SubnetUpdate defines model for SubnetUpdate.
type SubnetUpdate struct {
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	CreatedAt *time.Time          `json:"created_at,omitempty"`
	Id        *openapi_types.UUID `json:"id,omitempty"`

	// Product Extends the built-in ModelSerializer to enforce calling full_clean()
	// on a copy of the associated instance during validation.
	// (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)
	Product ProductDetail `json:"product"`
}

// SubscriptionCreate defines model for SubscriptionCreate.
type SubscriptionCreate struct {
	Id      *openapi_types.UUID `json:"id,omitempty"`
	Product openapi_types.UUID  `json:"product"`
}

// Tag defines model for Tag.
type Tag struct {
	// Key Key of tag. Units of length is bytes.
	Key string `json:"key"`

	// Value Value of tag. Unit of length is bytes.
	Value string `json:"value"`
}

// TopologyEnum defines model for TopologyEnum.
type TopologyEnum string

// Type18dEnum defines model for Type18dEnum.
type Type18dEnum string

// Type4feEnum defines model for Type4feEnum.
type Type4feEnum string

// TypeFc4Enum defines model for TypeFc4Enum.
type TypeFc4Enum string

// User defines model for User.
type User struct {
	DisplayName *string              `json:"display_name,omitempty"`
	Email       *openapi_types.Email `json:"email,omitempty"`
	FirstName   *string              `json:"first_name,omitempty"`
	Id          *openapi_types.UUID  `json:"id,omitempty"`
	LastName    *string              `json:"last_name,omitempty"`

	// Username Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
	Username string `json:"username"`
}

// UserUpdate defines model for UserUpdate.
type UserUpdate struct {
	FirstName *string             `json:"first_name,omitempty"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
	LastName  *string             `json:"last_name,omitempty"`
}

// VKECluster Extract owner and project from request and update to serializer data
type VKECluster struct {
	ControlPlaneReplicas *int                  `json:"control_plane_replicas,omitempty"`
	CreatedAt            *time.Time            `json:"created_at,omitempty"`
	EnableBackup         *bool                 `json:"enable_backup,omitempty"`
	Id                   *openapi_types.UUID   `json:"id,omitempty"`
	ImageRepository      *string               `json:"image_repository,omitempty"`
	LoadBalancerPackage  *string               `json:"load_balancer_package,omitempty"`
	Name                 string                `json:"name"`
	NodeCidr             *string               `json:"node_cidr"`
	Owner                *openapi_types.UUID   `json:"owner,omitempty"`
	PodCidr              *string               `json:"pod_cidr,omitempty"`
	Project              *openapi_types.UUID   `json:"project,omitempty"`
	Region               openapi_types.UUID    `json:"region"`
	ServiceDomain        *string               `json:"service_domain,omitempty"`
	Slug                 *string               `json:"slug,omitempty"`
	Status               *VkeClusterStatusEnum `json:"status,omitempty"`
	Subnet               openapi_types.UUID    `json:"subnet"`
	TotalRam             *int                  `json:"total_ram,omitempty"`
	TotalVcpus           *int                  `json:"total_vcpus,omitempty"`
	UpdatedAt            *time.Time            `json:"updated_at,omitempty"`
	Url                  *string               `json:"url,omitempty"`
	Version              openapi_types.UUID    `json:"version"`
	Vpc                  openapi_types.UUID    `json:"vpc"`
}

// VKEClusterDetail Extract owner and project from request and update to serializer data
type VKEClusterDetail struct {
	ControlPlaneReplicas *int                                  `json:"control_plane_replicas,omitempty"`
	CreatedAt            *time.Time                            `json:"created_at,omitempty"`
	EnableBackup         *bool                                 `json:"enable_backup,omitempty"`
	Id                   *openapi_types.UUID                   `json:"id,omitempty"`
	LoadBalancerPackage  *VKEClusterDetail_LoadBalancerPackage `json:"load_balancer_package"`
	Name                 string                                `json:"name"`
	Owner                *openapi_types.UUID                   `json:"owner,omitempty"`
	Project              *openapi_types.UUID                   `json:"project,omitempty"`
	Region               NestedRegion                          `json:"region"`
	Slug                 *string                               `json:"slug,omitempty"`
	Status               *VkeClusterStatusEnum                 `json:"status,omitempty"`
	Subnet               NestedSubnet                          `json:"subnet"`
	TotalRam             *int                                  `json:"total_ram,omitempty"`
	TotalVcpus           *int                                  `json:"total_vcpus,omitempty"`
	UpdatedAt            *time.Time                            `json:"updated_at,omitempty"`
	Url                  *string                               `json:"url,omitempty"`
	Version              NestedK8SVersion                      `json:"version"`
	Vpc                  NestedVPC                             `json:"vpc"`
}

// VKEClusterDetail_LoadBalancerPackage defines model for VKEClusterDetail.LoadBalancerPackage.
type VKEClusterDetail_LoadBalancerPackage struct {
	union json.RawMessage
}

// VKEClusterUpdate Extract owner and project from request and update to serializer data
type VKEClusterUpdate struct {
	ControlPlaneReplicas int                `json:"control_plane_replicas"`
	EnableBackup         *bool              `json:"enable_backup,omitempty"`
	Version              openapi_types.UUID `json:"version"`
}

// VKEDashboardEndpoint defines model for VKEDashboardEndpoint.
type VKEDashboardEndpoint struct {
	Url string `json:"url"`
}

// VKEKubeConfig defines model for VKEKubeConfig.
type VKEKubeConfig struct {
	Config string `json:"config"`
}

// VKEMachine Extract owner and project from request and update to serializer data
type VKEMachine struct {
	Cluster                 *openapi_types.UUID `json:"cluster"`
	ContainerRuntimeVersion string              `json:"container_runtime_version"`
	Id                      *openapi_types.UUID `json:"id,omitempty"`
	IpAddress               string              `json:"ip_address"`
	KubeProxyVersion        string              `json:"kube_proxy_version"`
	KubeletVersion          string              `json:"kubelet_version"`
	Name                    string              `json:"name"`
	NodePool                *openapi_types.UUID `json:"node_pool"`
	OsVersion               string              `json:"os_version"`
	ProvisionPhase          string              `json:"provision_phase"`
	Ready                   bool                `json:"ready"`
	Role                    VKEMachineRoleEnum  `json:"role"`
}

// VKEMachineRoleEnum defines model for VKEMachineRoleEnum.
type VKEMachineRoleEnum string

// VKENodePool Extract owner and project from request and update to serializer data
type VKENodePool struct {
	Cluster          openapi_types.UUID     `json:"cluster"`
	CreatedAt        *time.Time             `json:"created_at,omitempty"`
	EnableAutoscaler *bool                  `json:"enable_autoscaler,omitempty"`
	Flavor           openapi_types.UUID     `json:"flavor"`
	Id               *openapi_types.UUID    `json:"id,omitempty"`
	MaxSize          *int                   `json:"max_size,omitempty"`
	MinSize          *int                   `json:"min_size,omitempty"`
	Name             string                 `json:"name"`
	Owner            *openapi_types.UUID    `json:"owner,omitempty"`
	Project          *openapi_types.UUID    `json:"project,omitempty"`
	Replicas         *int                   `json:"replicas,omitempty"`
	Slug             *string                `json:"slug,omitempty"`
	Status           *VkeNodePoolStatusEnum `json:"status,omitempty"`
	TotalRam         *int                   `json:"total_ram,omitempty"`
	TotalVcpus       *int                   `json:"total_vcpus,omitempty"`
	UpdatedAt        *time.Time             `json:"updated_at,omitempty"`
	Url              *string                `json:"url,omitempty"`
	VolumeSize       *int                   `json:"volume_size"`
	VolumeType       *openapi_types.UUID    `json:"volume_type"`
	Zone             openapi_types.UUID     `json:"zone"`
}

// VKENodePoolDetail Extract owner and project from request and update to serializer data
type VKENodePoolDetail struct {
	Cluster          openapi_types.UUID     `json:"cluster"`
	CreatedAt        *time.Time             `json:"created_at,omitempty"`
	EnableAutoscaler *bool                  `json:"enable_autoscaler,omitempty"`
	Flavor           NestedFlavor           `json:"flavor"`
	Id               *openapi_types.UUID    `json:"id,omitempty"`
	MaxSize          *int                   `json:"max_size"`
	MinSize          *int                   `json:"min_size"`
	Name             string                 `json:"name"`
	Owner            *openapi_types.UUID    `json:"owner,omitempty"`
	Project          *openapi_types.UUID    `json:"project,omitempty"`
	Replicas         *int                   `json:"replicas"`
	Slug             *string                `json:"slug,omitempty"`
	Status           *VkeNodePoolStatusEnum `json:"status,omitempty"`
	TotalRam         *int                   `json:"total_ram,omitempty"`
	TotalVcpus       *int                   `json:"total_vcpus,omitempty"`
	UpdatedAt        *time.Time             `json:"updated_at,omitempty"`
	Url              *string                `json:"url,omitempty"`
	VolumeSize       *int                   `json:"volume_size"`
	VolumeType       NestedVolumeType       `json:"volume_type"`
	Zone             NestedZone             `json:"zone"`
}

// VKEWebCliEndpoint defines model for VKEWebCliEndpoint.
type VKEWebCliEndpoint struct {
	Url string `json:"url"`
}

// VPC Extract owner and project from request and update to serializer data
type VPC struct {
	Cidr           string                `json:"cidr"`
	CreatedAt      *time.Time            `json:"created_at,omitempty"`
	Description    *string               `json:"description"`
	DisplayName    *string               `json:"display_name,omitempty"`
	Id             *openapi_types.UUID   `json:"id,omitempty"`
	InternetAccess *bool                 `json:"internet_access,omitempty"`
	Name           string                `json:"name"`
	Owner          *openapi_types.UUID   `json:"owner,omitempty"`
	Project        *openapi_types.UUID   `json:"project,omitempty"`
	Region         openapi_types.UUID    `json:"region"`
	RouteTables    *[]openapi_types.UUID `json:"route_tables,omitempty"`
	UpdatedAt      *time.Time            `json:"updated_at,omitempty"`
}

// VPCUpdate defines model for VPCUpdate.
type VPCUpdate struct {
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// Vendor defines model for Vendor.
type Vendor struct {
	Description *string             `json:"description,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Name        string              `json:"name"`
	Title       string              `json:"title"`
}

// Version defines model for Version.
type Version struct {
	// LastModified Last modified of object in iso-8601 format.
	LastModified time.Time `json:"last_modified"`

	// Size Size in bytes of the object.
	Size int `json:"size"`

	// StorageClass Storage class of the object.
	StorageClass *string `json:"storage_class,omitempty"`

	// Type Type of object
	Type VersionTypeEnum `json:"type"`

	// VersionId Version id of the object.
	VersionId string `json:"version_id"`
}

// VersionTypeEnum defines model for VersionTypeEnum.
type VersionTypeEnum string

// VersioningStatusEnum defines model for VersioningStatusEnum.
type VersioningStatusEnum string

// VkeClusterStatusEnum defines model for VkeClusterStatusEnum.
type VkeClusterStatusEnum string

// VkeNodePoolStatusEnum defines model for VkeNodePoolStatusEnum.
type VkeNodePoolStatusEnum string

// VkeNodePoolUpdate Extract owner and project from request and update to serializer data
type VkeNodePoolUpdate struct {
	EnableAutoscaler *bool              `json:"enable_autoscaler,omitempty"`
	MaxSize          *int               `json:"max_size"`
	MinSize          *int               `json:"min_size"`
	Owner            openapi_types.UUID `json:"owner"`
	Project          openapi_types.UUID `json:"project"`
	Replicas         *int               `json:"replicas"`
}

// Volume Extract owner and project from request and update to serializer data
type Volume struct {
	Attachment     *NestedVolumeAttachment `json:"attachment,omitempty"`
	BackupPolicy   *openapi_types.UUID     `json:"backup_policy"`
	Bootable       *bool                   `json:"bootable,omitempty"`
	CreateFrom     VolumeOrigin            `json:"create_from"`
	CreatedAt      *time.Time              `json:"created_at,omitempty"`
	Description    *string                 `json:"description"`
	DiskType       *string                 `json:"disk_type,omitempty"`
	Encrypted      *bool                   `json:"encrypted"`
	Id             *openapi_types.UUID     `json:"id,omitempty"`
	Name           string                  `json:"name"`
	Owner          *openapi_types.UUID     `json:"owner,omitempty"`
	Project        *openapi_types.UUID     `json:"project,omitempty"`
	Size           *int                    `json:"size,omitempty"`
	SnapshotPolicy *openapi_types.UUID     `json:"snapshot_policy"`
	Speed          *string                 `json:"speed,omitempty"`
	Status         *VolumeStatusEnum       `json:"status,omitempty"`
	UpdatedAt      *time.Time              `json:"updated_at,omitempty"`
	Zone           *string                 `json:"zone,omitempty"`
	ZoneId         *openapi_types.UUID     `json:"zone_id,omitempty"`
}

// VolumeApplyBackupPolicy defines model for VolumeApplyBackupPolicy.
type VolumeApplyBackupPolicy struct {
	// BackupPolicy ID of the backup policy to apply.
	BackupPolicy openapi_types.UUID `json:"backup_policy"`
	UpdatedAt    *time.Time         `json:"updated_at,omitempty"`
}

// VolumeApplySnapshotPolicy defines model for VolumeApplySnapshotPolicy.
type VolumeApplySnapshotPolicy struct {
	// SnapshotPolicy ID of the snapshot policy to apply.
	SnapshotPolicy openapi_types.UUID `json:"snapshot_policy"`
	UpdatedAt      *time.Time         `json:"updated_at,omitempty"`
}

// VolumeBackup Extract owner and project from request and update to serializer data
type VolumeBackup struct {
	CreatedAt         *time.Time             `json:"created_at,omitempty"`
	Description       *string                `json:"description"`
	DiskType          *VolumeTypeEnum        `json:"disk_type,omitempty"`
	EncryptionKeySize *EncryptionKeySizeEnum `json:"encryption_key_size,omitempty"`
	Id                *openapi_types.UUID    `json:"id,omitempty"`
	Name              string                 `json:"name"`
	Owner             *openapi_types.UUID    `json:"owner,omitempty"`
	Project           *openapi_types.UUID    `json:"project,omitempty"`
	Region            *openapi_types.UUID    `json:"region,omitempty"`
	Size              *string                `json:"size"`
	Status            *SnapshotStatusEnum    `json:"status,omitempty"`
	UpdatedAt         *time.Time             `json:"updated_at,omitempty"`
	Volume            *openapi_types.UUID    `json:"volume"`
	VolumeName        *string                `json:"volume_name"`
}

// VolumeBackupPolicy Extract owner and project from request and update to serializer data
type VolumeBackupPolicy struct {
	CreatedAt         *time.Time                        `json:"created_at,omitempty"`
	DaysOfMonth       *[]int                            `json:"days_of_month,omitempty"`
	Description       *string                           `json:"description"`
	ExecutionStrategy *ExecutionStrategyEnum            `json:"execution_strategy,omitempty"`
	FirstExecution    *time.Time                        `json:"first_execution"`
	Frequency         *int                              `json:"frequency"`
	FrequencyUnit     *VolumeBackupPolicy_FrequencyUnit `json:"frequency_unit"`
	Id                *openapi_types.UUID               `json:"id,omitempty"`
	Name              string                            `json:"name"`
	Owner             *openapi_types.UUID               `json:"owner,omitempty"`
	Project           *openapi_types.UUID               `json:"project,omitempty"`
	Region            openapi_types.UUID                `json:"region"`
	Retention         *int                              `json:"retention,omitempty"`
	State             *State6abEnum                     `json:"state,omitempty"`
	Status            VolumeTypeStatusEnum              `json:"status"`
	Time              *string                           `json:"time"`
	UpdatedAt         *time.Time                        `json:"updated_at,omitempty"`
	VolumeCount       *int                              `json:"volume_count,omitempty"`
}

// VolumeBackupPolicy_FrequencyUnit defines model for VolumeBackupPolicy.FrequencyUnit.
type VolumeBackupPolicy_FrequencyUnit struct {
	union json.RawMessage
}

// VolumeBackupPolicyUpdate Extract owner and project from request and update to serializer data
type VolumeBackupPolicyUpdate struct {
	DaysOfMonth       *[]int                                  `json:"days_of_month,omitempty"`
	Description       *string                                 `json:"description"`
	ExecutionStrategy *ExecutionStrategyEnum                  `json:"execution_strategy,omitempty"`
	FirstExecution    *time.Time                              `json:"first_execution"`
	Frequency         *int                                    `json:"frequency"`
	FrequencyUnit     *VolumeBackupPolicyUpdate_FrequencyUnit `json:"frequency_unit"`
	Name              string                                  `json:"name"`
	Retention         *int                                    `json:"retention,omitempty"`
	Status            VolumeTypeStatusEnum                    `json:"status"`
	Time              *string                                 `json:"time"`
	UpdatedAt         *time.Time                              `json:"updated_at,omitempty"`
}

// VolumeBackupPolicyUpdate_FrequencyUnit defines model for VolumeBackupPolicyUpdate.FrequencyUnit.
type VolumeBackupPolicyUpdate_FrequencyUnit struct {
	union json.RawMessage
}

// VolumeBackupRestore defines model for VolumeBackupRestore.
type VolumeBackupRestore struct {
	// VolumeId ID of volume to restore.
	VolumeId openapi_types.UUID `json:"volume_id"`
}

// VolumeBackupUpdate defines model for VolumeBackupUpdate.
type VolumeBackupUpdate struct {
	Description *string    `json:"description"`
	Name        string     `json:"name"`
	UpdatedAt   *time.Time `json:"updated_at,omitempty"`
}

// VolumeOrderItem defines model for VolumeOrderItem.
type VolumeOrderItem struct {
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Period The active period of order items (in month)
	Period   *int `json:"period,omitempty"`
	Quantity int  `json:"quantity"`

	// Region The region where plan resources are created
	Region *openapi_types.UUID `json:"region"`

	// SubAmount The sub amount to pay
	SubAmount *string `json:"sub_amount"`

	// Template The associated volume plan template
	Template     *openapi_types.UUID `json:"template"`
	TemplateCode *string             `json:"template_code,omitempty"`

	// Zone The zone where plan resources are created
	Zone *openapi_types.UUID `json:"zone"`
}

// VolumeOrigin defines model for VolumeOrigin.
type VolumeOrigin struct {
	Backup     *openapi_types.UUID     `json:"backup,omitempty"`
	Image      *openapi_types.UUID     `json:"image,omitempty"`
	Metadata   *map[string]interface{} `json:"metadata"`
	Snapshot   *openapi_types.UUID     `json:"snapshot,omitempty"`
	VolumeType *openapi_types.UUID     `json:"volume_type,omitempty"`
}

// VolumePlan defines model for VolumePlan.
type VolumePlan struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// ExpiresAt The timestamp at which plan is expired
	ExpiresAt *time.Time          `json:"expires_at"`
	Id        *openapi_types.UUID `json:"id,omitempty"`

	// InitialData Additional metadata for plan for auditing purpose
	InitialData *map[string]interface{} `json:"initial_data,omitempty"`

	// Period The effective period of the plan (in months)
	Period *int `json:"period,omitempty"`

	// Project The project on which plan is activated
	Project *openapi_types.UUID `json:"project"`
	Region  NestedRegion        `json:"region"`

	// StartedAt The timestamp at which plan is activated
	StartedAt *time.Time `json:"started_at"`

	// State Plan state
	State     *StateDf2Enum      `json:"state,omitempty"`
	Template  VolumePlanTemplate `json:"template"`
	UpdatedAt *time.Time         `json:"updated_at,omitempty"`

	// User The owner of this plan
	User   *openapi_types.UUID `json:"user"`
	Volume NestedVolume        `json:"volume"`
	Zone   NestedZone          `json:"zone"`
}

// VolumePlanTemplate defines model for VolumePlanTemplate.
type VolumePlanTemplate struct {
	// Code The code which identifies plan templates
	Code string `json:"code"`

	// DiskSpeed Speed of disk
	DiskSpeed *DiskSpeedEnum `json:"disk_speed,omitempty"`

	// DiskType Type of disk
	DiskType       *VolumeTypeEnum              `json:"disk_type,omitempty"`
	Id             *openapi_types.UUID          `json:"id,omitempty"`
	PaymentOptions *[]PlanTemplatePaymentOption `json:"payment_options"`

	// VolumeSize Size of server volume (GiB)
	VolumeSize *int `json:"volume_size,omitempty"`
}

// VolumeStatusEnum defines model for VolumeStatusEnum.
type VolumeStatusEnum string

// VolumeType defines model for VolumeType.
type VolumeType struct {
	CreatedAt         *time.Time             `json:"created_at,omitempty"`
	Description       *string                `json:"description"`
	DisabledReason    *string                `json:"disabled_reason"`
	DiskType          VolumeTypeEnum         `json:"disk_type"`
	DisplayName       *string                `json:"display_name,omitempty"`
	EncryptionKeySize *EncryptionKeySizeEnum `json:"encryption_key_size,omitempty"`
	Id                *openapi_types.UUID    `json:"id,omitempty"`
	Name              string                 `json:"name"`
	Speed             SpeedEnum              `json:"speed"`
	State             *VolumeTypeStateEnum   `json:"state,omitempty"`
	Status            *VolumeTypeStatusEnum  `json:"status,omitempty"`
	UpdatedAt         *time.Time             `json:"updated_at,omitempty"`
	VolumeBackendName string                 `json:"volume_backend_name"`
	Zone              openapi_types.UUID     `json:"zone"`
}

// VolumeTypeEnum defines model for VolumeTypeEnum.
type VolumeTypeEnum string

// VolumeTypeMapping defines model for VolumeTypeMapping.
type VolumeTypeMapping struct {
	CreatedAt        *time.Time          `json:"created_at,omitempty"`
	Id               *openapi_types.UUID `json:"id,omitempty"`
	InfraVolumeType  openapi_types.UUID  `json:"infra_volume_type"`
	InfraVtDiskType  *string             `json:"infra_vt_disk_type,omitempty"`
	InfraVtSpeed     *string             `json:"infra_vt_speed,omitempty"`
	Region           *openapi_types.UUID `json:"region,omitempty"`
	RegionName       *string             `json:"region_name,omitempty"`
	RegionVolumeType openapi_types.UUID  `json:"region_volume_type"`
	RvtDiskType      *string             `json:"rvt_disk_type,omitempty"`
	RvtName          *string             `json:"rvt_name,omitempty"`
	RvtSpeed         *string             `json:"rvt_speed,omitempty"`
	UpdatedAt        *time.Time          `json:"updated_at,omitempty"`
	Zone             openapi_types.UUID  `json:"zone"`
	ZoneName         *string             `json:"zone_name,omitempty"`
}

// VolumeTypeStateEnum defines model for VolumeTypeStateEnum.
type VolumeTypeStateEnum string

// VolumeTypeStatusEnum defines model for VolumeTypeStatusEnum.
type VolumeTypeStatusEnum string

// VolumeTypeUpdate defines model for VolumeTypeUpdate.
type VolumeTypeUpdate struct {
	Description    *string               `json:"description"`
	DisabledReason *string               `json:"disabled_reason"`
	Name           string                `json:"name"`
	Status         *VolumeTypeStatusEnum `json:"status,omitempty"`
	UpdatedAt      *time.Time            `json:"updated_at,omitempty"`
}

// VolumeUpdate defines model for VolumeUpdate.
type VolumeUpdate struct {
	Description *string    `json:"description"`
	Name        string     `json:"name"`
	UpdatedAt   *time.Time `json:"updated_at,omitempty"`
}

// Zone defines model for Zone.
type Zone struct {
	Description *string             `json:"description,omitempty"`
	DisplayName *string             `json:"display_name,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Name        string              `json:"name"`
	Region      Region              `json:"region"`
	Url         *string             `json:"url,omitempty"`
}

// AlarmAlarmsListParams defines parameters for AlarmAlarmsList.
type AlarmAlarmsListParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// AlarmAlarmsCreateParams defines parameters for AlarmAlarmsCreate.
type AlarmAlarmsCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// AlarmAlarmsDestroyParams defines parameters for AlarmAlarmsDestroy.
type AlarmAlarmsDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// AlarmAlarmsRetrieveParams defines parameters for AlarmAlarmsRetrieve.
type AlarmAlarmsRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// AlarmAlarmsPartialUpdateParams defines parameters for AlarmAlarmsPartialUpdate.
type AlarmAlarmsPartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// AlarmAlarmsUpdateParams defines parameters for AlarmAlarmsUpdate.
type AlarmAlarmsUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// BccsPlansBackupListParams defines parameters for BccsPlansBackupList.
type BccsPlansBackupListParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// BccsPlansContainerRegistryListParams defines parameters for BccsPlansContainerRegistryList.
type BccsPlansContainerRegistryListParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// BccsPlansFileStorageListParams defines parameters for BccsPlansFileStorageList.
type BccsPlansFileStorageListParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// BccsPlansK8sClusterListParams defines parameters for BccsPlansK8sClusterList.
type BccsPlansK8sClusterListParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// BccsPlansLoadBalancingListParams defines parameters for BccsPlansLoadBalancingList.
type BccsPlansLoadBalancingListParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// BccsPlansObjectStorageListParams defines parameters for BccsPlansObjectStorageList.
type BccsPlansObjectStorageListParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// BccsPlansServerListParams defines parameters for BccsPlansServerList.
type BccsPlansServerListParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// BccsPlansVolumeListParams defines parameters for BccsPlansVolumeList.
type BccsPlansVolumeListParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// BccsUsersListParams defines parameters for BccsUsersList.
type BccsUsersListParams struct {
	Email *string `form:"email,omitempty" json:"email,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int    `form:"page_size,omitempty" json:"page_size,omitempty"`
	Username *string `form:"username,omitempty" json:"username,omitempty"`
}

// BccsVolumesListParams defines parameters for BccsVolumesList.
type BccsVolumesListParams struct {
	BackupOrigin     *string             `form:"backup_origin,omitempty" json:"backup_origin,omitempty"`
	BackupPolicy     *openapi_types.UUID `form:"backup_policy,omitempty" json:"backup_policy,omitempty"`
	BackupPolicyNull *bool               `form:"backup_policy__null,omitempty" json:"backup_policy__null,omitempty"`
	DiskType         *string             `form:"disk_type,omitempty" json:"disk_type,omitempty"`
	Name             *string             `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize       *int     `form:"page_size,omitempty" json:"page_size,omitempty"`
	Region         *string  `form:"region,omitempty" json:"region,omitempty"`
	RegionId       *string  `form:"region_id,omitempty" json:"region_id,omitempty"`
	Server         *string  `form:"server,omitempty" json:"server,omitempty"`
	Size           *float32 `form:"size,omitempty" json:"size,omitempty"`
	SnapshotOrigin *string  `form:"snapshot_origin,omitempty" json:"snapshot_origin,omitempty"`

	// SnapshotPolicy Snapshot Policy (ID)
	SnapshotPolicy     *openapi_types.UUID `form:"snapshot_policy,omitempty" json:"snapshot_policy,omitempty"`
	SnapshotPolicyNull *bool               `form:"snapshot_policy__null,omitempty" json:"snapshot_policy__null,omitempty"`

	// Status Status of volume
	Status     *[]BccsVolumesListParamsStatus `form:"status,omitempty" json:"status,omitempty"`
	VolumeType *openapi_types.UUID            `form:"volume_type,omitempty" json:"volume_type,omitempty"`
	Zone       *string                        `form:"zone,omitempty" json:"zone,omitempty"`
	ZoneId     *openapi_types.UUID            `form:"zone_id,omitempty" json:"zone_id,omitempty"`
}

// BccsVolumesListParamsStatus defines parameters for BccsVolumesList.
type BccsVolumesListParamsStatus string

// ContainerRegistryImagesListParams defines parameters for ContainerRegistryImagesList.
type ContainerRegistryImagesListParams struct {
	// Page A page number within the paginated result set.
	Page *float32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *float32 `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Q Filter image by name. Supported query patterns are "exact match(k=v)", "fuzzy match(k=~v)".
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// ContainerRegistryImagesDestroyParams defines parameters for ContainerRegistryImagesDestroy.
type ContainerRegistryImagesDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// ContainerRegistryImagesRetrieveParams defines parameters for ContainerRegistryImagesRetrieve.
type ContainerRegistryImagesRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// ContainerRegistryImagesArtifactsListParams defines parameters for ContainerRegistryImagesArtifactsList.
type ContainerRegistryImagesArtifactsListParams struct {
	// Page A page number within the paginated result set.
	Page *float32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *float32 `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Q Filter artifact by tag. Supported query patterns are "exact match(k=v)", "fuzzy match(k=~v)".
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// ContainerRegistryImagesArtifactsDestroyParams defines parameters for ContainerRegistryImagesArtifactsDestroy.
type ContainerRegistryImagesArtifactsDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// ContainerRegistryImagesArtifactsRetrieveParams defines parameters for ContainerRegistryImagesArtifactsRetrieve.
type ContainerRegistryImagesArtifactsRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// ContainerRegistryImagesArtifactsBuildHistoryRetrieveParams defines parameters for ContainerRegistryImagesArtifactsBuildHistoryRetrieve.
type ContainerRegistryImagesArtifactsBuildHistoryRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// ContainerRegistryImagesArtifactsScanCreateParams defines parameters for ContainerRegistryImagesArtifactsScanCreate.
type ContainerRegistryImagesArtifactsScanCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// ContainerRegistryImagesArtifactsTagsRetrieveParams defines parameters for ContainerRegistryImagesArtifactsTagsRetrieve.
type ContainerRegistryImagesArtifactsTagsRetrieveParams struct {
	// Page A page number within the paginated result set.
	Page *float32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *float32 `form:"page_size,omitempty" json:"page_size,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// ContainerRegistryImagesArtifactsTagsDestroyParams defines parameters for ContainerRegistryImagesArtifactsTagsDestroy.
type ContainerRegistryImagesArtifactsTagsDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// ContainerRegistryImagesArtifactsVulnerabilitiesRetrieveParams defines parameters for ContainerRegistryImagesArtifactsVulnerabilitiesRetrieve.
type ContainerRegistryImagesArtifactsVulnerabilitiesRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// ContainerRegistryLogsRetrieveParams defines parameters for ContainerRegistryLogsRetrieve.
type ContainerRegistryLogsRetrieveParams struct {
	// Page A page number within the paginated result set.
	Page *float32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *float32 `form:"page_size,omitempty" json:"page_size,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// ContainerRegistryQuotaRetrieveParams defines parameters for ContainerRegistryQuotaRetrieve.
type ContainerRegistryQuotaRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// DbaasDbInstanceBackupsListParams defines parameters for DbaasDbInstanceBackupsList.
type DbaasDbInstanceBackupsListParams struct {
	// DbInstanceId DB Instance ID
	DbInstanceId *[]openapi_types.UUID `form:"db_instance_id,omitempty" json:"db_instance_id,omitempty"`
	Name         *string               `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *float32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *float32 `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Region Region Name
	Region *[]string `form:"region,omitempty" json:"region,omitempty"`

	// RegionId Region (ID)
	RegionId *[]openapi_types.UUID                   `form:"region_id,omitempty" json:"region_id,omitempty"`
	Status   *DbaasDbInstanceBackupsListParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// DbaasDbInstanceBackupsListParamsStatus defines parameters for DbaasDbInstanceBackupsList.
type DbaasDbInstanceBackupsListParamsStatus string

// DbaasDbInstanceBackupsCreateParams defines parameters for DbaasDbInstanceBackupsCreate.
type DbaasDbInstanceBackupsCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// DbaasDbInstanceBackupsRetrieveParams defines parameters for DbaasDbInstanceBackupsRetrieve.
type DbaasDbInstanceBackupsRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// DbaasDbInstancesListParams defines parameters for DbaasDbInstancesList.
type DbaasDbInstancesListParams struct {
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *float32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *float32 `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Region Region Name
	Region *[]string `form:"region,omitempty" json:"region,omitempty"`

	// RegionId Region ID
	RegionId *openapi_types.UUID `form:"region_id,omitempty" json:"region_id,omitempty"`

	// RegionName Region Name
	RegionName *string                           `form:"region_name,omitempty" json:"region_name,omitempty"`
	Status     *DbaasDbInstancesListParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// DbaasDbInstancesListParamsStatus defines parameters for DbaasDbInstancesList.
type DbaasDbInstancesListParamsStatus string

// DbaasDbInstancesCreateParams defines parameters for DbaasDbInstancesCreate.
type DbaasDbInstancesCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// DbaasDbInstancesDestroyParams defines parameters for DbaasDbInstancesDestroy.
type DbaasDbInstancesDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// DbaasDbInstancesRetrieveParams defines parameters for DbaasDbInstancesRetrieve.
type DbaasDbInstancesRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// DbaasDbInstancesExtendVolumeSizePartialUpdateParams defines parameters for DbaasDbInstancesExtendVolumeSizePartialUpdate.
type DbaasDbInstancesExtendVolumeSizePartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// DbaasDbInstancesUpdateBackupPolicyPartialUpdateParams defines parameters for DbaasDbInstancesUpdateBackupPolicyPartialUpdate.
type DbaasDbInstancesUpdateBackupPolicyPartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// DbaasDbInstancesUpdateFlavorPartialUpdateParams defines parameters for DbaasDbInstancesUpdateFlavorPartialUpdate.
type DbaasDbInstancesUpdateFlavorPartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateParams defines parameters for DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdate.
type DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// DbaasDbInstancesUpdateRootPasswordPartialUpdateParams defines parameters for DbaasDbInstancesUpdateRootPasswordPartialUpdate.
type DbaasDbInstancesUpdateRootPasswordPartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// DbaasDbVersionsListParams defines parameters for DbaasDbVersionsList.
type DbaasDbVersionsListParams struct {
	DatabaseType *DbaasDbVersionsListParamsDatabaseType `form:"database_type,omitempty" json:"database_type,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// RegionId Region ID
	RegionId *openapi_types.UUID `form:"region_id,omitempty" json:"region_id,omitempty"`

	// RegionName Region Name
	RegionName *string `form:"region_name,omitempty" json:"region_name,omitempty"`
}

// DbaasDbVersionsListParamsDatabaseType defines parameters for DbaasDbVersionsList.
type DbaasDbVersionsListParamsDatabaseType string

// DbaasDbaasFlavorsListParams defines parameters for DbaasDbaasFlavorsList.
type DbaasDbaasFlavorsListParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Region Region Name
	Region *[]string `form:"region,omitempty" json:"region,omitempty"`

	// RegionId Region ID
	RegionId *openapi_types.UUID `form:"region_id,omitempty" json:"region_id,omitempty"`
}

// DbaasDbaasRegionsListParams defines parameters for DbaasDbaasRegionsList.
type DbaasDbaasRegionsListParams struct {
	// IsActive Is Active
	IsActive *bool `form:"is_active,omitempty" json:"is_active,omitempty"`

	// Name Region Name
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// DbaasDbaasVolumeTypesListParams defines parameters for DbaasDbaasVolumeTypesList.
type DbaasDbaasVolumeTypesListParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Region Region Name
	Region *[]string `form:"region,omitempty" json:"region,omitempty"`

	// RegionId Region ID
	RegionId *openapi_types.UUID `form:"region_id,omitempty" json:"region_id,omitempty"`
}

// DbaasDbaasZonesListParams defines parameters for DbaasDbaasZonesList.
type DbaasDbaasZonesListParams struct {
	// DbaasRegionId Region ID
	DbaasRegionId *openapi_types.UUID `form:"dbaas_region_id,omitempty" json:"dbaas_region_id,omitempty"`

	// IsActive Is Active
	IsActive *bool `form:"is_active,omitempty" json:"is_active,omitempty"`

	// Name Zone Name
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// DbaasFlavorMappingsListParams defines parameters for DbaasFlavorMappingsList.
type DbaasFlavorMappingsListParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// RegionId Region ID
	RegionId *openapi_types.UUID `form:"region_id,omitempty" json:"region_id,omitempty"`

	// RegionName Region Name
	RegionName *string `form:"region_name,omitempty" json:"region_name,omitempty"`
}

// DbaasVolumeTypeMappingsListParams defines parameters for DbaasVolumeTypeMappingsList.
type DbaasVolumeTypeMappingsListParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// RegionId Region ID
	RegionId *openapi_types.UUID `form:"region_id,omitempty" json:"region_id,omitempty"`

	// RegionName Region Name
	RegionName *string `form:"region_name,omitempty" json:"region_name,omitempty"`
}

// InfraAutoScalingScalingActionListParams defines parameters for InfraAutoScalingScalingActionList.
type InfraAutoScalingScalingActionListParams struct {
	EventTimeAfter  *time.Time `form:"event_time_after,omitempty" json:"event_time_after,omitempty"`
	EventTimeBefore *time.Time `form:"event_time_before,omitempty" json:"event_time_before,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Region Region Name
	Region *[]string `form:"region,omitempty" json:"region,omitempty"`

	// RegionId Region (ID)
	RegionId *[]openapi_types.UUID `form:"region_id,omitempty" json:"region_id,omitempty"`

	// ScalingGroup The scaling group id.
	ScalingGroup  openapi_types.UUID  `form:"scaling_group" json:"scaling_group"`
	ScalingPolicy *openapi_types.UUID `form:"scaling_policy,omitempty" json:"scaling_policy,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraAutoScalingScalingGroupListParams defines parameters for InfraAutoScalingScalingGroupList.
type InfraAutoScalingScalingGroupListParams struct {
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Region Region Name
	Region *[]string `form:"region,omitempty" json:"region,omitempty"`

	// RegionId Region (ID)
	RegionId *[]openapi_types.UUID                         `form:"region_id,omitempty" json:"region_id,omitempty"`
	Status   *InfraAutoScalingScalingGroupListParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraAutoScalingScalingGroupListParamsStatus defines parameters for InfraAutoScalingScalingGroupList.
type InfraAutoScalingScalingGroupListParamsStatus string

// InfraAutoScalingScalingGroupCreateParams defines parameters for InfraAutoScalingScalingGroupCreate.
type InfraAutoScalingScalingGroupCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraAutoScalingScalingGroupMetricsSchemaRetrieveParams defines parameters for InfraAutoScalingScalingGroupMetricsSchemaRetrieve.
type InfraAutoScalingScalingGroupMetricsSchemaRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraAutoScalingScalingGroupDestroyParams defines parameters for InfraAutoScalingScalingGroupDestroy.
type InfraAutoScalingScalingGroupDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraAutoScalingScalingGroupRetrieveParams defines parameters for InfraAutoScalingScalingGroupRetrieve.
type InfraAutoScalingScalingGroupRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraAutoScalingScalingGroupPartialUpdateParams defines parameters for InfraAutoScalingScalingGroupPartialUpdate.
type InfraAutoScalingScalingGroupPartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraAutoScalingScalingGroupUpdateParams defines parameters for InfraAutoScalingScalingGroupUpdate.
type InfraAutoScalingScalingGroupUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraAutoScalingScalingGroupMetricsRetrieveParams defines parameters for InfraAutoScalingScalingGroupMetricsRetrieve.
type InfraAutoScalingScalingGroupMetricsRetrieveParams struct {
	// End The time end collect metric
	End *time.Time `form:"end,omitempty" json:"end,omitempty"`

	// Metric Metric Choices
	Metric *InfraAutoScalingScalingGroupMetricsRetrieveParamsMetric `form:"metric,omitempty" json:"metric,omitempty"`

	// Start The time start collect metric
	Start *time.Time `form:"start,omitempty" json:"start,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraAutoScalingScalingGroupMetricsRetrieveParamsMetric defines parameters for InfraAutoScalingScalingGroupMetricsRetrieve.
type InfraAutoScalingScalingGroupMetricsRetrieveParamsMetric string

// InfraAutoScalingScalingPolicyListParams defines parameters for InfraAutoScalingScalingPolicyList.
type InfraAutoScalingScalingPolicyListParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Region Region Name
	Region *[]string `form:"region,omitempty" json:"region,omitempty"`

	// RegionId Region (ID)
	RegionId     *[]openapi_types.UUID `form:"region_id,omitempty" json:"region_id,omitempty"`
	ScalingGroup *openapi_types.UUID   `form:"scaling_group,omitempty" json:"scaling_group,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraAutoScalingScalingPolicyCreateParams defines parameters for InfraAutoScalingScalingPolicyCreate.
type InfraAutoScalingScalingPolicyCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraAutoScalingScalingPolicyDestroyParams defines parameters for InfraAutoScalingScalingPolicyDestroy.
type InfraAutoScalingScalingPolicyDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraAutoScalingScalingPolicyRetrieveParams defines parameters for InfraAutoScalingScalingPolicyRetrieve.
type InfraAutoScalingScalingPolicyRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraAutoScalingScalingPolicyPartialUpdateParams defines parameters for InfraAutoScalingScalingPolicyPartialUpdate.
type InfraAutoScalingScalingPolicyPartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraAutoScalingScalingPolicyUpdateParams defines parameters for InfraAutoScalingScalingPolicyUpdate.
type InfraAutoScalingScalingPolicyUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraAutoScalingScalingQueryListParams defines parameters for InfraAutoScalingScalingQueryList.
type InfraAutoScalingScalingQueryListParams struct {
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// InfraAutoScalingScalingScheduleListParams defines parameters for InfraAutoScalingScalingScheduleList.
type InfraAutoScalingScalingScheduleListParams struct {
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Region Region Name
	Region *[]string `form:"region,omitempty" json:"region,omitempty"`

	// RegionId Region (ID)
	RegionId     *[]openapi_types.UUID `form:"region_id,omitempty" json:"region_id,omitempty"`
	ScalingGroup *openapi_types.UUID   `form:"scaling_group,omitempty" json:"scaling_group,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraAutoScalingScalingScheduleCreateParams defines parameters for InfraAutoScalingScalingScheduleCreate.
type InfraAutoScalingScalingScheduleCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraAutoScalingScalingScheduleDestroyParams defines parameters for InfraAutoScalingScalingScheduleDestroy.
type InfraAutoScalingScalingScheduleDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraAutoScalingScalingScheduleRetrieveParams defines parameters for InfraAutoScalingScalingScheduleRetrieve.
type InfraAutoScalingScalingScheduleRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraAutoScalingScalingSchedulePartialUpdateParams defines parameters for InfraAutoScalingScalingSchedulePartialUpdate.
type InfraAutoScalingScalingSchedulePartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraAutoScalingScalingScheduleUpdateParams defines parameters for InfraAutoScalingScalingScheduleUpdate.
type InfraAutoScalingScalingScheduleUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraAutoScalingScalingServerListParams defines parameters for InfraAutoScalingScalingServerList.
type InfraAutoScalingScalingServerListParams struct {
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Region Region Name
	Region *[]string `form:"region,omitempty" json:"region,omitempty"`

	// RegionId Region (ID)
	RegionId *[]openapi_types.UUID `form:"region_id,omitempty" json:"region_id,omitempty"`

	// ScalingGroup The scaling group id.
	ScalingGroup    openapi_types.UUID                             `form:"scaling_group" json:"scaling_group"`
	StartedAtAfter  *time.Time                                     `form:"started_at_after,omitempty" json:"started_at_after,omitempty"`
	StartedAtBefore *time.Time                                     `form:"started_at_before,omitempty" json:"started_at_before,omitempty"`
	Status          *InfraAutoScalingScalingServerListParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraAutoScalingScalingServerListParamsStatus defines parameters for InfraAutoScalingScalingServerList.
type InfraAutoScalingScalingServerListParamsStatus string

// InfraCertificateListParams defines parameters for InfraCertificateList.
type InfraCertificateListParams struct {
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Region Region Name
	Region *[]string `form:"region,omitempty" json:"region,omitempty"`

	// RegionId Region (ID)
	RegionId *[]openapi_types.UUID `form:"region_id,omitempty" json:"region_id,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraCertificateCreateParams defines parameters for InfraCertificateCreate.
type InfraCertificateCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraCertificateDestroyParams defines parameters for InfraCertificateDestroy.
type InfraCertificateDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraCertificateRetrieveParams defines parameters for InfraCertificateRetrieve.
type InfraCertificateRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraElasticIpsListParams defines parameters for InfraElasticIpsList.
type InfraElasticIpsListParams struct {
	// Available Available to attach to a server
	Available *bool `form:"available,omitempty" json:"available,omitempty"`

	// EnableIpv6 Only IPv4 or DualStack IPv4IPv6
	EnableIpv6 *bool   `form:"enable_ipv6,omitempty" json:"enable_ipv6,omitempty"`
	IpAddress  *string `form:"ip_address,omitempty" json:"ip_address,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Region Region Name
	Region *[]string `form:"region,omitempty" json:"region,omitempty"`

	// RegionId Region (ID)
	RegionId *[]openapi_types.UUID `form:"region_id,omitempty" json:"region_id,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraElasticIpsCreateParams defines parameters for InfraElasticIpsCreate.
type InfraElasticIpsCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraElasticIpsDestroyParams defines parameters for InfraElasticIpsDestroy.
type InfraElasticIpsDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraElasticIpsRetrieveParams defines parameters for InfraElasticIpsRetrieve.
type InfraElasticIpsRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraFilesystemAccessRulesListParams defines parameters for InfraFilesystemAccessRulesList.
type InfraFilesystemAccessRulesListParams struct {
	FilesystemId *openapi_types.UUID `form:"filesystem_id,omitempty" json:"filesystem_id,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int                                       `form:"page_size,omitempty" json:"page_size,omitempty"`
	State    *InfraFilesystemAccessRulesListParamsState `form:"state,omitempty" json:"state,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraFilesystemAccessRulesListParamsState defines parameters for InfraFilesystemAccessRulesList.
type InfraFilesystemAccessRulesListParamsState string

// InfraFilesystemAccessRulesCreateParams defines parameters for InfraFilesystemAccessRulesCreate.
type InfraFilesystemAccessRulesCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraFilesystemAccessRulesDestroyParams defines parameters for InfraFilesystemAccessRulesDestroy.
type InfraFilesystemAccessRulesDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraFilesystemAccessRulesRetrieveParams defines parameters for InfraFilesystemAccessRulesRetrieve.
type InfraFilesystemAccessRulesRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraFilesystemSnapshotPoliciesListParams defines parameters for InfraFilesystemSnapshotPoliciesList.
type InfraFilesystemSnapshotPoliciesListParams struct {
	DaysOfWeek *[]InfraFilesystemSnapshotPoliciesListParamsDaysOfWeek `form:"days_of_week,omitempty" json:"days_of_week,omitempty"`
	Name       *string                                                `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize  *int                                             `form:"page_size,omitempty" json:"page_size,omitempty"`
	Region    *string                                          `form:"region,omitempty" json:"region,omitempty"`
	RegionId  *openapi_types.UUID                              `form:"region_id,omitempty" json:"region_id,omitempty"`
	Retention *int                                             `form:"retention,omitempty" json:"retention,omitempty"`
	Status    *InfraFilesystemSnapshotPoliciesListParamsStatus `form:"status,omitempty" json:"status,omitempty"`
	Time      *string                                          `form:"time,omitempty" json:"time,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraFilesystemSnapshotPoliciesParamsDaysOfWeek defines parameters for InfraFilesystemSnapshotPoliciesList.
type InfraFilesystemSnapshotPoliciesListParamsDaysOfWeek string

// InfraFilesystemSnapshotPoliciesParamsDaysOfWeek defines parameters for InfraFilesystemSnapshotPoliciesList.
type InfraFilesystemSnapshotPoliciesParamsDaysOfWeek []InfraFilesystemSnapshotPoliciesListParamsDaysOfWeek

// InfraFilesystemSnapshotPoliciesListParamsStatus defines parameters for InfraFilesystemSnapshotPoliciesList.
type InfraFilesystemSnapshotPoliciesListParamsStatus string

// InfraFilesystemSnapshotPoliciesCreateParams defines parameters for InfraFilesystemSnapshotPoliciesCreate.
type InfraFilesystemSnapshotPoliciesCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraFilesystemSnapshotPoliciesDestroyParams defines parameters for InfraFilesystemSnapshotPoliciesDestroy.
type InfraFilesystemSnapshotPoliciesDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraFilesystemSnapshotPoliciesRetrieveParams defines parameters for InfraFilesystemSnapshotPoliciesRetrieve.
type InfraFilesystemSnapshotPoliciesRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraFilesystemSnapshotPoliciesPartialUpdateParams defines parameters for InfraFilesystemSnapshotPoliciesPartialUpdate.
type InfraFilesystemSnapshotPoliciesPartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraFilesystemSnapshotPoliciesUpdateParams defines parameters for InfraFilesystemSnapshotPoliciesUpdate.
type InfraFilesystemSnapshotPoliciesUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraFilesystemSnapshotsListParams defines parameters for InfraFilesystemSnapshotsList.
type InfraFilesystemSnapshotsListParams struct {
	Filesystem   *string             `form:"filesystem,omitempty" json:"filesystem,omitempty"`
	FilesystemId *openapi_types.UUID `form:"filesystem_id,omitempty" json:"filesystem_id,omitempty"`
	FromPolicy   *bool               `form:"from_policy,omitempty" json:"from_policy,omitempty"`
	Name         *string             `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int                                      `form:"page_size,omitempty" json:"page_size,omitempty"`
	Region   *string                                   `form:"region,omitempty" json:"region,omitempty"`
	RegionId *openapi_types.UUID                       `form:"region_id,omitempty" json:"region_id,omitempty"`
	Size     *int                                      `form:"size,omitempty" json:"size,omitempty"`
	Status   *InfraFilesystemSnapshotsListParamsStatus `form:"status,omitempty" json:"status,omitempty"`
	Zone     *string                                   `form:"zone,omitempty" json:"zone,omitempty"`
	ZoneId   *openapi_types.UUID                       `form:"zone_id,omitempty" json:"zone_id,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraFilesystemSnapshotsListParamsStatus defines parameters for InfraFilesystemSnapshotsList.
type InfraFilesystemSnapshotsListParamsStatus string

// InfraFilesystemSnapshotsCreateParams defines parameters for InfraFilesystemSnapshotsCreate.
type InfraFilesystemSnapshotsCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraFilesystemSnapshotsDestroyParams defines parameters for InfraFilesystemSnapshotsDestroy.
type InfraFilesystemSnapshotsDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraFilesystemSnapshotsRetrieveParams defines parameters for InfraFilesystemSnapshotsRetrieve.
type InfraFilesystemSnapshotsRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraFilesystemSnapshotsPartialUpdateParams defines parameters for InfraFilesystemSnapshotsPartialUpdate.
type InfraFilesystemSnapshotsPartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraFilesystemSnapshotsUpdateParams defines parameters for InfraFilesystemSnapshotsUpdate.
type InfraFilesystemSnapshotsUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraFilesystemTypesListParams defines parameters for InfraFilesystemTypesList.
type InfraFilesystemTypesListParams struct {
	Description *string `form:"description,omitempty" json:"description,omitempty"`
	Name        *string `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int                                  `form:"page_size,omitempty" json:"page_size,omitempty"`
	Status   *InfraFilesystemTypesListParamsStatus `form:"status,omitempty" json:"status,omitempty"`
	Zone     *openapi_types.UUID                   `form:"zone,omitempty" json:"zone,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraFilesystemTypesListParamsStatus defines parameters for InfraFilesystemTypesList.
type InfraFilesystemTypesListParamsStatus string

// InfraFilesystemTypesRetrieveParams defines parameters for InfraFilesystemTypesRetrieve.
type InfraFilesystemTypesRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraFilesystemsListParams defines parameters for InfraFilesystemsList.
type InfraFilesystemsListParams struct {
	FilesystemType   *string             `form:"filesystem_type,omitempty" json:"filesystem_type,omitempty"`
	FilesystemTypeId *openapi_types.UUID `form:"filesystem_type_id,omitempty" json:"filesystem_type_id,omitempty"`
	Name             *string             `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize           *int                              `form:"page_size,omitempty" json:"page_size,omitempty"`
	Region             *string                           `form:"region,omitempty" json:"region,omitempty"`
	RegionId           *openapi_types.UUID               `form:"region_id,omitempty" json:"region_id,omitempty"`
	SnapshotId         *openapi_types.UUID               `form:"snapshot_id,omitempty" json:"snapshot_id,omitempty"`
	SnapshotPolicyId   *openapi_types.UUID               `form:"snapshot_policy_id,omitempty" json:"snapshot_policy_id,omitempty"`
	SnapshotPolicyNull *bool                             `form:"snapshot_policy_null,omitempty" json:"snapshot_policy_null,omitempty"`
	Status             *InfraFilesystemsListParamsStatus `form:"status,omitempty" json:"status,omitempty"`
	SubnetId           *openapi_types.UUID               `form:"subnet_id,omitempty" json:"subnet_id,omitempty"`
	Zone               *string                           `form:"zone,omitempty" json:"zone,omitempty"`
	ZoneId             *openapi_types.UUID               `form:"zone_id,omitempty" json:"zone_id,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraFilesystemsListParamsStatus defines parameters for InfraFilesystemsList.
type InfraFilesystemsListParamsStatus string

// InfraFilesystemsCreateParams defines parameters for InfraFilesystemsCreate.
type InfraFilesystemsCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraFilesystemsDestroyParams defines parameters for InfraFilesystemsDestroy.
type InfraFilesystemsDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraFilesystemsRetrieveParams defines parameters for InfraFilesystemsRetrieve.
type InfraFilesystemsRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraFilesystemsPartialUpdateParams defines parameters for InfraFilesystemsPartialUpdate.
type InfraFilesystemsPartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraFilesystemsUpdateParams defines parameters for InfraFilesystemsUpdate.
type InfraFilesystemsUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraFilesystemsApplyPolicyCreateParams defines parameters for InfraFilesystemsApplyPolicyCreate.
type InfraFilesystemsApplyPolicyCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraFilesystemsResizeCreateParams defines parameters for InfraFilesystemsResizeCreate.
type InfraFilesystemsResizeCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraFilesystemsStartMigrationCreateParams defines parameters for InfraFilesystemsStartMigrationCreate.
type InfraFilesystemsStartMigrationCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraFilesystemsUnapplyPolicyCreateParams defines parameters for InfraFilesystemsUnapplyPolicyCreate.
type InfraFilesystemsUnapplyPolicyCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraFlavorsListParams defines parameters for InfraFlavorsList.
type InfraFlavorsListParams struct {
	Description *string `form:"description,omitempty" json:"description,omitempty"`
	Family      *string `form:"family,omitempty" json:"family,omitempty"`
	Gpus        *int    `form:"gpus,omitempty" json:"gpus,omitempty"`
	Name        *string `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int                          `form:"page_size,omitempty" json:"page_size,omitempty"`
	Ram      *int                          `form:"ram,omitempty" json:"ram,omitempty"`
	Region   *string                       `form:"region,omitempty" json:"region,omitempty"`
	Status   *InfraFlavorsListParamsStatus `form:"status,omitempty" json:"status,omitempty"`
	Vcpus    *int                          `form:"vcpus,omitempty" json:"vcpus,omitempty"`
	Zone     *openapi_types.UUID           `form:"zone,omitempty" json:"zone,omitempty"`
}

// InfraFlavorsListParamsStatus defines parameters for InfraFlavorsList.
type InfraFlavorsListParamsStatus string

// InfraImagesListParams defines parameters for InfraImagesList.
type InfraImagesListParams struct {
	Id   *openapi_types.UUID `form:"id,omitempty" json:"id,omitempty"`
	Name *string             `form:"name,omitempty" json:"name,omitempty"`
	Os   *string             `form:"os,omitempty" json:"os,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int                        `form:"page_size,omitempty" json:"page_size,omitempty"`
	State    *InfraImagesListParamsState `form:"state,omitempty" json:"state,omitempty"`
}

// InfraImagesListParamsState defines parameters for InfraImagesList.
type InfraImagesListParamsState string

// InfraKeypairsListParams defines parameters for InfraKeypairsList.
type InfraKeypairsListParams struct {
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraKeypairsCreateParams defines parameters for InfraKeypairsCreate.
type InfraKeypairsCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraKeypairsDestroyParams defines parameters for InfraKeypairsDestroy.
type InfraKeypairsDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraKeypairsRetrieveParams defines parameters for InfraKeypairsRetrieve.
type InfraKeypairsRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraKeypairsPartialUpdateParams defines parameters for InfraKeypairsPartialUpdate.
type InfraKeypairsPartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraKeypairsUpdateParams defines parameters for InfraKeypairsUpdate.
type InfraKeypairsUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLaunchTemplateListParams defines parameters for InfraLaunchTemplateList.
type InfraLaunchTemplateListParams struct {
	FlavorNull *bool   `form:"flavor__null,omitempty" json:"flavor__null,omitempty"`
	ImageNull  *bool   `form:"image__null,omitempty" json:"image__null,omitempty"`
	Name       *string `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize   *int  `form:"page_size,omitempty" json:"page_size,omitempty"`
	SubnetNull *bool `form:"subnet__null,omitempty" json:"subnet__null,omitempty"`
	VpcNull    *bool `form:"vpc__null,omitempty" json:"vpc__null,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLaunchTemplateCreateParams defines parameters for InfraLaunchTemplateCreate.
type InfraLaunchTemplateCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLaunchTemplateDestroyParams defines parameters for InfraLaunchTemplateDestroy.
type InfraLaunchTemplateDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLaunchTemplateRetrieveParams defines parameters for InfraLaunchTemplateRetrieve.
type InfraLaunchTemplateRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLaunchTemplatePartialUpdateParams defines parameters for InfraLaunchTemplatePartialUpdate.
type InfraLaunchTemplatePartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLaunchTemplateUpdateParams defines parameters for InfraLaunchTemplateUpdate.
type InfraLaunchTemplateUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingL7policyListParams defines parameters for InfraLoadBalancingL7policyList.
type InfraLoadBalancingL7policyListParams struct {
	Listener     *openapi_types.UUID `form:"listener,omitempty" json:"listener,omitempty"`
	LoadBalancer *openapi_types.UUID `form:"load_balancer,omitempty" json:"load_balancer,omitempty"`
	Name         *string             `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Region Region Name
	Region *[]string `form:"region,omitempty" json:"region,omitempty"`

	// RegionId Region (ID)
	RegionId *[]openapi_types.UUID `form:"region_id,omitempty" json:"region_id,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingL7policyCreateParams defines parameters for InfraLoadBalancingL7policyCreate.
type InfraLoadBalancingL7policyCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingL7policyDestroyParams defines parameters for InfraLoadBalancingL7policyDestroy.
type InfraLoadBalancingL7policyDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingL7policyRetrieveParams defines parameters for InfraLoadBalancingL7policyRetrieve.
type InfraLoadBalancingL7policyRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingL7policyPartialUpdateParams defines parameters for InfraLoadBalancingL7policyPartialUpdate.
type InfraLoadBalancingL7policyPartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingL7policyUpdateParams defines parameters for InfraLoadBalancingL7policyUpdate.
type InfraLoadBalancingL7policyUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingL7ruleListParams defines parameters for InfraLoadBalancingL7ruleList.
type InfraLoadBalancingL7ruleListParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingL7ruleCreateParams defines parameters for InfraLoadBalancingL7ruleCreate.
type InfraLoadBalancingL7ruleCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingL7ruleDestroyParams defines parameters for InfraLoadBalancingL7ruleDestroy.
type InfraLoadBalancingL7ruleDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingL7ruleRetrieveParams defines parameters for InfraLoadBalancingL7ruleRetrieve.
type InfraLoadBalancingL7ruleRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingL7rulePartialUpdateParams defines parameters for InfraLoadBalancingL7rulePartialUpdate.
type InfraLoadBalancingL7rulePartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingL7ruleUpdateParams defines parameters for InfraLoadBalancingL7ruleUpdate.
type InfraLoadBalancingL7ruleUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingListenerListParams defines parameters for InfraLoadBalancingListenerList.
type InfraLoadBalancingListenerListParams struct {
	LoadBalancer *openapi_types.UUID `form:"load_balancer,omitempty" json:"load_balancer,omitempty"`
	Name         *string             `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Region Region Name
	Region *[]string `form:"region,omitempty" json:"region,omitempty"`

	// RegionId Region (ID)
	RegionId *[]openapi_types.UUID `form:"region_id,omitempty" json:"region_id,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingListenerCreateParams defines parameters for InfraLoadBalancingListenerCreate.
type InfraLoadBalancingListenerCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingListenerMetricsSchemaRetrieveParams defines parameters for InfraLoadBalancingListenerMetricsSchemaRetrieve.
type InfraLoadBalancingListenerMetricsSchemaRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingListenerDestroyParams defines parameters for InfraLoadBalancingListenerDestroy.
type InfraLoadBalancingListenerDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingListenerRetrieveParams defines parameters for InfraLoadBalancingListenerRetrieve.
type InfraLoadBalancingListenerRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingListenerPartialUpdateParams defines parameters for InfraLoadBalancingListenerPartialUpdate.
type InfraLoadBalancingListenerPartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingListenerUpdateParams defines parameters for InfraLoadBalancingListenerUpdate.
type InfraLoadBalancingListenerUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingListenerMetricsRetrieveParams defines parameters for InfraLoadBalancingListenerMetricsRetrieve.
type InfraLoadBalancingListenerMetricsRetrieveParams struct {
	// End The time end collect metric
	End *time.Time `form:"end,omitempty" json:"end,omitempty"`

	// Metric Metric Choices
	Metric *InfraLoadBalancingListenerMetricsRetrieveParamsMetric `form:"metric,omitempty" json:"metric,omitempty"`

	// Start The time start collect metric
	Start *time.Time `form:"start,omitempty" json:"start,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingListenerMetricsRetrieveParamsMetric defines parameters for InfraLoadBalancingListenerMetricsRetrieve.
type InfraLoadBalancingListenerMetricsRetrieveParamsMetric string

// InfraLoadBalancingLoadBalancerListParams defines parameters for InfraLoadBalancingLoadBalancerList.
type InfraLoadBalancingLoadBalancerListParams struct {
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Region Region Name
	Region *[]string `form:"region,omitempty" json:"region,omitempty"`

	// RegionId Region (ID)
	RegionId   *[]openapi_types.UUID `form:"region_id,omitempty" json:"region_id,omitempty"`
	VipAddress *string               `form:"vip_address,omitempty" json:"vip_address,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingLoadBalancerCreateParams defines parameters for InfraLoadBalancingLoadBalancerCreate.
type InfraLoadBalancingLoadBalancerCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingLoadBalancerMetricsSchemaRetrieveParams defines parameters for InfraLoadBalancingLoadBalancerMetricsSchemaRetrieve.
type InfraLoadBalancingLoadBalancerMetricsSchemaRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingLoadBalancerDestroyParams defines parameters for InfraLoadBalancingLoadBalancerDestroy.
type InfraLoadBalancingLoadBalancerDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingLoadBalancerRetrieveParams defines parameters for InfraLoadBalancingLoadBalancerRetrieve.
type InfraLoadBalancingLoadBalancerRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingLoadBalancerPartialUpdateParams defines parameters for InfraLoadBalancingLoadBalancerPartialUpdate.
type InfraLoadBalancingLoadBalancerPartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingLoadBalancerUpdateParams defines parameters for InfraLoadBalancingLoadBalancerUpdate.
type InfraLoadBalancingLoadBalancerUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingLoadBalancerMetricsRetrieveParams defines parameters for InfraLoadBalancingLoadBalancerMetricsRetrieve.
type InfraLoadBalancingLoadBalancerMetricsRetrieveParams struct {
	// End The time end collect metric
	End *time.Time `form:"end,omitempty" json:"end,omitempty"`

	// Metric Metric Choices
	Metric *InfraLoadBalancingLoadBalancerMetricsRetrieveParamsMetric `form:"metric,omitempty" json:"metric,omitempty"`

	// Start The time start collect metric
	Start *time.Time `form:"start,omitempty" json:"start,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingLoadBalancerMetricsRetrieveParamsMetric defines parameters for InfraLoadBalancingLoadBalancerMetricsRetrieve.
type InfraLoadBalancingLoadBalancerMetricsRetrieveParamsMetric string

// InfraLoadBalancingServerGroupMemberListParams defines parameters for InfraLoadBalancingServerGroupMemberList.
type InfraLoadBalancingServerGroupMemberListParams struct {
	Address *string `form:"address,omitempty" json:"address,omitempty"`
	Name    *string `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Region Region Name
	Region *[]string `form:"region,omitempty" json:"region,omitempty"`

	// RegionId Region (ID)
	RegionId    *[]openapi_types.UUID `form:"region_id,omitempty" json:"region_id,omitempty"`
	ServerGroup *openapi_types.UUID   `form:"server_group,omitempty" json:"server_group,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingServerGroupMemberCreateParams defines parameters for InfraLoadBalancingServerGroupMemberCreate.
type InfraLoadBalancingServerGroupMemberCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingServerGroupMemberDestroyParams defines parameters for InfraLoadBalancingServerGroupMemberDestroy.
type InfraLoadBalancingServerGroupMemberDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingServerGroupMemberRetrieveParams defines parameters for InfraLoadBalancingServerGroupMemberRetrieve.
type InfraLoadBalancingServerGroupMemberRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingServerGroupMemberPartialUpdateParams defines parameters for InfraLoadBalancingServerGroupMemberPartialUpdate.
type InfraLoadBalancingServerGroupMemberPartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingServerGroupMemberUpdateParams defines parameters for InfraLoadBalancingServerGroupMemberUpdate.
type InfraLoadBalancingServerGroupMemberUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingServerGroupListParams defines parameters for InfraLoadBalancingServerGroupList.
type InfraLoadBalancingServerGroupListParams struct {
	LoadBalancer *openapi_types.UUID `form:"load_balancer,omitempty" json:"load_balancer,omitempty"`
	Name         *string             `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Region Region Name
	Region *[]string `form:"region,omitempty" json:"region,omitempty"`

	// RegionId Region (ID)
	RegionId *[]openapi_types.UUID `form:"region_id,omitempty" json:"region_id,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingServerGroupCreateParams defines parameters for InfraLoadBalancingServerGroupCreate.
type InfraLoadBalancingServerGroupCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingServerGroupDestroyParams defines parameters for InfraLoadBalancingServerGroupDestroy.
type InfraLoadBalancingServerGroupDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingServerGroupRetrieveParams defines parameters for InfraLoadBalancingServerGroupRetrieve.
type InfraLoadBalancingServerGroupRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingServerGroupPartialUpdateParams defines parameters for InfraLoadBalancingServerGroupPartialUpdate.
type InfraLoadBalancingServerGroupPartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraLoadBalancingServerGroupUpdateParams defines parameters for InfraLoadBalancingServerGroupUpdate.
type InfraLoadBalancingServerGroupUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraPlacementgroupsListParams defines parameters for InfraPlacementgroupsList.
type InfraPlacementgroupsListParams struct {
	Id   *openapi_types.UUID `form:"id,omitempty" json:"id,omitempty"`
	Name *string             `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int                                  `form:"page_size,omitempty" json:"page_size,omitempty"`
	Policy   *InfraPlacementgroupsListParamsPolicy `form:"policy,omitempty" json:"policy,omitempty"`
	Region   *openapi_types.UUID                   `form:"region,omitempty" json:"region,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraPlacementgroupsListParamsPolicy defines parameters for InfraPlacementgroupsList.
type InfraPlacementgroupsListParamsPolicy string

// InfraPlacementgroupsCreateParams defines parameters for InfraPlacementgroupsCreate.
type InfraPlacementgroupsCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraPlacementgroupsDestroyParams defines parameters for InfraPlacementgroupsDestroy.
type InfraPlacementgroupsDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraPlacementgroupsRetrieveParams defines parameters for InfraPlacementgroupsRetrieve.
type InfraPlacementgroupsRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraPlacementgroupsPartialUpdateParams defines parameters for InfraPlacementgroupsPartialUpdate.
type InfraPlacementgroupsPartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraPlacementgroupsUpdateParams defines parameters for InfraPlacementgroupsUpdate.
type InfraPlacementgroupsUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraPrivateIpsListParams defines parameters for InfraPrivateIpsList.
type InfraPrivateIpsListParams struct {
	Available *bool   `form:"available,omitempty" json:"available,omitempty"`
	IpAddress *string `form:"ip_address,omitempty" json:"ip_address,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int                `form:"page_size,omitempty" json:"page_size,omitempty"`
	Region   *string             `form:"region,omitempty" json:"region,omitempty"`
	RegionId *openapi_types.UUID `form:"region_id,omitempty" json:"region_id,omitempty"`

	// SubnetId Subnet (ID)
	SubnetId *openapi_types.UUID `form:"subnet_id,omitempty" json:"subnet_id,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraPrivateIpsCreateParams defines parameters for InfraPrivateIpsCreate.
type InfraPrivateIpsCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraPrivateIpsDestroyParams defines parameters for InfraPrivateIpsDestroy.
type InfraPrivateIpsDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraPrivateIpsRetrieveParams defines parameters for InfraPrivateIpsRetrieve.
type InfraPrivateIpsRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraPrivateIpsPartialUpdateParams defines parameters for InfraPrivateIpsPartialUpdate.
type InfraPrivateIpsPartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraPrivateIpsUpdateParams defines parameters for InfraPrivateIpsUpdate.
type InfraPrivateIpsUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraRouteTablesListParams defines parameters for InfraRouteTablesList.
type InfraRouteTablesListParams struct {
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Region Region Name
	Region *[]string `form:"region,omitempty" json:"region,omitempty"`

	// RegionId Region (ID)
	RegionId *[]openapi_types.UUID `form:"region_id,omitempty" json:"region_id,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraRouteTablesCreateParams defines parameters for InfraRouteTablesCreate.
type InfraRouteTablesCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraRouteTablesDestroyParams defines parameters for InfraRouteTablesDestroy.
type InfraRouteTablesDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraRouteTablesRetrieveParams defines parameters for InfraRouteTablesRetrieve.
type InfraRouteTablesRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraRouteTablesPartialUpdateParams defines parameters for InfraRouteTablesPartialUpdate.
type InfraRouteTablesPartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraRouteTablesUpdateParams defines parameters for InfraRouteTablesUpdate.
type InfraRouteTablesUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraRouteTablesDisableInternetAccessUpdateParams defines parameters for InfraRouteTablesDisableInternetAccessUpdate.
type InfraRouteTablesDisableInternetAccessUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraRouteTablesEnableInternetAccessUpdateParams defines parameters for InfraRouteTablesEnableInternetAccessUpdate.
type InfraRouteTablesEnableInternetAccessUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraRouteTablesSubnetsRetrieveParams defines parameters for InfraRouteTablesSubnetsRetrieve.
type InfraRouteTablesSubnetsRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraSecurityGroupRulesListParams defines parameters for InfraSecurityGroupRulesList.
type InfraSecurityGroupRulesListParams struct {
	Direction *string `form:"direction,omitempty" json:"direction,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// SecurityGroupId Security Group (ID)
	SecurityGroupId *openapi_types.UUID `form:"security_group_id,omitempty" json:"security_group_id,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraSecurityGroupRulesCreateParams defines parameters for InfraSecurityGroupRulesCreate.
type InfraSecurityGroupRulesCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraSecurityGroupRulesDestroyParams defines parameters for InfraSecurityGroupRulesDestroy.
type InfraSecurityGroupRulesDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraSecurityGroupRulesRetrieveParams defines parameters for InfraSecurityGroupRulesRetrieve.
type InfraSecurityGroupRulesRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraSecurityGroupRulesPartialUpdateParams defines parameters for InfraSecurityGroupRulesPartialUpdate.
type InfraSecurityGroupRulesPartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraSecurityGroupRulesUpdateParams defines parameters for InfraSecurityGroupRulesUpdate.
type InfraSecurityGroupRulesUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraSecurityGroupsListParams defines parameters for InfraSecurityGroupsList.
type InfraSecurityGroupsListParams struct {
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Region Region Name
	Region *[]string `form:"region,omitempty" json:"region,omitempty"`

	// RegionId Region (ID)
	RegionId *[]openapi_types.UUID `form:"region_id,omitempty" json:"region_id,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraSecurityGroupsCreateParams defines parameters for InfraSecurityGroupsCreate.
type InfraSecurityGroupsCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraSecurityGroupsDestroyParams defines parameters for InfraSecurityGroupsDestroy.
type InfraSecurityGroupsDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraSecurityGroupsRetrieveParams defines parameters for InfraSecurityGroupsRetrieve.
type InfraSecurityGroupsRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraSecurityGroupsPartialUpdateParams defines parameters for InfraSecurityGroupsPartialUpdate.
type InfraSecurityGroupsPartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraSecurityGroupsUpdateParams defines parameters for InfraSecurityGroupsUpdate.
type InfraSecurityGroupsUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraServersListParams defines parameters for InfraServersList.
type InfraServersListParams struct {
	ElasticIp *string             `form:"elastic_ip,omitempty" json:"elastic_ip,omitempty"`
	Id        *openapi_types.UUID `form:"id,omitempty" json:"id,omitempty"`
	Name      *string             `form:"name,omitempty" json:"name,omitempty"`
	Owner     *openapi_types.UUID `form:"owner,omitempty" json:"owner,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize       *int                                `form:"page_size,omitempty" json:"page_size,omitempty"`
	PlacementGroup *openapi_types.UUID                 `form:"placement_group,omitempty" json:"placement_group,omitempty"`
	PowerState     *[]InfraServersListParamsPowerState `form:"power_state,omitempty" json:"power_state,omitempty"`
	PrivateIp      *string                             `form:"private_ip,omitempty" json:"private_ip,omitempty"`
	Project        *openapi_types.UUID                 `form:"project,omitempty" json:"project,omitempty"`
	Region         *string                             `form:"region,omitempty" json:"region,omitempty"`
	Status         *InfraServersListParamsStatus       `form:"status,omitempty" json:"status,omitempty"`
	Vpc            *openapi_types.UUID                 `form:"vpc,omitempty" json:"vpc,omitempty"`
	Zone           *openapi_types.UUID                 `form:"zone,omitempty" json:"zone,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraServersListParamsPowerState defines parameters for InfraServersList.
type InfraServersListParamsPowerState string

// InfraServersListParamsStatus defines parameters for InfraServersList.
type InfraServersListParamsStatus string

// InfraServersCreateParams defines parameters for InfraServersCreate.
type InfraServersCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraServersMetricsSchemaRetrieveParams defines parameters for InfraServersMetricsSchemaRetrieve.
type InfraServersMetricsSchemaRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraServersDestroyParams defines parameters for InfraServersDestroy.
type InfraServersDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraServersRetrieveParams defines parameters for InfraServersRetrieve.
type InfraServersRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraServersPartialUpdateParams defines parameters for InfraServersPartialUpdate.
type InfraServersPartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraServersActionLogRetrieveParams defines parameters for InfraServersActionLogRetrieve.
type InfraServersActionLogRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraServersAttachEipCreateParams defines parameters for InfraServersAttachEipCreate.
type InfraServersAttachEipCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraServersAttachPrivateipCreateParams defines parameters for InfraServersAttachPrivateipCreate.
type InfraServersAttachPrivateipCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraServersAttachSubnetCreateParams defines parameters for InfraServersAttachSubnetCreate.
type InfraServersAttachSubnetCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraServersAttachVolumeCreateParams defines parameters for InfraServersAttachVolumeCreate.
type InfraServersAttachVolumeCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraServersChangePasswordCreateParams defines parameters for InfraServersChangePasswordCreate.
type InfraServersChangePasswordCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraServersConsoleLogRetrieveParams defines parameters for InfraServersConsoleLogRetrieve.
type InfraServersConsoleLogRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraServersConsoleCreateParams defines parameters for InfraServersConsoleCreate.
type InfraServersConsoleCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraServersDeleteCreateParams defines parameters for InfraServersDeleteCreate.
type InfraServersDeleteCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraServersDetachEipCreateParams defines parameters for InfraServersDetachEipCreate.
type InfraServersDetachEipCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraServersDetachPrivateIpCreateParams defines parameters for InfraServersDetachPrivateIpCreate.
type InfraServersDetachPrivateIpCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraServersDetachVolumeCreateParams defines parameters for InfraServersDetachVolumeCreate.
type InfraServersDetachVolumeCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraServersMetricsRetrieveParams defines parameters for InfraServersMetricsRetrieve.
type InfraServersMetricsRetrieveParams struct {
	// End The time end collect metric
	End *time.Time `form:"end,omitempty" json:"end,omitempty"`

	// Metric Metric Choices
	Metric *InfraServersMetricsRetrieveParamsMetric `form:"metric,omitempty" json:"metric,omitempty"`

	// Start The time start collect metric
	Start *time.Time `form:"start,omitempty" json:"start,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraServersMetricsRetrieveParamsMetric defines parameters for InfraServersMetricsRetrieve.
type InfraServersMetricsRetrieveParamsMetric string

// InfraServersResizeCreateParams defines parameters for InfraServersResizeCreate.
type InfraServersResizeCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraServersStartCreateParams defines parameters for InfraServersStartCreate.
type InfraServersStartCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraServersStopCreateParams defines parameters for InfraServersStopCreate.
type InfraServersStopCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraSnapshotpolicyListParams defines parameters for InfraSnapshotpolicyList.
type InfraSnapshotpolicyListParams struct {
	DaysOfWeek *[]InfraSnapshotpolicyListParamsDaysOfWeek `form:"days_of_week,omitempty" json:"days_of_week,omitempty"`
	Id         *openapi_types.UUID                        `form:"id,omitempty" json:"id,omitempty"`
	Name       *string                                    `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Region Region (ID)
	Region    *openapi_types.UUID `form:"region,omitempty" json:"region,omitempty"`
	Retention *int                `form:"retention,omitempty" json:"retention,omitempty"`

	// Status Status of snapshot policy
	Status *InfraSnapshotpolicyListParamsStatus `form:"status,omitempty" json:"status,omitempty"`
	Time   *string                              `form:"time,omitempty" json:"time,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraSnapshotpolicyParamsDaysOfWeek defines parameters for InfraSnapshotpolicyList.
type InfraSnapshotpolicyParamsDaysOfWeek string

// InfraSnapshotpolicyParamsDaysOfWeek defines parameters for InfraSnapshotpolicyList.
type InfraSnapshotpolicyListParamsDaysOfWeek []InfraSnapshotpolicyListParamsDaysOfWeek

// InfraSnapshotpolicyListParamsStatus defines parameters for InfraSnapshotpolicyList.
type InfraSnapshotpolicyListParamsStatus string

// InfraSnapshotpolicyCreateParams defines parameters for InfraSnapshotpolicyCreate.
type InfraSnapshotpolicyCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraSnapshotpolicyDestroyParams defines parameters for InfraSnapshotpolicyDestroy.
type InfraSnapshotpolicyDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraSnapshotpolicyRetrieveParams defines parameters for InfraSnapshotpolicyRetrieve.
type InfraSnapshotpolicyRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraSnapshotpolicyPartialUpdateParams defines parameters for InfraSnapshotpolicyPartialUpdate.
type InfraSnapshotpolicyPartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraSnapshotpolicyUpdateParams defines parameters for InfraSnapshotpolicyUpdate.
type InfraSnapshotpolicyUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraSnapshotsListParams defines parameters for InfraSnapshotsList.
type InfraSnapshotsListParams struct {
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int                            `form:"page_size,omitempty" json:"page_size,omitempty"`
	Region   *string                         `form:"region,omitempty" json:"region,omitempty"`
	RegionId *string                         `form:"region_id,omitempty" json:"region_id,omitempty"`
	Size     *int                            `form:"size,omitempty" json:"size,omitempty"`
	Status   *InfraSnapshotsListParamsStatus `form:"status,omitempty" json:"status,omitempty"`
	Volume   *string                         `form:"volume,omitempty" json:"volume,omitempty"`
	VolumeId *openapi_types.UUID             `form:"volume_id,omitempty" json:"volume_id,omitempty"`
	Zone     *string                         `form:"zone,omitempty" json:"zone,omitempty"`
	ZoneId   *string                         `form:"zone_id,omitempty" json:"zone_id,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraSnapshotsListParamsStatus defines parameters for InfraSnapshotsList.
type InfraSnapshotsListParamsStatus string

// InfraSnapshotsCreateParams defines parameters for InfraSnapshotsCreate.
type InfraSnapshotsCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraSnapshotsDestroyParams defines parameters for InfraSnapshotsDestroy.
type InfraSnapshotsDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraSnapshotsRetrieveParams defines parameters for InfraSnapshotsRetrieve.
type InfraSnapshotsRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraSnapshotsPartialUpdateParams defines parameters for InfraSnapshotsPartialUpdate.
type InfraSnapshotsPartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraSnapshotsUpdateParams defines parameters for InfraSnapshotsUpdate.
type InfraSnapshotsUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraSubnetsListParams defines parameters for InfraSubnetsList.
type InfraSubnetsListParams struct {
	Cidr *string `form:"cidr,omitempty" json:"cidr,omitempty"`
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int                `form:"page_size,omitempty" json:"page_size,omitempty"`
	Region   *string             `form:"region,omitempty" json:"region,omitempty"`
	RegionId *openapi_types.UUID `form:"region_id,omitempty" json:"region_id,omitempty"`
	Vpc      *openapi_types.UUID `form:"vpc,omitempty" json:"vpc,omitempty"`

	// VpcName VPC (Name)
	VpcName *string `form:"vpc_name,omitempty" json:"vpc_name,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraSubnetsCreateParams defines parameters for InfraSubnetsCreate.
type InfraSubnetsCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraSubnetsDestroyParams defines parameters for InfraSubnetsDestroy.
type InfraSubnetsDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraSubnetsRetrieveParams defines parameters for InfraSubnetsRetrieve.
type InfraSubnetsRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraSubnetsPartialUpdateParams defines parameters for InfraSubnetsPartialUpdate.
type InfraSubnetsPartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraSubnetsUpdateParams defines parameters for InfraSubnetsUpdate.
type InfraSubnetsUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraVolumeBackupPoliciesListParams defines parameters for InfraVolumeBackupPoliciesList.
type InfraVolumeBackupPoliciesListParams struct {
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize  *int                                       `form:"page_size,omitempty" json:"page_size,omitempty"`
	Region    *openapi_types.UUID                        `form:"region,omitempty" json:"region,omitempty"`
	Retention *int                                       `form:"retention,omitempty" json:"retention,omitempty"`
	Status    *InfraVolumeBackupPoliciesListParamsStatus `form:"status,omitempty" json:"status,omitempty"`
	Time      *string                                    `form:"time,omitempty" json:"time,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraVolumeBackupPoliciesListParamsStatus defines parameters for InfraVolumeBackupPoliciesList.
type InfraVolumeBackupPoliciesListParamsStatus string

// InfraVolumeBackupPoliciesCreateParams defines parameters for InfraVolumeBackupPoliciesCreate.
type InfraVolumeBackupPoliciesCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraVolumeBackupPoliciesDestroyParams defines parameters for InfraVolumeBackupPoliciesDestroy.
type InfraVolumeBackupPoliciesDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraVolumeBackupPoliciesRetrieveParams defines parameters for InfraVolumeBackupPoliciesRetrieve.
type InfraVolumeBackupPoliciesRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraVolumeBackupPoliciesPartialUpdateParams defines parameters for InfraVolumeBackupPoliciesPartialUpdate.
type InfraVolumeBackupPoliciesPartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraVolumeBackupPoliciesUpdateParams defines parameters for InfraVolumeBackupPoliciesUpdate.
type InfraVolumeBackupPoliciesUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraVolumeBackupsListParams defines parameters for InfraVolumeBackupsList.
type InfraVolumeBackupsListParams struct {
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int                                `form:"page_size,omitempty" json:"page_size,omitempty"`
	Region   *string                             `form:"region,omitempty" json:"region,omitempty"`
	RegionId *openapi_types.UUID                 `form:"region_id,omitempty" json:"region_id,omitempty"`
	Size     *float32                            `form:"size,omitempty" json:"size,omitempty"`
	Status   *InfraVolumeBackupsListParamsStatus `form:"status,omitempty" json:"status,omitempty"`
	Volume   *string                             `form:"volume,omitempty" json:"volume,omitempty"`
	VolumeId *openapi_types.UUID                 `form:"volume_id,omitempty" json:"volume_id,omitempty"`
	Zone     *string                             `form:"zone,omitempty" json:"zone,omitempty"`
	ZoneId   *openapi_types.UUID                 `form:"zone_id,omitempty" json:"zone_id,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraVolumeBackupsListParamsStatus defines parameters for InfraVolumeBackupsList.
type InfraVolumeBackupsListParamsStatus string

// InfraVolumeBackupsCreateParams defines parameters for InfraVolumeBackupsCreate.
type InfraVolumeBackupsCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraVolumeBackupsDestroyParams defines parameters for InfraVolumeBackupsDestroy.
type InfraVolumeBackupsDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraVolumeBackupsRetrieveParams defines parameters for InfraVolumeBackupsRetrieve.
type InfraVolumeBackupsRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraVolumeBackupsPartialUpdateParams defines parameters for InfraVolumeBackupsPartialUpdate.
type InfraVolumeBackupsPartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraVolumeBackupsUpdateParams defines parameters for InfraVolumeBackupsUpdate.
type InfraVolumeBackupsUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraVolumeBackupsRestoreCreateParams defines parameters for InfraVolumeBackupsRestoreCreate.
type InfraVolumeBackupsRestoreCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraVolumeTypeListParams defines parameters for InfraVolumeTypeList.
type InfraVolumeTypeListParams struct {
	// DiskType Disk of Volume Type
	DiskType *InfraVolumeTypeListParamsDiskType `form:"disk_type,omitempty" json:"disk_type,omitempty"`

	// EncryptionKeySize Encryption key size for volume
	EncryptionKeySize *InfraVolumeTypeListParamsEncryptionKeySize `form:"encryption_key_size,omitempty" json:"encryption_key_size,omitempty"`
	Id                *openapi_types.UUID                         `form:"id,omitempty" json:"id,omitempty"`
	Name              *string                                     `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Region Region (ID)
	Region *string `form:"region,omitempty" json:"region,omitempty"`

	// Speed Speed of Volume Type
	Speed *InfraVolumeTypeListParamsSpeed `form:"speed,omitempty" json:"speed,omitempty"`

	// Status Status of Volume Type
	Status *InfraVolumeTypeListParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// Zone Zone (ID)
	Zone *openapi_types.UUID `form:"zone,omitempty" json:"zone,omitempty"`
}

// InfraVolumeTypeListParamsDiskType defines parameters for InfraVolumeTypeList.
type InfraVolumeTypeListParamsDiskType string

// InfraVolumeTypeListParamsEncryptionKeySize defines parameters for InfraVolumeTypeList.
type InfraVolumeTypeListParamsEncryptionKeySize string

// InfraVolumeTypeListParamsSpeed defines parameters for InfraVolumeTypeList.
type InfraVolumeTypeListParamsSpeed string

// InfraVolumeTypeListParamsStatus defines parameters for InfraVolumeTypeList.
type InfraVolumeTypeListParamsStatus string

// InfraVolumesListParams defines parameters for InfraVolumesList.
type InfraVolumesListParams struct {
	BackupOrigin     *string             `form:"backup_origin,omitempty" json:"backup_origin,omitempty"`
	BackupPolicy     *openapi_types.UUID `form:"backup_policy,omitempty" json:"backup_policy,omitempty"`
	BackupPolicyNull *bool               `form:"backup_policy__null,omitempty" json:"backup_policy__null,omitempty"`
	DiskType         *string             `form:"disk_type,omitempty" json:"disk_type,omitempty"`
	Name             *string             `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize       *int     `form:"page_size,omitempty" json:"page_size,omitempty"`
	Region         *string  `form:"region,omitempty" json:"region,omitempty"`
	RegionId       *string  `form:"region_id,omitempty" json:"region_id,omitempty"`
	Server         *string  `form:"server,omitempty" json:"server,omitempty"`
	Size           *float32 `form:"size,omitempty" json:"size,omitempty"`
	SnapshotOrigin *string  `form:"snapshot_origin,omitempty" json:"snapshot_origin,omitempty"`

	// SnapshotPolicy Snapshot Policy (ID)
	SnapshotPolicy     *openapi_types.UUID `form:"snapshot_policy,omitempty" json:"snapshot_policy,omitempty"`
	SnapshotPolicyNull *bool               `form:"snapshot_policy__null,omitempty" json:"snapshot_policy__null,omitempty"`

	// Status Status of volume
	Status     *[]InfraVolumesListParamsStatus `form:"status,omitempty" json:"status,omitempty"`
	VolumeType *openapi_types.UUID             `form:"volume_type,omitempty" json:"volume_type,omitempty"`
	Zone       *string                         `form:"zone,omitempty" json:"zone,omitempty"`
	ZoneId     *openapi_types.UUID             `form:"zone_id,omitempty" json:"zone_id,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraVolumesListParamsStatus defines parameters for InfraVolumesList.
type InfraVolumesListParamsStatus string

// InfraVolumesCreateParams defines parameters for InfraVolumesCreate.
type InfraVolumesCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraVolumesDestroyParams defines parameters for InfraVolumesDestroy.
type InfraVolumesDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraVolumesRetrieveParams defines parameters for InfraVolumesRetrieve.
type InfraVolumesRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraVolumesPartialUpdateParams defines parameters for InfraVolumesPartialUpdate.
type InfraVolumesPartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraVolumesUpdateParams defines parameters for InfraVolumesUpdate.
type InfraVolumesUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraVolumesApplyBackupPolicyCreateParams defines parameters for InfraVolumesApplyBackupPolicyCreate.
type InfraVolumesApplyBackupPolicyCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraVolumesApplySnapshotPolicyCreateParams defines parameters for InfraVolumesApplySnapshotPolicyCreate.
type InfraVolumesApplySnapshotPolicyCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraVolumesExtendCreateParams defines parameters for InfraVolumesExtendCreate.
type InfraVolumesExtendCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraVolumesUnapplyBackupPolicyCreateParams defines parameters for InfraVolumesUnapplyBackupPolicyCreate.
type InfraVolumesUnapplyBackupPolicyCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraVolumesUnapplySnapshotPolicyCreateParams defines parameters for InfraVolumesUnapplySnapshotPolicyCreate.
type InfraVolumesUnapplySnapshotPolicyCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraVpcsListParams defines parameters for InfraVpcsList.
type InfraVpcsListParams struct {
	InternetAccess *bool   `form:"internet_access,omitempty" json:"internet_access,omitempty"`
	Name           *string `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Region Region Name
	Region *[]string `form:"region,omitempty" json:"region,omitempty"`

	// RegionId Region (ID)
	RegionId   *[]openapi_types.UUID `form:"region_id,omitempty" json:"region_id,omitempty"`
	SubnetNull *bool                 `form:"subnet__null,omitempty" json:"subnet__null,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraVpcsCreateParams defines parameters for InfraVpcsCreate.
type InfraVpcsCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraVpcsDestroyParams defines parameters for InfraVpcsDestroy.
type InfraVpcsDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraVpcsRetrieveParams defines parameters for InfraVpcsRetrieve.
type InfraVpcsRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraVpcsPartialUpdateParams defines parameters for InfraVpcsPartialUpdate.
type InfraVpcsPartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// InfraVpcsUpdateParams defines parameters for InfraVpcsUpdate.
type InfraVpcsUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// ProjectUserInviteJSONBody defines parameters for ProjectUserInvite.
type ProjectUserInviteJSONBody = []ProjectInvitation

// ProjectUserInviteFormdataBody defines parameters for ProjectUserInvite.
type ProjectUserInviteFormdataBody = []ProjectInvitation

// ProjectUserInviteMultipartBody defines parameters for ProjectUserInvite.
type ProjectUserInviteMultipartBody = []ProjectInvitation

// ProjectUserInviteParams defines parameters for ProjectUserInvite.
type ProjectUserInviteParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// KaasBackupPlansListParams defines parameters for KaasBackupPlansList.
type KaasBackupPlansListParams struct {
	Cluster *openapi_types.UUID `form:"cluster,omitempty" json:"cluster,omitempty"`

	// ClusterName Cluster (Name)
	ClusterName *string `form:"cluster_name,omitempty" json:"cluster_name,omitempty"`
	Name        *string `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int                `form:"page_size,omitempty" json:"page_size,omitempty"`
	Region   *openapi_types.UUID `form:"region,omitempty" json:"region,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// KaasBackupPlansCreateParams defines parameters for KaasBackupPlansCreate.
type KaasBackupPlansCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// KaasBackupPlansDestroyParams defines parameters for KaasBackupPlansDestroy.
type KaasBackupPlansDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// KaasBackupPlansRetrieveParams defines parameters for KaasBackupPlansRetrieve.
type KaasBackupPlansRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// KaasBackupPlansPartialUpdateParams defines parameters for KaasBackupPlansPartialUpdate.
type KaasBackupPlansPartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// KaasBackupPlansUpdateParams defines parameters for KaasBackupPlansUpdate.
type KaasBackupPlansUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// KaasBackupsListParams defines parameters for KaasBackupsList.
type KaasBackupsListParams struct {
	BackupPlan *openapi_types.UUID `form:"backup_plan,omitempty" json:"backup_plan,omitempty"`

	// BackupPlanName Backup Plan (Name)
	BackupPlanName *string `form:"backup_plan_name,omitempty" json:"backup_plan_name,omitempty"`

	// ClusterName Cluster (Name)
	ClusterName *string `form:"cluster_name,omitempty" json:"cluster_name,omitempty"`
	Name        *string `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// KaasBackupsCreateParams defines parameters for KaasBackupsCreate.
type KaasBackupsCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// KaasBackupsDestroyParams defines parameters for KaasBackupsDestroy.
type KaasBackupsDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// KaasBackupsRetrieveParams defines parameters for KaasBackupsRetrieve.
type KaasBackupsRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// KaasBackupsPartialUpdateParams defines parameters for KaasBackupsPartialUpdate.
type KaasBackupsPartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// KaasBackupsUpdateParams defines parameters for KaasBackupsUpdate.
type KaasBackupsUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// KaasCniVersionsListParams defines parameters for KaasCniVersionsList.
type KaasCniVersionsListParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int                           `form:"page_size,omitempty" json:"page_size,omitempty"`
	Type     *KaasCniVersionsListParamsType `form:"type,omitempty" json:"type,omitempty"`
	Version  *string                        `form:"version,omitempty" json:"version,omitempty"`
}

// KaasCniVersionsListParamsType defines parameters for KaasCniVersionsList.
type KaasCniVersionsListParamsType string

// KaasCsiVersionsListParams defines parameters for KaasCsiVersionsList.
type KaasCsiVersionsListParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int                           `form:"page_size,omitempty" json:"page_size,omitempty"`
	Type     *KaasCsiVersionsListParamsType `form:"type,omitempty" json:"type,omitempty"`
	Version  *string                        `form:"version,omitempty" json:"version,omitempty"`
}

// KaasCsiVersionsListParamsType defines parameters for KaasCsiVersionsList.
type KaasCsiVersionsListParamsType string

// KaasDashboardVersionsListParams defines parameters for KaasDashboardVersionsList.
type KaasDashboardVersionsListParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int                                 `form:"page_size,omitempty" json:"page_size,omitempty"`
	Type     *KaasDashboardVersionsListParamsType `form:"type,omitempty" json:"type,omitempty"`
	Version  *string                              `form:"version,omitempty" json:"version,omitempty"`
}

// KaasDashboardVersionsListParamsType defines parameters for KaasDashboardVersionsList.
type KaasDashboardVersionsListParamsType string

// KaasK8sVersionsListParams defines parameters for KaasK8sVersionsList.
type KaasK8sVersionsListParams struct {
	Image *openapi_types.UUID `form:"image,omitempty" json:"image,omitempty"`
	Name  *string             `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int                             `form:"page_size,omitempty" json:"page_size,omitempty"`
	Status   *KaasK8sVersionsListParamsStatus `form:"status,omitempty" json:"status,omitempty"`
}

// KaasK8sVersionsListParamsStatus defines parameters for KaasK8sVersionsList.
type KaasK8sVersionsListParamsStatus string

// KaasRestoresListParams defines parameters for KaasRestoresList.
type KaasRestoresListParams struct {
	Backup *openapi_types.UUID `form:"backup,omitempty" json:"backup,omitempty"`

	// BackupName Backup (Name)
	BackupName *string             `form:"backup_name,omitempty" json:"backup_name,omitempty"`
	Cluster    *openapi_types.UUID `form:"cluster,omitempty" json:"cluster,omitempty"`

	// ClusterName Cluster (Name)
	ClusterName *string `form:"cluster_name,omitempty" json:"cluster_name,omitempty"`
	Name        *string `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// KaasRestoresCreateParams defines parameters for KaasRestoresCreate.
type KaasRestoresCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// KaasRestoresDestroyParams defines parameters for KaasRestoresDestroy.
type KaasRestoresDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// KaasRestoresRetrieveParams defines parameters for KaasRestoresRetrieve.
type KaasRestoresRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// KaasRestoresPartialUpdateParams defines parameters for KaasRestoresPartialUpdate.
type KaasRestoresPartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// KaasRestoresUpdateParams defines parameters for KaasRestoresUpdate.
type KaasRestoresUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// KaasVkeClustersListParams defines parameters for KaasVkeClustersList.
type KaasVkeClustersListParams struct {
	EnableBackup *bool   `form:"enable_backup,omitempty" json:"enable_backup,omitempty"`
	Name         *string `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int                `form:"page_size,omitempty" json:"page_size,omitempty"`
	Region   *openapi_types.UUID `form:"region,omitempty" json:"region,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// KaasVkeClustersCreateParams defines parameters for KaasVkeClustersCreate.
type KaasVkeClustersCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// KaasVkeClustersDestroyParams defines parameters for KaasVkeClustersDestroy.
type KaasVkeClustersDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// KaasVkeClustersRetrieveParams defines parameters for KaasVkeClustersRetrieve.
type KaasVkeClustersRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// KaasVkeClustersPartialUpdateParams defines parameters for KaasVkeClustersPartialUpdate.
type KaasVkeClustersPartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// KaasVkeClustersUpdateParams defines parameters for KaasVkeClustersUpdate.
type KaasVkeClustersUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// KaasVkeKubeconfigsRetrieveParams defines parameters for KaasVkeKubeconfigsRetrieve.
type KaasVkeKubeconfigsRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// KaasVkeKubedashboardsRetrieveParams defines parameters for KaasVkeKubedashboardsRetrieve.
type KaasVkeKubedashboardsRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// KaasVkeMachinesListParams defines parameters for KaasVkeMachinesList.
type KaasVkeMachinesListParams struct {
	Cluster  *openapi_types.UUID `form:"cluster,omitempty" json:"cluster,omitempty"`
	Name     *string             `form:"name,omitempty" json:"name,omitempty"`
	NodePool *openapi_types.UUID `form:"node_pool,omitempty" json:"node_pool,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// KaasVkeNodePoolsListParams defines parameters for KaasVkeNodePoolsList.
type KaasVkeNodePoolsListParams struct {
	Cluster *openapi_types.UUID `form:"cluster,omitempty" json:"cluster,omitempty"`
	Name    *string             `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int                `form:"page_size,omitempty" json:"page_size,omitempty"`
	Zone     *openapi_types.UUID `form:"zone,omitempty" json:"zone,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// KaasVkeNodePoolsCreateParams defines parameters for KaasVkeNodePoolsCreate.
type KaasVkeNodePoolsCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// KaasVkeNodePoolsDestroyParams defines parameters for KaasVkeNodePoolsDestroy.
type KaasVkeNodePoolsDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// KaasVkeNodePoolsRetrieveParams defines parameters for KaasVkeNodePoolsRetrieve.
type KaasVkeNodePoolsRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// KaasVkeNodePoolsPartialUpdateParams defines parameters for KaasVkeNodePoolsPartialUpdate.
type KaasVkeNodePoolsPartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// KaasVkeNodePoolsUpdateParams defines parameters for KaasVkeNodePoolsUpdate.
type KaasVkeNodePoolsUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// KaasVkeWebcliRetrieveParams defines parameters for KaasVkeWebcliRetrieve.
type KaasVkeWebcliRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// MarketplaceCategoriesListParams defines parameters for MarketplaceCategoriesList.
type MarketplaceCategoriesListParams struct {
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// MarketplacePricingPlansListParams defines parameters for MarketplacePricingPlansList.
type MarketplacePricingPlansListParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize     *int                                             `form:"page_size,omitempty" json:"page_size,omitempty"`
	PricingModel *[]MarketplacePricingPlansListParamsPricingModel `form:"pricing_model,omitempty" json:"pricing_model,omitempty"`
}

// MarketplacePricingPlansListParamsPricingModel defines parameters for MarketplacePricingPlansList.
type MarketplacePricingPlansListParamsPricingModel string

// MarketplaceProductsListParams defines parameters for MarketplaceProductsList.
type MarketplaceProductsListParams struct {
	// Category Category(ID)
	Category    *[]openapi_types.UUID `form:"category,omitempty" json:"category,omitempty"`
	Description *string               `form:"description,omitempty" json:"description,omitempty"`
	Name        *string               `form:"name,omitempty" json:"name,omitempty"`
	Overview    *string               `form:"overview,omitempty" json:"overview,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize      *int                                         `form:"page_size,omitempty" json:"page_size,omitempty"`
	PricingModel  *[]MarketplaceProductsListParamsPricingModel `form:"pricing_model,omitempty" json:"pricing_model,omitempty"`
	PricingPlanId *[]openapi_types.UUID                        `form:"pricing_plan_id,omitempty" json:"pricing_plan_id,omitempty"`

	// Q Search
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Vendor Vendor(Name)
	Vendor *[]string `form:"vendor,omitempty" json:"vendor,omitempty"`

	// VendorId Vendor(ID)
	VendorId *[]openapi_types.UUID `form:"vendor_id,omitempty" json:"vendor_id,omitempty"`
}

// MarketplaceProductsListParamsPricingModel defines parameters for MarketplaceProductsList.
type MarketplaceProductsListParamsPricingModel string

// MarketplaceSubscriptionsListParams defines parameters for MarketplaceSubscriptionsList.
type MarketplaceSubscriptionsListParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Product Product (Name)
	Product *string `form:"product,omitempty" json:"product,omitempty"`
}

// MarketplaceVendorsListParams defines parameters for MarketplaceVendorsList.
type MarketplaceVendorsListParams struct {
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// ObjectStorageActivateServiceCreateParams defines parameters for ObjectStorageActivateServiceCreate.
type ObjectStorageActivateServiceCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// ObjectStorageBucketsListParams defines parameters for ObjectStorageBucketsList.
type ObjectStorageBucketsListParams struct {
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Region Region Name
	Region *[]string `form:"region,omitempty" json:"region,omitempty"`

	// RegionId Region (ID)
	RegionId *[]openapi_types.UUID `form:"region_id,omitempty" json:"region_id,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// ObjectStorageBucketsCreateParams defines parameters for ObjectStorageBucketsCreate.
type ObjectStorageBucketsCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// BucketAclShowParams defines parameters for BucketAclShow.
type BucketAclShowParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// BucketAclPatchParams defines parameters for BucketAclPatch.
type BucketAclPatchParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// BucketCorsDeleteParams defines parameters for BucketCorsDelete.
type BucketCorsDeleteParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// BucketCorsShowParams defines parameters for BucketCorsShow.
type BucketCorsShowParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// BucketCorsEditParams defines parameters for BucketCorsEdit.
type BucketCorsEditParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// BucketLifecycleDeleteParams defines parameters for BucketLifecycleDelete.
type BucketLifecycleDeleteParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// BucketLifecycleListParams defines parameters for BucketLifecycleList.
type BucketLifecycleListParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// BucketLifecyclePutParams defines parameters for BucketLifecyclePut.
type BucketLifecyclePutParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// BucketObjectListParams defines parameters for BucketObjectList.
type BucketObjectListParams struct {
	// Marker Specifies the key to start with when listing objects in a bucket. Marker have to be URL encoded.
	Marker *string `form:"marker,omitempty" json:"marker,omitempty"`

	// PageSize Size of each list object page. The page size can not be less than 1 or more than 1000. Default value of page size is 10.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Prefix Search object by specified prefix name. Prefix have to be URL encoded.
	Prefix *string `form:"prefix,omitempty" json:"prefix,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// CreateFolderGetAwsTokenUploadFileParams defines parameters for CreateFolderGetAwsTokenUploadFile.
type CreateFolderGetAwsTokenUploadFileParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// GetObjectAclParams defines parameters for GetObjectAcl.
type GetObjectAclParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// PatchObjectAclParams defines parameters for PatchObjectAcl.
type PatchObjectAclParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// ObjectBatchDeleteParams defines parameters for ObjectBatchDelete.
type ObjectBatchDeleteParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// DeleteObjectParams defines parameters for DeleteObject.
type DeleteObjectParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// ObjectDetailsParams defines parameters for ObjectDetails.
type ObjectDetailsParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// GetObjectShareUrlParams defines parameters for GetObjectShareUrl.
type GetObjectShareUrlParams struct {
	// TimeDuration The time duration of url share object. Unit of time in second. Default value is 300 seconds. Max value is 4294967295 seconds.
	TimeDuration *int64 `form:"time_duration,omitempty" json:"time_duration,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// DeleteAllObjectTagsParams defines parameters for DeleteAllObjectTags.
type DeleteAllObjectTagsParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// GetObjectTagsParams defines parameters for GetObjectTags.
type GetObjectTagsParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// PutObjectTagsParams defines parameters for PutObjectTags.
type PutObjectTagsParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// BucketPolicyDeleteParams defines parameters for BucketPolicyDelete.
type BucketPolicyDeleteParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// BucketPolicyGetParams defines parameters for BucketPolicyGet.
type BucketPolicyGetParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// BucketPolicyPutJSONBody defines parameters for BucketPolicyPut.
type BucketPolicyPutJSONBody map[string]interface{}

// BucketPolicyPutFormdataBody defines parameters for BucketPolicyPut.
type BucketPolicyPutFormdataBody map[string]interface{}

// BucketPolicyPutMultipartBody defines parameters for BucketPolicyPut.
type BucketPolicyPutMultipartBody map[string]interface{}

// BucketPolicyPutParams defines parameters for BucketPolicyPut.
type BucketPolicyPutParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// BucketStaticWebDeleteParams defines parameters for BucketStaticWebDelete.
type BucketStaticWebDeleteParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// BucketStaticWebCreateParams defines parameters for BucketStaticWebCreate.
type BucketStaticWebCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// BucketStaticWebShowParams defines parameters for BucketStaticWebShow.
type BucketStaticWebShowParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// DeleteBucketTagsParams defines parameters for DeleteBucketTags.
type DeleteBucketTagsParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// GetBucketTagsParams defines parameters for GetBucketTags.
type GetBucketTagsParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// PutBucketTagsParams defines parameters for PutBucketTags.
type PutBucketTagsParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// BucketVersioningShowParams defines parameters for BucketVersioningShow.
type BucketVersioningShowParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// BucketVersioningActionParams defines parameters for BucketVersioningAction.
type BucketVersioningActionParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// BucketObjectVersionListParams defines parameters for BucketObjectVersionList.
type BucketObjectVersionListParams struct {
	// Marker Specifies the key to start with when listing objects in a bucket. Marker have to be URL encoded.
	Marker *string `form:"marker,omitempty" json:"marker,omitempty"`

	// PageSize Size of each list object page. The page size can not be less than 1 or more than 1000. Default value of page size is 10.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Prefix Search object by specified prefix name. Prefix have to be URL encoded.
	Prefix *string `form:"prefix,omitempty" json:"prefix,omitempty"`

	// VersionIdMarker Specifies the object version you want to start listing from. Marker have to be URL encoded.
	VersionIdMarker *string `form:"version_id_marker,omitempty" json:"version_id_marker,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// GetObjectVersionAclParams defines parameters for GetObjectVersionAcl.
type GetObjectVersionAclParams struct {
	// VersionId The version id of object to query. Can be empty when request folder.
	VersionId string `form:"version_id" json:"version_id"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// PatchObjectVersionAclParams defines parameters for PatchObjectVersionAcl.
type PatchObjectVersionAclParams struct {
	// VersionId The version id of object to query. Can be empty when request folder.
	VersionId string `form:"version_id" json:"version_id"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// ObjectVersionBatchDeleteParams defines parameters for ObjectVersionBatchDelete.
type ObjectVersionBatchDeleteParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// DeleteObjectVersionParams defines parameters for DeleteObjectVersion.
type DeleteObjectVersionParams struct {
	// VersionId The version id of object to query. Can be empty when request folder.
	VersionId string `form:"version_id" json:"version_id"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// ObjectVersionDetailsParams defines parameters for ObjectVersionDetails.
type ObjectVersionDetailsParams struct {
	// VersionId The version id of object to query. Can be empty when request folder.
	VersionId string `form:"version_id" json:"version_id"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// ObjectVersionRestoreParams defines parameters for ObjectVersionRestore.
type ObjectVersionRestoreParams struct {
	// VersionId The version id of object to query. Can be empty when request folder.
	VersionId string `form:"version_id" json:"version_id"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// GetObjectVersionShareUrlParams defines parameters for GetObjectVersionShareUrl.
type GetObjectVersionShareUrlParams struct {
	// TimeDuration The time duration of url share object. Unit of time in second. Default value is 300 seconds. Max value is 4294967295 seconds.
	TimeDuration *int64 `form:"time_duration,omitempty" json:"time_duration,omitempty"`

	// VersionId The version id of object to query. Can be empty when request folder.
	VersionId string `form:"version_id" json:"version_id"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// DeleteAllObjectVersionTagsParams defines parameters for DeleteAllObjectVersionTags.
type DeleteAllObjectVersionTagsParams struct {
	// VersionId The version id of object to query. Can be empty when request folder.
	VersionId string `form:"version_id" json:"version_id"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// GetObjectVersionTagsParams defines parameters for GetObjectVersionTags.
type GetObjectVersionTagsParams struct {
	// VersionId The version id of object to query. Can be empty when request folder.
	VersionId string `form:"version_id" json:"version_id"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// PutObjectVersionTagsParams defines parameters for PutObjectVersionTags.
type PutObjectVersionTagsParams struct {
	// VersionId The version id of object to query. Can be empty when request folder.
	VersionId string `form:"version_id" json:"version_id"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// ObjectStorageBucketsDestroyParams defines parameters for ObjectStorageBucketsDestroy.
type ObjectStorageBucketsDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// ObjectStorageBucketsRetrieveParams defines parameters for ObjectStorageBucketsRetrieve.
type ObjectStorageBucketsRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// S3KeyListParams defines parameters for S3KeyList.
type S3KeyListParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// S3KeyCreateParams defines parameters for S3KeyCreate.
type S3KeyCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// S3KeyDeleteParams defines parameters for S3KeyDelete.
type S3KeyDeleteParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// StorageClassListParams defines parameters for StorageClassList.
type StorageClassListParams struct {
	// Region The region id to query.
	Region string `form:"region" json:"region"`
}

// OrganizationRegionsListParams defines parameters for OrganizationRegionsList.
type OrganizationRegionsListParams struct {
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// OrganizationZonesListParams defines parameters for OrganizationZonesList.
type OrganizationZonesListParams struct {
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Region Region
	Region *[]string `form:"region,omitempty" json:"region,omitempty"`

	// RegionId Region (ID)
	RegionId *[]openapi_types.UUID `form:"region_id,omitempty" json:"region_id,omitempty"`
}

// PlanTemplateObjectStoragesListParams defines parameters for PlanTemplateObjectStoragesList.
type PlanTemplateObjectStoragesListParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// PlanTemplateServersListParams defines parameters for PlanTemplateServersList.
type PlanTemplateServersListParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// PlanTemplateVolumesListParams defines parameters for PlanTemplateVolumesList.
type PlanTemplateVolumesListParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// PlanCustomersCustomerTypesListParams defines parameters for PlanCustomersCustomerTypesList.
type PlanCustomersCustomerTypesListParams struct {
	// GroupType Filter customer types by group_type
	GroupType *string `form:"group_type,omitempty" json:"group_type,omitempty"`
}

// PlanCustomersDistrictsListParams defines parameters for PlanCustomersDistrictsList.
type PlanCustomersDistrictsListParams struct {
	// ProvinceCode Filter district by province code
	ProvinceCode string `form:"province_code" json:"province_code"`
}

// PlanCustomersPrecinctsListParams defines parameters for PlanCustomersPrecinctsList.
type PlanCustomersPrecinctsListParams struct {
	// DistrictCode Filter precinct by district code
	DistrictCode string `form:"district_code" json:"district_code"`

	// ProvinceCode Filter precinct by province code
	ProvinceCode string `form:"province_code" json:"province_code"`
}

// PlanObjectStoragesListParams defines parameters for PlanObjectStoragesList.
type PlanObjectStoragesListParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// PlanObjectStoragesRetrieveParams defines parameters for PlanObjectStoragesRetrieve.
type PlanObjectStoragesRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// PlanOrdersListParams defines parameters for PlanOrdersList.
type PlanOrdersListParams struct {
	CreatedAfter  *openapi_types.Date `form:"created_after,omitempty" json:"created_after,omitempty"`
	CreatedBefore *openapi_types.Date `form:"created_before,omitempty" json:"created_before,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// PlanOrdersCreateParams defines parameters for PlanOrdersCreate.
type PlanOrdersCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// PlanOrdersCalculatePriceCreateParams defines parameters for PlanOrdersCalculatePriceCreate.
type PlanOrdersCalculatePriceCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// PlanOrdersPreviewContractCreateParams defines parameters for PlanOrdersPreviewContractCreate.
type PlanOrdersPreviewContractCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// PlanOrdersRetrieveParams defines parameters for PlanOrdersRetrieve.
type PlanOrdersRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// PlanOrdersCancelCreateParams defines parameters for PlanOrdersCancelCreate.
type PlanOrdersCancelCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// PlanOrdersInvoiceRetrieveParams defines parameters for PlanOrdersInvoiceRetrieve.
type PlanOrdersInvoiceRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// PlanServersListParams defines parameters for PlanServersList.
type PlanServersListParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// PlanServersRetrieveParams defines parameters for PlanServersRetrieve.
type PlanServersRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// PlanVolumesListParams defines parameters for PlanVolumesList.
type PlanVolumesListParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// PlanVolumesRetrieveParams defines parameters for PlanVolumesRetrieve.
type PlanVolumesRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// SecretManagerSecretsListParams defines parameters for SecretManagerSecretsList.
type SecretManagerSecretsListParams struct {
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// SecretManagerSecretsCreateParams defines parameters for SecretManagerSecretsCreate.
type SecretManagerSecretsCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// SecretManagerSecretsDestroyParams defines parameters for SecretManagerSecretsDestroy.
type SecretManagerSecretsDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// SecretManagerSecretsRetrieveParams defines parameters for SecretManagerSecretsRetrieve.
type SecretManagerSecretsRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// SecretManagerSecretsPartialUpdateParams defines parameters for SecretManagerSecretsPartialUpdate.
type SecretManagerSecretsPartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// SecretManagerSecretsUpdateParams defines parameters for SecretManagerSecretsUpdate.
type SecretManagerSecretsUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// SecretManagerSecretsMetadataRetrieveParams defines parameters for SecretManagerSecretsMetadataRetrieve.
type SecretManagerSecretsMetadataRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// SecretManagerSecretsMetadataCreateParams defines parameters for SecretManagerSecretsMetadataCreate.
type SecretManagerSecretsMetadataCreateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// ServiceCatalogFavoriteServicesListParams defines parameters for ServiceCatalogFavoriteServicesList.
type ServiceCatalogFavoriteServicesListParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// ServiceCatalogServicesListParams defines parameters for ServiceCatalogServicesList.
type ServiceCatalogServicesListParams struct {
	// CategoryId Category (ID)
	CategoryId  *[]openapi_types.UUID `form:"category_id,omitempty" json:"category_id,omitempty"`
	Description *string               `form:"description,omitempty" json:"description,omitempty"`
	Name        *string               `form:"name,omitempty" json:"name,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Q Search
	Q *string `form:"q,omitempty" json:"q,omitempty"`
}

// SupportQuestionsListParams defines parameters for SupportQuestionsList.
type SupportQuestionsListParams struct {
	CustomerName *string `form:"customer_name,omitempty" json:"customer_name,omitempty"`
	Email        *string `form:"email,omitempty" json:"email,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int    `form:"page_size,omitempty" json:"page_size,omitempty"`
	Question *string `form:"question,omitempty" json:"question,omitempty"`

	// User User(Name)
	User *[]string `form:"user,omitempty" json:"user,omitempty"`

	// UserId User(ID)
	UserId *[]openapi_types.UUID `form:"user_id,omitempty" json:"user_id,omitempty"`
}

// TenantProjectUsersListParams defines parameters for TenantProjectUsersList.
type TenantProjectUsersListParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// User User Name
	User *string `form:"user,omitempty" json:"user,omitempty"`

	// UserId User (ID)
	UserId *openapi_types.UUID `form:"user_id,omitempty" json:"user_id,omitempty"`

	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// TenantProjectUsersDestroyParams defines parameters for TenantProjectUsersDestroy.
type TenantProjectUsersDestroyParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// TenantProjectUsersRetrieveParams defines parameters for TenantProjectUsersRetrieve.
type TenantProjectUsersRetrieveParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// TenantProjectUsersPartialUpdateParams defines parameters for TenantProjectUsersPartialUpdate.
type TenantProjectUsersPartialUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// TenantProjectUsersUpdateParams defines parameters for TenantProjectUsersUpdate.
type TenantProjectUsersUpdateParams struct {
	// ProjectId The project id.
	ProjectId openapi_types.UUID `json:"project-id"`
}

// TenantProjectsListParams defines parameters for TenantProjectsList.
type TenantProjectsListParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int    `form:"page_size,omitempty" json:"page_size,omitempty"`
	Slug     *string `form:"slug,omitempty" json:"slug,omitempty"`
}

// TenantUsersListParams defines parameters for TenantUsersList.
type TenantUsersListParams struct {
	Email *string `form:"email,omitempty" json:"email,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int    `form:"page_size,omitempty" json:"page_size,omitempty"`
	Username *string `form:"username,omitempty" json:"username,omitempty"`
}

// AlarmAlarmsCreateJSONRequestBody defines body for AlarmAlarmsCreate for application/json ContentType.
type AlarmAlarmsCreateJSONRequestBody = Alarm

// AlarmAlarmsCreateFormdataRequestBody defines body for AlarmAlarmsCreate for application/x-www-form-urlencoded ContentType.
type AlarmAlarmsCreateFormdataRequestBody = Alarm

// AlarmAlarmsCreateMultipartRequestBody defines body for AlarmAlarmsCreate for multipart/form-data ContentType.
type AlarmAlarmsCreateMultipartRequestBody = Alarm

// AlarmAlarmsPartialUpdateJSONRequestBody defines body for AlarmAlarmsPartialUpdate for application/json ContentType.
type AlarmAlarmsPartialUpdateJSONRequestBody = PatchedAlarmUpdate

// AlarmAlarmsPartialUpdateFormdataRequestBody defines body for AlarmAlarmsPartialUpdate for application/x-www-form-urlencoded ContentType.
type AlarmAlarmsPartialUpdateFormdataRequestBody = PatchedAlarmUpdate

// AlarmAlarmsPartialUpdateMultipartRequestBody defines body for AlarmAlarmsPartialUpdate for multipart/form-data ContentType.
type AlarmAlarmsPartialUpdateMultipartRequestBody = PatchedAlarmUpdate

// AlarmAlarmsUpdateJSONRequestBody defines body for AlarmAlarmsUpdate for application/json ContentType.
type AlarmAlarmsUpdateJSONRequestBody = Alarm

// AlarmAlarmsUpdateFormdataRequestBody defines body for AlarmAlarmsUpdate for application/x-www-form-urlencoded ContentType.
type AlarmAlarmsUpdateFormdataRequestBody = Alarm

// AlarmAlarmsUpdateMultipartRequestBody defines body for AlarmAlarmsUpdate for multipart/form-data ContentType.
type AlarmAlarmsUpdateMultipartRequestBody = Alarm

// BccsOrdersPurchaseCallbackCreateJSONRequestBody defines body for BccsOrdersPurchaseCallbackCreate for application/json ContentType.
type BccsOrdersPurchaseCallbackCreateJSONRequestBody = BCCSOrderPurchaseCallback

// BccsOrdersPurchaseCallbackCreateFormdataRequestBody defines body for BccsOrdersPurchaseCallbackCreate for application/x-www-form-urlencoded ContentType.
type BccsOrdersPurchaseCallbackCreateFormdataRequestBody = BCCSOrderPurchaseCallback

// BccsOrdersPurchaseCallbackCreateMultipartRequestBody defines body for BccsOrdersPurchaseCallbackCreate for multipart/form-data ContentType.
type BccsOrdersPurchaseCallbackCreateMultipartRequestBody = BCCSOrderPurchaseCallback

// BccsPlansBackupCreateJSONRequestBody defines body for BccsPlansBackupCreate for application/json ContentType.
type BccsPlansBackupCreateJSONRequestBody = BCCSVolumeBackupPlan

// BccsPlansBackupCreateFormdataRequestBody defines body for BccsPlansBackupCreate for application/x-www-form-urlencoded ContentType.
type BccsPlansBackupCreateFormdataRequestBody = BCCSVolumeBackupPlan

// BccsPlansBackupCreateMultipartRequestBody defines body for BccsPlansBackupCreate for multipart/form-data ContentType.
type BccsPlansBackupCreateMultipartRequestBody = BCCSVolumeBackupPlan

// BccsPlansContainerRegistryCreateJSONRequestBody defines body for BccsPlansContainerRegistryCreate for application/json ContentType.
type BccsPlansContainerRegistryCreateJSONRequestBody = BCCSCRPlan

// BccsPlansContainerRegistryCreateFormdataRequestBody defines body for BccsPlansContainerRegistryCreate for application/x-www-form-urlencoded ContentType.
type BccsPlansContainerRegistryCreateFormdataRequestBody = BCCSCRPlan

// BccsPlansContainerRegistryCreateMultipartRequestBody defines body for BccsPlansContainerRegistryCreate for multipart/form-data ContentType.
type BccsPlansContainerRegistryCreateMultipartRequestBody = BCCSCRPlan

// BccsPlansFileStorageCreateJSONRequestBody defines body for BccsPlansFileStorageCreate for application/json ContentType.
type BccsPlansFileStorageCreateJSONRequestBody = BCCSFilesystemPlan

// BccsPlansFileStorageCreateFormdataRequestBody defines body for BccsPlansFileStorageCreate for application/x-www-form-urlencoded ContentType.
type BccsPlansFileStorageCreateFormdataRequestBody = BCCSFilesystemPlan

// BccsPlansFileStorageCreateMultipartRequestBody defines body for BccsPlansFileStorageCreate for multipart/form-data ContentType.
type BccsPlansFileStorageCreateMultipartRequestBody = BCCSFilesystemPlan

// BccsPlansK8sClusterCreateJSONRequestBody defines body for BccsPlansK8sClusterCreate for application/json ContentType.
type BccsPlansK8sClusterCreateJSONRequestBody = BCCSK8SClusterPlan

// BccsPlansK8sClusterCreateFormdataRequestBody defines body for BccsPlansK8sClusterCreate for application/x-www-form-urlencoded ContentType.
type BccsPlansK8sClusterCreateFormdataRequestBody = BCCSK8SClusterPlan

// BccsPlansK8sClusterCreateMultipartRequestBody defines body for BccsPlansK8sClusterCreate for multipart/form-data ContentType.
type BccsPlansK8sClusterCreateMultipartRequestBody = BCCSK8SClusterPlan

// BccsPlansLoadBalancingCreateJSONRequestBody defines body for BccsPlansLoadBalancingCreate for application/json ContentType.
type BccsPlansLoadBalancingCreateJSONRequestBody = BCCSLoadBalancerPlan

// BccsPlansLoadBalancingCreateFormdataRequestBody defines body for BccsPlansLoadBalancingCreate for application/x-www-form-urlencoded ContentType.
type BccsPlansLoadBalancingCreateFormdataRequestBody = BCCSLoadBalancerPlan

// BccsPlansLoadBalancingCreateMultipartRequestBody defines body for BccsPlansLoadBalancingCreate for multipart/form-data ContentType.
type BccsPlansLoadBalancingCreateMultipartRequestBody = BCCSLoadBalancerPlan

// BccsPlansObjectStorageCreateJSONRequestBody defines body for BccsPlansObjectStorageCreate for application/json ContentType.
type BccsPlansObjectStorageCreateJSONRequestBody = BCCSObjectStoragePlan

// BccsPlansObjectStorageCreateFormdataRequestBody defines body for BccsPlansObjectStorageCreate for application/x-www-form-urlencoded ContentType.
type BccsPlansObjectStorageCreateFormdataRequestBody = BCCSObjectStoragePlan

// BccsPlansObjectStorageCreateMultipartRequestBody defines body for BccsPlansObjectStorageCreate for multipart/form-data ContentType.
type BccsPlansObjectStorageCreateMultipartRequestBody = BCCSObjectStoragePlan

// BccsPlansServerCreateJSONRequestBody defines body for BccsPlansServerCreate for application/json ContentType.
type BccsPlansServerCreateJSONRequestBody = BCCSServerPlan

// BccsPlansServerCreateFormdataRequestBody defines body for BccsPlansServerCreate for application/x-www-form-urlencoded ContentType.
type BccsPlansServerCreateFormdataRequestBody = BCCSServerPlan

// BccsPlansServerCreateMultipartRequestBody defines body for BccsPlansServerCreate for multipart/form-data ContentType.
type BccsPlansServerCreateMultipartRequestBody = BCCSServerPlan

// BccsPlansVolumeCreateJSONRequestBody defines body for BccsPlansVolumeCreate for application/json ContentType.
type BccsPlansVolumeCreateJSONRequestBody = BCCSVolumePlan

// BccsPlansVolumeCreateFormdataRequestBody defines body for BccsPlansVolumeCreate for application/x-www-form-urlencoded ContentType.
type BccsPlansVolumeCreateFormdataRequestBody = BCCSVolumePlan

// BccsPlansVolumeCreateMultipartRequestBody defines body for BccsPlansVolumeCreate for multipart/form-data ContentType.
type BccsPlansVolumeCreateMultipartRequestBody = BCCSVolumePlan

// BccsUsersCreateJSONRequestBody defines body for BccsUsersCreate for application/json ContentType.
type BccsUsersCreateJSONRequestBody = BCCSUser

// BccsUsersCreateFormdataRequestBody defines body for BccsUsersCreate for application/x-www-form-urlencoded ContentType.
type BccsUsersCreateFormdataRequestBody = BCCSUser

// BccsUsersCreateMultipartRequestBody defines body for BccsUsersCreate for multipart/form-data ContentType.
type BccsUsersCreateMultipartRequestBody = BCCSUser

// DbaasDbInstanceBackupsCreateJSONRequestBody defines body for DbaasDbInstanceBackupsCreate for application/json ContentType.
type DbaasDbInstanceBackupsCreateJSONRequestBody = DBInstanceBackup

// DbaasDbInstanceBackupsCreateFormdataRequestBody defines body for DbaasDbInstanceBackupsCreate for application/x-www-form-urlencoded ContentType.
type DbaasDbInstanceBackupsCreateFormdataRequestBody = DBInstanceBackup

// DbaasDbInstanceBackupsCreateMultipartRequestBody defines body for DbaasDbInstanceBackupsCreate for multipart/form-data ContentType.
type DbaasDbInstanceBackupsCreateMultipartRequestBody = DBInstanceBackup

// DbaasDbInstancesCreateJSONRequestBody defines body for DbaasDbInstancesCreate for application/json ContentType.
type DbaasDbInstancesCreateJSONRequestBody = CreateDBInstance

// DbaasDbInstancesCreateFormdataRequestBody defines body for DbaasDbInstancesCreate for application/x-www-form-urlencoded ContentType.
type DbaasDbInstancesCreateFormdataRequestBody = CreateDBInstance

// DbaasDbInstancesCreateMultipartRequestBody defines body for DbaasDbInstancesCreate for multipart/form-data ContentType.
type DbaasDbInstancesCreateMultipartRequestBody = CreateDBInstance

// DbaasDbInstancesExtendVolumeSizePartialUpdateJSONRequestBody defines body for DbaasDbInstancesExtendVolumeSizePartialUpdate for application/json ContentType.
type DbaasDbInstancesExtendVolumeSizePartialUpdateJSONRequestBody = PatchedExtendVolumeSize

// DbaasDbInstancesExtendVolumeSizePartialUpdateFormdataRequestBody defines body for DbaasDbInstancesExtendVolumeSizePartialUpdate for application/x-www-form-urlencoded ContentType.
type DbaasDbInstancesExtendVolumeSizePartialUpdateFormdataRequestBody = PatchedExtendVolumeSize

// DbaasDbInstancesExtendVolumeSizePartialUpdateMultipartRequestBody defines body for DbaasDbInstancesExtendVolumeSizePartialUpdate for multipart/form-data ContentType.
type DbaasDbInstancesExtendVolumeSizePartialUpdateMultipartRequestBody = PatchedExtendVolumeSize

// DbaasDbInstancesUpdateBackupPolicyPartialUpdateJSONRequestBody defines body for DbaasDbInstancesUpdateBackupPolicyPartialUpdate for application/json ContentType.
type DbaasDbInstancesUpdateBackupPolicyPartialUpdateJSONRequestBody = PatchedUpdateBackupPolicy

// DbaasDbInstancesUpdateBackupPolicyPartialUpdateFormdataRequestBody defines body for DbaasDbInstancesUpdateBackupPolicyPartialUpdate for application/x-www-form-urlencoded ContentType.
type DbaasDbInstancesUpdateBackupPolicyPartialUpdateFormdataRequestBody = PatchedUpdateBackupPolicy

// DbaasDbInstancesUpdateBackupPolicyPartialUpdateMultipartRequestBody defines body for DbaasDbInstancesUpdateBackupPolicyPartialUpdate for multipart/form-data ContentType.
type DbaasDbInstancesUpdateBackupPolicyPartialUpdateMultipartRequestBody = PatchedUpdateBackupPolicy

// DbaasDbInstancesUpdateFlavorPartialUpdateJSONRequestBody defines body for DbaasDbInstancesUpdateFlavorPartialUpdate for application/json ContentType.
type DbaasDbInstancesUpdateFlavorPartialUpdateJSONRequestBody = PatchedUpdateFlavor

// DbaasDbInstancesUpdateFlavorPartialUpdateFormdataRequestBody defines body for DbaasDbInstancesUpdateFlavorPartialUpdate for application/x-www-form-urlencoded ContentType.
type DbaasDbInstancesUpdateFlavorPartialUpdateFormdataRequestBody = PatchedUpdateFlavor

// DbaasDbInstancesUpdateFlavorPartialUpdateMultipartRequestBody defines body for DbaasDbInstancesUpdateFlavorPartialUpdate for multipart/form-data ContentType.
type DbaasDbInstancesUpdateFlavorPartialUpdateMultipartRequestBody = PatchedUpdateFlavor

// DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateJSONRequestBody defines body for DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdate for application/json ContentType.
type DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateJSONRequestBody = PatchedUpdateKeepBackupPolicy

// DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateFormdataRequestBody defines body for DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdate for application/x-www-form-urlencoded ContentType.
type DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateFormdataRequestBody = PatchedUpdateKeepBackupPolicy

// DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateMultipartRequestBody defines body for DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdate for multipart/form-data ContentType.
type DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateMultipartRequestBody = PatchedUpdateKeepBackupPolicy

// DbaasDbInstancesUpdateRootPasswordPartialUpdateJSONRequestBody defines body for DbaasDbInstancesUpdateRootPasswordPartialUpdate for application/json ContentType.
type DbaasDbInstancesUpdateRootPasswordPartialUpdateJSONRequestBody = PatchedUpdateRootPassword

// DbaasDbInstancesUpdateRootPasswordPartialUpdateFormdataRequestBody defines body for DbaasDbInstancesUpdateRootPasswordPartialUpdate for application/x-www-form-urlencoded ContentType.
type DbaasDbInstancesUpdateRootPasswordPartialUpdateFormdataRequestBody = PatchedUpdateRootPassword

// DbaasDbInstancesUpdateRootPasswordPartialUpdateMultipartRequestBody defines body for DbaasDbInstancesUpdateRootPasswordPartialUpdate for multipart/form-data ContentType.
type DbaasDbInstancesUpdateRootPasswordPartialUpdateMultipartRequestBody = PatchedUpdateRootPassword

// InfraAutoScalingScalingGroupCreateJSONRequestBody defines body for InfraAutoScalingScalingGroupCreate for application/json ContentType.
type InfraAutoScalingScalingGroupCreateJSONRequestBody = ScalingGroup

// InfraAutoScalingScalingGroupCreateFormdataRequestBody defines body for InfraAutoScalingScalingGroupCreate for application/x-www-form-urlencoded ContentType.
type InfraAutoScalingScalingGroupCreateFormdataRequestBody = ScalingGroup

// InfraAutoScalingScalingGroupCreateMultipartRequestBody defines body for InfraAutoScalingScalingGroupCreate for multipart/form-data ContentType.
type InfraAutoScalingScalingGroupCreateMultipartRequestBody = ScalingGroup

// InfraAutoScalingScalingGroupPartialUpdateJSONRequestBody defines body for InfraAutoScalingScalingGroupPartialUpdate for application/json ContentType.
type InfraAutoScalingScalingGroupPartialUpdateJSONRequestBody = PatchedScalingGroupUpdate

// InfraAutoScalingScalingGroupPartialUpdateFormdataRequestBody defines body for InfraAutoScalingScalingGroupPartialUpdate for application/x-www-form-urlencoded ContentType.
type InfraAutoScalingScalingGroupPartialUpdateFormdataRequestBody = PatchedScalingGroupUpdate

// InfraAutoScalingScalingGroupPartialUpdateMultipartRequestBody defines body for InfraAutoScalingScalingGroupPartialUpdate for multipart/form-data ContentType.
type InfraAutoScalingScalingGroupPartialUpdateMultipartRequestBody = PatchedScalingGroupUpdate

// InfraAutoScalingScalingGroupUpdateJSONRequestBody defines body for InfraAutoScalingScalingGroupUpdate for application/json ContentType.
type InfraAutoScalingScalingGroupUpdateJSONRequestBody = ScalingGroupUpdate

// InfraAutoScalingScalingGroupUpdateFormdataRequestBody defines body for InfraAutoScalingScalingGroupUpdate for application/x-www-form-urlencoded ContentType.
type InfraAutoScalingScalingGroupUpdateFormdataRequestBody = ScalingGroupUpdate

// InfraAutoScalingScalingGroupUpdateMultipartRequestBody defines body for InfraAutoScalingScalingGroupUpdate for multipart/form-data ContentType.
type InfraAutoScalingScalingGroupUpdateMultipartRequestBody = ScalingGroupUpdate

// InfraAutoScalingScalingPolicyCreateJSONRequestBody defines body for InfraAutoScalingScalingPolicyCreate for application/json ContentType.
type InfraAutoScalingScalingPolicyCreateJSONRequestBody = ScalingPolicy

// InfraAutoScalingScalingPolicyCreateFormdataRequestBody defines body for InfraAutoScalingScalingPolicyCreate for application/x-www-form-urlencoded ContentType.
type InfraAutoScalingScalingPolicyCreateFormdataRequestBody = ScalingPolicy

// InfraAutoScalingScalingPolicyCreateMultipartRequestBody defines body for InfraAutoScalingScalingPolicyCreate for multipart/form-data ContentType.
type InfraAutoScalingScalingPolicyCreateMultipartRequestBody = ScalingPolicy

// InfraAutoScalingScalingPolicyPartialUpdateJSONRequestBody defines body for InfraAutoScalingScalingPolicyPartialUpdate for application/json ContentType.
type InfraAutoScalingScalingPolicyPartialUpdateJSONRequestBody = PatchedScalingPolicyUpdate

// InfraAutoScalingScalingPolicyPartialUpdateFormdataRequestBody defines body for InfraAutoScalingScalingPolicyPartialUpdate for application/x-www-form-urlencoded ContentType.
type InfraAutoScalingScalingPolicyPartialUpdateFormdataRequestBody = PatchedScalingPolicyUpdate

// InfraAutoScalingScalingPolicyPartialUpdateMultipartRequestBody defines body for InfraAutoScalingScalingPolicyPartialUpdate for multipart/form-data ContentType.
type InfraAutoScalingScalingPolicyPartialUpdateMultipartRequestBody = PatchedScalingPolicyUpdate

// InfraAutoScalingScalingPolicyUpdateJSONRequestBody defines body for InfraAutoScalingScalingPolicyUpdate for application/json ContentType.
type InfraAutoScalingScalingPolicyUpdateJSONRequestBody = ScalingPolicyUpdate

// InfraAutoScalingScalingPolicyUpdateFormdataRequestBody defines body for InfraAutoScalingScalingPolicyUpdate for application/x-www-form-urlencoded ContentType.
type InfraAutoScalingScalingPolicyUpdateFormdataRequestBody = ScalingPolicyUpdate

// InfraAutoScalingScalingPolicyUpdateMultipartRequestBody defines body for InfraAutoScalingScalingPolicyUpdate for multipart/form-data ContentType.
type InfraAutoScalingScalingPolicyUpdateMultipartRequestBody = ScalingPolicyUpdate

// InfraAutoScalingScalingQueryCreateJSONRequestBody defines body for InfraAutoScalingScalingQueryCreate for application/json ContentType.
type InfraAutoScalingScalingQueryCreateJSONRequestBody = ScalingQuery

// InfraAutoScalingScalingQueryCreateFormdataRequestBody defines body for InfraAutoScalingScalingQueryCreate for application/x-www-form-urlencoded ContentType.
type InfraAutoScalingScalingQueryCreateFormdataRequestBody = ScalingQuery

// InfraAutoScalingScalingQueryCreateMultipartRequestBody defines body for InfraAutoScalingScalingQueryCreate for multipart/form-data ContentType.
type InfraAutoScalingScalingQueryCreateMultipartRequestBody = ScalingQuery

// InfraAutoScalingScalingScheduleCreateJSONRequestBody defines body for InfraAutoScalingScalingScheduleCreate for application/json ContentType.
type InfraAutoScalingScalingScheduleCreateJSONRequestBody = ScalingSchedule

// InfraAutoScalingScalingScheduleCreateFormdataRequestBody defines body for InfraAutoScalingScalingScheduleCreate for application/x-www-form-urlencoded ContentType.
type InfraAutoScalingScalingScheduleCreateFormdataRequestBody = ScalingSchedule

// InfraAutoScalingScalingScheduleCreateMultipartRequestBody defines body for InfraAutoScalingScalingScheduleCreate for multipart/form-data ContentType.
type InfraAutoScalingScalingScheduleCreateMultipartRequestBody = ScalingSchedule

// InfraAutoScalingScalingSchedulePartialUpdateJSONRequestBody defines body for InfraAutoScalingScalingSchedulePartialUpdate for application/json ContentType.
type InfraAutoScalingScalingSchedulePartialUpdateJSONRequestBody = PatchedScalingScheduleUpdate

// InfraAutoScalingScalingSchedulePartialUpdateFormdataRequestBody defines body for InfraAutoScalingScalingSchedulePartialUpdate for application/x-www-form-urlencoded ContentType.
type InfraAutoScalingScalingSchedulePartialUpdateFormdataRequestBody = PatchedScalingScheduleUpdate

// InfraAutoScalingScalingSchedulePartialUpdateMultipartRequestBody defines body for InfraAutoScalingScalingSchedulePartialUpdate for multipart/form-data ContentType.
type InfraAutoScalingScalingSchedulePartialUpdateMultipartRequestBody = PatchedScalingScheduleUpdate

// InfraAutoScalingScalingScheduleUpdateJSONRequestBody defines body for InfraAutoScalingScalingScheduleUpdate for application/json ContentType.
type InfraAutoScalingScalingScheduleUpdateJSONRequestBody = ScalingScheduleUpdate

// InfraAutoScalingScalingScheduleUpdateFormdataRequestBody defines body for InfraAutoScalingScalingScheduleUpdate for application/x-www-form-urlencoded ContentType.
type InfraAutoScalingScalingScheduleUpdateFormdataRequestBody = ScalingScheduleUpdate

// InfraAutoScalingScalingScheduleUpdateMultipartRequestBody defines body for InfraAutoScalingScalingScheduleUpdate for multipart/form-data ContentType.
type InfraAutoScalingScalingScheduleUpdateMultipartRequestBody = ScalingScheduleUpdate

// InfraCertificateCreateJSONRequestBody defines body for InfraCertificateCreate for application/json ContentType.
type InfraCertificateCreateJSONRequestBody = Certificate

// InfraCertificateCreateFormdataRequestBody defines body for InfraCertificateCreate for application/x-www-form-urlencoded ContentType.
type InfraCertificateCreateFormdataRequestBody = Certificate

// InfraCertificateCreateMultipartRequestBody defines body for InfraCertificateCreate for multipart/form-data ContentType.
type InfraCertificateCreateMultipartRequestBody = Certificate

// InfraCertificatePartialUpdateJSONRequestBody defines body for InfraCertificatePartialUpdate for application/json ContentType.
type InfraCertificatePartialUpdateJSONRequestBody = PatchedCertificate

// InfraCertificatePartialUpdateFormdataRequestBody defines body for InfraCertificatePartialUpdate for application/x-www-form-urlencoded ContentType.
type InfraCertificatePartialUpdateFormdataRequestBody = PatchedCertificate

// InfraCertificatePartialUpdateMultipartRequestBody defines body for InfraCertificatePartialUpdate for multipart/form-data ContentType.
type InfraCertificatePartialUpdateMultipartRequestBody = PatchedCertificate

// InfraCertificateUpdateJSONRequestBody defines body for InfraCertificateUpdate for application/json ContentType.
type InfraCertificateUpdateJSONRequestBody = Certificate

// InfraCertificateUpdateFormdataRequestBody defines body for InfraCertificateUpdate for application/x-www-form-urlencoded ContentType.
type InfraCertificateUpdateFormdataRequestBody = Certificate

// InfraCertificateUpdateMultipartRequestBody defines body for InfraCertificateUpdate for multipart/form-data ContentType.
type InfraCertificateUpdateMultipartRequestBody = Certificate

// InfraElasticIpsCreateJSONRequestBody defines body for InfraElasticIpsCreate for application/json ContentType.
type InfraElasticIpsCreateJSONRequestBody = ElasticIP

// InfraElasticIpsCreateFormdataRequestBody defines body for InfraElasticIpsCreate for application/x-www-form-urlencoded ContentType.
type InfraElasticIpsCreateFormdataRequestBody = ElasticIP

// InfraElasticIpsCreateMultipartRequestBody defines body for InfraElasticIpsCreate for multipart/form-data ContentType.
type InfraElasticIpsCreateMultipartRequestBody = ElasticIP

// InfraFilesystemAccessRulesCreateJSONRequestBody defines body for InfraFilesystemAccessRulesCreate for application/json ContentType.
type InfraFilesystemAccessRulesCreateJSONRequestBody = FilesystemAccessRule

// InfraFilesystemAccessRulesCreateFormdataRequestBody defines body for InfraFilesystemAccessRulesCreate for application/x-www-form-urlencoded ContentType.
type InfraFilesystemAccessRulesCreateFormdataRequestBody = FilesystemAccessRule

// InfraFilesystemAccessRulesCreateMultipartRequestBody defines body for InfraFilesystemAccessRulesCreate for multipart/form-data ContentType.
type InfraFilesystemAccessRulesCreateMultipartRequestBody = FilesystemAccessRule

// InfraFilesystemAccessRulesPartialUpdateJSONRequestBody defines body for InfraFilesystemAccessRulesPartialUpdate for application/json ContentType.
type InfraFilesystemAccessRulesPartialUpdateJSONRequestBody = PatchedFilesystemAccessRule

// InfraFilesystemAccessRulesPartialUpdateFormdataRequestBody defines body for InfraFilesystemAccessRulesPartialUpdate for application/x-www-form-urlencoded ContentType.
type InfraFilesystemAccessRulesPartialUpdateFormdataRequestBody = PatchedFilesystemAccessRule

// InfraFilesystemAccessRulesPartialUpdateMultipartRequestBody defines body for InfraFilesystemAccessRulesPartialUpdate for multipart/form-data ContentType.
type InfraFilesystemAccessRulesPartialUpdateMultipartRequestBody = PatchedFilesystemAccessRule

// InfraFilesystemAccessRulesUpdateJSONRequestBody defines body for InfraFilesystemAccessRulesUpdate for application/json ContentType.
type InfraFilesystemAccessRulesUpdateJSONRequestBody = FilesystemAccessRule

// InfraFilesystemAccessRulesUpdateFormdataRequestBody defines body for InfraFilesystemAccessRulesUpdate for application/x-www-form-urlencoded ContentType.
type InfraFilesystemAccessRulesUpdateFormdataRequestBody = FilesystemAccessRule

// InfraFilesystemAccessRulesUpdateMultipartRequestBody defines body for InfraFilesystemAccessRulesUpdate for multipart/form-data ContentType.
type InfraFilesystemAccessRulesUpdateMultipartRequestBody = FilesystemAccessRule

// InfraFilesystemSnapshotPoliciesCreateJSONRequestBody defines body for InfraFilesystemSnapshotPoliciesCreate for application/json ContentType.
type InfraFilesystemSnapshotPoliciesCreateJSONRequestBody = FilesystemSnapshotPolicy

// InfraFilesystemSnapshotPoliciesCreateFormdataRequestBody defines body for InfraFilesystemSnapshotPoliciesCreate for application/x-www-form-urlencoded ContentType.
type InfraFilesystemSnapshotPoliciesCreateFormdataRequestBody = FilesystemSnapshotPolicy

// InfraFilesystemSnapshotPoliciesCreateMultipartRequestBody defines body for InfraFilesystemSnapshotPoliciesCreate for multipart/form-data ContentType.
type InfraFilesystemSnapshotPoliciesCreateMultipartRequestBody = FilesystemSnapshotPolicy

// InfraFilesystemSnapshotPoliciesPartialUpdateJSONRequestBody defines body for InfraFilesystemSnapshotPoliciesPartialUpdate for application/json ContentType.
type InfraFilesystemSnapshotPoliciesPartialUpdateJSONRequestBody = PatchedFilesystemSnapshotPolicyUpdate

// InfraFilesystemSnapshotPoliciesPartialUpdateFormdataRequestBody defines body for InfraFilesystemSnapshotPoliciesPartialUpdate for application/x-www-form-urlencoded ContentType.
type InfraFilesystemSnapshotPoliciesPartialUpdateFormdataRequestBody = PatchedFilesystemSnapshotPolicyUpdate

// InfraFilesystemSnapshotPoliciesPartialUpdateMultipartRequestBody defines body for InfraFilesystemSnapshotPoliciesPartialUpdate for multipart/form-data ContentType.
type InfraFilesystemSnapshotPoliciesPartialUpdateMultipartRequestBody = PatchedFilesystemSnapshotPolicyUpdate

// InfraFilesystemSnapshotPoliciesUpdateJSONRequestBody defines body for InfraFilesystemSnapshotPoliciesUpdate for application/json ContentType.
type InfraFilesystemSnapshotPoliciesUpdateJSONRequestBody = FilesystemSnapshotPolicyUpdate

// InfraFilesystemSnapshotPoliciesUpdateFormdataRequestBody defines body for InfraFilesystemSnapshotPoliciesUpdate for application/x-www-form-urlencoded ContentType.
type InfraFilesystemSnapshotPoliciesUpdateFormdataRequestBody = FilesystemSnapshotPolicyUpdate

// InfraFilesystemSnapshotPoliciesUpdateMultipartRequestBody defines body for InfraFilesystemSnapshotPoliciesUpdate for multipart/form-data ContentType.
type InfraFilesystemSnapshotPoliciesUpdateMultipartRequestBody = FilesystemSnapshotPolicyUpdate

// InfraFilesystemSnapshotsCreateJSONRequestBody defines body for InfraFilesystemSnapshotsCreate for application/json ContentType.
type InfraFilesystemSnapshotsCreateJSONRequestBody = FilesystemSnapshot

// InfraFilesystemSnapshotsCreateFormdataRequestBody defines body for InfraFilesystemSnapshotsCreate for application/x-www-form-urlencoded ContentType.
type InfraFilesystemSnapshotsCreateFormdataRequestBody = FilesystemSnapshot

// InfraFilesystemSnapshotsCreateMultipartRequestBody defines body for InfraFilesystemSnapshotsCreate for multipart/form-data ContentType.
type InfraFilesystemSnapshotsCreateMultipartRequestBody = FilesystemSnapshot

// InfraFilesystemSnapshotsPartialUpdateJSONRequestBody defines body for InfraFilesystemSnapshotsPartialUpdate for application/json ContentType.
type InfraFilesystemSnapshotsPartialUpdateJSONRequestBody = PatchedFilesystemSnapshotUpdate

// InfraFilesystemSnapshotsPartialUpdateFormdataRequestBody defines body for InfraFilesystemSnapshotsPartialUpdate for application/x-www-form-urlencoded ContentType.
type InfraFilesystemSnapshotsPartialUpdateFormdataRequestBody = PatchedFilesystemSnapshotUpdate

// InfraFilesystemSnapshotsPartialUpdateMultipartRequestBody defines body for InfraFilesystemSnapshotsPartialUpdate for multipart/form-data ContentType.
type InfraFilesystemSnapshotsPartialUpdateMultipartRequestBody = PatchedFilesystemSnapshotUpdate

// InfraFilesystemSnapshotsUpdateJSONRequestBody defines body for InfraFilesystemSnapshotsUpdate for application/json ContentType.
type InfraFilesystemSnapshotsUpdateJSONRequestBody = FilesystemSnapshotUpdate

// InfraFilesystemSnapshotsUpdateFormdataRequestBody defines body for InfraFilesystemSnapshotsUpdate for application/x-www-form-urlencoded ContentType.
type InfraFilesystemSnapshotsUpdateFormdataRequestBody = FilesystemSnapshotUpdate

// InfraFilesystemSnapshotsUpdateMultipartRequestBody defines body for InfraFilesystemSnapshotsUpdate for multipart/form-data ContentType.
type InfraFilesystemSnapshotsUpdateMultipartRequestBody = FilesystemSnapshotUpdate

// InfraFilesystemsCreateJSONRequestBody defines body for InfraFilesystemsCreate for application/json ContentType.
type InfraFilesystemsCreateJSONRequestBody = Filesystem

// InfraFilesystemsCreateFormdataRequestBody defines body for InfraFilesystemsCreate for application/x-www-form-urlencoded ContentType.
type InfraFilesystemsCreateFormdataRequestBody = Filesystem

// InfraFilesystemsCreateMultipartRequestBody defines body for InfraFilesystemsCreate for multipart/form-data ContentType.
type InfraFilesystemsCreateMultipartRequestBody = Filesystem

// InfraFilesystemsPartialUpdateJSONRequestBody defines body for InfraFilesystemsPartialUpdate for application/json ContentType.
type InfraFilesystemsPartialUpdateJSONRequestBody = PatchedFilesystemUpdate

// InfraFilesystemsPartialUpdateFormdataRequestBody defines body for InfraFilesystemsPartialUpdate for application/x-www-form-urlencoded ContentType.
type InfraFilesystemsPartialUpdateFormdataRequestBody = PatchedFilesystemUpdate

// InfraFilesystemsPartialUpdateMultipartRequestBody defines body for InfraFilesystemsPartialUpdate for multipart/form-data ContentType.
type InfraFilesystemsPartialUpdateMultipartRequestBody = PatchedFilesystemUpdate

// InfraFilesystemsUpdateJSONRequestBody defines body for InfraFilesystemsUpdate for application/json ContentType.
type InfraFilesystemsUpdateJSONRequestBody = FilesystemUpdate

// InfraFilesystemsUpdateFormdataRequestBody defines body for InfraFilesystemsUpdate for application/x-www-form-urlencoded ContentType.
type InfraFilesystemsUpdateFormdataRequestBody = FilesystemUpdate

// InfraFilesystemsUpdateMultipartRequestBody defines body for InfraFilesystemsUpdate for multipart/form-data ContentType.
type InfraFilesystemsUpdateMultipartRequestBody = FilesystemUpdate

// InfraFilesystemsApplyPolicyCreateJSONRequestBody defines body for InfraFilesystemsApplyPolicyCreate for application/json ContentType.
type InfraFilesystemsApplyPolicyCreateJSONRequestBody = FilesystemApplymentPolicy

// InfraFilesystemsApplyPolicyCreateFormdataRequestBody defines body for InfraFilesystemsApplyPolicyCreate for application/x-www-form-urlencoded ContentType.
type InfraFilesystemsApplyPolicyCreateFormdataRequestBody = FilesystemApplymentPolicy

// InfraFilesystemsApplyPolicyCreateMultipartRequestBody defines body for InfraFilesystemsApplyPolicyCreate for multipart/form-data ContentType.
type InfraFilesystemsApplyPolicyCreateMultipartRequestBody = FilesystemApplymentPolicy

// InfraFilesystemsResizeCreateJSONRequestBody defines body for InfraFilesystemsResizeCreate for application/json ContentType.
type InfraFilesystemsResizeCreateJSONRequestBody = FilesystemResize

// InfraFilesystemsResizeCreateFormdataRequestBody defines body for InfraFilesystemsResizeCreate for application/x-www-form-urlencoded ContentType.
type InfraFilesystemsResizeCreateFormdataRequestBody = FilesystemResize

// InfraFilesystemsResizeCreateMultipartRequestBody defines body for InfraFilesystemsResizeCreate for multipart/form-data ContentType.
type InfraFilesystemsResizeCreateMultipartRequestBody = FilesystemResize

// InfraFilesystemsStartMigrationCreateJSONRequestBody defines body for InfraFilesystemsStartMigrationCreate for application/json ContentType.
type InfraFilesystemsStartMigrationCreateJSONRequestBody = FilesystemMigrate

// InfraFilesystemsStartMigrationCreateFormdataRequestBody defines body for InfraFilesystemsStartMigrationCreate for application/x-www-form-urlencoded ContentType.
type InfraFilesystemsStartMigrationCreateFormdataRequestBody = FilesystemMigrate

// InfraFilesystemsStartMigrationCreateMultipartRequestBody defines body for InfraFilesystemsStartMigrationCreate for multipart/form-data ContentType.
type InfraFilesystemsStartMigrationCreateMultipartRequestBody = FilesystemMigrate

// InfraFlavorsCreateJSONRequestBody defines body for InfraFlavorsCreate for application/json ContentType.
type InfraFlavorsCreateJSONRequestBody = FlavorDetail

// InfraFlavorsCreateFormdataRequestBody defines body for InfraFlavorsCreate for application/x-www-form-urlencoded ContentType.
type InfraFlavorsCreateFormdataRequestBody = FlavorDetail

// InfraFlavorsCreateMultipartRequestBody defines body for InfraFlavorsCreate for multipart/form-data ContentType.
type InfraFlavorsCreateMultipartRequestBody = FlavorDetail

// InfraFlavorsPartialUpdateJSONRequestBody defines body for InfraFlavorsPartialUpdate for application/json ContentType.
type InfraFlavorsPartialUpdateJSONRequestBody = PatchedFlavorUpdate

// InfraFlavorsPartialUpdateFormdataRequestBody defines body for InfraFlavorsPartialUpdate for application/x-www-form-urlencoded ContentType.
type InfraFlavorsPartialUpdateFormdataRequestBody = PatchedFlavorUpdate

// InfraFlavorsPartialUpdateMultipartRequestBody defines body for InfraFlavorsPartialUpdate for multipart/form-data ContentType.
type InfraFlavorsPartialUpdateMultipartRequestBody = PatchedFlavorUpdate

// InfraFlavorsUpdateJSONRequestBody defines body for InfraFlavorsUpdate for application/json ContentType.
type InfraFlavorsUpdateJSONRequestBody = FlavorUpdate

// InfraFlavorsUpdateFormdataRequestBody defines body for InfraFlavorsUpdate for application/x-www-form-urlencoded ContentType.
type InfraFlavorsUpdateFormdataRequestBody = FlavorUpdate

// InfraFlavorsUpdateMultipartRequestBody defines body for InfraFlavorsUpdate for multipart/form-data ContentType.
type InfraFlavorsUpdateMultipartRequestBody = FlavorUpdate

// InfraImagesCreateJSONRequestBody defines body for InfraImagesCreate for application/json ContentType.
type InfraImagesCreateJSONRequestBody = Image

// InfraImagesCreateFormdataRequestBody defines body for InfraImagesCreate for application/x-www-form-urlencoded ContentType.
type InfraImagesCreateFormdataRequestBody = Image

// InfraImagesCreateMultipartRequestBody defines body for InfraImagesCreate for multipart/form-data ContentType.
type InfraImagesCreateMultipartRequestBody = Image

// InfraImagesPartialUpdateJSONRequestBody defines body for InfraImagesPartialUpdate for application/json ContentType.
type InfraImagesPartialUpdateJSONRequestBody = PatchedImageUpdate

// InfraImagesPartialUpdateFormdataRequestBody defines body for InfraImagesPartialUpdate for application/x-www-form-urlencoded ContentType.
type InfraImagesPartialUpdateFormdataRequestBody = PatchedImageUpdate

// InfraImagesPartialUpdateMultipartRequestBody defines body for InfraImagesPartialUpdate for multipart/form-data ContentType.
type InfraImagesPartialUpdateMultipartRequestBody = PatchedImageUpdate

// InfraImagesUpdateJSONRequestBody defines body for InfraImagesUpdate for application/json ContentType.
type InfraImagesUpdateJSONRequestBody = ImageUpdate

// InfraImagesUpdateFormdataRequestBody defines body for InfraImagesUpdate for application/x-www-form-urlencoded ContentType.
type InfraImagesUpdateFormdataRequestBody = ImageUpdate

// InfraImagesUpdateMultipartRequestBody defines body for InfraImagesUpdate for multipart/form-data ContentType.
type InfraImagesUpdateMultipartRequestBody = ImageUpdate

// InfraKeypairsCreateJSONRequestBody defines body for InfraKeypairsCreate for application/json ContentType.
type InfraKeypairsCreateJSONRequestBody = Keypair

// InfraKeypairsCreateFormdataRequestBody defines body for InfraKeypairsCreate for application/x-www-form-urlencoded ContentType.
type InfraKeypairsCreateFormdataRequestBody = Keypair

// InfraKeypairsCreateMultipartRequestBody defines body for InfraKeypairsCreate for multipart/form-data ContentType.
type InfraKeypairsCreateMultipartRequestBody = Keypair

// InfraKeypairsPartialUpdateJSONRequestBody defines body for InfraKeypairsPartialUpdate for application/json ContentType.
type InfraKeypairsPartialUpdateJSONRequestBody = PatchedKeypairUpdate

// InfraKeypairsPartialUpdateFormdataRequestBody defines body for InfraKeypairsPartialUpdate for application/x-www-form-urlencoded ContentType.
type InfraKeypairsPartialUpdateFormdataRequestBody = PatchedKeypairUpdate

// InfraKeypairsPartialUpdateMultipartRequestBody defines body for InfraKeypairsPartialUpdate for multipart/form-data ContentType.
type InfraKeypairsPartialUpdateMultipartRequestBody = PatchedKeypairUpdate

// InfraKeypairsUpdateJSONRequestBody defines body for InfraKeypairsUpdate for application/json ContentType.
type InfraKeypairsUpdateJSONRequestBody = KeypairUpdate

// InfraKeypairsUpdateFormdataRequestBody defines body for InfraKeypairsUpdate for application/x-www-form-urlencoded ContentType.
type InfraKeypairsUpdateFormdataRequestBody = KeypairUpdate

// InfraKeypairsUpdateMultipartRequestBody defines body for InfraKeypairsUpdate for multipart/form-data ContentType.
type InfraKeypairsUpdateMultipartRequestBody = KeypairUpdate

// InfraLaunchTemplateCreateJSONRequestBody defines body for InfraLaunchTemplateCreate for application/json ContentType.
type InfraLaunchTemplateCreateJSONRequestBody = LaunchTemplate

// InfraLaunchTemplateCreateFormdataRequestBody defines body for InfraLaunchTemplateCreate for application/x-www-form-urlencoded ContentType.
type InfraLaunchTemplateCreateFormdataRequestBody = LaunchTemplate

// InfraLaunchTemplateCreateMultipartRequestBody defines body for InfraLaunchTemplateCreate for multipart/form-data ContentType.
type InfraLaunchTemplateCreateMultipartRequestBody = LaunchTemplate

// InfraLaunchTemplatePartialUpdateJSONRequestBody defines body for InfraLaunchTemplatePartialUpdate for application/json ContentType.
type InfraLaunchTemplatePartialUpdateJSONRequestBody = PatchedLaunchTemplate

// InfraLaunchTemplatePartialUpdateFormdataRequestBody defines body for InfraLaunchTemplatePartialUpdate for application/x-www-form-urlencoded ContentType.
type InfraLaunchTemplatePartialUpdateFormdataRequestBody = PatchedLaunchTemplate

// InfraLaunchTemplatePartialUpdateMultipartRequestBody defines body for InfraLaunchTemplatePartialUpdate for multipart/form-data ContentType.
type InfraLaunchTemplatePartialUpdateMultipartRequestBody = PatchedLaunchTemplate

// InfraLaunchTemplateUpdateJSONRequestBody defines body for InfraLaunchTemplateUpdate for application/json ContentType.
type InfraLaunchTemplateUpdateJSONRequestBody = LaunchTemplate

// InfraLaunchTemplateUpdateFormdataRequestBody defines body for InfraLaunchTemplateUpdate for application/x-www-form-urlencoded ContentType.
type InfraLaunchTemplateUpdateFormdataRequestBody = LaunchTemplate

// InfraLaunchTemplateUpdateMultipartRequestBody defines body for InfraLaunchTemplateUpdate for multipart/form-data ContentType.
type InfraLaunchTemplateUpdateMultipartRequestBody = LaunchTemplate

// InfraLoadBalancingL7policyCreateJSONRequestBody defines body for InfraLoadBalancingL7policyCreate for application/json ContentType.
type InfraLoadBalancingL7policyCreateJSONRequestBody = L7Policy

// InfraLoadBalancingL7policyCreateFormdataRequestBody defines body for InfraLoadBalancingL7policyCreate for application/x-www-form-urlencoded ContentType.
type InfraLoadBalancingL7policyCreateFormdataRequestBody = L7Policy

// InfraLoadBalancingL7policyCreateMultipartRequestBody defines body for InfraLoadBalancingL7policyCreate for multipart/form-data ContentType.
type InfraLoadBalancingL7policyCreateMultipartRequestBody = L7Policy

// InfraLoadBalancingL7policyPartialUpdateJSONRequestBody defines body for InfraLoadBalancingL7policyPartialUpdate for application/json ContentType.
type InfraLoadBalancingL7policyPartialUpdateJSONRequestBody = PatchedL7PolicyUpdate

// InfraLoadBalancingL7policyPartialUpdateFormdataRequestBody defines body for InfraLoadBalancingL7policyPartialUpdate for application/x-www-form-urlencoded ContentType.
type InfraLoadBalancingL7policyPartialUpdateFormdataRequestBody = PatchedL7PolicyUpdate

// InfraLoadBalancingL7policyPartialUpdateMultipartRequestBody defines body for InfraLoadBalancingL7policyPartialUpdate for multipart/form-data ContentType.
type InfraLoadBalancingL7policyPartialUpdateMultipartRequestBody = PatchedL7PolicyUpdate

// InfraLoadBalancingL7policyUpdateJSONRequestBody defines body for InfraLoadBalancingL7policyUpdate for application/json ContentType.
type InfraLoadBalancingL7policyUpdateJSONRequestBody = L7PolicyUpdate

// InfraLoadBalancingL7policyUpdateFormdataRequestBody defines body for InfraLoadBalancingL7policyUpdate for application/x-www-form-urlencoded ContentType.
type InfraLoadBalancingL7policyUpdateFormdataRequestBody = L7PolicyUpdate

// InfraLoadBalancingL7policyUpdateMultipartRequestBody defines body for InfraLoadBalancingL7policyUpdate for multipart/form-data ContentType.
type InfraLoadBalancingL7policyUpdateMultipartRequestBody = L7PolicyUpdate

// InfraLoadBalancingL7ruleCreateJSONRequestBody defines body for InfraLoadBalancingL7ruleCreate for application/json ContentType.
type InfraLoadBalancingL7ruleCreateJSONRequestBody = L7Rule

// InfraLoadBalancingL7ruleCreateFormdataRequestBody defines body for InfraLoadBalancingL7ruleCreate for application/x-www-form-urlencoded ContentType.
type InfraLoadBalancingL7ruleCreateFormdataRequestBody = L7Rule

// InfraLoadBalancingL7ruleCreateMultipartRequestBody defines body for InfraLoadBalancingL7ruleCreate for multipart/form-data ContentType.
type InfraLoadBalancingL7ruleCreateMultipartRequestBody = L7Rule

// InfraLoadBalancingL7rulePartialUpdateJSONRequestBody defines body for InfraLoadBalancingL7rulePartialUpdate for application/json ContentType.
type InfraLoadBalancingL7rulePartialUpdateJSONRequestBody = PatchedL7RuleUpdate

// InfraLoadBalancingL7rulePartialUpdateFormdataRequestBody defines body for InfraLoadBalancingL7rulePartialUpdate for application/x-www-form-urlencoded ContentType.
type InfraLoadBalancingL7rulePartialUpdateFormdataRequestBody = PatchedL7RuleUpdate

// InfraLoadBalancingL7rulePartialUpdateMultipartRequestBody defines body for InfraLoadBalancingL7rulePartialUpdate for multipart/form-data ContentType.
type InfraLoadBalancingL7rulePartialUpdateMultipartRequestBody = PatchedL7RuleUpdate

// InfraLoadBalancingL7ruleUpdateJSONRequestBody defines body for InfraLoadBalancingL7ruleUpdate for application/json ContentType.
type InfraLoadBalancingL7ruleUpdateJSONRequestBody = L7RuleUpdate

// InfraLoadBalancingL7ruleUpdateFormdataRequestBody defines body for InfraLoadBalancingL7ruleUpdate for application/x-www-form-urlencoded ContentType.
type InfraLoadBalancingL7ruleUpdateFormdataRequestBody = L7RuleUpdate

// InfraLoadBalancingL7ruleUpdateMultipartRequestBody defines body for InfraLoadBalancingL7ruleUpdate for multipart/form-data ContentType.
type InfraLoadBalancingL7ruleUpdateMultipartRequestBody = L7RuleUpdate

// InfraLoadBalancingListenerCreateJSONRequestBody defines body for InfraLoadBalancingListenerCreate for application/json ContentType.
type InfraLoadBalancingListenerCreateJSONRequestBody = Listener

// InfraLoadBalancingListenerCreateFormdataRequestBody defines body for InfraLoadBalancingListenerCreate for application/x-www-form-urlencoded ContentType.
type InfraLoadBalancingListenerCreateFormdataRequestBody = Listener

// InfraLoadBalancingListenerCreateMultipartRequestBody defines body for InfraLoadBalancingListenerCreate for multipart/form-data ContentType.
type InfraLoadBalancingListenerCreateMultipartRequestBody = Listener

// InfraLoadBalancingListenerPartialUpdateJSONRequestBody defines body for InfraLoadBalancingListenerPartialUpdate for application/json ContentType.
type InfraLoadBalancingListenerPartialUpdateJSONRequestBody = PatchedListenerUpdate

// InfraLoadBalancingListenerPartialUpdateFormdataRequestBody defines body for InfraLoadBalancingListenerPartialUpdate for application/x-www-form-urlencoded ContentType.
type InfraLoadBalancingListenerPartialUpdateFormdataRequestBody = PatchedListenerUpdate

// InfraLoadBalancingListenerPartialUpdateMultipartRequestBody defines body for InfraLoadBalancingListenerPartialUpdate for multipart/form-data ContentType.
type InfraLoadBalancingListenerPartialUpdateMultipartRequestBody = PatchedListenerUpdate

// InfraLoadBalancingListenerUpdateJSONRequestBody defines body for InfraLoadBalancingListenerUpdate for application/json ContentType.
type InfraLoadBalancingListenerUpdateJSONRequestBody = ListenerUpdate

// InfraLoadBalancingListenerUpdateFormdataRequestBody defines body for InfraLoadBalancingListenerUpdate for application/x-www-form-urlencoded ContentType.
type InfraLoadBalancingListenerUpdateFormdataRequestBody = ListenerUpdate

// InfraLoadBalancingListenerUpdateMultipartRequestBody defines body for InfraLoadBalancingListenerUpdate for multipart/form-data ContentType.
type InfraLoadBalancingListenerUpdateMultipartRequestBody = ListenerUpdate

// InfraLoadBalancingLoadBalancerCreateJSONRequestBody defines body for InfraLoadBalancingLoadBalancerCreate for application/json ContentType.
type InfraLoadBalancingLoadBalancerCreateJSONRequestBody = LoadBalancer

// InfraLoadBalancingLoadBalancerCreateFormdataRequestBody defines body for InfraLoadBalancingLoadBalancerCreate for application/x-www-form-urlencoded ContentType.
type InfraLoadBalancingLoadBalancerCreateFormdataRequestBody = LoadBalancer

// InfraLoadBalancingLoadBalancerCreateMultipartRequestBody defines body for InfraLoadBalancingLoadBalancerCreate for multipart/form-data ContentType.
type InfraLoadBalancingLoadBalancerCreateMultipartRequestBody = LoadBalancer

// InfraLoadBalancingLoadBalancerPartialUpdateJSONRequestBody defines body for InfraLoadBalancingLoadBalancerPartialUpdate for application/json ContentType.
type InfraLoadBalancingLoadBalancerPartialUpdateJSONRequestBody = PatchedLoadBalancerUpdate

// InfraLoadBalancingLoadBalancerPartialUpdateFormdataRequestBody defines body for InfraLoadBalancingLoadBalancerPartialUpdate for application/x-www-form-urlencoded ContentType.
type InfraLoadBalancingLoadBalancerPartialUpdateFormdataRequestBody = PatchedLoadBalancerUpdate

// InfraLoadBalancingLoadBalancerPartialUpdateMultipartRequestBody defines body for InfraLoadBalancingLoadBalancerPartialUpdate for multipart/form-data ContentType.
type InfraLoadBalancingLoadBalancerPartialUpdateMultipartRequestBody = PatchedLoadBalancerUpdate

// InfraLoadBalancingLoadBalancerUpdateJSONRequestBody defines body for InfraLoadBalancingLoadBalancerUpdate for application/json ContentType.
type InfraLoadBalancingLoadBalancerUpdateJSONRequestBody = LoadBalancerUpdate

// InfraLoadBalancingLoadBalancerUpdateFormdataRequestBody defines body for InfraLoadBalancingLoadBalancerUpdate for application/x-www-form-urlencoded ContentType.
type InfraLoadBalancingLoadBalancerUpdateFormdataRequestBody = LoadBalancerUpdate

// InfraLoadBalancingLoadBalancerUpdateMultipartRequestBody defines body for InfraLoadBalancingLoadBalancerUpdate for multipart/form-data ContentType.
type InfraLoadBalancingLoadBalancerUpdateMultipartRequestBody = LoadBalancerUpdate

// InfraLoadBalancingServerGroupMemberCreateJSONRequestBody defines body for InfraLoadBalancingServerGroupMemberCreate for application/json ContentType.
type InfraLoadBalancingServerGroupMemberCreateJSONRequestBody = ServerGroupMember

// InfraLoadBalancingServerGroupMemberCreateFormdataRequestBody defines body for InfraLoadBalancingServerGroupMemberCreate for application/x-www-form-urlencoded ContentType.
type InfraLoadBalancingServerGroupMemberCreateFormdataRequestBody = ServerGroupMember

// InfraLoadBalancingServerGroupMemberCreateMultipartRequestBody defines body for InfraLoadBalancingServerGroupMemberCreate for multipart/form-data ContentType.
type InfraLoadBalancingServerGroupMemberCreateMultipartRequestBody = ServerGroupMember

// InfraLoadBalancingServerGroupMemberPartialUpdateJSONRequestBody defines body for InfraLoadBalancingServerGroupMemberPartialUpdate for application/json ContentType.
type InfraLoadBalancingServerGroupMemberPartialUpdateJSONRequestBody = PatchedServerGroupMemberUpdate

// InfraLoadBalancingServerGroupMemberPartialUpdateFormdataRequestBody defines body for InfraLoadBalancingServerGroupMemberPartialUpdate for application/x-www-form-urlencoded ContentType.
type InfraLoadBalancingServerGroupMemberPartialUpdateFormdataRequestBody = PatchedServerGroupMemberUpdate

// InfraLoadBalancingServerGroupMemberPartialUpdateMultipartRequestBody defines body for InfraLoadBalancingServerGroupMemberPartialUpdate for multipart/form-data ContentType.
type InfraLoadBalancingServerGroupMemberPartialUpdateMultipartRequestBody = PatchedServerGroupMemberUpdate

// InfraLoadBalancingServerGroupMemberUpdateJSONRequestBody defines body for InfraLoadBalancingServerGroupMemberUpdate for application/json ContentType.
type InfraLoadBalancingServerGroupMemberUpdateJSONRequestBody = ServerGroupMemberUpdate

// InfraLoadBalancingServerGroupMemberUpdateFormdataRequestBody defines body for InfraLoadBalancingServerGroupMemberUpdate for application/x-www-form-urlencoded ContentType.
type InfraLoadBalancingServerGroupMemberUpdateFormdataRequestBody = ServerGroupMemberUpdate

// InfraLoadBalancingServerGroupMemberUpdateMultipartRequestBody defines body for InfraLoadBalancingServerGroupMemberUpdate for multipart/form-data ContentType.
type InfraLoadBalancingServerGroupMemberUpdateMultipartRequestBody = ServerGroupMemberUpdate

// InfraLoadBalancingServerGroupCreateJSONRequestBody defines body for InfraLoadBalancingServerGroupCreate for application/json ContentType.
type InfraLoadBalancingServerGroupCreateJSONRequestBody = ServerGroup

// InfraLoadBalancingServerGroupCreateFormdataRequestBody defines body for InfraLoadBalancingServerGroupCreate for application/x-www-form-urlencoded ContentType.
type InfraLoadBalancingServerGroupCreateFormdataRequestBody = ServerGroup

// InfraLoadBalancingServerGroupCreateMultipartRequestBody defines body for InfraLoadBalancingServerGroupCreate for multipart/form-data ContentType.
type InfraLoadBalancingServerGroupCreateMultipartRequestBody = ServerGroup

// InfraLoadBalancingServerGroupPartialUpdateJSONRequestBody defines body for InfraLoadBalancingServerGroupPartialUpdate for application/json ContentType.
type InfraLoadBalancingServerGroupPartialUpdateJSONRequestBody = PatchedServerGroupUpdate

// InfraLoadBalancingServerGroupPartialUpdateFormdataRequestBody defines body for InfraLoadBalancingServerGroupPartialUpdate for application/x-www-form-urlencoded ContentType.
type InfraLoadBalancingServerGroupPartialUpdateFormdataRequestBody = PatchedServerGroupUpdate

// InfraLoadBalancingServerGroupPartialUpdateMultipartRequestBody defines body for InfraLoadBalancingServerGroupPartialUpdate for multipart/form-data ContentType.
type InfraLoadBalancingServerGroupPartialUpdateMultipartRequestBody = PatchedServerGroupUpdate

// InfraLoadBalancingServerGroupUpdateJSONRequestBody defines body for InfraLoadBalancingServerGroupUpdate for application/json ContentType.
type InfraLoadBalancingServerGroupUpdateJSONRequestBody = ServerGroupUpdate

// InfraLoadBalancingServerGroupUpdateFormdataRequestBody defines body for InfraLoadBalancingServerGroupUpdate for application/x-www-form-urlencoded ContentType.
type InfraLoadBalancingServerGroupUpdateFormdataRequestBody = ServerGroupUpdate

// InfraLoadBalancingServerGroupUpdateMultipartRequestBody defines body for InfraLoadBalancingServerGroupUpdate for multipart/form-data ContentType.
type InfraLoadBalancingServerGroupUpdateMultipartRequestBody = ServerGroupUpdate

// InfraPlacementgroupsCreateJSONRequestBody defines body for InfraPlacementgroupsCreate for application/json ContentType.
type InfraPlacementgroupsCreateJSONRequestBody = PlacementGroup

// InfraPlacementgroupsCreateFormdataRequestBody defines body for InfraPlacementgroupsCreate for application/x-www-form-urlencoded ContentType.
type InfraPlacementgroupsCreateFormdataRequestBody = PlacementGroup

// InfraPlacementgroupsCreateMultipartRequestBody defines body for InfraPlacementgroupsCreate for multipart/form-data ContentType.
type InfraPlacementgroupsCreateMultipartRequestBody = PlacementGroup

// InfraPlacementgroupsPartialUpdateJSONRequestBody defines body for InfraPlacementgroupsPartialUpdate for application/json ContentType.
type InfraPlacementgroupsPartialUpdateJSONRequestBody = PatchedPlacementGroupUpdate

// InfraPlacementgroupsPartialUpdateFormdataRequestBody defines body for InfraPlacementgroupsPartialUpdate for application/x-www-form-urlencoded ContentType.
type InfraPlacementgroupsPartialUpdateFormdataRequestBody = PatchedPlacementGroupUpdate

// InfraPlacementgroupsPartialUpdateMultipartRequestBody defines body for InfraPlacementgroupsPartialUpdate for multipart/form-data ContentType.
type InfraPlacementgroupsPartialUpdateMultipartRequestBody = PatchedPlacementGroupUpdate

// InfraPlacementgroupsUpdateJSONRequestBody defines body for InfraPlacementgroupsUpdate for application/json ContentType.
type InfraPlacementgroupsUpdateJSONRequestBody = PlacementGroupUpdate

// InfraPlacementgroupsUpdateFormdataRequestBody defines body for InfraPlacementgroupsUpdate for application/x-www-form-urlencoded ContentType.
type InfraPlacementgroupsUpdateFormdataRequestBody = PlacementGroupUpdate

// InfraPlacementgroupsUpdateMultipartRequestBody defines body for InfraPlacementgroupsUpdate for multipart/form-data ContentType.
type InfraPlacementgroupsUpdateMultipartRequestBody = PlacementGroupUpdate

// InfraPrivateIpsCreateJSONRequestBody defines body for InfraPrivateIpsCreate for application/json ContentType.
type InfraPrivateIpsCreateJSONRequestBody = PrivateIPCreate

// InfraPrivateIpsCreateFormdataRequestBody defines body for InfraPrivateIpsCreate for application/x-www-form-urlencoded ContentType.
type InfraPrivateIpsCreateFormdataRequestBody = PrivateIPCreate

// InfraPrivateIpsCreateMultipartRequestBody defines body for InfraPrivateIpsCreate for multipart/form-data ContentType.
type InfraPrivateIpsCreateMultipartRequestBody = PrivateIPCreate

// InfraPrivateIpsPartialUpdateJSONRequestBody defines body for InfraPrivateIpsPartialUpdate for application/json ContentType.
type InfraPrivateIpsPartialUpdateJSONRequestBody = PatchedPrivateIPUpdate

// InfraPrivateIpsPartialUpdateFormdataRequestBody defines body for InfraPrivateIpsPartialUpdate for application/x-www-form-urlencoded ContentType.
type InfraPrivateIpsPartialUpdateFormdataRequestBody = PatchedPrivateIPUpdate

// InfraPrivateIpsPartialUpdateMultipartRequestBody defines body for InfraPrivateIpsPartialUpdate for multipart/form-data ContentType.
type InfraPrivateIpsPartialUpdateMultipartRequestBody = PatchedPrivateIPUpdate

// InfraPrivateIpsUpdateJSONRequestBody defines body for InfraPrivateIpsUpdate for application/json ContentType.
type InfraPrivateIpsUpdateJSONRequestBody = PrivateIPUpdate

// InfraPrivateIpsUpdateFormdataRequestBody defines body for InfraPrivateIpsUpdate for application/x-www-form-urlencoded ContentType.
type InfraPrivateIpsUpdateFormdataRequestBody = PrivateIPUpdate

// InfraPrivateIpsUpdateMultipartRequestBody defines body for InfraPrivateIpsUpdate for multipart/form-data ContentType.
type InfraPrivateIpsUpdateMultipartRequestBody = PrivateIPUpdate

// InfraRouteTablesCreateJSONRequestBody defines body for InfraRouteTablesCreate for application/json ContentType.
type InfraRouteTablesCreateJSONRequestBody = RouteTable

// InfraRouteTablesCreateFormdataRequestBody defines body for InfraRouteTablesCreate for application/x-www-form-urlencoded ContentType.
type InfraRouteTablesCreateFormdataRequestBody = RouteTable

// InfraRouteTablesCreateMultipartRequestBody defines body for InfraRouteTablesCreate for multipart/form-data ContentType.
type InfraRouteTablesCreateMultipartRequestBody = RouteTable

// InfraRouteTablesPartialUpdateJSONRequestBody defines body for InfraRouteTablesPartialUpdate for application/json ContentType.
type InfraRouteTablesPartialUpdateJSONRequestBody = PatchedRouteTableUpdate

// InfraRouteTablesPartialUpdateFormdataRequestBody defines body for InfraRouteTablesPartialUpdate for application/x-www-form-urlencoded ContentType.
type InfraRouteTablesPartialUpdateFormdataRequestBody = PatchedRouteTableUpdate

// InfraRouteTablesPartialUpdateMultipartRequestBody defines body for InfraRouteTablesPartialUpdate for multipart/form-data ContentType.
type InfraRouteTablesPartialUpdateMultipartRequestBody = PatchedRouteTableUpdate

// InfraRouteTablesUpdateJSONRequestBody defines body for InfraRouteTablesUpdate for application/json ContentType.
type InfraRouteTablesUpdateJSONRequestBody = RouteTableUpdate

// InfraRouteTablesUpdateFormdataRequestBody defines body for InfraRouteTablesUpdate for application/x-www-form-urlencoded ContentType.
type InfraRouteTablesUpdateFormdataRequestBody = RouteTableUpdate

// InfraRouteTablesUpdateMultipartRequestBody defines body for InfraRouteTablesUpdate for multipart/form-data ContentType.
type InfraRouteTablesUpdateMultipartRequestBody = RouteTableUpdate

// InfraSecurityGroupRulesCreateJSONRequestBody defines body for InfraSecurityGroupRulesCreate for application/json ContentType.
type InfraSecurityGroupRulesCreateJSONRequestBody = SecurityGroupRule

// InfraSecurityGroupRulesCreateFormdataRequestBody defines body for InfraSecurityGroupRulesCreate for application/x-www-form-urlencoded ContentType.
type InfraSecurityGroupRulesCreateFormdataRequestBody = SecurityGroupRule

// InfraSecurityGroupRulesCreateMultipartRequestBody defines body for InfraSecurityGroupRulesCreate for multipart/form-data ContentType.
type InfraSecurityGroupRulesCreateMultipartRequestBody = SecurityGroupRule

// InfraSecurityGroupRulesPartialUpdateJSONRequestBody defines body for InfraSecurityGroupRulesPartialUpdate for application/json ContentType.
type InfraSecurityGroupRulesPartialUpdateJSONRequestBody = PatchedSecurityGroupRuleUpdate

// InfraSecurityGroupRulesPartialUpdateFormdataRequestBody defines body for InfraSecurityGroupRulesPartialUpdate for application/x-www-form-urlencoded ContentType.
type InfraSecurityGroupRulesPartialUpdateFormdataRequestBody = PatchedSecurityGroupRuleUpdate

// InfraSecurityGroupRulesPartialUpdateMultipartRequestBody defines body for InfraSecurityGroupRulesPartialUpdate for multipart/form-data ContentType.
type InfraSecurityGroupRulesPartialUpdateMultipartRequestBody = PatchedSecurityGroupRuleUpdate

// InfraSecurityGroupRulesUpdateJSONRequestBody defines body for InfraSecurityGroupRulesUpdate for application/json ContentType.
type InfraSecurityGroupRulesUpdateJSONRequestBody = SecurityGroupRuleUpdate

// InfraSecurityGroupRulesUpdateFormdataRequestBody defines body for InfraSecurityGroupRulesUpdate for application/x-www-form-urlencoded ContentType.
type InfraSecurityGroupRulesUpdateFormdataRequestBody = SecurityGroupRuleUpdate

// InfraSecurityGroupRulesUpdateMultipartRequestBody defines body for InfraSecurityGroupRulesUpdate for multipart/form-data ContentType.
type InfraSecurityGroupRulesUpdateMultipartRequestBody = SecurityGroupRuleUpdate

// InfraSecurityGroupsCreateJSONRequestBody defines body for InfraSecurityGroupsCreate for application/json ContentType.
type InfraSecurityGroupsCreateJSONRequestBody = SecurityGroup

// InfraSecurityGroupsCreateFormdataRequestBody defines body for InfraSecurityGroupsCreate for application/x-www-form-urlencoded ContentType.
type InfraSecurityGroupsCreateFormdataRequestBody = SecurityGroup

// InfraSecurityGroupsCreateMultipartRequestBody defines body for InfraSecurityGroupsCreate for multipart/form-data ContentType.
type InfraSecurityGroupsCreateMultipartRequestBody = SecurityGroup

// InfraSecurityGroupsPartialUpdateJSONRequestBody defines body for InfraSecurityGroupsPartialUpdate for application/json ContentType.
type InfraSecurityGroupsPartialUpdateJSONRequestBody = PatchedSecurityGroupUpdate

// InfraSecurityGroupsPartialUpdateFormdataRequestBody defines body for InfraSecurityGroupsPartialUpdate for application/x-www-form-urlencoded ContentType.
type InfraSecurityGroupsPartialUpdateFormdataRequestBody = PatchedSecurityGroupUpdate

// InfraSecurityGroupsPartialUpdateMultipartRequestBody defines body for InfraSecurityGroupsPartialUpdate for multipart/form-data ContentType.
type InfraSecurityGroupsPartialUpdateMultipartRequestBody = PatchedSecurityGroupUpdate

// InfraSecurityGroupsUpdateJSONRequestBody defines body for InfraSecurityGroupsUpdate for application/json ContentType.
type InfraSecurityGroupsUpdateJSONRequestBody = SecurityGroupUpdate

// InfraSecurityGroupsUpdateFormdataRequestBody defines body for InfraSecurityGroupsUpdate for application/x-www-form-urlencoded ContentType.
type InfraSecurityGroupsUpdateFormdataRequestBody = SecurityGroupUpdate

// InfraSecurityGroupsUpdateMultipartRequestBody defines body for InfraSecurityGroupsUpdate for multipart/form-data ContentType.
type InfraSecurityGroupsUpdateMultipartRequestBody = SecurityGroupUpdate

// InfraServersCreateJSONRequestBody defines body for InfraServersCreate for application/json ContentType.
type InfraServersCreateJSONRequestBody = Server

// InfraServersCreateFormdataRequestBody defines body for InfraServersCreate for application/x-www-form-urlencoded ContentType.
type InfraServersCreateFormdataRequestBody = Server

// InfraServersCreateMultipartRequestBody defines body for InfraServersCreate for multipart/form-data ContentType.
type InfraServersCreateMultipartRequestBody = Server

// InfraServersPartialUpdateJSONRequestBody defines body for InfraServersPartialUpdate for application/json ContentType.
type InfraServersPartialUpdateJSONRequestBody = PatchedUpdateServer

// InfraServersPartialUpdateFormdataRequestBody defines body for InfraServersPartialUpdate for application/x-www-form-urlencoded ContentType.
type InfraServersPartialUpdateFormdataRequestBody = PatchedUpdateServer

// InfraServersPartialUpdateMultipartRequestBody defines body for InfraServersPartialUpdate for multipart/form-data ContentType.
type InfraServersPartialUpdateMultipartRequestBody = PatchedUpdateServer

// InfraServersUpdateJSONRequestBody defines body for InfraServersUpdate for application/json ContentType.
type InfraServersUpdateJSONRequestBody = Server

// InfraServersUpdateFormdataRequestBody defines body for InfraServersUpdate for application/x-www-form-urlencoded ContentType.
type InfraServersUpdateFormdataRequestBody = Server

// InfraServersUpdateMultipartRequestBody defines body for InfraServersUpdate for multipart/form-data ContentType.
type InfraServersUpdateMultipartRequestBody = Server

// InfraServersAttachEipCreateJSONRequestBody defines body for InfraServersAttachEipCreate for application/json ContentType.
type InfraServersAttachEipCreateJSONRequestBody = ServerElasticIPRequest

// InfraServersAttachEipCreateFormdataRequestBody defines body for InfraServersAttachEipCreate for application/x-www-form-urlencoded ContentType.
type InfraServersAttachEipCreateFormdataRequestBody = ServerElasticIPRequest

// InfraServersAttachEipCreateMultipartRequestBody defines body for InfraServersAttachEipCreate for multipart/form-data ContentType.
type InfraServersAttachEipCreateMultipartRequestBody = ServerElasticIPRequest

// InfraServersAttachPrivateipCreateJSONRequestBody defines body for InfraServersAttachPrivateipCreate for application/json ContentType.
type InfraServersAttachPrivateipCreateJSONRequestBody = RequestServerPrivateIP

// InfraServersAttachPrivateipCreateFormdataRequestBody defines body for InfraServersAttachPrivateipCreate for application/x-www-form-urlencoded ContentType.
type InfraServersAttachPrivateipCreateFormdataRequestBody = RequestServerPrivateIP

// InfraServersAttachPrivateipCreateMultipartRequestBody defines body for InfraServersAttachPrivateipCreate for multipart/form-data ContentType.
type InfraServersAttachPrivateipCreateMultipartRequestBody = RequestServerPrivateIP

// InfraServersAttachSubnetCreateJSONRequestBody defines body for InfraServersAttachSubnetCreate for application/json ContentType.
type InfraServersAttachSubnetCreateJSONRequestBody = RequestServerSubnetAttachment

// InfraServersAttachSubnetCreateFormdataRequestBody defines body for InfraServersAttachSubnetCreate for application/x-www-form-urlencoded ContentType.
type InfraServersAttachSubnetCreateFormdataRequestBody = RequestServerSubnetAttachment

// InfraServersAttachSubnetCreateMultipartRequestBody defines body for InfraServersAttachSubnetCreate for multipart/form-data ContentType.
type InfraServersAttachSubnetCreateMultipartRequestBody = RequestServerSubnetAttachment

// InfraServersAttachVolumeCreateJSONRequestBody defines body for InfraServersAttachVolumeCreate for application/json ContentType.
type InfraServersAttachVolumeCreateJSONRequestBody = Server

// InfraServersAttachVolumeCreateFormdataRequestBody defines body for InfraServersAttachVolumeCreate for application/x-www-form-urlencoded ContentType.
type InfraServersAttachVolumeCreateFormdataRequestBody = Server

// InfraServersAttachVolumeCreateMultipartRequestBody defines body for InfraServersAttachVolumeCreate for multipart/form-data ContentType.
type InfraServersAttachVolumeCreateMultipartRequestBody = Server

// InfraServersChangePasswordCreateJSONRequestBody defines body for InfraServersChangePasswordCreate for application/json ContentType.
type InfraServersChangePasswordCreateJSONRequestBody = Password

// InfraServersChangePasswordCreateFormdataRequestBody defines body for InfraServersChangePasswordCreate for application/x-www-form-urlencoded ContentType.
type InfraServersChangePasswordCreateFormdataRequestBody = Password

// InfraServersChangePasswordCreateMultipartRequestBody defines body for InfraServersChangePasswordCreate for multipart/form-data ContentType.
type InfraServersChangePasswordCreateMultipartRequestBody = Password

// InfraServersDeleteCreateJSONRequestBody defines body for InfraServersDeleteCreate for application/json ContentType.
type InfraServersDeleteCreateJSONRequestBody = DeleteServer

// InfraServersDeleteCreateFormdataRequestBody defines body for InfraServersDeleteCreate for application/x-www-form-urlencoded ContentType.
type InfraServersDeleteCreateFormdataRequestBody = DeleteServer

// InfraServersDeleteCreateMultipartRequestBody defines body for InfraServersDeleteCreate for multipart/form-data ContentType.
type InfraServersDeleteCreateMultipartRequestBody = DeleteServer

// InfraServersDetachEipCreateJSONRequestBody defines body for InfraServersDetachEipCreate for application/json ContentType.
type InfraServersDetachEipCreateJSONRequestBody = ServerElasticIPRequest

// InfraServersDetachEipCreateFormdataRequestBody defines body for InfraServersDetachEipCreate for application/x-www-form-urlencoded ContentType.
type InfraServersDetachEipCreateFormdataRequestBody = ServerElasticIPRequest

// InfraServersDetachEipCreateMultipartRequestBody defines body for InfraServersDetachEipCreate for multipart/form-data ContentType.
type InfraServersDetachEipCreateMultipartRequestBody = ServerElasticIPRequest

// InfraServersDetachPrivateIpCreateJSONRequestBody defines body for InfraServersDetachPrivateIpCreate for application/json ContentType.
type InfraServersDetachPrivateIpCreateJSONRequestBody = RequestServerPrivateIP

// InfraServersDetachPrivateIpCreateFormdataRequestBody defines body for InfraServersDetachPrivateIpCreate for application/x-www-form-urlencoded ContentType.
type InfraServersDetachPrivateIpCreateFormdataRequestBody = RequestServerPrivateIP

// InfraServersDetachPrivateIpCreateMultipartRequestBody defines body for InfraServersDetachPrivateIpCreate for multipart/form-data ContentType.
type InfraServersDetachPrivateIpCreateMultipartRequestBody = RequestServerPrivateIP

// InfraServersDetachVolumeCreateJSONRequestBody defines body for InfraServersDetachVolumeCreate for application/json ContentType.
type InfraServersDetachVolumeCreateJSONRequestBody = Server

// InfraServersDetachVolumeCreateFormdataRequestBody defines body for InfraServersDetachVolumeCreate for application/x-www-form-urlencoded ContentType.
type InfraServersDetachVolumeCreateFormdataRequestBody = Server

// InfraServersDetachVolumeCreateMultipartRequestBody defines body for InfraServersDetachVolumeCreate for multipart/form-data ContentType.
type InfraServersDetachVolumeCreateMultipartRequestBody = Server

// InfraServersResizeCreateJSONRequestBody defines body for InfraServersResizeCreate for application/json ContentType.
type InfraServersResizeCreateJSONRequestBody = ResizeServer

// InfraServersResizeCreateFormdataRequestBody defines body for InfraServersResizeCreate for application/x-www-form-urlencoded ContentType.
type InfraServersResizeCreateFormdataRequestBody = ResizeServer

// InfraServersResizeCreateMultipartRequestBody defines body for InfraServersResizeCreate for multipart/form-data ContentType.
type InfraServersResizeCreateMultipartRequestBody = ResizeServer

// InfraSnapshotpolicyCreateJSONRequestBody defines body for InfraSnapshotpolicyCreate for application/json ContentType.
type InfraSnapshotpolicyCreateJSONRequestBody = SnapshotPolicy

// InfraSnapshotpolicyCreateFormdataRequestBody defines body for InfraSnapshotpolicyCreate for application/x-www-form-urlencoded ContentType.
type InfraSnapshotpolicyCreateFormdataRequestBody = SnapshotPolicy

// InfraSnapshotpolicyCreateMultipartRequestBody defines body for InfraSnapshotpolicyCreate for multipart/form-data ContentType.
type InfraSnapshotpolicyCreateMultipartRequestBody = SnapshotPolicy

// InfraSnapshotpolicyPartialUpdateJSONRequestBody defines body for InfraSnapshotpolicyPartialUpdate for application/json ContentType.
type InfraSnapshotpolicyPartialUpdateJSONRequestBody = PatchedSnapshotPolicyUpdate

// InfraSnapshotpolicyPartialUpdateFormdataRequestBody defines body for InfraSnapshotpolicyPartialUpdate for application/x-www-form-urlencoded ContentType.
type InfraSnapshotpolicyPartialUpdateFormdataRequestBody = PatchedSnapshotPolicyUpdate

// InfraSnapshotpolicyPartialUpdateMultipartRequestBody defines body for InfraSnapshotpolicyPartialUpdate for multipart/form-data ContentType.
type InfraSnapshotpolicyPartialUpdateMultipartRequestBody = PatchedSnapshotPolicyUpdate

// InfraSnapshotpolicyUpdateJSONRequestBody defines body for InfraSnapshotpolicyUpdate for application/json ContentType.
type InfraSnapshotpolicyUpdateJSONRequestBody = SnapshotPolicyUpdate

// InfraSnapshotpolicyUpdateFormdataRequestBody defines body for InfraSnapshotpolicyUpdate for application/x-www-form-urlencoded ContentType.
type InfraSnapshotpolicyUpdateFormdataRequestBody = SnapshotPolicyUpdate

// InfraSnapshotpolicyUpdateMultipartRequestBody defines body for InfraSnapshotpolicyUpdate for multipart/form-data ContentType.
type InfraSnapshotpolicyUpdateMultipartRequestBody = SnapshotPolicyUpdate

// InfraSnapshotsCreateJSONRequestBody defines body for InfraSnapshotsCreate for application/json ContentType.
type InfraSnapshotsCreateJSONRequestBody = Snapshot

// InfraSnapshotsCreateFormdataRequestBody defines body for InfraSnapshotsCreate for application/x-www-form-urlencoded ContentType.
type InfraSnapshotsCreateFormdataRequestBody = Snapshot

// InfraSnapshotsCreateMultipartRequestBody defines body for InfraSnapshotsCreate for multipart/form-data ContentType.
type InfraSnapshotsCreateMultipartRequestBody = Snapshot

// InfraSnapshotsPartialUpdateJSONRequestBody defines body for InfraSnapshotsPartialUpdate for application/json ContentType.
type InfraSnapshotsPartialUpdateJSONRequestBody = PatchedSnapshotUpdate

// InfraSnapshotsPartialUpdateFormdataRequestBody defines body for InfraSnapshotsPartialUpdate for application/x-www-form-urlencoded ContentType.
type InfraSnapshotsPartialUpdateFormdataRequestBody = PatchedSnapshotUpdate

// InfraSnapshotsPartialUpdateMultipartRequestBody defines body for InfraSnapshotsPartialUpdate for multipart/form-data ContentType.
type InfraSnapshotsPartialUpdateMultipartRequestBody = PatchedSnapshotUpdate

// InfraSnapshotsUpdateJSONRequestBody defines body for InfraSnapshotsUpdate for application/json ContentType.
type InfraSnapshotsUpdateJSONRequestBody = SnapshotUpdate

// InfraSnapshotsUpdateFormdataRequestBody defines body for InfraSnapshotsUpdate for application/x-www-form-urlencoded ContentType.
type InfraSnapshotsUpdateFormdataRequestBody = SnapshotUpdate

// InfraSnapshotsUpdateMultipartRequestBody defines body for InfraSnapshotsUpdate for multipart/form-data ContentType.
type InfraSnapshotsUpdateMultipartRequestBody = SnapshotUpdate

// InfraSubnetsCreateJSONRequestBody defines body for InfraSubnetsCreate for application/json ContentType.
type InfraSubnetsCreateJSONRequestBody = SubnetCreate

// InfraSubnetsCreateFormdataRequestBody defines body for InfraSubnetsCreate for application/x-www-form-urlencoded ContentType.
type InfraSubnetsCreateFormdataRequestBody = SubnetCreate

// InfraSubnetsCreateMultipartRequestBody defines body for InfraSubnetsCreate for multipart/form-data ContentType.
type InfraSubnetsCreateMultipartRequestBody = SubnetCreate

// InfraSubnetsPartialUpdateJSONRequestBody defines body for InfraSubnetsPartialUpdate for application/json ContentType.
type InfraSubnetsPartialUpdateJSONRequestBody = PatchedSubnetUpdate

// InfraSubnetsPartialUpdateFormdataRequestBody defines body for InfraSubnetsPartialUpdate for application/x-www-form-urlencoded ContentType.
type InfraSubnetsPartialUpdateFormdataRequestBody = PatchedSubnetUpdate

// InfraSubnetsPartialUpdateMultipartRequestBody defines body for InfraSubnetsPartialUpdate for multipart/form-data ContentType.
type InfraSubnetsPartialUpdateMultipartRequestBody = PatchedSubnetUpdate

// InfraSubnetsUpdateJSONRequestBody defines body for InfraSubnetsUpdate for application/json ContentType.
type InfraSubnetsUpdateJSONRequestBody = SubnetUpdate

// InfraSubnetsUpdateFormdataRequestBody defines body for InfraSubnetsUpdate for application/x-www-form-urlencoded ContentType.
type InfraSubnetsUpdateFormdataRequestBody = SubnetUpdate

// InfraSubnetsUpdateMultipartRequestBody defines body for InfraSubnetsUpdate for multipart/form-data ContentType.
type InfraSubnetsUpdateMultipartRequestBody = SubnetUpdate

// InfraVolumeBackupPoliciesCreateJSONRequestBody defines body for InfraVolumeBackupPoliciesCreate for application/json ContentType.
type InfraVolumeBackupPoliciesCreateJSONRequestBody = VolumeBackupPolicy

// InfraVolumeBackupPoliciesCreateFormdataRequestBody defines body for InfraVolumeBackupPoliciesCreate for application/x-www-form-urlencoded ContentType.
type InfraVolumeBackupPoliciesCreateFormdataRequestBody = VolumeBackupPolicy

// InfraVolumeBackupPoliciesCreateMultipartRequestBody defines body for InfraVolumeBackupPoliciesCreate for multipart/form-data ContentType.
type InfraVolumeBackupPoliciesCreateMultipartRequestBody = VolumeBackupPolicy

// InfraVolumeBackupPoliciesPartialUpdateJSONRequestBody defines body for InfraVolumeBackupPoliciesPartialUpdate for application/json ContentType.
type InfraVolumeBackupPoliciesPartialUpdateJSONRequestBody = PatchedVolumeBackupPolicyUpdate

// InfraVolumeBackupPoliciesPartialUpdateFormdataRequestBody defines body for InfraVolumeBackupPoliciesPartialUpdate for application/x-www-form-urlencoded ContentType.
type InfraVolumeBackupPoliciesPartialUpdateFormdataRequestBody = PatchedVolumeBackupPolicyUpdate

// InfraVolumeBackupPoliciesPartialUpdateMultipartRequestBody defines body for InfraVolumeBackupPoliciesPartialUpdate for multipart/form-data ContentType.
type InfraVolumeBackupPoliciesPartialUpdateMultipartRequestBody = PatchedVolumeBackupPolicyUpdate

// InfraVolumeBackupPoliciesUpdateJSONRequestBody defines body for InfraVolumeBackupPoliciesUpdate for application/json ContentType.
type InfraVolumeBackupPoliciesUpdateJSONRequestBody = VolumeBackupPolicyUpdate

// InfraVolumeBackupPoliciesUpdateFormdataRequestBody defines body for InfraVolumeBackupPoliciesUpdate for application/x-www-form-urlencoded ContentType.
type InfraVolumeBackupPoliciesUpdateFormdataRequestBody = VolumeBackupPolicyUpdate

// InfraVolumeBackupPoliciesUpdateMultipartRequestBody defines body for InfraVolumeBackupPoliciesUpdate for multipart/form-data ContentType.
type InfraVolumeBackupPoliciesUpdateMultipartRequestBody = VolumeBackupPolicyUpdate

// InfraVolumeBackupsCreateJSONRequestBody defines body for InfraVolumeBackupsCreate for application/json ContentType.
type InfraVolumeBackupsCreateJSONRequestBody = VolumeBackup

// InfraVolumeBackupsCreateFormdataRequestBody defines body for InfraVolumeBackupsCreate for application/x-www-form-urlencoded ContentType.
type InfraVolumeBackupsCreateFormdataRequestBody = VolumeBackup

// InfraVolumeBackupsCreateMultipartRequestBody defines body for InfraVolumeBackupsCreate for multipart/form-data ContentType.
type InfraVolumeBackupsCreateMultipartRequestBody = VolumeBackup

// InfraVolumeBackupsPartialUpdateJSONRequestBody defines body for InfraVolumeBackupsPartialUpdate for application/json ContentType.
type InfraVolumeBackupsPartialUpdateJSONRequestBody = PatchedVolumeBackupUpdate

// InfraVolumeBackupsPartialUpdateFormdataRequestBody defines body for InfraVolumeBackupsPartialUpdate for application/x-www-form-urlencoded ContentType.
type InfraVolumeBackupsPartialUpdateFormdataRequestBody = PatchedVolumeBackupUpdate

// InfraVolumeBackupsPartialUpdateMultipartRequestBody defines body for InfraVolumeBackupsPartialUpdate for multipart/form-data ContentType.
type InfraVolumeBackupsPartialUpdateMultipartRequestBody = PatchedVolumeBackupUpdate

// InfraVolumeBackupsUpdateJSONRequestBody defines body for InfraVolumeBackupsUpdate for application/json ContentType.
type InfraVolumeBackupsUpdateJSONRequestBody = VolumeBackupUpdate

// InfraVolumeBackupsUpdateFormdataRequestBody defines body for InfraVolumeBackupsUpdate for application/x-www-form-urlencoded ContentType.
type InfraVolumeBackupsUpdateFormdataRequestBody = VolumeBackupUpdate

// InfraVolumeBackupsUpdateMultipartRequestBody defines body for InfraVolumeBackupsUpdate for multipart/form-data ContentType.
type InfraVolumeBackupsUpdateMultipartRequestBody = VolumeBackupUpdate

// InfraVolumeBackupsRestoreCreateJSONRequestBody defines body for InfraVolumeBackupsRestoreCreate for application/json ContentType.
type InfraVolumeBackupsRestoreCreateJSONRequestBody = VolumeBackupRestore

// InfraVolumeBackupsRestoreCreateFormdataRequestBody defines body for InfraVolumeBackupsRestoreCreate for application/x-www-form-urlencoded ContentType.
type InfraVolumeBackupsRestoreCreateFormdataRequestBody = VolumeBackupRestore

// InfraVolumeBackupsRestoreCreateMultipartRequestBody defines body for InfraVolumeBackupsRestoreCreate for multipart/form-data ContentType.
type InfraVolumeBackupsRestoreCreateMultipartRequestBody = VolumeBackupRestore

// InfraVolumeTypeCreateJSONRequestBody defines body for InfraVolumeTypeCreate for application/json ContentType.
type InfraVolumeTypeCreateJSONRequestBody = VolumeType

// InfraVolumeTypeCreateFormdataRequestBody defines body for InfraVolumeTypeCreate for application/x-www-form-urlencoded ContentType.
type InfraVolumeTypeCreateFormdataRequestBody = VolumeType

// InfraVolumeTypeCreateMultipartRequestBody defines body for InfraVolumeTypeCreate for multipart/form-data ContentType.
type InfraVolumeTypeCreateMultipartRequestBody = VolumeType

// InfraVolumeTypePartialUpdateJSONRequestBody defines body for InfraVolumeTypePartialUpdate for application/json ContentType.
type InfraVolumeTypePartialUpdateJSONRequestBody = PatchedVolumeTypeUpdate

// InfraVolumeTypePartialUpdateFormdataRequestBody defines body for InfraVolumeTypePartialUpdate for application/x-www-form-urlencoded ContentType.
type InfraVolumeTypePartialUpdateFormdataRequestBody = PatchedVolumeTypeUpdate

// InfraVolumeTypePartialUpdateMultipartRequestBody defines body for InfraVolumeTypePartialUpdate for multipart/form-data ContentType.
type InfraVolumeTypePartialUpdateMultipartRequestBody = PatchedVolumeTypeUpdate

// InfraVolumeTypeUpdateJSONRequestBody defines body for InfraVolumeTypeUpdate for application/json ContentType.
type InfraVolumeTypeUpdateJSONRequestBody = VolumeTypeUpdate

// InfraVolumeTypeUpdateFormdataRequestBody defines body for InfraVolumeTypeUpdate for application/x-www-form-urlencoded ContentType.
type InfraVolumeTypeUpdateFormdataRequestBody = VolumeTypeUpdate

// InfraVolumeTypeUpdateMultipartRequestBody defines body for InfraVolumeTypeUpdate for multipart/form-data ContentType.
type InfraVolumeTypeUpdateMultipartRequestBody = VolumeTypeUpdate

// InfraVolumesCreateJSONRequestBody defines body for InfraVolumesCreate for application/json ContentType.
type InfraVolumesCreateJSONRequestBody = Volume

// InfraVolumesCreateFormdataRequestBody defines body for InfraVolumesCreate for application/x-www-form-urlencoded ContentType.
type InfraVolumesCreateFormdataRequestBody = Volume

// InfraVolumesCreateMultipartRequestBody defines body for InfraVolumesCreate for multipart/form-data ContentType.
type InfraVolumesCreateMultipartRequestBody = Volume

// InfraVolumesPartialUpdateJSONRequestBody defines body for InfraVolumesPartialUpdate for application/json ContentType.
type InfraVolumesPartialUpdateJSONRequestBody = PatchedVolumeUpdate

// InfraVolumesPartialUpdateFormdataRequestBody defines body for InfraVolumesPartialUpdate for application/x-www-form-urlencoded ContentType.
type InfraVolumesPartialUpdateFormdataRequestBody = PatchedVolumeUpdate

// InfraVolumesPartialUpdateMultipartRequestBody defines body for InfraVolumesPartialUpdate for multipart/form-data ContentType.
type InfraVolumesPartialUpdateMultipartRequestBody = PatchedVolumeUpdate

// InfraVolumesUpdateJSONRequestBody defines body for InfraVolumesUpdate for application/json ContentType.
type InfraVolumesUpdateJSONRequestBody = VolumeUpdate

// InfraVolumesUpdateFormdataRequestBody defines body for InfraVolumesUpdate for application/x-www-form-urlencoded ContentType.
type InfraVolumesUpdateFormdataRequestBody = VolumeUpdate

// InfraVolumesUpdateMultipartRequestBody defines body for InfraVolumesUpdate for multipart/form-data ContentType.
type InfraVolumesUpdateMultipartRequestBody = VolumeUpdate

// InfraVolumesApplyBackupPolicyCreateJSONRequestBody defines body for InfraVolumesApplyBackupPolicyCreate for application/json ContentType.
type InfraVolumesApplyBackupPolicyCreateJSONRequestBody = VolumeApplyBackupPolicy

// InfraVolumesApplyBackupPolicyCreateFormdataRequestBody defines body for InfraVolumesApplyBackupPolicyCreate for application/x-www-form-urlencoded ContentType.
type InfraVolumesApplyBackupPolicyCreateFormdataRequestBody = VolumeApplyBackupPolicy

// InfraVolumesApplyBackupPolicyCreateMultipartRequestBody defines body for InfraVolumesApplyBackupPolicyCreate for multipart/form-data ContentType.
type InfraVolumesApplyBackupPolicyCreateMultipartRequestBody = VolumeApplyBackupPolicy

// InfraVolumesApplySnapshotPolicyCreateJSONRequestBody defines body for InfraVolumesApplySnapshotPolicyCreate for application/json ContentType.
type InfraVolumesApplySnapshotPolicyCreateJSONRequestBody = VolumeApplySnapshotPolicy

// InfraVolumesApplySnapshotPolicyCreateFormdataRequestBody defines body for InfraVolumesApplySnapshotPolicyCreate for application/x-www-form-urlencoded ContentType.
type InfraVolumesApplySnapshotPolicyCreateFormdataRequestBody = VolumeApplySnapshotPolicy

// InfraVolumesApplySnapshotPolicyCreateMultipartRequestBody defines body for InfraVolumesApplySnapshotPolicyCreate for multipart/form-data ContentType.
type InfraVolumesApplySnapshotPolicyCreateMultipartRequestBody = VolumeApplySnapshotPolicy

// InfraVolumesExtendCreateJSONRequestBody defines body for InfraVolumesExtendCreate for application/json ContentType.
type InfraVolumesExtendCreateJSONRequestBody = ExtendVolume

// InfraVolumesExtendCreateFormdataRequestBody defines body for InfraVolumesExtendCreate for application/x-www-form-urlencoded ContentType.
type InfraVolumesExtendCreateFormdataRequestBody = ExtendVolume

// InfraVolumesExtendCreateMultipartRequestBody defines body for InfraVolumesExtendCreate for multipart/form-data ContentType.
type InfraVolumesExtendCreateMultipartRequestBody = ExtendVolume

// InfraVpcsCreateJSONRequestBody defines body for InfraVpcsCreate for application/json ContentType.
type InfraVpcsCreateJSONRequestBody = VPC

// InfraVpcsCreateFormdataRequestBody defines body for InfraVpcsCreate for application/x-www-form-urlencoded ContentType.
type InfraVpcsCreateFormdataRequestBody = VPC

// InfraVpcsCreateMultipartRequestBody defines body for InfraVpcsCreate for multipart/form-data ContentType.
type InfraVpcsCreateMultipartRequestBody = VPC

// InfraVpcsPartialUpdateJSONRequestBody defines body for InfraVpcsPartialUpdate for application/json ContentType.
type InfraVpcsPartialUpdateJSONRequestBody = PatchedVPCUpdate

// InfraVpcsPartialUpdateFormdataRequestBody defines body for InfraVpcsPartialUpdate for application/x-www-form-urlencoded ContentType.
type InfraVpcsPartialUpdateFormdataRequestBody = PatchedVPCUpdate

// InfraVpcsPartialUpdateMultipartRequestBody defines body for InfraVpcsPartialUpdate for multipart/form-data ContentType.
type InfraVpcsPartialUpdateMultipartRequestBody = PatchedVPCUpdate

// InfraVpcsUpdateJSONRequestBody defines body for InfraVpcsUpdate for application/json ContentType.
type InfraVpcsUpdateJSONRequestBody = VPCUpdate

// InfraVpcsUpdateFormdataRequestBody defines body for InfraVpcsUpdate for application/x-www-form-urlencoded ContentType.
type InfraVpcsUpdateFormdataRequestBody = VPCUpdate

// InfraVpcsUpdateMultipartRequestBody defines body for InfraVpcsUpdate for multipart/form-data ContentType.
type InfraVpcsUpdateMultipartRequestBody = VPCUpdate

// ProjectUserAcceptJSONRequestBody defines body for ProjectUserAccept for application/json ContentType.
type ProjectUserAcceptJSONRequestBody = ProjectAccept

// ProjectUserAcceptFormdataRequestBody defines body for ProjectUserAccept for application/x-www-form-urlencoded ContentType.
type ProjectUserAcceptFormdataRequestBody = ProjectAccept

// ProjectUserAcceptMultipartRequestBody defines body for ProjectUserAccept for multipart/form-data ContentType.
type ProjectUserAcceptMultipartRequestBody = ProjectAccept

// ProjectUserInviteJSONRequestBody defines body for ProjectUserInvite for application/json ContentType.
type ProjectUserInviteJSONRequestBody = ProjectUserInviteJSONBody

// ProjectUserInviteFormdataRequestBody defines body for ProjectUserInvite for application/x-www-form-urlencoded ContentType.
type ProjectUserInviteFormdataRequestBody = ProjectUserInviteFormdataBody

// ProjectUserInviteMultipartRequestBody defines body for ProjectUserInvite for multipart/form-data ContentType.
type ProjectUserInviteMultipartRequestBody = ProjectUserInviteMultipartBody

// KaasBackupPlansCreateJSONRequestBody defines body for KaasBackupPlansCreate for application/json ContentType.
type KaasBackupPlansCreateJSONRequestBody = BackupPlan

// KaasBackupPlansCreateFormdataRequestBody defines body for KaasBackupPlansCreate for application/x-www-form-urlencoded ContentType.
type KaasBackupPlansCreateFormdataRequestBody = BackupPlan

// KaasBackupPlansCreateMultipartRequestBody defines body for KaasBackupPlansCreate for multipart/form-data ContentType.
type KaasBackupPlansCreateMultipartRequestBody = BackupPlan

// KaasBackupPlansPartialUpdateJSONRequestBody defines body for KaasBackupPlansPartialUpdate for application/json ContentType.
type KaasBackupPlansPartialUpdateJSONRequestBody = PatchedBackupPlan

// KaasBackupPlansPartialUpdateFormdataRequestBody defines body for KaasBackupPlansPartialUpdate for application/x-www-form-urlencoded ContentType.
type KaasBackupPlansPartialUpdateFormdataRequestBody = PatchedBackupPlan

// KaasBackupPlansPartialUpdateMultipartRequestBody defines body for KaasBackupPlansPartialUpdate for multipart/form-data ContentType.
type KaasBackupPlansPartialUpdateMultipartRequestBody = PatchedBackupPlan

// KaasBackupPlansUpdateJSONRequestBody defines body for KaasBackupPlansUpdate for application/json ContentType.
type KaasBackupPlansUpdateJSONRequestBody = BackupPlan

// KaasBackupPlansUpdateFormdataRequestBody defines body for KaasBackupPlansUpdate for application/x-www-form-urlencoded ContentType.
type KaasBackupPlansUpdateFormdataRequestBody = BackupPlan

// KaasBackupPlansUpdateMultipartRequestBody defines body for KaasBackupPlansUpdate for multipart/form-data ContentType.
type KaasBackupPlansUpdateMultipartRequestBody = BackupPlan

// KaasBackupsCreateJSONRequestBody defines body for KaasBackupsCreate for application/json ContentType.
type KaasBackupsCreateJSONRequestBody = Backup

// KaasBackupsCreateFormdataRequestBody defines body for KaasBackupsCreate for application/x-www-form-urlencoded ContentType.
type KaasBackupsCreateFormdataRequestBody = Backup

// KaasBackupsCreateMultipartRequestBody defines body for KaasBackupsCreate for multipart/form-data ContentType.
type KaasBackupsCreateMultipartRequestBody = Backup

// KaasBackupsPartialUpdateJSONRequestBody defines body for KaasBackupsPartialUpdate for application/json ContentType.
type KaasBackupsPartialUpdateJSONRequestBody = PatchedBackup

// KaasBackupsPartialUpdateFormdataRequestBody defines body for KaasBackupsPartialUpdate for application/x-www-form-urlencoded ContentType.
type KaasBackupsPartialUpdateFormdataRequestBody = PatchedBackup

// KaasBackupsPartialUpdateMultipartRequestBody defines body for KaasBackupsPartialUpdate for multipart/form-data ContentType.
type KaasBackupsPartialUpdateMultipartRequestBody = PatchedBackup

// KaasBackupsUpdateJSONRequestBody defines body for KaasBackupsUpdate for application/json ContentType.
type KaasBackupsUpdateJSONRequestBody = Backup

// KaasBackupsUpdateFormdataRequestBody defines body for KaasBackupsUpdate for application/x-www-form-urlencoded ContentType.
type KaasBackupsUpdateFormdataRequestBody = Backup

// KaasBackupsUpdateMultipartRequestBody defines body for KaasBackupsUpdate for multipart/form-data ContentType.
type KaasBackupsUpdateMultipartRequestBody = Backup

// KaasRestoresCreateJSONRequestBody defines body for KaasRestoresCreate for application/json ContentType.
type KaasRestoresCreateJSONRequestBody = Restore

// KaasRestoresCreateFormdataRequestBody defines body for KaasRestoresCreate for application/x-www-form-urlencoded ContentType.
type KaasRestoresCreateFormdataRequestBody = Restore

// KaasRestoresCreateMultipartRequestBody defines body for KaasRestoresCreate for multipart/form-data ContentType.
type KaasRestoresCreateMultipartRequestBody = Restore

// KaasRestoresPartialUpdateJSONRequestBody defines body for KaasRestoresPartialUpdate for application/json ContentType.
type KaasRestoresPartialUpdateJSONRequestBody = PatchedRestore

// KaasRestoresPartialUpdateFormdataRequestBody defines body for KaasRestoresPartialUpdate for application/x-www-form-urlencoded ContentType.
type KaasRestoresPartialUpdateFormdataRequestBody = PatchedRestore

// KaasRestoresPartialUpdateMultipartRequestBody defines body for KaasRestoresPartialUpdate for multipart/form-data ContentType.
type KaasRestoresPartialUpdateMultipartRequestBody = PatchedRestore

// KaasRestoresUpdateJSONRequestBody defines body for KaasRestoresUpdate for application/json ContentType.
type KaasRestoresUpdateJSONRequestBody = Restore

// KaasRestoresUpdateFormdataRequestBody defines body for KaasRestoresUpdate for application/x-www-form-urlencoded ContentType.
type KaasRestoresUpdateFormdataRequestBody = Restore

// KaasRestoresUpdateMultipartRequestBody defines body for KaasRestoresUpdate for multipart/form-data ContentType.
type KaasRestoresUpdateMultipartRequestBody = Restore

// KaasVkeClustersCreateJSONRequestBody defines body for KaasVkeClustersCreate for application/json ContentType.
type KaasVkeClustersCreateJSONRequestBody = VKECluster

// KaasVkeClustersCreateFormdataRequestBody defines body for KaasVkeClustersCreate for application/x-www-form-urlencoded ContentType.
type KaasVkeClustersCreateFormdataRequestBody = VKECluster

// KaasVkeClustersCreateMultipartRequestBody defines body for KaasVkeClustersCreate for multipart/form-data ContentType.
type KaasVkeClustersCreateMultipartRequestBody = VKECluster

// KaasVkeClustersPartialUpdateJSONRequestBody defines body for KaasVkeClustersPartialUpdate for application/json ContentType.
type KaasVkeClustersPartialUpdateJSONRequestBody = PatchedVKEClusterUpdate

// KaasVkeClustersPartialUpdateFormdataRequestBody defines body for KaasVkeClustersPartialUpdate for application/x-www-form-urlencoded ContentType.
type KaasVkeClustersPartialUpdateFormdataRequestBody = PatchedVKEClusterUpdate

// KaasVkeClustersPartialUpdateMultipartRequestBody defines body for KaasVkeClustersPartialUpdate for multipart/form-data ContentType.
type KaasVkeClustersPartialUpdateMultipartRequestBody = PatchedVKEClusterUpdate

// KaasVkeClustersUpdateJSONRequestBody defines body for KaasVkeClustersUpdate for application/json ContentType.
type KaasVkeClustersUpdateJSONRequestBody = VKEClusterUpdate

// KaasVkeClustersUpdateFormdataRequestBody defines body for KaasVkeClustersUpdate for application/x-www-form-urlencoded ContentType.
type KaasVkeClustersUpdateFormdataRequestBody = VKEClusterUpdate

// KaasVkeClustersUpdateMultipartRequestBody defines body for KaasVkeClustersUpdate for multipart/form-data ContentType.
type KaasVkeClustersUpdateMultipartRequestBody = VKEClusterUpdate

// KaasVkeNodePoolsCreateJSONRequestBody defines body for KaasVkeNodePoolsCreate for application/json ContentType.
type KaasVkeNodePoolsCreateJSONRequestBody = VKENodePool

// KaasVkeNodePoolsCreateFormdataRequestBody defines body for KaasVkeNodePoolsCreate for application/x-www-form-urlencoded ContentType.
type KaasVkeNodePoolsCreateFormdataRequestBody = VKENodePool

// KaasVkeNodePoolsCreateMultipartRequestBody defines body for KaasVkeNodePoolsCreate for multipart/form-data ContentType.
type KaasVkeNodePoolsCreateMultipartRequestBody = VKENodePool

// KaasVkeNodePoolsPartialUpdateJSONRequestBody defines body for KaasVkeNodePoolsPartialUpdate for application/json ContentType.
type KaasVkeNodePoolsPartialUpdateJSONRequestBody = PatchedVkeNodePoolUpdate

// KaasVkeNodePoolsPartialUpdateFormdataRequestBody defines body for KaasVkeNodePoolsPartialUpdate for application/x-www-form-urlencoded ContentType.
type KaasVkeNodePoolsPartialUpdateFormdataRequestBody = PatchedVkeNodePoolUpdate

// KaasVkeNodePoolsPartialUpdateMultipartRequestBody defines body for KaasVkeNodePoolsPartialUpdate for multipart/form-data ContentType.
type KaasVkeNodePoolsPartialUpdateMultipartRequestBody = PatchedVkeNodePoolUpdate

// KaasVkeNodePoolsUpdateJSONRequestBody defines body for KaasVkeNodePoolsUpdate for application/json ContentType.
type KaasVkeNodePoolsUpdateJSONRequestBody = VkeNodePoolUpdate

// KaasVkeNodePoolsUpdateFormdataRequestBody defines body for KaasVkeNodePoolsUpdate for application/x-www-form-urlencoded ContentType.
type KaasVkeNodePoolsUpdateFormdataRequestBody = VkeNodePoolUpdate

// KaasVkeNodePoolsUpdateMultipartRequestBody defines body for KaasVkeNodePoolsUpdate for multipart/form-data ContentType.
type KaasVkeNodePoolsUpdateMultipartRequestBody = VkeNodePoolUpdate

// MarketplaceCategoriesCreateJSONRequestBody defines body for MarketplaceCategoriesCreate for application/json ContentType.
type MarketplaceCategoriesCreateJSONRequestBody = Category

// MarketplaceCategoriesCreateFormdataRequestBody defines body for MarketplaceCategoriesCreate for application/x-www-form-urlencoded ContentType.
type MarketplaceCategoriesCreateFormdataRequestBody = Category

// MarketplaceCategoriesCreateMultipartRequestBody defines body for MarketplaceCategoriesCreate for multipart/form-data ContentType.
type MarketplaceCategoriesCreateMultipartRequestBody = Category

// MarketplaceCategoriesPartialUpdateJSONRequestBody defines body for MarketplaceCategoriesPartialUpdate for application/json ContentType.
type MarketplaceCategoriesPartialUpdateJSONRequestBody = PatchedCategory

// MarketplaceCategoriesPartialUpdateFormdataRequestBody defines body for MarketplaceCategoriesPartialUpdate for application/x-www-form-urlencoded ContentType.
type MarketplaceCategoriesPartialUpdateFormdataRequestBody = PatchedCategory

// MarketplaceCategoriesPartialUpdateMultipartRequestBody defines body for MarketplaceCategoriesPartialUpdate for multipart/form-data ContentType.
type MarketplaceCategoriesPartialUpdateMultipartRequestBody = PatchedCategory

// MarketplacePricingPlansCreateJSONRequestBody defines body for MarketplacePricingPlansCreate for application/json ContentType.
type MarketplacePricingPlansCreateJSONRequestBody = PricingPlan

// MarketplacePricingPlansCreateFormdataRequestBody defines body for MarketplacePricingPlansCreate for application/x-www-form-urlencoded ContentType.
type MarketplacePricingPlansCreateFormdataRequestBody = PricingPlan

// MarketplacePricingPlansCreateMultipartRequestBody defines body for MarketplacePricingPlansCreate for multipart/form-data ContentType.
type MarketplacePricingPlansCreateMultipartRequestBody = PricingPlan

// MarketplacePricingPlansPartialUpdateJSONRequestBody defines body for MarketplacePricingPlansPartialUpdate for application/json ContentType.
type MarketplacePricingPlansPartialUpdateJSONRequestBody = PatchedPricingPlan

// MarketplacePricingPlansPartialUpdateFormdataRequestBody defines body for MarketplacePricingPlansPartialUpdate for application/x-www-form-urlencoded ContentType.
type MarketplacePricingPlansPartialUpdateFormdataRequestBody = PatchedPricingPlan

// MarketplacePricingPlansPartialUpdateMultipartRequestBody defines body for MarketplacePricingPlansPartialUpdate for multipart/form-data ContentType.
type MarketplacePricingPlansPartialUpdateMultipartRequestBody = PatchedPricingPlan

// MarketplaceProductsCreateJSONRequestBody defines body for MarketplaceProductsCreate for application/json ContentType.
type MarketplaceProductsCreateJSONRequestBody = Product

// MarketplaceProductsCreateFormdataRequestBody defines body for MarketplaceProductsCreate for application/x-www-form-urlencoded ContentType.
type MarketplaceProductsCreateFormdataRequestBody = Product

// MarketplaceProductsCreateMultipartRequestBody defines body for MarketplaceProductsCreate for multipart/form-data ContentType.
type MarketplaceProductsCreateMultipartRequestBody = Product

// MarketplaceProductsPartialUpdateJSONRequestBody defines body for MarketplaceProductsPartialUpdate for application/json ContentType.
type MarketplaceProductsPartialUpdateJSONRequestBody = PatchedProduct

// MarketplaceProductsPartialUpdateFormdataRequestBody defines body for MarketplaceProductsPartialUpdate for application/x-www-form-urlencoded ContentType.
type MarketplaceProductsPartialUpdateFormdataRequestBody = PatchedProduct

// MarketplaceProductsPartialUpdateMultipartRequestBody defines body for MarketplaceProductsPartialUpdate for multipart/form-data ContentType.
type MarketplaceProductsPartialUpdateMultipartRequestBody = PatchedProduct

// MarketplaceSubscriptionsCreateJSONRequestBody defines body for MarketplaceSubscriptionsCreate for application/json ContentType.
type MarketplaceSubscriptionsCreateJSONRequestBody = SubscriptionCreate

// MarketplaceSubscriptionsCreateFormdataRequestBody defines body for MarketplaceSubscriptionsCreate for application/x-www-form-urlencoded ContentType.
type MarketplaceSubscriptionsCreateFormdataRequestBody = SubscriptionCreate

// MarketplaceSubscriptionsCreateMultipartRequestBody defines body for MarketplaceSubscriptionsCreate for multipart/form-data ContentType.
type MarketplaceSubscriptionsCreateMultipartRequestBody = SubscriptionCreate

// MarketplaceVendorsCreateJSONRequestBody defines body for MarketplaceVendorsCreate for application/json ContentType.
type MarketplaceVendorsCreateJSONRequestBody = Vendor

// MarketplaceVendorsCreateFormdataRequestBody defines body for MarketplaceVendorsCreate for application/x-www-form-urlencoded ContentType.
type MarketplaceVendorsCreateFormdataRequestBody = Vendor

// MarketplaceVendorsCreateMultipartRequestBody defines body for MarketplaceVendorsCreate for multipart/form-data ContentType.
type MarketplaceVendorsCreateMultipartRequestBody = Vendor

// MarketplaceVendorsPartialUpdateJSONRequestBody defines body for MarketplaceVendorsPartialUpdate for application/json ContentType.
type MarketplaceVendorsPartialUpdateJSONRequestBody = PatchedVendor

// MarketplaceVendorsPartialUpdateFormdataRequestBody defines body for MarketplaceVendorsPartialUpdate for application/x-www-form-urlencoded ContentType.
type MarketplaceVendorsPartialUpdateFormdataRequestBody = PatchedVendor

// MarketplaceVendorsPartialUpdateMultipartRequestBody defines body for MarketplaceVendorsPartialUpdate for multipart/form-data ContentType.
type MarketplaceVendorsPartialUpdateMultipartRequestBody = PatchedVendor

// ObjectStorageBucketsCreateJSONRequestBody defines body for ObjectStorageBucketsCreate for application/json ContentType.
type ObjectStorageBucketsCreateJSONRequestBody = Bucket

// ObjectStorageBucketsCreateFormdataRequestBody defines body for ObjectStorageBucketsCreate for application/x-www-form-urlencoded ContentType.
type ObjectStorageBucketsCreateFormdataRequestBody = Bucket

// ObjectStorageBucketsCreateMultipartRequestBody defines body for ObjectStorageBucketsCreate for multipart/form-data ContentType.
type ObjectStorageBucketsCreateMultipartRequestBody = Bucket

// BucketAclPatchJSONRequestBody defines body for BucketAclPatch for application/json ContentType.
type BucketAclPatchJSONRequestBody = PatchedBucketACL

// BucketAclPatchFormdataRequestBody defines body for BucketAclPatch for application/x-www-form-urlencoded ContentType.
type BucketAclPatchFormdataRequestBody = PatchedBucketACL

// BucketAclPatchMultipartRequestBody defines body for BucketAclPatch for multipart/form-data ContentType.
type BucketAclPatchMultipartRequestBody = PatchedBucketACL

// BucketCorsEditJSONRequestBody defines body for BucketCorsEdit for application/json ContentType.
type BucketCorsEditJSONRequestBody = BucketCORS

// BucketCorsEditFormdataRequestBody defines body for BucketCorsEdit for application/x-www-form-urlencoded ContentType.
type BucketCorsEditFormdataRequestBody = BucketCORS

// BucketCorsEditMultipartRequestBody defines body for BucketCorsEdit for multipart/form-data ContentType.
type BucketCorsEditMultipartRequestBody = BucketCORS

// BucketLifecyclePutJSONRequestBody defines body for BucketLifecyclePut for application/json ContentType.
type BucketLifecyclePutJSONRequestBody = Lifecycle

// BucketLifecyclePutFormdataRequestBody defines body for BucketLifecyclePut for application/x-www-form-urlencoded ContentType.
type BucketLifecyclePutFormdataRequestBody = Lifecycle

// BucketLifecyclePutMultipartRequestBody defines body for BucketLifecyclePut for multipart/form-data ContentType.
type BucketLifecyclePutMultipartRequestBody = Lifecycle

// CreateFolderGetAwsTokenUploadFileJSONRequestBody defines body for CreateFolderGetAwsTokenUploadFile for application/json ContentType.
type CreateFolderGetAwsTokenUploadFileJSONRequestBody = ObjectPostRequest

// CreateFolderGetAwsTokenUploadFileFormdataRequestBody defines body for CreateFolderGetAwsTokenUploadFile for application/x-www-form-urlencoded ContentType.
type CreateFolderGetAwsTokenUploadFileFormdataRequestBody = ObjectPostRequest

// CreateFolderGetAwsTokenUploadFileMultipartRequestBody defines body for CreateFolderGetAwsTokenUploadFile for multipart/form-data ContentType.
type CreateFolderGetAwsTokenUploadFileMultipartRequestBody = ObjectPostRequest

// PatchObjectAclJSONRequestBody defines body for PatchObjectAcl for application/json ContentType.
type PatchObjectAclJSONRequestBody = PatchedObjectAcl

// PatchObjectAclFormdataRequestBody defines body for PatchObjectAcl for application/x-www-form-urlencoded ContentType.
type PatchObjectAclFormdataRequestBody = PatchedObjectAcl

// PatchObjectAclMultipartRequestBody defines body for PatchObjectAcl for multipart/form-data ContentType.
type PatchObjectAclMultipartRequestBody = PatchedObjectAcl

// ObjectBatchDeleteJSONRequestBody defines body for ObjectBatchDelete for application/json ContentType.
type ObjectBatchDeleteJSONRequestBody = BaseObject

// ObjectBatchDeleteFormdataRequestBody defines body for ObjectBatchDelete for application/x-www-form-urlencoded ContentType.
type ObjectBatchDeleteFormdataRequestBody = BaseObject

// ObjectBatchDeleteMultipartRequestBody defines body for ObjectBatchDelete for multipart/form-data ContentType.
type ObjectBatchDeleteMultipartRequestBody = BaseObject

// PutObjectTagsJSONRequestBody defines body for PutObjectTags for application/json ContentType.
type PutObjectTagsJSONRequestBody = Tag

// PutObjectTagsFormdataRequestBody defines body for PutObjectTags for application/x-www-form-urlencoded ContentType.
type PutObjectTagsFormdataRequestBody = Tag

// PutObjectTagsMultipartRequestBody defines body for PutObjectTags for multipart/form-data ContentType.
type PutObjectTagsMultipartRequestBody = Tag

// BucketPolicyPutJSONRequestBody defines body for BucketPolicyPut for application/json ContentType.
type BucketPolicyPutJSONRequestBody BucketPolicyPutJSONBody

// BucketPolicyPutFormdataRequestBody defines body for BucketPolicyPut for application/x-www-form-urlencoded ContentType.
type BucketPolicyPutFormdataRequestBody BucketPolicyPutFormdataBody

// BucketPolicyPutMultipartRequestBody defines body for BucketPolicyPut for multipart/form-data ContentType.
type BucketPolicyPutMultipartRequestBody BucketPolicyPutMultipartBody

// BucketStaticWebShowJSONRequestBody defines body for BucketStaticWebShow for application/json ContentType.
type BucketStaticWebShowJSONRequestBody = BucketStaticWebCreate

// BucketStaticWebShowFormdataRequestBody defines body for BucketStaticWebShow for application/x-www-form-urlencoded ContentType.
type BucketStaticWebShowFormdataRequestBody = BucketStaticWebCreate

// BucketStaticWebShowMultipartRequestBody defines body for BucketStaticWebShow for multipart/form-data ContentType.
type BucketStaticWebShowMultipartRequestBody = BucketStaticWebCreate

// PutBucketTagsJSONRequestBody defines body for PutBucketTags for application/json ContentType.
type PutBucketTagsJSONRequestBody = Tag

// PutBucketTagsFormdataRequestBody defines body for PutBucketTags for application/x-www-form-urlencoded ContentType.
type PutBucketTagsFormdataRequestBody = Tag

// PutBucketTagsMultipartRequestBody defines body for PutBucketTags for multipart/form-data ContentType.
type PutBucketTagsMultipartRequestBody = Tag

// BucketVersioningActionJSONRequestBody defines body for BucketVersioningAction for application/json ContentType.
type BucketVersioningActionJSONRequestBody = BucketVersioning

// BucketVersioningActionFormdataRequestBody defines body for BucketVersioningAction for application/x-www-form-urlencoded ContentType.
type BucketVersioningActionFormdataRequestBody = BucketVersioning

// BucketVersioningActionMultipartRequestBody defines body for BucketVersioningAction for multipart/form-data ContentType.
type BucketVersioningActionMultipartRequestBody = BucketVersioning

// PatchObjectVersionAclJSONRequestBody defines body for PatchObjectVersionAcl for application/json ContentType.
type PatchObjectVersionAclJSONRequestBody = PatchedObjectAcl

// PatchObjectVersionAclFormdataRequestBody defines body for PatchObjectVersionAcl for application/x-www-form-urlencoded ContentType.
type PatchObjectVersionAclFormdataRequestBody = PatchedObjectAcl

// PatchObjectVersionAclMultipartRequestBody defines body for PatchObjectVersionAcl for multipart/form-data ContentType.
type PatchObjectVersionAclMultipartRequestBody = PatchedObjectAcl

// ObjectVersionBatchDeleteJSONRequestBody defines body for ObjectVersionBatchDelete for application/json ContentType.
type ObjectVersionBatchDeleteJSONRequestBody = BaseObjectVersion

// ObjectVersionBatchDeleteFormdataRequestBody defines body for ObjectVersionBatchDelete for application/x-www-form-urlencoded ContentType.
type ObjectVersionBatchDeleteFormdataRequestBody = BaseObjectVersion

// ObjectVersionBatchDeleteMultipartRequestBody defines body for ObjectVersionBatchDelete for multipart/form-data ContentType.
type ObjectVersionBatchDeleteMultipartRequestBody = BaseObjectVersion

// PutObjectVersionTagsJSONRequestBody defines body for PutObjectVersionTags for application/json ContentType.
type PutObjectVersionTagsJSONRequestBody = Tag

// PutObjectVersionTagsFormdataRequestBody defines body for PutObjectVersionTags for application/x-www-form-urlencoded ContentType.
type PutObjectVersionTagsFormdataRequestBody = Tag

// PutObjectVersionTagsMultipartRequestBody defines body for PutObjectVersionTags for multipart/form-data ContentType.
type PutObjectVersionTagsMultipartRequestBody = Tag

// PlanCustomersCacheInfoCreateJSONRequestBody defines body for PlanCustomersCacheInfoCreate for application/json ContentType.
type PlanCustomersCacheInfoCreateJSONRequestBody = Customer

// PlanCustomersCacheInfoCreateFormdataRequestBody defines body for PlanCustomersCacheInfoCreate for application/x-www-form-urlencoded ContentType.
type PlanCustomersCacheInfoCreateFormdataRequestBody = Customer

// PlanCustomersCacheInfoCreateMultipartRequestBody defines body for PlanCustomersCacheInfoCreate for multipart/form-data ContentType.
type PlanCustomersCacheInfoCreateMultipartRequestBody = Customer

// PlanCustomersUploadIdCreateJSONRequestBody defines body for PlanCustomersUploadIdCreate for application/json ContentType.
type PlanCustomersUploadIdCreateJSONRequestBody = IdentityDocumentsUpload

// PlanCustomersUploadIdCreateFormdataRequestBody defines body for PlanCustomersUploadIdCreate for application/x-www-form-urlencoded ContentType.
type PlanCustomersUploadIdCreateFormdataRequestBody = IdentityDocumentsUpload

// PlanCustomersUploadIdCreateMultipartRequestBody defines body for PlanCustomersUploadIdCreate for multipart/form-data ContentType.
type PlanCustomersUploadIdCreateMultipartRequestBody = IdentityDocumentsUpload

// PlanOrdersCreateJSONRequestBody defines body for PlanOrdersCreate for application/json ContentType.
type PlanOrdersCreateJSONRequestBody = Order

// PlanOrdersCreateFormdataRequestBody defines body for PlanOrdersCreate for application/x-www-form-urlencoded ContentType.
type PlanOrdersCreateFormdataRequestBody = Order

// PlanOrdersCreateMultipartRequestBody defines body for PlanOrdersCreate for multipart/form-data ContentType.
type PlanOrdersCreateMultipartRequestBody = Order

// PlanOrdersCalculatePriceCreateJSONRequestBody defines body for PlanOrdersCalculatePriceCreate for application/json ContentType.
type PlanOrdersCalculatePriceCreateJSONRequestBody = Order

// PlanOrdersCalculatePriceCreateFormdataRequestBody defines body for PlanOrdersCalculatePriceCreate for application/x-www-form-urlencoded ContentType.
type PlanOrdersCalculatePriceCreateFormdataRequestBody = Order

// PlanOrdersCalculatePriceCreateMultipartRequestBody defines body for PlanOrdersCalculatePriceCreate for multipart/form-data ContentType.
type PlanOrdersCalculatePriceCreateMultipartRequestBody = Order

// PlanOrdersPreviewContractCreateJSONRequestBody defines body for PlanOrdersPreviewContractCreate for application/json ContentType.
type PlanOrdersPreviewContractCreateJSONRequestBody = Order

// PlanOrdersPreviewContractCreateFormdataRequestBody defines body for PlanOrdersPreviewContractCreate for application/x-www-form-urlencoded ContentType.
type PlanOrdersPreviewContractCreateFormdataRequestBody = Order

// PlanOrdersPreviewContractCreateMultipartRequestBody defines body for PlanOrdersPreviewContractCreate for multipart/form-data ContentType.
type PlanOrdersPreviewContractCreateMultipartRequestBody = Order

// SecretManagerSecretsCreateJSONRequestBody defines body for SecretManagerSecretsCreate for application/json ContentType.
type SecretManagerSecretsCreateJSONRequestBody = Secret

// SecretManagerSecretsCreateFormdataRequestBody defines body for SecretManagerSecretsCreate for application/x-www-form-urlencoded ContentType.
type SecretManagerSecretsCreateFormdataRequestBody = Secret

// SecretManagerSecretsCreateMultipartRequestBody defines body for SecretManagerSecretsCreate for multipart/form-data ContentType.
type SecretManagerSecretsCreateMultipartRequestBody = Secret

// SecretManagerSecretsPartialUpdateJSONRequestBody defines body for SecretManagerSecretsPartialUpdate for application/json ContentType.
type SecretManagerSecretsPartialUpdateJSONRequestBody = PatchedSecretUpdate

// SecretManagerSecretsPartialUpdateFormdataRequestBody defines body for SecretManagerSecretsPartialUpdate for application/x-www-form-urlencoded ContentType.
type SecretManagerSecretsPartialUpdateFormdataRequestBody = PatchedSecretUpdate

// SecretManagerSecretsPartialUpdateMultipartRequestBody defines body for SecretManagerSecretsPartialUpdate for multipart/form-data ContentType.
type SecretManagerSecretsPartialUpdateMultipartRequestBody = PatchedSecretUpdate

// SecretManagerSecretsUpdateJSONRequestBody defines body for SecretManagerSecretsUpdate for application/json ContentType.
type SecretManagerSecretsUpdateJSONRequestBody = SecretUpdate

// SecretManagerSecretsUpdateFormdataRequestBody defines body for SecretManagerSecretsUpdate for application/x-www-form-urlencoded ContentType.
type SecretManagerSecretsUpdateFormdataRequestBody = SecretUpdate

// SecretManagerSecretsUpdateMultipartRequestBody defines body for SecretManagerSecretsUpdate for multipart/form-data ContentType.
type SecretManagerSecretsUpdateMultipartRequestBody = SecretUpdate

// SecretManagerSecretsMetadataCreateJSONRequestBody defines body for SecretManagerSecretsMetadataCreate for application/json ContentType.
type SecretManagerSecretsMetadataCreateJSONRequestBody = Secret

// SecretManagerSecretsMetadataCreateFormdataRequestBody defines body for SecretManagerSecretsMetadataCreate for application/x-www-form-urlencoded ContentType.
type SecretManagerSecretsMetadataCreateFormdataRequestBody = Secret

// SecretManagerSecretsMetadataCreateMultipartRequestBody defines body for SecretManagerSecretsMetadataCreate for multipart/form-data ContentType.
type SecretManagerSecretsMetadataCreateMultipartRequestBody = Secret

// ServiceCatalogFavoriteServicesCreateJSONRequestBody defines body for ServiceCatalogFavoriteServicesCreate for application/json ContentType.
type ServiceCatalogFavoriteServicesCreateJSONRequestBody = FavoriteService

// ServiceCatalogFavoriteServicesCreateFormdataRequestBody defines body for ServiceCatalogFavoriteServicesCreate for application/x-www-form-urlencoded ContentType.
type ServiceCatalogFavoriteServicesCreateFormdataRequestBody = FavoriteService

// ServiceCatalogFavoriteServicesCreateMultipartRequestBody defines body for ServiceCatalogFavoriteServicesCreate for multipart/form-data ContentType.
type ServiceCatalogFavoriteServicesCreateMultipartRequestBody = FavoriteService

// ServiceCatalogServicesCreateJSONRequestBody defines body for ServiceCatalogServicesCreate for application/json ContentType.
type ServiceCatalogServicesCreateJSONRequestBody = Service

// ServiceCatalogServicesCreateFormdataRequestBody defines body for ServiceCatalogServicesCreate for application/x-www-form-urlencoded ContentType.
type ServiceCatalogServicesCreateFormdataRequestBody = Service

// ServiceCatalogServicesCreateMultipartRequestBody defines body for ServiceCatalogServicesCreate for multipart/form-data ContentType.
type ServiceCatalogServicesCreateMultipartRequestBody = Service

// ServiceCatalogServicesPartialUpdateJSONRequestBody defines body for ServiceCatalogServicesPartialUpdate for application/json ContentType.
type ServiceCatalogServicesPartialUpdateJSONRequestBody = PatchedService

// ServiceCatalogServicesPartialUpdateFormdataRequestBody defines body for ServiceCatalogServicesPartialUpdate for application/x-www-form-urlencoded ContentType.
type ServiceCatalogServicesPartialUpdateFormdataRequestBody = PatchedService

// ServiceCatalogServicesPartialUpdateMultipartRequestBody defines body for ServiceCatalogServicesPartialUpdate for multipart/form-data ContentType.
type ServiceCatalogServicesPartialUpdateMultipartRequestBody = PatchedService

// ServiceCatalogServicesUpdateJSONRequestBody defines body for ServiceCatalogServicesUpdate for application/json ContentType.
type ServiceCatalogServicesUpdateJSONRequestBody = Service

// ServiceCatalogServicesUpdateFormdataRequestBody defines body for ServiceCatalogServicesUpdate for application/x-www-form-urlencoded ContentType.
type ServiceCatalogServicesUpdateFormdataRequestBody = Service

// ServiceCatalogServicesUpdateMultipartRequestBody defines body for ServiceCatalogServicesUpdate for multipart/form-data ContentType.
type ServiceCatalogServicesUpdateMultipartRequestBody = Service

// SupportQuestionsCreateJSONRequestBody defines body for SupportQuestionsCreate for application/json ContentType.
type SupportQuestionsCreateJSONRequestBody = Question

// SupportQuestionsCreateFormdataRequestBody defines body for SupportQuestionsCreate for application/x-www-form-urlencoded ContentType.
type SupportQuestionsCreateFormdataRequestBody = Question

// SupportQuestionsCreateMultipartRequestBody defines body for SupportQuestionsCreate for multipart/form-data ContentType.
type SupportQuestionsCreateMultipartRequestBody = Question

// SupportQuestionsPartialUpdateJSONRequestBody defines body for SupportQuestionsPartialUpdate for application/json ContentType.
type SupportQuestionsPartialUpdateJSONRequestBody = PatchedQuestionUpdate

// SupportQuestionsPartialUpdateFormdataRequestBody defines body for SupportQuestionsPartialUpdate for application/x-www-form-urlencoded ContentType.
type SupportQuestionsPartialUpdateFormdataRequestBody = PatchedQuestionUpdate

// SupportQuestionsPartialUpdateMultipartRequestBody defines body for SupportQuestionsPartialUpdate for multipart/form-data ContentType.
type SupportQuestionsPartialUpdateMultipartRequestBody = PatchedQuestionUpdate

// TenantProjectUsersPartialUpdateJSONRequestBody defines body for TenantProjectUsersPartialUpdate for application/json ContentType.
type TenantProjectUsersPartialUpdateJSONRequestBody = PatchedProjectUser

// TenantProjectUsersPartialUpdateFormdataRequestBody defines body for TenantProjectUsersPartialUpdate for application/x-www-form-urlencoded ContentType.
type TenantProjectUsersPartialUpdateFormdataRequestBody = PatchedProjectUser

// TenantProjectUsersPartialUpdateMultipartRequestBody defines body for TenantProjectUsersPartialUpdate for multipart/form-data ContentType.
type TenantProjectUsersPartialUpdateMultipartRequestBody = PatchedProjectUser

// TenantProjectUsersUpdateJSONRequestBody defines body for TenantProjectUsersUpdate for application/json ContentType.
type TenantProjectUsersUpdateJSONRequestBody = ProjectUser

// TenantProjectUsersUpdateFormdataRequestBody defines body for TenantProjectUsersUpdate for application/x-www-form-urlencoded ContentType.
type TenantProjectUsersUpdateFormdataRequestBody = ProjectUser

// TenantProjectUsersUpdateMultipartRequestBody defines body for TenantProjectUsersUpdate for multipart/form-data ContentType.
type TenantProjectUsersUpdateMultipartRequestBody = ProjectUser

// TenantProjectsCreateJSONRequestBody defines body for TenantProjectsCreate for application/json ContentType.
type TenantProjectsCreateJSONRequestBody = Project

// TenantProjectsCreateFormdataRequestBody defines body for TenantProjectsCreate for application/x-www-form-urlencoded ContentType.
type TenantProjectsCreateFormdataRequestBody = Project

// TenantProjectsCreateMultipartRequestBody defines body for TenantProjectsCreate for multipart/form-data ContentType.
type TenantProjectsCreateMultipartRequestBody = Project

// TenantProjectsPartialUpdateJSONRequestBody defines body for TenantProjectsPartialUpdate for application/json ContentType.
type TenantProjectsPartialUpdateJSONRequestBody = PatchedProject

// TenantProjectsPartialUpdateFormdataRequestBody defines body for TenantProjectsPartialUpdate for application/x-www-form-urlencoded ContentType.
type TenantProjectsPartialUpdateFormdataRequestBody = PatchedProject

// TenantProjectsPartialUpdateMultipartRequestBody defines body for TenantProjectsPartialUpdate for multipart/form-data ContentType.
type TenantProjectsPartialUpdateMultipartRequestBody = PatchedProject

// TenantProjectsUpdateJSONRequestBody defines body for TenantProjectsUpdate for application/json ContentType.
type TenantProjectsUpdateJSONRequestBody = Project

// TenantProjectsUpdateFormdataRequestBody defines body for TenantProjectsUpdate for application/x-www-form-urlencoded ContentType.
type TenantProjectsUpdateFormdataRequestBody = Project

// TenantProjectsUpdateMultipartRequestBody defines body for TenantProjectsUpdate for multipart/form-data ContentType.
type TenantProjectsUpdateMultipartRequestBody = Project

// TenantUsersPartialUpdateJSONRequestBody defines body for TenantUsersPartialUpdate for application/json ContentType.
type TenantUsersPartialUpdateJSONRequestBody = PatchedUserUpdate

// TenantUsersPartialUpdateFormdataRequestBody defines body for TenantUsersPartialUpdate for application/x-www-form-urlencoded ContentType.
type TenantUsersPartialUpdateFormdataRequestBody = PatchedUserUpdate

// TenantUsersPartialUpdateMultipartRequestBody defines body for TenantUsersPartialUpdate for multipart/form-data ContentType.
type TenantUsersPartialUpdateMultipartRequestBody = PatchedUserUpdate

// TenantUsersUpdateJSONRequestBody defines body for TenantUsersUpdate for application/json ContentType.
type TenantUsersUpdateJSONRequestBody = UserUpdate

// TenantUsersUpdateFormdataRequestBody defines body for TenantUsersUpdate for application/x-www-form-urlencoded ContentType.
type TenantUsersUpdateFormdataRequestBody = UserUpdate

// TenantUsersUpdateMultipartRequestBody defines body for TenantUsersUpdate for multipart/form-data ContentType.
type TenantUsersUpdateMultipartRequestBody = UserUpdate

// AsDayOfWeekEnum returns the union data inside the AutoBackupConfig_DayOfWeek as a DayOfWeekEnum
func (t AutoBackupConfig_DayOfWeek) AsDayOfWeekEnum() (DayOfWeekEnum, error) {
	var body DayOfWeekEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDayOfWeekEnum overwrites any union data inside the AutoBackupConfig_DayOfWeek as the provided DayOfWeekEnum
func (t *AutoBackupConfig_DayOfWeek) FromDayOfWeekEnum(v DayOfWeekEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDayOfWeekEnum performs a merge with any union data inside the AutoBackupConfig_DayOfWeek, using the provided DayOfWeekEnum
func (t *AutoBackupConfig_DayOfWeek) MergeDayOfWeekEnum(v DayOfWeekEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the AutoBackupConfig_DayOfWeek as a BlankEnum
func (t AutoBackupConfig_DayOfWeek) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the AutoBackupConfig_DayOfWeek as the provided BlankEnum
func (t *AutoBackupConfig_DayOfWeek) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the AutoBackupConfig_DayOfWeek, using the provided BlankEnum
func (t *AutoBackupConfig_DayOfWeek) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t AutoBackupConfig_DayOfWeek) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AutoBackupConfig_DayOfWeek) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStatus5afEnum returns the union data inside the BackupDetail_Status as a Status5afEnum
func (t BackupDetail_Status) AsStatus5afEnum() (Status5afEnum, error) {
	var body Status5afEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStatus5afEnum overwrites any union data inside the BackupDetail_Status as the provided Status5afEnum
func (t *BackupDetail_Status) FromStatus5afEnum(v Status5afEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStatus5afEnum performs a merge with any union data inside the BackupDetail_Status, using the provided Status5afEnum
func (t *BackupDetail_Status) MergeStatus5afEnum(v Status5afEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the BackupDetail_Status as a BlankEnum
func (t BackupDetail_Status) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the BackupDetail_Status as the provided BlankEnum
func (t *BackupDetail_Status) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the BackupDetail_Status, using the provided BlankEnum
func (t *BackupDetail_Status) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the BackupDetail_Status as a NullEnum
func (t BackupDetail_Status) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the BackupDetail_Status as the provided NullEnum
func (t *BackupDetail_Status) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the BackupDetail_Status, using the provided NullEnum
func (t *BackupDetail_Status) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t BackupDetail_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *BackupDetail_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBackupPlanDetailStatusEnum returns the union data inside the BackupPlanDetail_Status as a BackupPlanDetailStatusEnum
func (t BackupPlanDetail_Status) AsBackupPlanDetailStatusEnum() (BackupPlanDetailStatusEnum, error) {
	var body BackupPlanDetailStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBackupPlanDetailStatusEnum overwrites any union data inside the BackupPlanDetail_Status as the provided BackupPlanDetailStatusEnum
func (t *BackupPlanDetail_Status) FromBackupPlanDetailStatusEnum(v BackupPlanDetailStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBackupPlanDetailStatusEnum performs a merge with any union data inside the BackupPlanDetail_Status, using the provided BackupPlanDetailStatusEnum
func (t *BackupPlanDetail_Status) MergeBackupPlanDetailStatusEnum(v BackupPlanDetailStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the BackupPlanDetail_Status as a BlankEnum
func (t BackupPlanDetail_Status) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the BackupPlanDetail_Status as the provided BlankEnum
func (t *BackupPlanDetail_Status) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the BackupPlanDetail_Status, using the provided BlankEnum
func (t *BackupPlanDetail_Status) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the BackupPlanDetail_Status as a NullEnum
func (t BackupPlanDetail_Status) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the BackupPlanDetail_Status as the provided NullEnum
func (t *BackupPlanDetail_Status) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the BackupPlanDetail_Status, using the provided NullEnum
func (t *BackupPlanDetail_Status) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t BackupPlanDetail_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *BackupPlanDetail_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsElasticIPStatusEnum returns the union data inside the ElasticIPDetail_Status as a ElasticIPStatusEnum
func (t ElasticIPDetail_Status) AsElasticIPStatusEnum() (ElasticIPStatusEnum, error) {
	var body ElasticIPStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromElasticIPStatusEnum overwrites any union data inside the ElasticIPDetail_Status as the provided ElasticIPStatusEnum
func (t *ElasticIPDetail_Status) FromElasticIPStatusEnum(v ElasticIPStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeElasticIPStatusEnum performs a merge with any union data inside the ElasticIPDetail_Status, using the provided ElasticIPStatusEnum
func (t *ElasticIPDetail_Status) MergeElasticIPStatusEnum(v ElasticIPStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the ElasticIPDetail_Status as a BlankEnum
func (t ElasticIPDetail_Status) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the ElasticIPDetail_Status as the provided BlankEnum
func (t *ElasticIPDetail_Status) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the ElasticIPDetail_Status, using the provided BlankEnum
func (t *ElasticIPDetail_Status) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ElasticIPDetail_Status as a NullEnum
func (t ElasticIPDetail_Status) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ElasticIPDetail_Status as the provided NullEnum
func (t *ElasticIPDetail_Status) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ElasticIPDetail_Status, using the provided NullEnum
func (t *ElasticIPDetail_Status) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ElasticIPDetail_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ElasticIPDetail_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVolumeTypeStatusEnum returns the union data inside the FilesystemType_Status as a VolumeTypeStatusEnum
func (t FilesystemType_Status) AsVolumeTypeStatusEnum() (VolumeTypeStatusEnum, error) {
	var body VolumeTypeStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeTypeStatusEnum overwrites any union data inside the FilesystemType_Status as the provided VolumeTypeStatusEnum
func (t *FilesystemType_Status) FromVolumeTypeStatusEnum(v VolumeTypeStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeTypeStatusEnum performs a merge with any union data inside the FilesystemType_Status, using the provided VolumeTypeStatusEnum
func (t *FilesystemType_Status) MergeVolumeTypeStatusEnum(v VolumeTypeStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the FilesystemType_Status as a BlankEnum
func (t FilesystemType_Status) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the FilesystemType_Status as the provided BlankEnum
func (t *FilesystemType_Status) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the FilesystemType_Status, using the provided BlankEnum
func (t *FilesystemType_Status) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the FilesystemType_Status as a NullEnum
func (t FilesystemType_Status) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the FilesystemType_Status as the provided NullEnum
func (t *FilesystemType_Status) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the FilesystemType_Status, using the provided NullEnum
func (t *FilesystemType_Status) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t FilesystemType_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *FilesystemType_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSexEnum returns the union data inside the IdentityCard_Sex as a SexEnum
func (t IdentityCard_Sex) AsSexEnum() (SexEnum, error) {
	var body SexEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSexEnum overwrites any union data inside the IdentityCard_Sex as the provided SexEnum
func (t *IdentityCard_Sex) FromSexEnum(v SexEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSexEnum performs a merge with any union data inside the IdentityCard_Sex, using the provided SexEnum
func (t *IdentityCard_Sex) MergeSexEnum(v SexEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the IdentityCard_Sex as a NullEnum
func (t IdentityCard_Sex) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the IdentityCard_Sex as the provided NullEnum
func (t *IdentityCard_Sex) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the IdentityCard_Sex, using the provided NullEnum
func (t *IdentityCard_Sex) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t IdentityCard_Sex) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IdentityCard_Sex) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingProvisioningStatusEnum returns the union data inside the L7Policy_ProvisioningStatus as a LoadBalancingProvisioningStatusEnum
func (t L7Policy_ProvisioningStatus) AsLoadBalancingProvisioningStatusEnum() (LoadBalancingProvisioningStatusEnum, error) {
	var body LoadBalancingProvisioningStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingProvisioningStatusEnum overwrites any union data inside the L7Policy_ProvisioningStatus as the provided LoadBalancingProvisioningStatusEnum
func (t *L7Policy_ProvisioningStatus) FromLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingProvisioningStatusEnum performs a merge with any union data inside the L7Policy_ProvisioningStatus, using the provided LoadBalancingProvisioningStatusEnum
func (t *L7Policy_ProvisioningStatus) MergeLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the L7Policy_ProvisioningStatus as a NullEnum
func (t L7Policy_ProvisioningStatus) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the L7Policy_ProvisioningStatus as the provided NullEnum
func (t *L7Policy_ProvisioningStatus) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the L7Policy_ProvisioningStatus, using the provided NullEnum
func (t *L7Policy_ProvisioningStatus) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t L7Policy_ProvisioningStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *L7Policy_ProvisioningStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingStatusEnum returns the union data inside the L7Policy_Status as a LoadBalancingStatusEnum
func (t L7Policy_Status) AsLoadBalancingStatusEnum() (LoadBalancingStatusEnum, error) {
	var body LoadBalancingStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingStatusEnum overwrites any union data inside the L7Policy_Status as the provided LoadBalancingStatusEnum
func (t *L7Policy_Status) FromLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingStatusEnum performs a merge with any union data inside the L7Policy_Status, using the provided LoadBalancingStatusEnum
func (t *L7Policy_Status) MergeLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the L7Policy_Status as a NullEnum
func (t L7Policy_Status) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the L7Policy_Status as the provided NullEnum
func (t *L7Policy_Status) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the L7Policy_Status, using the provided NullEnum
func (t *L7Policy_Status) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t L7Policy_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *L7Policy_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingProvisioningStatusEnum returns the union data inside the L7PolicyDetail_ProvisioningStatus as a LoadBalancingProvisioningStatusEnum
func (t L7PolicyDetail_ProvisioningStatus) AsLoadBalancingProvisioningStatusEnum() (LoadBalancingProvisioningStatusEnum, error) {
	var body LoadBalancingProvisioningStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingProvisioningStatusEnum overwrites any union data inside the L7PolicyDetail_ProvisioningStatus as the provided LoadBalancingProvisioningStatusEnum
func (t *L7PolicyDetail_ProvisioningStatus) FromLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingProvisioningStatusEnum performs a merge with any union data inside the L7PolicyDetail_ProvisioningStatus, using the provided LoadBalancingProvisioningStatusEnum
func (t *L7PolicyDetail_ProvisioningStatus) MergeLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the L7PolicyDetail_ProvisioningStatus as a NullEnum
func (t L7PolicyDetail_ProvisioningStatus) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the L7PolicyDetail_ProvisioningStatus as the provided NullEnum
func (t *L7PolicyDetail_ProvisioningStatus) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the L7PolicyDetail_ProvisioningStatus, using the provided NullEnum
func (t *L7PolicyDetail_ProvisioningStatus) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t L7PolicyDetail_ProvisioningStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *L7PolicyDetail_ProvisioningStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingStatusEnum returns the union data inside the L7PolicyDetail_Status as a LoadBalancingStatusEnum
func (t L7PolicyDetail_Status) AsLoadBalancingStatusEnum() (LoadBalancingStatusEnum, error) {
	var body LoadBalancingStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingStatusEnum overwrites any union data inside the L7PolicyDetail_Status as the provided LoadBalancingStatusEnum
func (t *L7PolicyDetail_Status) FromLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingStatusEnum performs a merge with any union data inside the L7PolicyDetail_Status, using the provided LoadBalancingStatusEnum
func (t *L7PolicyDetail_Status) MergeLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the L7PolicyDetail_Status as a NullEnum
func (t L7PolicyDetail_Status) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the L7PolicyDetail_Status as the provided NullEnum
func (t *L7PolicyDetail_Status) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the L7PolicyDetail_Status, using the provided NullEnum
func (t *L7PolicyDetail_Status) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t L7PolicyDetail_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *L7PolicyDetail_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingProvisioningStatusEnum returns the union data inside the L7PolicyUpdate_ProvisioningStatus as a LoadBalancingProvisioningStatusEnum
func (t L7PolicyUpdate_ProvisioningStatus) AsLoadBalancingProvisioningStatusEnum() (LoadBalancingProvisioningStatusEnum, error) {
	var body LoadBalancingProvisioningStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingProvisioningStatusEnum overwrites any union data inside the L7PolicyUpdate_ProvisioningStatus as the provided LoadBalancingProvisioningStatusEnum
func (t *L7PolicyUpdate_ProvisioningStatus) FromLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingProvisioningStatusEnum performs a merge with any union data inside the L7PolicyUpdate_ProvisioningStatus, using the provided LoadBalancingProvisioningStatusEnum
func (t *L7PolicyUpdate_ProvisioningStatus) MergeLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the L7PolicyUpdate_ProvisioningStatus as a NullEnum
func (t L7PolicyUpdate_ProvisioningStatus) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the L7PolicyUpdate_ProvisioningStatus as the provided NullEnum
func (t *L7PolicyUpdate_ProvisioningStatus) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the L7PolicyUpdate_ProvisioningStatus, using the provided NullEnum
func (t *L7PolicyUpdate_ProvisioningStatus) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t L7PolicyUpdate_ProvisioningStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *L7PolicyUpdate_ProvisioningStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingStatusEnum returns the union data inside the L7PolicyUpdate_Status as a LoadBalancingStatusEnum
func (t L7PolicyUpdate_Status) AsLoadBalancingStatusEnum() (LoadBalancingStatusEnum, error) {
	var body LoadBalancingStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingStatusEnum overwrites any union data inside the L7PolicyUpdate_Status as the provided LoadBalancingStatusEnum
func (t *L7PolicyUpdate_Status) FromLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingStatusEnum performs a merge with any union data inside the L7PolicyUpdate_Status, using the provided LoadBalancingStatusEnum
func (t *L7PolicyUpdate_Status) MergeLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the L7PolicyUpdate_Status as a NullEnum
func (t L7PolicyUpdate_Status) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the L7PolicyUpdate_Status as the provided NullEnum
func (t *L7PolicyUpdate_Status) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the L7PolicyUpdate_Status, using the provided NullEnum
func (t *L7PolicyUpdate_Status) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t L7PolicyUpdate_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *L7PolicyUpdate_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingProvisioningStatusEnum returns the union data inside the L7Rule_ProvisioningStatus as a LoadBalancingProvisioningStatusEnum
func (t L7Rule_ProvisioningStatus) AsLoadBalancingProvisioningStatusEnum() (LoadBalancingProvisioningStatusEnum, error) {
	var body LoadBalancingProvisioningStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingProvisioningStatusEnum overwrites any union data inside the L7Rule_ProvisioningStatus as the provided LoadBalancingProvisioningStatusEnum
func (t *L7Rule_ProvisioningStatus) FromLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingProvisioningStatusEnum performs a merge with any union data inside the L7Rule_ProvisioningStatus, using the provided LoadBalancingProvisioningStatusEnum
func (t *L7Rule_ProvisioningStatus) MergeLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the L7Rule_ProvisioningStatus as a NullEnum
func (t L7Rule_ProvisioningStatus) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the L7Rule_ProvisioningStatus as the provided NullEnum
func (t *L7Rule_ProvisioningStatus) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the L7Rule_ProvisioningStatus, using the provided NullEnum
func (t *L7Rule_ProvisioningStatus) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t L7Rule_ProvisioningStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *L7Rule_ProvisioningStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingStatusEnum returns the union data inside the L7Rule_Status as a LoadBalancingStatusEnum
func (t L7Rule_Status) AsLoadBalancingStatusEnum() (LoadBalancingStatusEnum, error) {
	var body LoadBalancingStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingStatusEnum overwrites any union data inside the L7Rule_Status as the provided LoadBalancingStatusEnum
func (t *L7Rule_Status) FromLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingStatusEnum performs a merge with any union data inside the L7Rule_Status, using the provided LoadBalancingStatusEnum
func (t *L7Rule_Status) MergeLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the L7Rule_Status as a NullEnum
func (t L7Rule_Status) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the L7Rule_Status as the provided NullEnum
func (t *L7Rule_Status) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the L7Rule_Status, using the provided NullEnum
func (t *L7Rule_Status) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t L7Rule_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *L7Rule_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingProvisioningStatusEnum returns the union data inside the L7RuleUpdate_ProvisioningStatus as a LoadBalancingProvisioningStatusEnum
func (t L7RuleUpdate_ProvisioningStatus) AsLoadBalancingProvisioningStatusEnum() (LoadBalancingProvisioningStatusEnum, error) {
	var body LoadBalancingProvisioningStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingProvisioningStatusEnum overwrites any union data inside the L7RuleUpdate_ProvisioningStatus as the provided LoadBalancingProvisioningStatusEnum
func (t *L7RuleUpdate_ProvisioningStatus) FromLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingProvisioningStatusEnum performs a merge with any union data inside the L7RuleUpdate_ProvisioningStatus, using the provided LoadBalancingProvisioningStatusEnum
func (t *L7RuleUpdate_ProvisioningStatus) MergeLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the L7RuleUpdate_ProvisioningStatus as a NullEnum
func (t L7RuleUpdate_ProvisioningStatus) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the L7RuleUpdate_ProvisioningStatus as the provided NullEnum
func (t *L7RuleUpdate_ProvisioningStatus) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the L7RuleUpdate_ProvisioningStatus, using the provided NullEnum
func (t *L7RuleUpdate_ProvisioningStatus) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t L7RuleUpdate_ProvisioningStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *L7RuleUpdate_ProvisioningStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingStatusEnum returns the union data inside the L7RuleUpdate_Status as a LoadBalancingStatusEnum
func (t L7RuleUpdate_Status) AsLoadBalancingStatusEnum() (LoadBalancingStatusEnum, error) {
	var body LoadBalancingStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingStatusEnum overwrites any union data inside the L7RuleUpdate_Status as the provided LoadBalancingStatusEnum
func (t *L7RuleUpdate_Status) FromLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingStatusEnum performs a merge with any union data inside the L7RuleUpdate_Status, using the provided LoadBalancingStatusEnum
func (t *L7RuleUpdate_Status) MergeLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the L7RuleUpdate_Status as a NullEnum
func (t L7RuleUpdate_Status) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the L7RuleUpdate_Status as the provided NullEnum
func (t *L7RuleUpdate_Status) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the L7RuleUpdate_Status, using the provided NullEnum
func (t *L7RuleUpdate_Status) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t L7RuleUpdate_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *L7RuleUpdate_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingProvisioningStatusEnum returns the union data inside the Listener_ProvisioningStatus as a LoadBalancingProvisioningStatusEnum
func (t Listener_ProvisioningStatus) AsLoadBalancingProvisioningStatusEnum() (LoadBalancingProvisioningStatusEnum, error) {
	var body LoadBalancingProvisioningStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingProvisioningStatusEnum overwrites any union data inside the Listener_ProvisioningStatus as the provided LoadBalancingProvisioningStatusEnum
func (t *Listener_ProvisioningStatus) FromLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingProvisioningStatusEnum performs a merge with any union data inside the Listener_ProvisioningStatus, using the provided LoadBalancingProvisioningStatusEnum
func (t *Listener_ProvisioningStatus) MergeLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the Listener_ProvisioningStatus as a NullEnum
func (t Listener_ProvisioningStatus) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the Listener_ProvisioningStatus as the provided NullEnum
func (t *Listener_ProvisioningStatus) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the Listener_ProvisioningStatus, using the provided NullEnum
func (t *Listener_ProvisioningStatus) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t Listener_ProvisioningStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Listener_ProvisioningStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingStatusEnum returns the union data inside the Listener_Status as a LoadBalancingStatusEnum
func (t Listener_Status) AsLoadBalancingStatusEnum() (LoadBalancingStatusEnum, error) {
	var body LoadBalancingStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingStatusEnum overwrites any union data inside the Listener_Status as the provided LoadBalancingStatusEnum
func (t *Listener_Status) FromLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingStatusEnum performs a merge with any union data inside the Listener_Status, using the provided LoadBalancingStatusEnum
func (t *Listener_Status) MergeLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the Listener_Status as a NullEnum
func (t Listener_Status) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the Listener_Status as the provided NullEnum
func (t *Listener_Status) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the Listener_Status, using the provided NullEnum
func (t *Listener_Status) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t Listener_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Listener_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingProvisioningStatusEnum returns the union data inside the ListenerDetail_ProvisioningStatus as a LoadBalancingProvisioningStatusEnum
func (t ListenerDetail_ProvisioningStatus) AsLoadBalancingProvisioningStatusEnum() (LoadBalancingProvisioningStatusEnum, error) {
	var body LoadBalancingProvisioningStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingProvisioningStatusEnum overwrites any union data inside the ListenerDetail_ProvisioningStatus as the provided LoadBalancingProvisioningStatusEnum
func (t *ListenerDetail_ProvisioningStatus) FromLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingProvisioningStatusEnum performs a merge with any union data inside the ListenerDetail_ProvisioningStatus, using the provided LoadBalancingProvisioningStatusEnum
func (t *ListenerDetail_ProvisioningStatus) MergeLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ListenerDetail_ProvisioningStatus as a NullEnum
func (t ListenerDetail_ProvisioningStatus) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ListenerDetail_ProvisioningStatus as the provided NullEnum
func (t *ListenerDetail_ProvisioningStatus) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ListenerDetail_ProvisioningStatus, using the provided NullEnum
func (t *ListenerDetail_ProvisioningStatus) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ListenerDetail_ProvisioningStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ListenerDetail_ProvisioningStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingStatusEnum returns the union data inside the ListenerDetail_Status as a LoadBalancingStatusEnum
func (t ListenerDetail_Status) AsLoadBalancingStatusEnum() (LoadBalancingStatusEnum, error) {
	var body LoadBalancingStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingStatusEnum overwrites any union data inside the ListenerDetail_Status as the provided LoadBalancingStatusEnum
func (t *ListenerDetail_Status) FromLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingStatusEnum performs a merge with any union data inside the ListenerDetail_Status, using the provided LoadBalancingStatusEnum
func (t *ListenerDetail_Status) MergeLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ListenerDetail_Status as a NullEnum
func (t ListenerDetail_Status) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ListenerDetail_Status as the provided NullEnum
func (t *ListenerDetail_Status) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ListenerDetail_Status, using the provided NullEnum
func (t *ListenerDetail_Status) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ListenerDetail_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ListenerDetail_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingProvisioningStatusEnum returns the union data inside the ListenerList_ProvisioningStatus as a LoadBalancingProvisioningStatusEnum
func (t ListenerList_ProvisioningStatus) AsLoadBalancingProvisioningStatusEnum() (LoadBalancingProvisioningStatusEnum, error) {
	var body LoadBalancingProvisioningStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingProvisioningStatusEnum overwrites any union data inside the ListenerList_ProvisioningStatus as the provided LoadBalancingProvisioningStatusEnum
func (t *ListenerList_ProvisioningStatus) FromLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingProvisioningStatusEnum performs a merge with any union data inside the ListenerList_ProvisioningStatus, using the provided LoadBalancingProvisioningStatusEnum
func (t *ListenerList_ProvisioningStatus) MergeLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ListenerList_ProvisioningStatus as a NullEnum
func (t ListenerList_ProvisioningStatus) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ListenerList_ProvisioningStatus as the provided NullEnum
func (t *ListenerList_ProvisioningStatus) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ListenerList_ProvisioningStatus, using the provided NullEnum
func (t *ListenerList_ProvisioningStatus) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ListenerList_ProvisioningStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ListenerList_ProvisioningStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingStatusEnum returns the union data inside the ListenerList_Status as a LoadBalancingStatusEnum
func (t ListenerList_Status) AsLoadBalancingStatusEnum() (LoadBalancingStatusEnum, error) {
	var body LoadBalancingStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingStatusEnum overwrites any union data inside the ListenerList_Status as the provided LoadBalancingStatusEnum
func (t *ListenerList_Status) FromLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingStatusEnum performs a merge with any union data inside the ListenerList_Status, using the provided LoadBalancingStatusEnum
func (t *ListenerList_Status) MergeLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ListenerList_Status as a NullEnum
func (t ListenerList_Status) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ListenerList_Status as the provided NullEnum
func (t *ListenerList_Status) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ListenerList_Status, using the provided NullEnum
func (t *ListenerList_Status) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ListenerList_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ListenerList_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingProvisioningStatusEnum returns the union data inside the ListenerUpdate_ProvisioningStatus as a LoadBalancingProvisioningStatusEnum
func (t ListenerUpdate_ProvisioningStatus) AsLoadBalancingProvisioningStatusEnum() (LoadBalancingProvisioningStatusEnum, error) {
	var body LoadBalancingProvisioningStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingProvisioningStatusEnum overwrites any union data inside the ListenerUpdate_ProvisioningStatus as the provided LoadBalancingProvisioningStatusEnum
func (t *ListenerUpdate_ProvisioningStatus) FromLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingProvisioningStatusEnum performs a merge with any union data inside the ListenerUpdate_ProvisioningStatus, using the provided LoadBalancingProvisioningStatusEnum
func (t *ListenerUpdate_ProvisioningStatus) MergeLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ListenerUpdate_ProvisioningStatus as a NullEnum
func (t ListenerUpdate_ProvisioningStatus) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ListenerUpdate_ProvisioningStatus as the provided NullEnum
func (t *ListenerUpdate_ProvisioningStatus) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ListenerUpdate_ProvisioningStatus, using the provided NullEnum
func (t *ListenerUpdate_ProvisioningStatus) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ListenerUpdate_ProvisioningStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ListenerUpdate_ProvisioningStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingStatusEnum returns the union data inside the ListenerUpdate_Status as a LoadBalancingStatusEnum
func (t ListenerUpdate_Status) AsLoadBalancingStatusEnum() (LoadBalancingStatusEnum, error) {
	var body LoadBalancingStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingStatusEnum overwrites any union data inside the ListenerUpdate_Status as the provided LoadBalancingStatusEnum
func (t *ListenerUpdate_Status) FromLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingStatusEnum performs a merge with any union data inside the ListenerUpdate_Status, using the provided LoadBalancingStatusEnum
func (t *ListenerUpdate_Status) MergeLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ListenerUpdate_Status as a NullEnum
func (t ListenerUpdate_Status) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ListenerUpdate_Status as the provided NullEnum
func (t *ListenerUpdate_Status) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ListenerUpdate_Status, using the provided NullEnum
func (t *ListenerUpdate_Status) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ListenerUpdate_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ListenerUpdate_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingProvisioningStatusEnum returns the union data inside the LoadBalancer_ProvisioningStatus as a LoadBalancingProvisioningStatusEnum
func (t LoadBalancer_ProvisioningStatus) AsLoadBalancingProvisioningStatusEnum() (LoadBalancingProvisioningStatusEnum, error) {
	var body LoadBalancingProvisioningStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingProvisioningStatusEnum overwrites any union data inside the LoadBalancer_ProvisioningStatus as the provided LoadBalancingProvisioningStatusEnum
func (t *LoadBalancer_ProvisioningStatus) FromLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingProvisioningStatusEnum performs a merge with any union data inside the LoadBalancer_ProvisioningStatus, using the provided LoadBalancingProvisioningStatusEnum
func (t *LoadBalancer_ProvisioningStatus) MergeLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the LoadBalancer_ProvisioningStatus as a NullEnum
func (t LoadBalancer_ProvisioningStatus) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the LoadBalancer_ProvisioningStatus as the provided NullEnum
func (t *LoadBalancer_ProvisioningStatus) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the LoadBalancer_ProvisioningStatus, using the provided NullEnum
func (t *LoadBalancer_ProvisioningStatus) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t LoadBalancer_ProvisioningStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LoadBalancer_ProvisioningStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingStatusEnum returns the union data inside the LoadBalancer_Status as a LoadBalancingStatusEnum
func (t LoadBalancer_Status) AsLoadBalancingStatusEnum() (LoadBalancingStatusEnum, error) {
	var body LoadBalancingStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingStatusEnum overwrites any union data inside the LoadBalancer_Status as the provided LoadBalancingStatusEnum
func (t *LoadBalancer_Status) FromLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingStatusEnum performs a merge with any union data inside the LoadBalancer_Status, using the provided LoadBalancingStatusEnum
func (t *LoadBalancer_Status) MergeLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the LoadBalancer_Status as a NullEnum
func (t LoadBalancer_Status) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the LoadBalancer_Status as the provided NullEnum
func (t *LoadBalancer_Status) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the LoadBalancer_Status, using the provided NullEnum
func (t *LoadBalancer_Status) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t LoadBalancer_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LoadBalancer_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingProvisioningStatusEnum returns the union data inside the LoadBalancerDetail_ProvisioningStatus as a LoadBalancingProvisioningStatusEnum
func (t LoadBalancerDetail_ProvisioningStatus) AsLoadBalancingProvisioningStatusEnum() (LoadBalancingProvisioningStatusEnum, error) {
	var body LoadBalancingProvisioningStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingProvisioningStatusEnum overwrites any union data inside the LoadBalancerDetail_ProvisioningStatus as the provided LoadBalancingProvisioningStatusEnum
func (t *LoadBalancerDetail_ProvisioningStatus) FromLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingProvisioningStatusEnum performs a merge with any union data inside the LoadBalancerDetail_ProvisioningStatus, using the provided LoadBalancingProvisioningStatusEnum
func (t *LoadBalancerDetail_ProvisioningStatus) MergeLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the LoadBalancerDetail_ProvisioningStatus as a NullEnum
func (t LoadBalancerDetail_ProvisioningStatus) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the LoadBalancerDetail_ProvisioningStatus as the provided NullEnum
func (t *LoadBalancerDetail_ProvisioningStatus) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the LoadBalancerDetail_ProvisioningStatus, using the provided NullEnum
func (t *LoadBalancerDetail_ProvisioningStatus) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t LoadBalancerDetail_ProvisioningStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LoadBalancerDetail_ProvisioningStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingStatusEnum returns the union data inside the LoadBalancerDetail_Status as a LoadBalancingStatusEnum
func (t LoadBalancerDetail_Status) AsLoadBalancingStatusEnum() (LoadBalancingStatusEnum, error) {
	var body LoadBalancingStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingStatusEnum overwrites any union data inside the LoadBalancerDetail_Status as the provided LoadBalancingStatusEnum
func (t *LoadBalancerDetail_Status) FromLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingStatusEnum performs a merge with any union data inside the LoadBalancerDetail_Status, using the provided LoadBalancingStatusEnum
func (t *LoadBalancerDetail_Status) MergeLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the LoadBalancerDetail_Status as a NullEnum
func (t LoadBalancerDetail_Status) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the LoadBalancerDetail_Status as the provided NullEnum
func (t *LoadBalancerDetail_Status) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the LoadBalancerDetail_Status, using the provided NullEnum
func (t *LoadBalancerDetail_Status) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t LoadBalancerDetail_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LoadBalancerDetail_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingProvisioningStatusEnum returns the union data inside the LoadBalancerList_ProvisioningStatus as a LoadBalancingProvisioningStatusEnum
func (t LoadBalancerList_ProvisioningStatus) AsLoadBalancingProvisioningStatusEnum() (LoadBalancingProvisioningStatusEnum, error) {
	var body LoadBalancingProvisioningStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingProvisioningStatusEnum overwrites any union data inside the LoadBalancerList_ProvisioningStatus as the provided LoadBalancingProvisioningStatusEnum
func (t *LoadBalancerList_ProvisioningStatus) FromLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingProvisioningStatusEnum performs a merge with any union data inside the LoadBalancerList_ProvisioningStatus, using the provided LoadBalancingProvisioningStatusEnum
func (t *LoadBalancerList_ProvisioningStatus) MergeLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the LoadBalancerList_ProvisioningStatus as a NullEnum
func (t LoadBalancerList_ProvisioningStatus) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the LoadBalancerList_ProvisioningStatus as the provided NullEnum
func (t *LoadBalancerList_ProvisioningStatus) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the LoadBalancerList_ProvisioningStatus, using the provided NullEnum
func (t *LoadBalancerList_ProvisioningStatus) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t LoadBalancerList_ProvisioningStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LoadBalancerList_ProvisioningStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingStatusEnum returns the union data inside the LoadBalancerList_Status as a LoadBalancingStatusEnum
func (t LoadBalancerList_Status) AsLoadBalancingStatusEnum() (LoadBalancingStatusEnum, error) {
	var body LoadBalancingStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingStatusEnum overwrites any union data inside the LoadBalancerList_Status as the provided LoadBalancingStatusEnum
func (t *LoadBalancerList_Status) FromLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingStatusEnum performs a merge with any union data inside the LoadBalancerList_Status, using the provided LoadBalancingStatusEnum
func (t *LoadBalancerList_Status) MergeLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the LoadBalancerList_Status as a NullEnum
func (t LoadBalancerList_Status) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the LoadBalancerList_Status as the provided NullEnum
func (t *LoadBalancerList_Status) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the LoadBalancerList_Status, using the provided NullEnum
func (t *LoadBalancerList_Status) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t LoadBalancerList_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LoadBalancerList_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingProvisioningStatusEnum returns the union data inside the LoadBalancerUpdate_ProvisioningStatus as a LoadBalancingProvisioningStatusEnum
func (t LoadBalancerUpdate_ProvisioningStatus) AsLoadBalancingProvisioningStatusEnum() (LoadBalancingProvisioningStatusEnum, error) {
	var body LoadBalancingProvisioningStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingProvisioningStatusEnum overwrites any union data inside the LoadBalancerUpdate_ProvisioningStatus as the provided LoadBalancingProvisioningStatusEnum
func (t *LoadBalancerUpdate_ProvisioningStatus) FromLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingProvisioningStatusEnum performs a merge with any union data inside the LoadBalancerUpdate_ProvisioningStatus, using the provided LoadBalancingProvisioningStatusEnum
func (t *LoadBalancerUpdate_ProvisioningStatus) MergeLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the LoadBalancerUpdate_ProvisioningStatus as a NullEnum
func (t LoadBalancerUpdate_ProvisioningStatus) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the LoadBalancerUpdate_ProvisioningStatus as the provided NullEnum
func (t *LoadBalancerUpdate_ProvisioningStatus) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the LoadBalancerUpdate_ProvisioningStatus, using the provided NullEnum
func (t *LoadBalancerUpdate_ProvisioningStatus) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t LoadBalancerUpdate_ProvisioningStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LoadBalancerUpdate_ProvisioningStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingStatusEnum returns the union data inside the LoadBalancerUpdate_Status as a LoadBalancingStatusEnum
func (t LoadBalancerUpdate_Status) AsLoadBalancingStatusEnum() (LoadBalancingStatusEnum, error) {
	var body LoadBalancingStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingStatusEnum overwrites any union data inside the LoadBalancerUpdate_Status as the provided LoadBalancingStatusEnum
func (t *LoadBalancerUpdate_Status) FromLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingStatusEnum performs a merge with any union data inside the LoadBalancerUpdate_Status, using the provided LoadBalancingStatusEnum
func (t *LoadBalancerUpdate_Status) MergeLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the LoadBalancerUpdate_Status as a NullEnum
func (t LoadBalancerUpdate_Status) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the LoadBalancerUpdate_Status as the provided NullEnum
func (t *LoadBalancerUpdate_Status) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the LoadBalancerUpdate_Status, using the provided NullEnum
func (t *LoadBalancerUpdate_Status) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t LoadBalancerUpdate_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LoadBalancerUpdate_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingProvisioningStatusEnum returns the union data inside the NestedListener_ProvisioningStatus as a LoadBalancingProvisioningStatusEnum
func (t NestedListener_ProvisioningStatus) AsLoadBalancingProvisioningStatusEnum() (LoadBalancingProvisioningStatusEnum, error) {
	var body LoadBalancingProvisioningStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingProvisioningStatusEnum overwrites any union data inside the NestedListener_ProvisioningStatus as the provided LoadBalancingProvisioningStatusEnum
func (t *NestedListener_ProvisioningStatus) FromLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingProvisioningStatusEnum performs a merge with any union data inside the NestedListener_ProvisioningStatus, using the provided LoadBalancingProvisioningStatusEnum
func (t *NestedListener_ProvisioningStatus) MergeLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the NestedListener_ProvisioningStatus as a NullEnum
func (t NestedListener_ProvisioningStatus) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the NestedListener_ProvisioningStatus as the provided NullEnum
func (t *NestedListener_ProvisioningStatus) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the NestedListener_ProvisioningStatus, using the provided NullEnum
func (t *NestedListener_ProvisioningStatus) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t NestedListener_ProvisioningStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NestedListener_ProvisioningStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingStatusEnum returns the union data inside the NestedListener_Status as a LoadBalancingStatusEnum
func (t NestedListener_Status) AsLoadBalancingStatusEnum() (LoadBalancingStatusEnum, error) {
	var body LoadBalancingStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingStatusEnum overwrites any union data inside the NestedListener_Status as the provided LoadBalancingStatusEnum
func (t *NestedListener_Status) FromLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingStatusEnum performs a merge with any union data inside the NestedListener_Status, using the provided LoadBalancingStatusEnum
func (t *NestedListener_Status) MergeLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the NestedListener_Status as a NullEnum
func (t NestedListener_Status) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the NestedListener_Status as the provided NullEnum
func (t *NestedListener_Status) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the NestedListener_Status, using the provided NullEnum
func (t *NestedListener_Status) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t NestedListener_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NestedListener_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPolicyEnum returns the union data inside the NestedPlacementGroup_Policy as a PolicyEnum
func (t NestedPlacementGroup_Policy) AsPolicyEnum() (PolicyEnum, error) {
	var body PolicyEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPolicyEnum overwrites any union data inside the NestedPlacementGroup_Policy as the provided PolicyEnum
func (t *NestedPlacementGroup_Policy) FromPolicyEnum(v PolicyEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePolicyEnum performs a merge with any union data inside the NestedPlacementGroup_Policy, using the provided PolicyEnum
func (t *NestedPlacementGroup_Policy) MergePolicyEnum(v PolicyEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the NestedPlacementGroup_Policy as a BlankEnum
func (t NestedPlacementGroup_Policy) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the NestedPlacementGroup_Policy as the provided BlankEnum
func (t *NestedPlacementGroup_Policy) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the NestedPlacementGroup_Policy, using the provided BlankEnum
func (t *NestedPlacementGroup_Policy) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the NestedPlacementGroup_Policy as a NullEnum
func (t NestedPlacementGroup_Policy) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the NestedPlacementGroup_Policy as the provided NullEnum
func (t *NestedPlacementGroup_Policy) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the NestedPlacementGroup_Policy, using the provided NullEnum
func (t *NestedPlacementGroup_Policy) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t NestedPlacementGroup_Policy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NestedPlacementGroup_Policy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMonitorHttpMethodEnum returns the union data inside the NestedServerGroup_MonitorHttpMethod as a MonitorHttpMethodEnum
func (t NestedServerGroup_MonitorHttpMethod) AsMonitorHttpMethodEnum() (MonitorHttpMethodEnum, error) {
	var body MonitorHttpMethodEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMonitorHttpMethodEnum overwrites any union data inside the NestedServerGroup_MonitorHttpMethod as the provided MonitorHttpMethodEnum
func (t *NestedServerGroup_MonitorHttpMethod) FromMonitorHttpMethodEnum(v MonitorHttpMethodEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMonitorHttpMethodEnum performs a merge with any union data inside the NestedServerGroup_MonitorHttpMethod, using the provided MonitorHttpMethodEnum
func (t *NestedServerGroup_MonitorHttpMethod) MergeMonitorHttpMethodEnum(v MonitorHttpMethodEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the NestedServerGroup_MonitorHttpMethod as a NullEnum
func (t NestedServerGroup_MonitorHttpMethod) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the NestedServerGroup_MonitorHttpMethod as the provided NullEnum
func (t *NestedServerGroup_MonitorHttpMethod) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the NestedServerGroup_MonitorHttpMethod, using the provided NullEnum
func (t *NestedServerGroup_MonitorHttpMethod) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t NestedServerGroup_MonitorHttpMethod) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NestedServerGroup_MonitorHttpMethod) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingMonitorTypeEnum returns the union data inside the NestedServerGroup_MonitorType as a LoadBalancingMonitorTypeEnum
func (t NestedServerGroup_MonitorType) AsLoadBalancingMonitorTypeEnum() (LoadBalancingMonitorTypeEnum, error) {
	var body LoadBalancingMonitorTypeEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingMonitorTypeEnum overwrites any union data inside the NestedServerGroup_MonitorType as the provided LoadBalancingMonitorTypeEnum
func (t *NestedServerGroup_MonitorType) FromLoadBalancingMonitorTypeEnum(v LoadBalancingMonitorTypeEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingMonitorTypeEnum performs a merge with any union data inside the NestedServerGroup_MonitorType, using the provided LoadBalancingMonitorTypeEnum
func (t *NestedServerGroup_MonitorType) MergeLoadBalancingMonitorTypeEnum(v LoadBalancingMonitorTypeEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the NestedServerGroup_MonitorType as a NullEnum
func (t NestedServerGroup_MonitorType) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the NestedServerGroup_MonitorType as the provided NullEnum
func (t *NestedServerGroup_MonitorType) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the NestedServerGroup_MonitorType, using the provided NullEnum
func (t *NestedServerGroup_MonitorType) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t NestedServerGroup_MonitorType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NestedServerGroup_MonitorType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingProvisioningStatusEnum returns the union data inside the NestedServerGroup_ProvisioningStatus as a LoadBalancingProvisioningStatusEnum
func (t NestedServerGroup_ProvisioningStatus) AsLoadBalancingProvisioningStatusEnum() (LoadBalancingProvisioningStatusEnum, error) {
	var body LoadBalancingProvisioningStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingProvisioningStatusEnum overwrites any union data inside the NestedServerGroup_ProvisioningStatus as the provided LoadBalancingProvisioningStatusEnum
func (t *NestedServerGroup_ProvisioningStatus) FromLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingProvisioningStatusEnum performs a merge with any union data inside the NestedServerGroup_ProvisioningStatus, using the provided LoadBalancingProvisioningStatusEnum
func (t *NestedServerGroup_ProvisioningStatus) MergeLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the NestedServerGroup_ProvisioningStatus as a NullEnum
func (t NestedServerGroup_ProvisioningStatus) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the NestedServerGroup_ProvisioningStatus as the provided NullEnum
func (t *NestedServerGroup_ProvisioningStatus) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the NestedServerGroup_ProvisioningStatus, using the provided NullEnum
func (t *NestedServerGroup_ProvisioningStatus) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t NestedServerGroup_ProvisioningStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NestedServerGroup_ProvisioningStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSessionPersistenceTypeEnum returns the union data inside the NestedServerGroup_SessionPersistenceType as a SessionPersistenceTypeEnum
func (t NestedServerGroup_SessionPersistenceType) AsSessionPersistenceTypeEnum() (SessionPersistenceTypeEnum, error) {
	var body SessionPersistenceTypeEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSessionPersistenceTypeEnum overwrites any union data inside the NestedServerGroup_SessionPersistenceType as the provided SessionPersistenceTypeEnum
func (t *NestedServerGroup_SessionPersistenceType) FromSessionPersistenceTypeEnum(v SessionPersistenceTypeEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSessionPersistenceTypeEnum performs a merge with any union data inside the NestedServerGroup_SessionPersistenceType, using the provided SessionPersistenceTypeEnum
func (t *NestedServerGroup_SessionPersistenceType) MergeSessionPersistenceTypeEnum(v SessionPersistenceTypeEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the NestedServerGroup_SessionPersistenceType as a BlankEnum
func (t NestedServerGroup_SessionPersistenceType) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the NestedServerGroup_SessionPersistenceType as the provided BlankEnum
func (t *NestedServerGroup_SessionPersistenceType) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the NestedServerGroup_SessionPersistenceType, using the provided BlankEnum
func (t *NestedServerGroup_SessionPersistenceType) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the NestedServerGroup_SessionPersistenceType as a NullEnum
func (t NestedServerGroup_SessionPersistenceType) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the NestedServerGroup_SessionPersistenceType as the provided NullEnum
func (t *NestedServerGroup_SessionPersistenceType) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the NestedServerGroup_SessionPersistenceType, using the provided NullEnum
func (t *NestedServerGroup_SessionPersistenceType) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t NestedServerGroup_SessionPersistenceType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NestedServerGroup_SessionPersistenceType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingStatusEnum returns the union data inside the NestedServerGroup_Status as a LoadBalancingStatusEnum
func (t NestedServerGroup_Status) AsLoadBalancingStatusEnum() (LoadBalancingStatusEnum, error) {
	var body LoadBalancingStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingStatusEnum overwrites any union data inside the NestedServerGroup_Status as the provided LoadBalancingStatusEnum
func (t *NestedServerGroup_Status) FromLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingStatusEnum performs a merge with any union data inside the NestedServerGroup_Status, using the provided LoadBalancingStatusEnum
func (t *NestedServerGroup_Status) MergeLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the NestedServerGroup_Status as a NullEnum
func (t NestedServerGroup_Status) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the NestedServerGroup_Status as the provided NullEnum
func (t *NestedServerGroup_Status) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the NestedServerGroup_Status, using the provided NullEnum
func (t *NestedServerGroup_Status) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t NestedServerGroup_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NestedServerGroup_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingProvisioningStatusEnum returns the union data inside the NestedServerGroupMember_ProvisioningStatus as a LoadBalancingProvisioningStatusEnum
func (t NestedServerGroupMember_ProvisioningStatus) AsLoadBalancingProvisioningStatusEnum() (LoadBalancingProvisioningStatusEnum, error) {
	var body LoadBalancingProvisioningStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingProvisioningStatusEnum overwrites any union data inside the NestedServerGroupMember_ProvisioningStatus as the provided LoadBalancingProvisioningStatusEnum
func (t *NestedServerGroupMember_ProvisioningStatus) FromLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingProvisioningStatusEnum performs a merge with any union data inside the NestedServerGroupMember_ProvisioningStatus, using the provided LoadBalancingProvisioningStatusEnum
func (t *NestedServerGroupMember_ProvisioningStatus) MergeLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the NestedServerGroupMember_ProvisioningStatus as a NullEnum
func (t NestedServerGroupMember_ProvisioningStatus) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the NestedServerGroupMember_ProvisioningStatus as the provided NullEnum
func (t *NestedServerGroupMember_ProvisioningStatus) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the NestedServerGroupMember_ProvisioningStatus, using the provided NullEnum
func (t *NestedServerGroupMember_ProvisioningStatus) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t NestedServerGroupMember_ProvisioningStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NestedServerGroupMember_ProvisioningStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingStatusEnum returns the union data inside the NestedServerGroupMember_Status as a LoadBalancingStatusEnum
func (t NestedServerGroupMember_Status) AsLoadBalancingStatusEnum() (LoadBalancingStatusEnum, error) {
	var body LoadBalancingStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingStatusEnum overwrites any union data inside the NestedServerGroupMember_Status as the provided LoadBalancingStatusEnum
func (t *NestedServerGroupMember_Status) FromLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingStatusEnum performs a merge with any union data inside the NestedServerGroupMember_Status, using the provided LoadBalancingStatusEnum
func (t *NestedServerGroupMember_Status) MergeLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the NestedServerGroupMember_Status as a NullEnum
func (t NestedServerGroupMember_Status) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the NestedServerGroupMember_Status as the provided NullEnum
func (t *NestedServerGroupMember_Status) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the NestedServerGroupMember_Status, using the provided NullEnum
func (t *NestedServerGroupMember_Status) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t NestedServerGroupMember_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NestedServerGroupMember_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFolderUpload returns the union data inside the ObjectPostRequest as a FolderUpload
func (t ObjectPostRequest) AsFolderUpload() (FolderUpload, error) {
	var body FolderUpload
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFolderUpload overwrites any union data inside the ObjectPostRequest as the provided FolderUpload
func (t *ObjectPostRequest) FromFolderUpload(v FolderUpload) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFolderUpload performs a merge with any union data inside the ObjectPostRequest, using the provided FolderUpload
func (t *ObjectPostRequest) MergeFolderUpload(v FolderUpload) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsObjectUpload returns the union data inside the ObjectPostRequest as a ObjectUpload
func (t ObjectPostRequest) AsObjectUpload() (ObjectUpload, error) {
	var body ObjectUpload
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromObjectUpload overwrites any union data inside the ObjectPostRequest as the provided ObjectUpload
func (t *ObjectPostRequest) FromObjectUpload(v ObjectUpload) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeObjectUpload performs a merge with any union data inside the ObjectPostRequest, using the provided ObjectUpload
func (t *ObjectPostRequest) MergeObjectUpload(v ObjectUpload) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ObjectPostRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ObjectPostRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFolderUpload returns the union data inside the ObjectPostResponse as a FolderUpload
func (t ObjectPostResponse) AsFolderUpload() (FolderUpload, error) {
	var body FolderUpload
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFolderUpload overwrites any union data inside the ObjectPostResponse as the provided FolderUpload
func (t *ObjectPostResponse) FromFolderUpload(v FolderUpload) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFolderUpload performs a merge with any union data inside the ObjectPostResponse, using the provided FolderUpload
func (t *ObjectPostResponse) MergeFolderUpload(v FolderUpload) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsObjectUploadSig returns the union data inside the ObjectPostResponse as a ObjectUploadSig
func (t ObjectPostResponse) AsObjectUploadSig() (ObjectUploadSig, error) {
	var body ObjectUploadSig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromObjectUploadSig overwrites any union data inside the ObjectPostResponse as the provided ObjectUploadSig
func (t *ObjectPostResponse) FromObjectUploadSig(v ObjectUploadSig) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeObjectUploadSig performs a merge with any union data inside the ObjectPostResponse, using the provided ObjectUploadSig
func (t *ObjectPostResponse) MergeObjectUploadSig(v ObjectUploadSig) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ObjectPostResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ObjectPostResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingProvisioningStatusEnum returns the union data inside the PatchedL7PolicyUpdate_ProvisioningStatus as a LoadBalancingProvisioningStatusEnum
func (t PatchedL7PolicyUpdate_ProvisioningStatus) AsLoadBalancingProvisioningStatusEnum() (LoadBalancingProvisioningStatusEnum, error) {
	var body LoadBalancingProvisioningStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingProvisioningStatusEnum overwrites any union data inside the PatchedL7PolicyUpdate_ProvisioningStatus as the provided LoadBalancingProvisioningStatusEnum
func (t *PatchedL7PolicyUpdate_ProvisioningStatus) FromLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingProvisioningStatusEnum performs a merge with any union data inside the PatchedL7PolicyUpdate_ProvisioningStatus, using the provided LoadBalancingProvisioningStatusEnum
func (t *PatchedL7PolicyUpdate_ProvisioningStatus) MergeLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the PatchedL7PolicyUpdate_ProvisioningStatus as a NullEnum
func (t PatchedL7PolicyUpdate_ProvisioningStatus) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the PatchedL7PolicyUpdate_ProvisioningStatus as the provided NullEnum
func (t *PatchedL7PolicyUpdate_ProvisioningStatus) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the PatchedL7PolicyUpdate_ProvisioningStatus, using the provided NullEnum
func (t *PatchedL7PolicyUpdate_ProvisioningStatus) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t PatchedL7PolicyUpdate_ProvisioningStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedL7PolicyUpdate_ProvisioningStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingStatusEnum returns the union data inside the PatchedL7PolicyUpdate_Status as a LoadBalancingStatusEnum
func (t PatchedL7PolicyUpdate_Status) AsLoadBalancingStatusEnum() (LoadBalancingStatusEnum, error) {
	var body LoadBalancingStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingStatusEnum overwrites any union data inside the PatchedL7PolicyUpdate_Status as the provided LoadBalancingStatusEnum
func (t *PatchedL7PolicyUpdate_Status) FromLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingStatusEnum performs a merge with any union data inside the PatchedL7PolicyUpdate_Status, using the provided LoadBalancingStatusEnum
func (t *PatchedL7PolicyUpdate_Status) MergeLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the PatchedL7PolicyUpdate_Status as a NullEnum
func (t PatchedL7PolicyUpdate_Status) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the PatchedL7PolicyUpdate_Status as the provided NullEnum
func (t *PatchedL7PolicyUpdate_Status) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the PatchedL7PolicyUpdate_Status, using the provided NullEnum
func (t *PatchedL7PolicyUpdate_Status) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t PatchedL7PolicyUpdate_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedL7PolicyUpdate_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingProvisioningStatusEnum returns the union data inside the PatchedL7RuleUpdate_ProvisioningStatus as a LoadBalancingProvisioningStatusEnum
func (t PatchedL7RuleUpdate_ProvisioningStatus) AsLoadBalancingProvisioningStatusEnum() (LoadBalancingProvisioningStatusEnum, error) {
	var body LoadBalancingProvisioningStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingProvisioningStatusEnum overwrites any union data inside the PatchedL7RuleUpdate_ProvisioningStatus as the provided LoadBalancingProvisioningStatusEnum
func (t *PatchedL7RuleUpdate_ProvisioningStatus) FromLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingProvisioningStatusEnum performs a merge with any union data inside the PatchedL7RuleUpdate_ProvisioningStatus, using the provided LoadBalancingProvisioningStatusEnum
func (t *PatchedL7RuleUpdate_ProvisioningStatus) MergeLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the PatchedL7RuleUpdate_ProvisioningStatus as a NullEnum
func (t PatchedL7RuleUpdate_ProvisioningStatus) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the PatchedL7RuleUpdate_ProvisioningStatus as the provided NullEnum
func (t *PatchedL7RuleUpdate_ProvisioningStatus) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the PatchedL7RuleUpdate_ProvisioningStatus, using the provided NullEnum
func (t *PatchedL7RuleUpdate_ProvisioningStatus) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t PatchedL7RuleUpdate_ProvisioningStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedL7RuleUpdate_ProvisioningStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingStatusEnum returns the union data inside the PatchedL7RuleUpdate_Status as a LoadBalancingStatusEnum
func (t PatchedL7RuleUpdate_Status) AsLoadBalancingStatusEnum() (LoadBalancingStatusEnum, error) {
	var body LoadBalancingStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingStatusEnum overwrites any union data inside the PatchedL7RuleUpdate_Status as the provided LoadBalancingStatusEnum
func (t *PatchedL7RuleUpdate_Status) FromLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingStatusEnum performs a merge with any union data inside the PatchedL7RuleUpdate_Status, using the provided LoadBalancingStatusEnum
func (t *PatchedL7RuleUpdate_Status) MergeLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the PatchedL7RuleUpdate_Status as a NullEnum
func (t PatchedL7RuleUpdate_Status) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the PatchedL7RuleUpdate_Status as the provided NullEnum
func (t *PatchedL7RuleUpdate_Status) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the PatchedL7RuleUpdate_Status, using the provided NullEnum
func (t *PatchedL7RuleUpdate_Status) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t PatchedL7RuleUpdate_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedL7RuleUpdate_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingProvisioningStatusEnum returns the union data inside the PatchedListenerUpdate_ProvisioningStatus as a LoadBalancingProvisioningStatusEnum
func (t PatchedListenerUpdate_ProvisioningStatus) AsLoadBalancingProvisioningStatusEnum() (LoadBalancingProvisioningStatusEnum, error) {
	var body LoadBalancingProvisioningStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingProvisioningStatusEnum overwrites any union data inside the PatchedListenerUpdate_ProvisioningStatus as the provided LoadBalancingProvisioningStatusEnum
func (t *PatchedListenerUpdate_ProvisioningStatus) FromLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingProvisioningStatusEnum performs a merge with any union data inside the PatchedListenerUpdate_ProvisioningStatus, using the provided LoadBalancingProvisioningStatusEnum
func (t *PatchedListenerUpdate_ProvisioningStatus) MergeLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the PatchedListenerUpdate_ProvisioningStatus as a NullEnum
func (t PatchedListenerUpdate_ProvisioningStatus) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the PatchedListenerUpdate_ProvisioningStatus as the provided NullEnum
func (t *PatchedListenerUpdate_ProvisioningStatus) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the PatchedListenerUpdate_ProvisioningStatus, using the provided NullEnum
func (t *PatchedListenerUpdate_ProvisioningStatus) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t PatchedListenerUpdate_ProvisioningStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedListenerUpdate_ProvisioningStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingStatusEnum returns the union data inside the PatchedListenerUpdate_Status as a LoadBalancingStatusEnum
func (t PatchedListenerUpdate_Status) AsLoadBalancingStatusEnum() (LoadBalancingStatusEnum, error) {
	var body LoadBalancingStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingStatusEnum overwrites any union data inside the PatchedListenerUpdate_Status as the provided LoadBalancingStatusEnum
func (t *PatchedListenerUpdate_Status) FromLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingStatusEnum performs a merge with any union data inside the PatchedListenerUpdate_Status, using the provided LoadBalancingStatusEnum
func (t *PatchedListenerUpdate_Status) MergeLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the PatchedListenerUpdate_Status as a NullEnum
func (t PatchedListenerUpdate_Status) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the PatchedListenerUpdate_Status as the provided NullEnum
func (t *PatchedListenerUpdate_Status) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the PatchedListenerUpdate_Status, using the provided NullEnum
func (t *PatchedListenerUpdate_Status) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t PatchedListenerUpdate_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedListenerUpdate_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingProvisioningStatusEnum returns the union data inside the PatchedLoadBalancerUpdate_ProvisioningStatus as a LoadBalancingProvisioningStatusEnum
func (t PatchedLoadBalancerUpdate_ProvisioningStatus) AsLoadBalancingProvisioningStatusEnum() (LoadBalancingProvisioningStatusEnum, error) {
	var body LoadBalancingProvisioningStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingProvisioningStatusEnum overwrites any union data inside the PatchedLoadBalancerUpdate_ProvisioningStatus as the provided LoadBalancingProvisioningStatusEnum
func (t *PatchedLoadBalancerUpdate_ProvisioningStatus) FromLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingProvisioningStatusEnum performs a merge with any union data inside the PatchedLoadBalancerUpdate_ProvisioningStatus, using the provided LoadBalancingProvisioningStatusEnum
func (t *PatchedLoadBalancerUpdate_ProvisioningStatus) MergeLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the PatchedLoadBalancerUpdate_ProvisioningStatus as a NullEnum
func (t PatchedLoadBalancerUpdate_ProvisioningStatus) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the PatchedLoadBalancerUpdate_ProvisioningStatus as the provided NullEnum
func (t *PatchedLoadBalancerUpdate_ProvisioningStatus) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the PatchedLoadBalancerUpdate_ProvisioningStatus, using the provided NullEnum
func (t *PatchedLoadBalancerUpdate_ProvisioningStatus) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t PatchedLoadBalancerUpdate_ProvisioningStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedLoadBalancerUpdate_ProvisioningStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingStatusEnum returns the union data inside the PatchedLoadBalancerUpdate_Status as a LoadBalancingStatusEnum
func (t PatchedLoadBalancerUpdate_Status) AsLoadBalancingStatusEnum() (LoadBalancingStatusEnum, error) {
	var body LoadBalancingStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingStatusEnum overwrites any union data inside the PatchedLoadBalancerUpdate_Status as the provided LoadBalancingStatusEnum
func (t *PatchedLoadBalancerUpdate_Status) FromLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingStatusEnum performs a merge with any union data inside the PatchedLoadBalancerUpdate_Status, using the provided LoadBalancingStatusEnum
func (t *PatchedLoadBalancerUpdate_Status) MergeLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the PatchedLoadBalancerUpdate_Status as a NullEnum
func (t PatchedLoadBalancerUpdate_Status) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the PatchedLoadBalancerUpdate_Status as the provided NullEnum
func (t *PatchedLoadBalancerUpdate_Status) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the PatchedLoadBalancerUpdate_Status, using the provided NullEnum
func (t *PatchedLoadBalancerUpdate_Status) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t PatchedLoadBalancerUpdate_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedLoadBalancerUpdate_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingProvisioningStatusEnum returns the union data inside the PatchedServerGroupMemberUpdate_ProvisioningStatus as a LoadBalancingProvisioningStatusEnum
func (t PatchedServerGroupMemberUpdate_ProvisioningStatus) AsLoadBalancingProvisioningStatusEnum() (LoadBalancingProvisioningStatusEnum, error) {
	var body LoadBalancingProvisioningStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingProvisioningStatusEnum overwrites any union data inside the PatchedServerGroupMemberUpdate_ProvisioningStatus as the provided LoadBalancingProvisioningStatusEnum
func (t *PatchedServerGroupMemberUpdate_ProvisioningStatus) FromLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingProvisioningStatusEnum performs a merge with any union data inside the PatchedServerGroupMemberUpdate_ProvisioningStatus, using the provided LoadBalancingProvisioningStatusEnum
func (t *PatchedServerGroupMemberUpdate_ProvisioningStatus) MergeLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the PatchedServerGroupMemberUpdate_ProvisioningStatus as a NullEnum
func (t PatchedServerGroupMemberUpdate_ProvisioningStatus) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the PatchedServerGroupMemberUpdate_ProvisioningStatus as the provided NullEnum
func (t *PatchedServerGroupMemberUpdate_ProvisioningStatus) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the PatchedServerGroupMemberUpdate_ProvisioningStatus, using the provided NullEnum
func (t *PatchedServerGroupMemberUpdate_ProvisioningStatus) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t PatchedServerGroupMemberUpdate_ProvisioningStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedServerGroupMemberUpdate_ProvisioningStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingStatusEnum returns the union data inside the PatchedServerGroupMemberUpdate_Status as a LoadBalancingStatusEnum
func (t PatchedServerGroupMemberUpdate_Status) AsLoadBalancingStatusEnum() (LoadBalancingStatusEnum, error) {
	var body LoadBalancingStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingStatusEnum overwrites any union data inside the PatchedServerGroupMemberUpdate_Status as the provided LoadBalancingStatusEnum
func (t *PatchedServerGroupMemberUpdate_Status) FromLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingStatusEnum performs a merge with any union data inside the PatchedServerGroupMemberUpdate_Status, using the provided LoadBalancingStatusEnum
func (t *PatchedServerGroupMemberUpdate_Status) MergeLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the PatchedServerGroupMemberUpdate_Status as a NullEnum
func (t PatchedServerGroupMemberUpdate_Status) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the PatchedServerGroupMemberUpdate_Status as the provided NullEnum
func (t *PatchedServerGroupMemberUpdate_Status) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the PatchedServerGroupMemberUpdate_Status, using the provided NullEnum
func (t *PatchedServerGroupMemberUpdate_Status) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t PatchedServerGroupMemberUpdate_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedServerGroupMemberUpdate_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMonitorHttpMethodEnum returns the union data inside the PatchedServerGroupUpdate_MonitorHttpMethod as a MonitorHttpMethodEnum
func (t PatchedServerGroupUpdate_MonitorHttpMethod) AsMonitorHttpMethodEnum() (MonitorHttpMethodEnum, error) {
	var body MonitorHttpMethodEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMonitorHttpMethodEnum overwrites any union data inside the PatchedServerGroupUpdate_MonitorHttpMethod as the provided MonitorHttpMethodEnum
func (t *PatchedServerGroupUpdate_MonitorHttpMethod) FromMonitorHttpMethodEnum(v MonitorHttpMethodEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMonitorHttpMethodEnum performs a merge with any union data inside the PatchedServerGroupUpdate_MonitorHttpMethod, using the provided MonitorHttpMethodEnum
func (t *PatchedServerGroupUpdate_MonitorHttpMethod) MergeMonitorHttpMethodEnum(v MonitorHttpMethodEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the PatchedServerGroupUpdate_MonitorHttpMethod as a NullEnum
func (t PatchedServerGroupUpdate_MonitorHttpMethod) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the PatchedServerGroupUpdate_MonitorHttpMethod as the provided NullEnum
func (t *PatchedServerGroupUpdate_MonitorHttpMethod) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the PatchedServerGroupUpdate_MonitorHttpMethod, using the provided NullEnum
func (t *PatchedServerGroupUpdate_MonitorHttpMethod) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t PatchedServerGroupUpdate_MonitorHttpMethod) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedServerGroupUpdate_MonitorHttpMethod) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingMonitorTypeEnum returns the union data inside the PatchedServerGroupUpdate_MonitorType as a LoadBalancingMonitorTypeEnum
func (t PatchedServerGroupUpdate_MonitorType) AsLoadBalancingMonitorTypeEnum() (LoadBalancingMonitorTypeEnum, error) {
	var body LoadBalancingMonitorTypeEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingMonitorTypeEnum overwrites any union data inside the PatchedServerGroupUpdate_MonitorType as the provided LoadBalancingMonitorTypeEnum
func (t *PatchedServerGroupUpdate_MonitorType) FromLoadBalancingMonitorTypeEnum(v LoadBalancingMonitorTypeEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingMonitorTypeEnum performs a merge with any union data inside the PatchedServerGroupUpdate_MonitorType, using the provided LoadBalancingMonitorTypeEnum
func (t *PatchedServerGroupUpdate_MonitorType) MergeLoadBalancingMonitorTypeEnum(v LoadBalancingMonitorTypeEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the PatchedServerGroupUpdate_MonitorType as a NullEnum
func (t PatchedServerGroupUpdate_MonitorType) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the PatchedServerGroupUpdate_MonitorType as the provided NullEnum
func (t *PatchedServerGroupUpdate_MonitorType) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the PatchedServerGroupUpdate_MonitorType, using the provided NullEnum
func (t *PatchedServerGroupUpdate_MonitorType) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t PatchedServerGroupUpdate_MonitorType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedServerGroupUpdate_MonitorType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingProvisioningStatusEnum returns the union data inside the PatchedServerGroupUpdate_ProvisioningStatus as a LoadBalancingProvisioningStatusEnum
func (t PatchedServerGroupUpdate_ProvisioningStatus) AsLoadBalancingProvisioningStatusEnum() (LoadBalancingProvisioningStatusEnum, error) {
	var body LoadBalancingProvisioningStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingProvisioningStatusEnum overwrites any union data inside the PatchedServerGroupUpdate_ProvisioningStatus as the provided LoadBalancingProvisioningStatusEnum
func (t *PatchedServerGroupUpdate_ProvisioningStatus) FromLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingProvisioningStatusEnum performs a merge with any union data inside the PatchedServerGroupUpdate_ProvisioningStatus, using the provided LoadBalancingProvisioningStatusEnum
func (t *PatchedServerGroupUpdate_ProvisioningStatus) MergeLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the PatchedServerGroupUpdate_ProvisioningStatus as a NullEnum
func (t PatchedServerGroupUpdate_ProvisioningStatus) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the PatchedServerGroupUpdate_ProvisioningStatus as the provided NullEnum
func (t *PatchedServerGroupUpdate_ProvisioningStatus) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the PatchedServerGroupUpdate_ProvisioningStatus, using the provided NullEnum
func (t *PatchedServerGroupUpdate_ProvisioningStatus) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t PatchedServerGroupUpdate_ProvisioningStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedServerGroupUpdate_ProvisioningStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSessionPersistenceTypeEnum returns the union data inside the PatchedServerGroupUpdate_SessionPersistenceType as a SessionPersistenceTypeEnum
func (t PatchedServerGroupUpdate_SessionPersistenceType) AsSessionPersistenceTypeEnum() (SessionPersistenceTypeEnum, error) {
	var body SessionPersistenceTypeEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSessionPersistenceTypeEnum overwrites any union data inside the PatchedServerGroupUpdate_SessionPersistenceType as the provided SessionPersistenceTypeEnum
func (t *PatchedServerGroupUpdate_SessionPersistenceType) FromSessionPersistenceTypeEnum(v SessionPersistenceTypeEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSessionPersistenceTypeEnum performs a merge with any union data inside the PatchedServerGroupUpdate_SessionPersistenceType, using the provided SessionPersistenceTypeEnum
func (t *PatchedServerGroupUpdate_SessionPersistenceType) MergeSessionPersistenceTypeEnum(v SessionPersistenceTypeEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the PatchedServerGroupUpdate_SessionPersistenceType as a BlankEnum
func (t PatchedServerGroupUpdate_SessionPersistenceType) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the PatchedServerGroupUpdate_SessionPersistenceType as the provided BlankEnum
func (t *PatchedServerGroupUpdate_SessionPersistenceType) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the PatchedServerGroupUpdate_SessionPersistenceType, using the provided BlankEnum
func (t *PatchedServerGroupUpdate_SessionPersistenceType) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the PatchedServerGroupUpdate_SessionPersistenceType as a NullEnum
func (t PatchedServerGroupUpdate_SessionPersistenceType) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the PatchedServerGroupUpdate_SessionPersistenceType as the provided NullEnum
func (t *PatchedServerGroupUpdate_SessionPersistenceType) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the PatchedServerGroupUpdate_SessionPersistenceType, using the provided NullEnum
func (t *PatchedServerGroupUpdate_SessionPersistenceType) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t PatchedServerGroupUpdate_SessionPersistenceType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedServerGroupUpdate_SessionPersistenceType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingStatusEnum returns the union data inside the PatchedServerGroupUpdate_Status as a LoadBalancingStatusEnum
func (t PatchedServerGroupUpdate_Status) AsLoadBalancingStatusEnum() (LoadBalancingStatusEnum, error) {
	var body LoadBalancingStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingStatusEnum overwrites any union data inside the PatchedServerGroupUpdate_Status as the provided LoadBalancingStatusEnum
func (t *PatchedServerGroupUpdate_Status) FromLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingStatusEnum performs a merge with any union data inside the PatchedServerGroupUpdate_Status, using the provided LoadBalancingStatusEnum
func (t *PatchedServerGroupUpdate_Status) MergeLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the PatchedServerGroupUpdate_Status as a NullEnum
func (t PatchedServerGroupUpdate_Status) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the PatchedServerGroupUpdate_Status as the provided NullEnum
func (t *PatchedServerGroupUpdate_Status) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the PatchedServerGroupUpdate_Status, using the provided NullEnum
func (t *PatchedServerGroupUpdate_Status) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t PatchedServerGroupUpdate_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedServerGroupUpdate_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFrequencyUnitEnum returns the union data inside the PatchedVolumeBackupPolicyUpdate_FrequencyUnit as a FrequencyUnitEnum
func (t PatchedVolumeBackupPolicyUpdate_FrequencyUnit) AsFrequencyUnitEnum() (FrequencyUnitEnum, error) {
	var body FrequencyUnitEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFrequencyUnitEnum overwrites any union data inside the PatchedVolumeBackupPolicyUpdate_FrequencyUnit as the provided FrequencyUnitEnum
func (t *PatchedVolumeBackupPolicyUpdate_FrequencyUnit) FromFrequencyUnitEnum(v FrequencyUnitEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFrequencyUnitEnum performs a merge with any union data inside the PatchedVolumeBackupPolicyUpdate_FrequencyUnit, using the provided FrequencyUnitEnum
func (t *PatchedVolumeBackupPolicyUpdate_FrequencyUnit) MergeFrequencyUnitEnum(v FrequencyUnitEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the PatchedVolumeBackupPolicyUpdate_FrequencyUnit as a BlankEnum
func (t PatchedVolumeBackupPolicyUpdate_FrequencyUnit) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the PatchedVolumeBackupPolicyUpdate_FrequencyUnit as the provided BlankEnum
func (t *PatchedVolumeBackupPolicyUpdate_FrequencyUnit) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the PatchedVolumeBackupPolicyUpdate_FrequencyUnit, using the provided BlankEnum
func (t *PatchedVolumeBackupPolicyUpdate_FrequencyUnit) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the PatchedVolumeBackupPolicyUpdate_FrequencyUnit as a NullEnum
func (t PatchedVolumeBackupPolicyUpdate_FrequencyUnit) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the PatchedVolumeBackupPolicyUpdate_FrequencyUnit as the provided NullEnum
func (t *PatchedVolumeBackupPolicyUpdate_FrequencyUnit) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the PatchedVolumeBackupPolicyUpdate_FrequencyUnit, using the provided NullEnum
func (t *PatchedVolumeBackupPolicyUpdate_FrequencyUnit) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t PatchedVolumeBackupPolicyUpdate_FrequencyUnit) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedVolumeBackupPolicyUpdate_FrequencyUnit) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPolicyEnum returns the union data inside the PlacementGroup_Policy as a PolicyEnum
func (t PlacementGroup_Policy) AsPolicyEnum() (PolicyEnum, error) {
	var body PolicyEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPolicyEnum overwrites any union data inside the PlacementGroup_Policy as the provided PolicyEnum
func (t *PlacementGroup_Policy) FromPolicyEnum(v PolicyEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePolicyEnum performs a merge with any union data inside the PlacementGroup_Policy, using the provided PolicyEnum
func (t *PlacementGroup_Policy) MergePolicyEnum(v PolicyEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the PlacementGroup_Policy as a BlankEnum
func (t PlacementGroup_Policy) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the PlacementGroup_Policy as the provided BlankEnum
func (t *PlacementGroup_Policy) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the PlacementGroup_Policy, using the provided BlankEnum
func (t *PlacementGroup_Policy) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the PlacementGroup_Policy as a NullEnum
func (t PlacementGroup_Policy) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the PlacementGroup_Policy as the provided NullEnum
func (t *PlacementGroup_Policy) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the PlacementGroup_Policy, using the provided NullEnum
func (t *PlacementGroup_Policy) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t PlacementGroup_Policy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PlacementGroup_Policy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDeviceOwnerEnum returns the union data inside the PrivateIP_DeviceOwner as a DeviceOwnerEnum
func (t PrivateIP_DeviceOwner) AsDeviceOwnerEnum() (DeviceOwnerEnum, error) {
	var body DeviceOwnerEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDeviceOwnerEnum overwrites any union data inside the PrivateIP_DeviceOwner as the provided DeviceOwnerEnum
func (t *PrivateIP_DeviceOwner) FromDeviceOwnerEnum(v DeviceOwnerEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDeviceOwnerEnum performs a merge with any union data inside the PrivateIP_DeviceOwner, using the provided DeviceOwnerEnum
func (t *PrivateIP_DeviceOwner) MergeDeviceOwnerEnum(v DeviceOwnerEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the PrivateIP_DeviceOwner as a BlankEnum
func (t PrivateIP_DeviceOwner) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the PrivateIP_DeviceOwner as the provided BlankEnum
func (t *PrivateIP_DeviceOwner) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the PrivateIP_DeviceOwner, using the provided BlankEnum
func (t *PrivateIP_DeviceOwner) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the PrivateIP_DeviceOwner as a NullEnum
func (t PrivateIP_DeviceOwner) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the PrivateIP_DeviceOwner as the provided NullEnum
func (t *PrivateIP_DeviceOwner) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the PrivateIP_DeviceOwner, using the provided NullEnum
func (t *PrivateIP_DeviceOwner) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t PrivateIP_DeviceOwner) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PrivateIP_DeviceOwner) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsQuestionStatusEnum returns the union data inside the Question_Status as a QuestionStatusEnum
func (t Question_Status) AsQuestionStatusEnum() (QuestionStatusEnum, error) {
	var body QuestionStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromQuestionStatusEnum overwrites any union data inside the Question_Status as the provided QuestionStatusEnum
func (t *Question_Status) FromQuestionStatusEnum(v QuestionStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeQuestionStatusEnum performs a merge with any union data inside the Question_Status, using the provided QuestionStatusEnum
func (t *Question_Status) MergeQuestionStatusEnum(v QuestionStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the Question_Status as a NullEnum
func (t Question_Status) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the Question_Status as the provided NullEnum
func (t *Question_Status) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the Question_Status, using the provided NullEnum
func (t *Question_Status) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t Question_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Question_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStatus5afEnum returns the union data inside the RestoreDetail_Status as a Status5afEnum
func (t RestoreDetail_Status) AsStatus5afEnum() (Status5afEnum, error) {
	var body Status5afEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStatus5afEnum overwrites any union data inside the RestoreDetail_Status as the provided Status5afEnum
func (t *RestoreDetail_Status) FromStatus5afEnum(v Status5afEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStatus5afEnum performs a merge with any union data inside the RestoreDetail_Status, using the provided Status5afEnum
func (t *RestoreDetail_Status) MergeStatus5afEnum(v Status5afEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the RestoreDetail_Status as a BlankEnum
func (t RestoreDetail_Status) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the RestoreDetail_Status as the provided BlankEnum
func (t *RestoreDetail_Status) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the RestoreDetail_Status, using the provided BlankEnum
func (t *RestoreDetail_Status) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the RestoreDetail_Status as a NullEnum
func (t RestoreDetail_Status) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the RestoreDetail_Status as the provided NullEnum
func (t *RestoreDetail_Status) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the RestoreDetail_Status, using the provided NullEnum
func (t *RestoreDetail_Status) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t RestoreDetail_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RestoreDetail_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsScaleTypeEnum returns the union data inside the ScalingAction_Action as a ScaleTypeEnum
func (t ScalingAction_Action) AsScaleTypeEnum() (ScaleTypeEnum, error) {
	var body ScaleTypeEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromScaleTypeEnum overwrites any union data inside the ScalingAction_Action as the provided ScaleTypeEnum
func (t *ScalingAction_Action) FromScaleTypeEnum(v ScaleTypeEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeScaleTypeEnum performs a merge with any union data inside the ScalingAction_Action, using the provided ScaleTypeEnum
func (t *ScalingAction_Action) MergeScaleTypeEnum(v ScaleTypeEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the ScalingAction_Action as a BlankEnum
func (t ScalingAction_Action) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the ScalingAction_Action as the provided BlankEnum
func (t *ScalingAction_Action) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the ScalingAction_Action, using the provided BlankEnum
func (t *ScalingAction_Action) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ScalingAction_Action as a NullEnum
func (t ScalingAction_Action) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ScalingAction_Action as the provided NullEnum
func (t *ScalingAction_Action) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ScalingAction_Action, using the provided NullEnum
func (t *ScalingAction_Action) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ScalingAction_Action) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ScalingAction_Action) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsScalingServerStatusEnum returns the union data inside the ScalingServer_Status as a ScalingServerStatusEnum
func (t ScalingServer_Status) AsScalingServerStatusEnum() (ScalingServerStatusEnum, error) {
	var body ScalingServerStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromScalingServerStatusEnum overwrites any union data inside the ScalingServer_Status as the provided ScalingServerStatusEnum
func (t *ScalingServer_Status) FromScalingServerStatusEnum(v ScalingServerStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeScalingServerStatusEnum performs a merge with any union data inside the ScalingServer_Status, using the provided ScalingServerStatusEnum
func (t *ScalingServer_Status) MergeScalingServerStatusEnum(v ScalingServerStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the ScalingServer_Status as a BlankEnum
func (t ScalingServer_Status) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the ScalingServer_Status as the provided BlankEnum
func (t *ScalingServer_Status) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the ScalingServer_Status, using the provided BlankEnum
func (t *ScalingServer_Status) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ScalingServer_Status as a NullEnum
func (t ScalingServer_Status) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ScalingServer_Status as the provided NullEnum
func (t *ScalingServer_Status) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ScalingServer_Status, using the provided NullEnum
func (t *ScalingServer_Status) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ScalingServer_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ScalingServer_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSGREtherTypeEnum returns the union data inside the SecurityGroupRule_Ethertype as a SGREtherTypeEnum
func (t SecurityGroupRule_Ethertype) AsSGREtherTypeEnum() (SGREtherTypeEnum, error) {
	var body SGREtherTypeEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSGREtherTypeEnum overwrites any union data inside the SecurityGroupRule_Ethertype as the provided SGREtherTypeEnum
func (t *SecurityGroupRule_Ethertype) FromSGREtherTypeEnum(v SGREtherTypeEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSGREtherTypeEnum performs a merge with any union data inside the SecurityGroupRule_Ethertype, using the provided SGREtherTypeEnum
func (t *SecurityGroupRule_Ethertype) MergeSGREtherTypeEnum(v SGREtherTypeEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the SecurityGroupRule_Ethertype as a BlankEnum
func (t SecurityGroupRule_Ethertype) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the SecurityGroupRule_Ethertype as the provided BlankEnum
func (t *SecurityGroupRule_Ethertype) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the SecurityGroupRule_Ethertype, using the provided BlankEnum
func (t *SecurityGroupRule_Ethertype) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the SecurityGroupRule_Ethertype as a NullEnum
func (t SecurityGroupRule_Ethertype) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the SecurityGroupRule_Ethertype as the provided NullEnum
func (t *SecurityGroupRule_Ethertype) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the SecurityGroupRule_Ethertype, using the provided NullEnum
func (t *SecurityGroupRule_Ethertype) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t SecurityGroupRule_Ethertype) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SecurityGroupRule_Ethertype) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSecurityGroupRuleProtocolEnum returns the union data inside the SecurityGroupRule_Protocol as a SecurityGroupRuleProtocolEnum
func (t SecurityGroupRule_Protocol) AsSecurityGroupRuleProtocolEnum() (SecurityGroupRuleProtocolEnum, error) {
	var body SecurityGroupRuleProtocolEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSecurityGroupRuleProtocolEnum overwrites any union data inside the SecurityGroupRule_Protocol as the provided SecurityGroupRuleProtocolEnum
func (t *SecurityGroupRule_Protocol) FromSecurityGroupRuleProtocolEnum(v SecurityGroupRuleProtocolEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSecurityGroupRuleProtocolEnum performs a merge with any union data inside the SecurityGroupRule_Protocol, using the provided SecurityGroupRuleProtocolEnum
func (t *SecurityGroupRule_Protocol) MergeSecurityGroupRuleProtocolEnum(v SecurityGroupRuleProtocolEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the SecurityGroupRule_Protocol as a BlankEnum
func (t SecurityGroupRule_Protocol) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the SecurityGroupRule_Protocol as the provided BlankEnum
func (t *SecurityGroupRule_Protocol) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the SecurityGroupRule_Protocol, using the provided BlankEnum
func (t *SecurityGroupRule_Protocol) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the SecurityGroupRule_Protocol as a NullEnum
func (t SecurityGroupRule_Protocol) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the SecurityGroupRule_Protocol as the provided NullEnum
func (t *SecurityGroupRule_Protocol) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the SecurityGroupRule_Protocol, using the provided NullEnum
func (t *SecurityGroupRule_Protocol) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t SecurityGroupRule_Protocol) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SecurityGroupRule_Protocol) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPowerStateEnum returns the union data inside the Server_PowerState as a PowerStateEnum
func (t Server_PowerState) AsPowerStateEnum() (PowerStateEnum, error) {
	var body PowerStateEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPowerStateEnum overwrites any union data inside the Server_PowerState as the provided PowerStateEnum
func (t *Server_PowerState) FromPowerStateEnum(v PowerStateEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePowerStateEnum performs a merge with any union data inside the Server_PowerState, using the provided PowerStateEnum
func (t *Server_PowerState) MergePowerStateEnum(v PowerStateEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the Server_PowerState as a NullEnum
func (t Server_PowerState) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the Server_PowerState as the provided NullEnum
func (t *Server_PowerState) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the Server_PowerState, using the provided NullEnum
func (t *Server_PowerState) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t Server_PowerState) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Server_PowerState) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPowerStateEnum returns the union data inside the ServerDetail_PowerState as a PowerStateEnum
func (t ServerDetail_PowerState) AsPowerStateEnum() (PowerStateEnum, error) {
	var body PowerStateEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPowerStateEnum overwrites any union data inside the ServerDetail_PowerState as the provided PowerStateEnum
func (t *ServerDetail_PowerState) FromPowerStateEnum(v PowerStateEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePowerStateEnum performs a merge with any union data inside the ServerDetail_PowerState, using the provided PowerStateEnum
func (t *ServerDetail_PowerState) MergePowerStateEnum(v PowerStateEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ServerDetail_PowerState as a NullEnum
func (t ServerDetail_PowerState) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ServerDetail_PowerState as the provided NullEnum
func (t *ServerDetail_PowerState) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ServerDetail_PowerState, using the provided NullEnum
func (t *ServerDetail_PowerState) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ServerDetail_PowerState) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ServerDetail_PowerState) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsServerStatusEnum returns the union data inside the ServerDetail_Status as a ServerStatusEnum
func (t ServerDetail_Status) AsServerStatusEnum() (ServerStatusEnum, error) {
	var body ServerStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromServerStatusEnum overwrites any union data inside the ServerDetail_Status as the provided ServerStatusEnum
func (t *ServerDetail_Status) FromServerStatusEnum(v ServerStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeServerStatusEnum performs a merge with any union data inside the ServerDetail_Status, using the provided ServerStatusEnum
func (t *ServerDetail_Status) MergeServerStatusEnum(v ServerStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the ServerDetail_Status as a BlankEnum
func (t ServerDetail_Status) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the ServerDetail_Status as the provided BlankEnum
func (t *ServerDetail_Status) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the ServerDetail_Status, using the provided BlankEnum
func (t *ServerDetail_Status) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ServerDetail_Status as a NullEnum
func (t ServerDetail_Status) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ServerDetail_Status as the provided NullEnum
func (t *ServerDetail_Status) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ServerDetail_Status, using the provided NullEnum
func (t *ServerDetail_Status) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ServerDetail_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ServerDetail_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMonitorHttpMethodEnum returns the union data inside the ServerGroup_MonitorHttpMethod as a MonitorHttpMethodEnum
func (t ServerGroup_MonitorHttpMethod) AsMonitorHttpMethodEnum() (MonitorHttpMethodEnum, error) {
	var body MonitorHttpMethodEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMonitorHttpMethodEnum overwrites any union data inside the ServerGroup_MonitorHttpMethod as the provided MonitorHttpMethodEnum
func (t *ServerGroup_MonitorHttpMethod) FromMonitorHttpMethodEnum(v MonitorHttpMethodEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMonitorHttpMethodEnum performs a merge with any union data inside the ServerGroup_MonitorHttpMethod, using the provided MonitorHttpMethodEnum
func (t *ServerGroup_MonitorHttpMethod) MergeMonitorHttpMethodEnum(v MonitorHttpMethodEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ServerGroup_MonitorHttpMethod as a NullEnum
func (t ServerGroup_MonitorHttpMethod) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ServerGroup_MonitorHttpMethod as the provided NullEnum
func (t *ServerGroup_MonitorHttpMethod) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ServerGroup_MonitorHttpMethod, using the provided NullEnum
func (t *ServerGroup_MonitorHttpMethod) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ServerGroup_MonitorHttpMethod) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ServerGroup_MonitorHttpMethod) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingMonitorTypeEnum returns the union data inside the ServerGroup_MonitorType as a LoadBalancingMonitorTypeEnum
func (t ServerGroup_MonitorType) AsLoadBalancingMonitorTypeEnum() (LoadBalancingMonitorTypeEnum, error) {
	var body LoadBalancingMonitorTypeEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingMonitorTypeEnum overwrites any union data inside the ServerGroup_MonitorType as the provided LoadBalancingMonitorTypeEnum
func (t *ServerGroup_MonitorType) FromLoadBalancingMonitorTypeEnum(v LoadBalancingMonitorTypeEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingMonitorTypeEnum performs a merge with any union data inside the ServerGroup_MonitorType, using the provided LoadBalancingMonitorTypeEnum
func (t *ServerGroup_MonitorType) MergeLoadBalancingMonitorTypeEnum(v LoadBalancingMonitorTypeEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ServerGroup_MonitorType as a NullEnum
func (t ServerGroup_MonitorType) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ServerGroup_MonitorType as the provided NullEnum
func (t *ServerGroup_MonitorType) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ServerGroup_MonitorType, using the provided NullEnum
func (t *ServerGroup_MonitorType) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ServerGroup_MonitorType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ServerGroup_MonitorType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingProvisioningStatusEnum returns the union data inside the ServerGroup_ProvisioningStatus as a LoadBalancingProvisioningStatusEnum
func (t ServerGroup_ProvisioningStatus) AsLoadBalancingProvisioningStatusEnum() (LoadBalancingProvisioningStatusEnum, error) {
	var body LoadBalancingProvisioningStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingProvisioningStatusEnum overwrites any union data inside the ServerGroup_ProvisioningStatus as the provided LoadBalancingProvisioningStatusEnum
func (t *ServerGroup_ProvisioningStatus) FromLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingProvisioningStatusEnum performs a merge with any union data inside the ServerGroup_ProvisioningStatus, using the provided LoadBalancingProvisioningStatusEnum
func (t *ServerGroup_ProvisioningStatus) MergeLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ServerGroup_ProvisioningStatus as a NullEnum
func (t ServerGroup_ProvisioningStatus) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ServerGroup_ProvisioningStatus as the provided NullEnum
func (t *ServerGroup_ProvisioningStatus) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ServerGroup_ProvisioningStatus, using the provided NullEnum
func (t *ServerGroup_ProvisioningStatus) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ServerGroup_ProvisioningStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ServerGroup_ProvisioningStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSessionPersistenceTypeEnum returns the union data inside the ServerGroup_SessionPersistenceType as a SessionPersistenceTypeEnum
func (t ServerGroup_SessionPersistenceType) AsSessionPersistenceTypeEnum() (SessionPersistenceTypeEnum, error) {
	var body SessionPersistenceTypeEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSessionPersistenceTypeEnum overwrites any union data inside the ServerGroup_SessionPersistenceType as the provided SessionPersistenceTypeEnum
func (t *ServerGroup_SessionPersistenceType) FromSessionPersistenceTypeEnum(v SessionPersistenceTypeEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSessionPersistenceTypeEnum performs a merge with any union data inside the ServerGroup_SessionPersistenceType, using the provided SessionPersistenceTypeEnum
func (t *ServerGroup_SessionPersistenceType) MergeSessionPersistenceTypeEnum(v SessionPersistenceTypeEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the ServerGroup_SessionPersistenceType as a BlankEnum
func (t ServerGroup_SessionPersistenceType) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the ServerGroup_SessionPersistenceType as the provided BlankEnum
func (t *ServerGroup_SessionPersistenceType) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the ServerGroup_SessionPersistenceType, using the provided BlankEnum
func (t *ServerGroup_SessionPersistenceType) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ServerGroup_SessionPersistenceType as a NullEnum
func (t ServerGroup_SessionPersistenceType) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ServerGroup_SessionPersistenceType as the provided NullEnum
func (t *ServerGroup_SessionPersistenceType) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ServerGroup_SessionPersistenceType, using the provided NullEnum
func (t *ServerGroup_SessionPersistenceType) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ServerGroup_SessionPersistenceType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ServerGroup_SessionPersistenceType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingStatusEnum returns the union data inside the ServerGroup_Status as a LoadBalancingStatusEnum
func (t ServerGroup_Status) AsLoadBalancingStatusEnum() (LoadBalancingStatusEnum, error) {
	var body LoadBalancingStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingStatusEnum overwrites any union data inside the ServerGroup_Status as the provided LoadBalancingStatusEnum
func (t *ServerGroup_Status) FromLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingStatusEnum performs a merge with any union data inside the ServerGroup_Status, using the provided LoadBalancingStatusEnum
func (t *ServerGroup_Status) MergeLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ServerGroup_Status as a NullEnum
func (t ServerGroup_Status) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ServerGroup_Status as the provided NullEnum
func (t *ServerGroup_Status) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ServerGroup_Status, using the provided NullEnum
func (t *ServerGroup_Status) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ServerGroup_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ServerGroup_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMonitorHttpMethodEnum returns the union data inside the ServerGroupDetail_MonitorHttpMethod as a MonitorHttpMethodEnum
func (t ServerGroupDetail_MonitorHttpMethod) AsMonitorHttpMethodEnum() (MonitorHttpMethodEnum, error) {
	var body MonitorHttpMethodEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMonitorHttpMethodEnum overwrites any union data inside the ServerGroupDetail_MonitorHttpMethod as the provided MonitorHttpMethodEnum
func (t *ServerGroupDetail_MonitorHttpMethod) FromMonitorHttpMethodEnum(v MonitorHttpMethodEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMonitorHttpMethodEnum performs a merge with any union data inside the ServerGroupDetail_MonitorHttpMethod, using the provided MonitorHttpMethodEnum
func (t *ServerGroupDetail_MonitorHttpMethod) MergeMonitorHttpMethodEnum(v MonitorHttpMethodEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ServerGroupDetail_MonitorHttpMethod as a NullEnum
func (t ServerGroupDetail_MonitorHttpMethod) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ServerGroupDetail_MonitorHttpMethod as the provided NullEnum
func (t *ServerGroupDetail_MonitorHttpMethod) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ServerGroupDetail_MonitorHttpMethod, using the provided NullEnum
func (t *ServerGroupDetail_MonitorHttpMethod) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ServerGroupDetail_MonitorHttpMethod) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ServerGroupDetail_MonitorHttpMethod) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingMonitorTypeEnum returns the union data inside the ServerGroupDetail_MonitorType as a LoadBalancingMonitorTypeEnum
func (t ServerGroupDetail_MonitorType) AsLoadBalancingMonitorTypeEnum() (LoadBalancingMonitorTypeEnum, error) {
	var body LoadBalancingMonitorTypeEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingMonitorTypeEnum overwrites any union data inside the ServerGroupDetail_MonitorType as the provided LoadBalancingMonitorTypeEnum
func (t *ServerGroupDetail_MonitorType) FromLoadBalancingMonitorTypeEnum(v LoadBalancingMonitorTypeEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingMonitorTypeEnum performs a merge with any union data inside the ServerGroupDetail_MonitorType, using the provided LoadBalancingMonitorTypeEnum
func (t *ServerGroupDetail_MonitorType) MergeLoadBalancingMonitorTypeEnum(v LoadBalancingMonitorTypeEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ServerGroupDetail_MonitorType as a NullEnum
func (t ServerGroupDetail_MonitorType) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ServerGroupDetail_MonitorType as the provided NullEnum
func (t *ServerGroupDetail_MonitorType) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ServerGroupDetail_MonitorType, using the provided NullEnum
func (t *ServerGroupDetail_MonitorType) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ServerGroupDetail_MonitorType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ServerGroupDetail_MonitorType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingProvisioningStatusEnum returns the union data inside the ServerGroupDetail_ProvisioningStatus as a LoadBalancingProvisioningStatusEnum
func (t ServerGroupDetail_ProvisioningStatus) AsLoadBalancingProvisioningStatusEnum() (LoadBalancingProvisioningStatusEnum, error) {
	var body LoadBalancingProvisioningStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingProvisioningStatusEnum overwrites any union data inside the ServerGroupDetail_ProvisioningStatus as the provided LoadBalancingProvisioningStatusEnum
func (t *ServerGroupDetail_ProvisioningStatus) FromLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingProvisioningStatusEnum performs a merge with any union data inside the ServerGroupDetail_ProvisioningStatus, using the provided LoadBalancingProvisioningStatusEnum
func (t *ServerGroupDetail_ProvisioningStatus) MergeLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ServerGroupDetail_ProvisioningStatus as a NullEnum
func (t ServerGroupDetail_ProvisioningStatus) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ServerGroupDetail_ProvisioningStatus as the provided NullEnum
func (t *ServerGroupDetail_ProvisioningStatus) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ServerGroupDetail_ProvisioningStatus, using the provided NullEnum
func (t *ServerGroupDetail_ProvisioningStatus) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ServerGroupDetail_ProvisioningStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ServerGroupDetail_ProvisioningStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSessionPersistenceTypeEnum returns the union data inside the ServerGroupDetail_SessionPersistenceType as a SessionPersistenceTypeEnum
func (t ServerGroupDetail_SessionPersistenceType) AsSessionPersistenceTypeEnum() (SessionPersistenceTypeEnum, error) {
	var body SessionPersistenceTypeEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSessionPersistenceTypeEnum overwrites any union data inside the ServerGroupDetail_SessionPersistenceType as the provided SessionPersistenceTypeEnum
func (t *ServerGroupDetail_SessionPersistenceType) FromSessionPersistenceTypeEnum(v SessionPersistenceTypeEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSessionPersistenceTypeEnum performs a merge with any union data inside the ServerGroupDetail_SessionPersistenceType, using the provided SessionPersistenceTypeEnum
func (t *ServerGroupDetail_SessionPersistenceType) MergeSessionPersistenceTypeEnum(v SessionPersistenceTypeEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the ServerGroupDetail_SessionPersistenceType as a BlankEnum
func (t ServerGroupDetail_SessionPersistenceType) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the ServerGroupDetail_SessionPersistenceType as the provided BlankEnum
func (t *ServerGroupDetail_SessionPersistenceType) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the ServerGroupDetail_SessionPersistenceType, using the provided BlankEnum
func (t *ServerGroupDetail_SessionPersistenceType) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ServerGroupDetail_SessionPersistenceType as a NullEnum
func (t ServerGroupDetail_SessionPersistenceType) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ServerGroupDetail_SessionPersistenceType as the provided NullEnum
func (t *ServerGroupDetail_SessionPersistenceType) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ServerGroupDetail_SessionPersistenceType, using the provided NullEnum
func (t *ServerGroupDetail_SessionPersistenceType) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ServerGroupDetail_SessionPersistenceType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ServerGroupDetail_SessionPersistenceType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingStatusEnum returns the union data inside the ServerGroupDetail_Status as a LoadBalancingStatusEnum
func (t ServerGroupDetail_Status) AsLoadBalancingStatusEnum() (LoadBalancingStatusEnum, error) {
	var body LoadBalancingStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingStatusEnum overwrites any union data inside the ServerGroupDetail_Status as the provided LoadBalancingStatusEnum
func (t *ServerGroupDetail_Status) FromLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingStatusEnum performs a merge with any union data inside the ServerGroupDetail_Status, using the provided LoadBalancingStatusEnum
func (t *ServerGroupDetail_Status) MergeLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ServerGroupDetail_Status as a NullEnum
func (t ServerGroupDetail_Status) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ServerGroupDetail_Status as the provided NullEnum
func (t *ServerGroupDetail_Status) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ServerGroupDetail_Status, using the provided NullEnum
func (t *ServerGroupDetail_Status) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ServerGroupDetail_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ServerGroupDetail_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingProvisioningStatusEnum returns the union data inside the ServerGroupList_ProvisioningStatus as a LoadBalancingProvisioningStatusEnum
func (t ServerGroupList_ProvisioningStatus) AsLoadBalancingProvisioningStatusEnum() (LoadBalancingProvisioningStatusEnum, error) {
	var body LoadBalancingProvisioningStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingProvisioningStatusEnum overwrites any union data inside the ServerGroupList_ProvisioningStatus as the provided LoadBalancingProvisioningStatusEnum
func (t *ServerGroupList_ProvisioningStatus) FromLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingProvisioningStatusEnum performs a merge with any union data inside the ServerGroupList_ProvisioningStatus, using the provided LoadBalancingProvisioningStatusEnum
func (t *ServerGroupList_ProvisioningStatus) MergeLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ServerGroupList_ProvisioningStatus as a NullEnum
func (t ServerGroupList_ProvisioningStatus) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ServerGroupList_ProvisioningStatus as the provided NullEnum
func (t *ServerGroupList_ProvisioningStatus) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ServerGroupList_ProvisioningStatus, using the provided NullEnum
func (t *ServerGroupList_ProvisioningStatus) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ServerGroupList_ProvisioningStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ServerGroupList_ProvisioningStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingStatusEnum returns the union data inside the ServerGroupList_Status as a LoadBalancingStatusEnum
func (t ServerGroupList_Status) AsLoadBalancingStatusEnum() (LoadBalancingStatusEnum, error) {
	var body LoadBalancingStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingStatusEnum overwrites any union data inside the ServerGroupList_Status as the provided LoadBalancingStatusEnum
func (t *ServerGroupList_Status) FromLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingStatusEnum performs a merge with any union data inside the ServerGroupList_Status, using the provided LoadBalancingStatusEnum
func (t *ServerGroupList_Status) MergeLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ServerGroupList_Status as a NullEnum
func (t ServerGroupList_Status) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ServerGroupList_Status as the provided NullEnum
func (t *ServerGroupList_Status) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ServerGroupList_Status, using the provided NullEnum
func (t *ServerGroupList_Status) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ServerGroupList_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ServerGroupList_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingProvisioningStatusEnum returns the union data inside the ServerGroupMember_ProvisioningStatus as a LoadBalancingProvisioningStatusEnum
func (t ServerGroupMember_ProvisioningStatus) AsLoadBalancingProvisioningStatusEnum() (LoadBalancingProvisioningStatusEnum, error) {
	var body LoadBalancingProvisioningStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingProvisioningStatusEnum overwrites any union data inside the ServerGroupMember_ProvisioningStatus as the provided LoadBalancingProvisioningStatusEnum
func (t *ServerGroupMember_ProvisioningStatus) FromLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingProvisioningStatusEnum performs a merge with any union data inside the ServerGroupMember_ProvisioningStatus, using the provided LoadBalancingProvisioningStatusEnum
func (t *ServerGroupMember_ProvisioningStatus) MergeLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ServerGroupMember_ProvisioningStatus as a NullEnum
func (t ServerGroupMember_ProvisioningStatus) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ServerGroupMember_ProvisioningStatus as the provided NullEnum
func (t *ServerGroupMember_ProvisioningStatus) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ServerGroupMember_ProvisioningStatus, using the provided NullEnum
func (t *ServerGroupMember_ProvisioningStatus) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ServerGroupMember_ProvisioningStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ServerGroupMember_ProvisioningStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingStatusEnum returns the union data inside the ServerGroupMember_Status as a LoadBalancingStatusEnum
func (t ServerGroupMember_Status) AsLoadBalancingStatusEnum() (LoadBalancingStatusEnum, error) {
	var body LoadBalancingStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingStatusEnum overwrites any union data inside the ServerGroupMember_Status as the provided LoadBalancingStatusEnum
func (t *ServerGroupMember_Status) FromLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingStatusEnum performs a merge with any union data inside the ServerGroupMember_Status, using the provided LoadBalancingStatusEnum
func (t *ServerGroupMember_Status) MergeLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ServerGroupMember_Status as a NullEnum
func (t ServerGroupMember_Status) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ServerGroupMember_Status as the provided NullEnum
func (t *ServerGroupMember_Status) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ServerGroupMember_Status, using the provided NullEnum
func (t *ServerGroupMember_Status) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ServerGroupMember_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ServerGroupMember_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingProvisioningStatusEnum returns the union data inside the ServerGroupMemberList_ProvisioningStatus as a LoadBalancingProvisioningStatusEnum
func (t ServerGroupMemberList_ProvisioningStatus) AsLoadBalancingProvisioningStatusEnum() (LoadBalancingProvisioningStatusEnum, error) {
	var body LoadBalancingProvisioningStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingProvisioningStatusEnum overwrites any union data inside the ServerGroupMemberList_ProvisioningStatus as the provided LoadBalancingProvisioningStatusEnum
func (t *ServerGroupMemberList_ProvisioningStatus) FromLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingProvisioningStatusEnum performs a merge with any union data inside the ServerGroupMemberList_ProvisioningStatus, using the provided LoadBalancingProvisioningStatusEnum
func (t *ServerGroupMemberList_ProvisioningStatus) MergeLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ServerGroupMemberList_ProvisioningStatus as a NullEnum
func (t ServerGroupMemberList_ProvisioningStatus) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ServerGroupMemberList_ProvisioningStatus as the provided NullEnum
func (t *ServerGroupMemberList_ProvisioningStatus) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ServerGroupMemberList_ProvisioningStatus, using the provided NullEnum
func (t *ServerGroupMemberList_ProvisioningStatus) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ServerGroupMemberList_ProvisioningStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ServerGroupMemberList_ProvisioningStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingStatusEnum returns the union data inside the ServerGroupMemberList_Status as a LoadBalancingStatusEnum
func (t ServerGroupMemberList_Status) AsLoadBalancingStatusEnum() (LoadBalancingStatusEnum, error) {
	var body LoadBalancingStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingStatusEnum overwrites any union data inside the ServerGroupMemberList_Status as the provided LoadBalancingStatusEnum
func (t *ServerGroupMemberList_Status) FromLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingStatusEnum performs a merge with any union data inside the ServerGroupMemberList_Status, using the provided LoadBalancingStatusEnum
func (t *ServerGroupMemberList_Status) MergeLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ServerGroupMemberList_Status as a NullEnum
func (t ServerGroupMemberList_Status) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ServerGroupMemberList_Status as the provided NullEnum
func (t *ServerGroupMemberList_Status) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ServerGroupMemberList_Status, using the provided NullEnum
func (t *ServerGroupMemberList_Status) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ServerGroupMemberList_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ServerGroupMemberList_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingProvisioningStatusEnum returns the union data inside the ServerGroupMemberUpdate_ProvisioningStatus as a LoadBalancingProvisioningStatusEnum
func (t ServerGroupMemberUpdate_ProvisioningStatus) AsLoadBalancingProvisioningStatusEnum() (LoadBalancingProvisioningStatusEnum, error) {
	var body LoadBalancingProvisioningStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingProvisioningStatusEnum overwrites any union data inside the ServerGroupMemberUpdate_ProvisioningStatus as the provided LoadBalancingProvisioningStatusEnum
func (t *ServerGroupMemberUpdate_ProvisioningStatus) FromLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingProvisioningStatusEnum performs a merge with any union data inside the ServerGroupMemberUpdate_ProvisioningStatus, using the provided LoadBalancingProvisioningStatusEnum
func (t *ServerGroupMemberUpdate_ProvisioningStatus) MergeLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ServerGroupMemberUpdate_ProvisioningStatus as a NullEnum
func (t ServerGroupMemberUpdate_ProvisioningStatus) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ServerGroupMemberUpdate_ProvisioningStatus as the provided NullEnum
func (t *ServerGroupMemberUpdate_ProvisioningStatus) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ServerGroupMemberUpdate_ProvisioningStatus, using the provided NullEnum
func (t *ServerGroupMemberUpdate_ProvisioningStatus) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ServerGroupMemberUpdate_ProvisioningStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ServerGroupMemberUpdate_ProvisioningStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingStatusEnum returns the union data inside the ServerGroupMemberUpdate_Status as a LoadBalancingStatusEnum
func (t ServerGroupMemberUpdate_Status) AsLoadBalancingStatusEnum() (LoadBalancingStatusEnum, error) {
	var body LoadBalancingStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingStatusEnum overwrites any union data inside the ServerGroupMemberUpdate_Status as the provided LoadBalancingStatusEnum
func (t *ServerGroupMemberUpdate_Status) FromLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingStatusEnum performs a merge with any union data inside the ServerGroupMemberUpdate_Status, using the provided LoadBalancingStatusEnum
func (t *ServerGroupMemberUpdate_Status) MergeLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ServerGroupMemberUpdate_Status as a NullEnum
func (t ServerGroupMemberUpdate_Status) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ServerGroupMemberUpdate_Status as the provided NullEnum
func (t *ServerGroupMemberUpdate_Status) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ServerGroupMemberUpdate_Status, using the provided NullEnum
func (t *ServerGroupMemberUpdate_Status) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ServerGroupMemberUpdate_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ServerGroupMemberUpdate_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMonitorHttpMethodEnum returns the union data inside the ServerGroupUpdate_MonitorHttpMethod as a MonitorHttpMethodEnum
func (t ServerGroupUpdate_MonitorHttpMethod) AsMonitorHttpMethodEnum() (MonitorHttpMethodEnum, error) {
	var body MonitorHttpMethodEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMonitorHttpMethodEnum overwrites any union data inside the ServerGroupUpdate_MonitorHttpMethod as the provided MonitorHttpMethodEnum
func (t *ServerGroupUpdate_MonitorHttpMethod) FromMonitorHttpMethodEnum(v MonitorHttpMethodEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMonitorHttpMethodEnum performs a merge with any union data inside the ServerGroupUpdate_MonitorHttpMethod, using the provided MonitorHttpMethodEnum
func (t *ServerGroupUpdate_MonitorHttpMethod) MergeMonitorHttpMethodEnum(v MonitorHttpMethodEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ServerGroupUpdate_MonitorHttpMethod as a NullEnum
func (t ServerGroupUpdate_MonitorHttpMethod) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ServerGroupUpdate_MonitorHttpMethod as the provided NullEnum
func (t *ServerGroupUpdate_MonitorHttpMethod) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ServerGroupUpdate_MonitorHttpMethod, using the provided NullEnum
func (t *ServerGroupUpdate_MonitorHttpMethod) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ServerGroupUpdate_MonitorHttpMethod) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ServerGroupUpdate_MonitorHttpMethod) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingMonitorTypeEnum returns the union data inside the ServerGroupUpdate_MonitorType as a LoadBalancingMonitorTypeEnum
func (t ServerGroupUpdate_MonitorType) AsLoadBalancingMonitorTypeEnum() (LoadBalancingMonitorTypeEnum, error) {
	var body LoadBalancingMonitorTypeEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingMonitorTypeEnum overwrites any union data inside the ServerGroupUpdate_MonitorType as the provided LoadBalancingMonitorTypeEnum
func (t *ServerGroupUpdate_MonitorType) FromLoadBalancingMonitorTypeEnum(v LoadBalancingMonitorTypeEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingMonitorTypeEnum performs a merge with any union data inside the ServerGroupUpdate_MonitorType, using the provided LoadBalancingMonitorTypeEnum
func (t *ServerGroupUpdate_MonitorType) MergeLoadBalancingMonitorTypeEnum(v LoadBalancingMonitorTypeEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ServerGroupUpdate_MonitorType as a NullEnum
func (t ServerGroupUpdate_MonitorType) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ServerGroupUpdate_MonitorType as the provided NullEnum
func (t *ServerGroupUpdate_MonitorType) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ServerGroupUpdate_MonitorType, using the provided NullEnum
func (t *ServerGroupUpdate_MonitorType) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ServerGroupUpdate_MonitorType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ServerGroupUpdate_MonitorType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingProvisioningStatusEnum returns the union data inside the ServerGroupUpdate_ProvisioningStatus as a LoadBalancingProvisioningStatusEnum
func (t ServerGroupUpdate_ProvisioningStatus) AsLoadBalancingProvisioningStatusEnum() (LoadBalancingProvisioningStatusEnum, error) {
	var body LoadBalancingProvisioningStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingProvisioningStatusEnum overwrites any union data inside the ServerGroupUpdate_ProvisioningStatus as the provided LoadBalancingProvisioningStatusEnum
func (t *ServerGroupUpdate_ProvisioningStatus) FromLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingProvisioningStatusEnum performs a merge with any union data inside the ServerGroupUpdate_ProvisioningStatus, using the provided LoadBalancingProvisioningStatusEnum
func (t *ServerGroupUpdate_ProvisioningStatus) MergeLoadBalancingProvisioningStatusEnum(v LoadBalancingProvisioningStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ServerGroupUpdate_ProvisioningStatus as a NullEnum
func (t ServerGroupUpdate_ProvisioningStatus) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ServerGroupUpdate_ProvisioningStatus as the provided NullEnum
func (t *ServerGroupUpdate_ProvisioningStatus) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ServerGroupUpdate_ProvisioningStatus, using the provided NullEnum
func (t *ServerGroupUpdate_ProvisioningStatus) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ServerGroupUpdate_ProvisioningStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ServerGroupUpdate_ProvisioningStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSessionPersistenceTypeEnum returns the union data inside the ServerGroupUpdate_SessionPersistenceType as a SessionPersistenceTypeEnum
func (t ServerGroupUpdate_SessionPersistenceType) AsSessionPersistenceTypeEnum() (SessionPersistenceTypeEnum, error) {
	var body SessionPersistenceTypeEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSessionPersistenceTypeEnum overwrites any union data inside the ServerGroupUpdate_SessionPersistenceType as the provided SessionPersistenceTypeEnum
func (t *ServerGroupUpdate_SessionPersistenceType) FromSessionPersistenceTypeEnum(v SessionPersistenceTypeEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSessionPersistenceTypeEnum performs a merge with any union data inside the ServerGroupUpdate_SessionPersistenceType, using the provided SessionPersistenceTypeEnum
func (t *ServerGroupUpdate_SessionPersistenceType) MergeSessionPersistenceTypeEnum(v SessionPersistenceTypeEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the ServerGroupUpdate_SessionPersistenceType as a BlankEnum
func (t ServerGroupUpdate_SessionPersistenceType) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the ServerGroupUpdate_SessionPersistenceType as the provided BlankEnum
func (t *ServerGroupUpdate_SessionPersistenceType) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the ServerGroupUpdate_SessionPersistenceType, using the provided BlankEnum
func (t *ServerGroupUpdate_SessionPersistenceType) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ServerGroupUpdate_SessionPersistenceType as a NullEnum
func (t ServerGroupUpdate_SessionPersistenceType) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ServerGroupUpdate_SessionPersistenceType as the provided NullEnum
func (t *ServerGroupUpdate_SessionPersistenceType) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ServerGroupUpdate_SessionPersistenceType, using the provided NullEnum
func (t *ServerGroupUpdate_SessionPersistenceType) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ServerGroupUpdate_SessionPersistenceType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ServerGroupUpdate_SessionPersistenceType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancingStatusEnum returns the union data inside the ServerGroupUpdate_Status as a LoadBalancingStatusEnum
func (t ServerGroupUpdate_Status) AsLoadBalancingStatusEnum() (LoadBalancingStatusEnum, error) {
	var body LoadBalancingStatusEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancingStatusEnum overwrites any union data inside the ServerGroupUpdate_Status as the provided LoadBalancingStatusEnum
func (t *ServerGroupUpdate_Status) FromLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancingStatusEnum performs a merge with any union data inside the ServerGroupUpdate_Status, using the provided LoadBalancingStatusEnum
func (t *ServerGroupUpdate_Status) MergeLoadBalancingStatusEnum(v LoadBalancingStatusEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ServerGroupUpdate_Status as a NullEnum
func (t ServerGroupUpdate_Status) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ServerGroupUpdate_Status as the provided NullEnum
func (t *ServerGroupUpdate_Status) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ServerGroupUpdate_Status, using the provided NullEnum
func (t *ServerGroupUpdate_Status) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ServerGroupUpdate_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ServerGroupUpdate_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPowerStateEnum returns the union data inside the ServerList_PowerState as a PowerStateEnum
func (t ServerList_PowerState) AsPowerStateEnum() (PowerStateEnum, error) {
	var body PowerStateEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPowerStateEnum overwrites any union data inside the ServerList_PowerState as the provided PowerStateEnum
func (t *ServerList_PowerState) FromPowerStateEnum(v PowerStateEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePowerStateEnum performs a merge with any union data inside the ServerList_PowerState, using the provided PowerStateEnum
func (t *ServerList_PowerState) MergePowerStateEnum(v PowerStateEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ServerList_PowerState as a NullEnum
func (t ServerList_PowerState) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ServerList_PowerState as the provided NullEnum
func (t *ServerList_PowerState) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ServerList_PowerState, using the provided NullEnum
func (t *ServerList_PowerState) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ServerList_PowerState) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ServerList_PowerState) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLoadBalancerPackageEnum returns the union data inside the VKEClusterDetail_LoadBalancerPackage as a LoadBalancerPackageEnum
func (t VKEClusterDetail_LoadBalancerPackage) AsLoadBalancerPackageEnum() (LoadBalancerPackageEnum, error) {
	var body LoadBalancerPackageEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoadBalancerPackageEnum overwrites any union data inside the VKEClusterDetail_LoadBalancerPackage as the provided LoadBalancerPackageEnum
func (t *VKEClusterDetail_LoadBalancerPackage) FromLoadBalancerPackageEnum(v LoadBalancerPackageEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoadBalancerPackageEnum performs a merge with any union data inside the VKEClusterDetail_LoadBalancerPackage, using the provided LoadBalancerPackageEnum
func (t *VKEClusterDetail_LoadBalancerPackage) MergeLoadBalancerPackageEnum(v LoadBalancerPackageEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the VKEClusterDetail_LoadBalancerPackage as a BlankEnum
func (t VKEClusterDetail_LoadBalancerPackage) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the VKEClusterDetail_LoadBalancerPackage as the provided BlankEnum
func (t *VKEClusterDetail_LoadBalancerPackage) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the VKEClusterDetail_LoadBalancerPackage, using the provided BlankEnum
func (t *VKEClusterDetail_LoadBalancerPackage) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the VKEClusterDetail_LoadBalancerPackage as a NullEnum
func (t VKEClusterDetail_LoadBalancerPackage) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the VKEClusterDetail_LoadBalancerPackage as the provided NullEnum
func (t *VKEClusterDetail_LoadBalancerPackage) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the VKEClusterDetail_LoadBalancerPackage, using the provided NullEnum
func (t *VKEClusterDetail_LoadBalancerPackage) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t VKEClusterDetail_LoadBalancerPackage) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VKEClusterDetail_LoadBalancerPackage) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFrequencyUnitEnum returns the union data inside the VolumeBackupPolicy_FrequencyUnit as a FrequencyUnitEnum
func (t VolumeBackupPolicy_FrequencyUnit) AsFrequencyUnitEnum() (FrequencyUnitEnum, error) {
	var body FrequencyUnitEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFrequencyUnitEnum overwrites any union data inside the VolumeBackupPolicy_FrequencyUnit as the provided FrequencyUnitEnum
func (t *VolumeBackupPolicy_FrequencyUnit) FromFrequencyUnitEnum(v FrequencyUnitEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFrequencyUnitEnum performs a merge with any union data inside the VolumeBackupPolicy_FrequencyUnit, using the provided FrequencyUnitEnum
func (t *VolumeBackupPolicy_FrequencyUnit) MergeFrequencyUnitEnum(v FrequencyUnitEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the VolumeBackupPolicy_FrequencyUnit as a BlankEnum
func (t VolumeBackupPolicy_FrequencyUnit) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the VolumeBackupPolicy_FrequencyUnit as the provided BlankEnum
func (t *VolumeBackupPolicy_FrequencyUnit) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the VolumeBackupPolicy_FrequencyUnit, using the provided BlankEnum
func (t *VolumeBackupPolicy_FrequencyUnit) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the VolumeBackupPolicy_FrequencyUnit as a NullEnum
func (t VolumeBackupPolicy_FrequencyUnit) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the VolumeBackupPolicy_FrequencyUnit as the provided NullEnum
func (t *VolumeBackupPolicy_FrequencyUnit) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the VolumeBackupPolicy_FrequencyUnit, using the provided NullEnum
func (t *VolumeBackupPolicy_FrequencyUnit) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t VolumeBackupPolicy_FrequencyUnit) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeBackupPolicy_FrequencyUnit) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFrequencyUnitEnum returns the union data inside the VolumeBackupPolicyUpdate_FrequencyUnit as a FrequencyUnitEnum
func (t VolumeBackupPolicyUpdate_FrequencyUnit) AsFrequencyUnitEnum() (FrequencyUnitEnum, error) {
	var body FrequencyUnitEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFrequencyUnitEnum overwrites any union data inside the VolumeBackupPolicyUpdate_FrequencyUnit as the provided FrequencyUnitEnum
func (t *VolumeBackupPolicyUpdate_FrequencyUnit) FromFrequencyUnitEnum(v FrequencyUnitEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFrequencyUnitEnum performs a merge with any union data inside the VolumeBackupPolicyUpdate_FrequencyUnit, using the provided FrequencyUnitEnum
func (t *VolumeBackupPolicyUpdate_FrequencyUnit) MergeFrequencyUnitEnum(v FrequencyUnitEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the VolumeBackupPolicyUpdate_FrequencyUnit as a BlankEnum
func (t VolumeBackupPolicyUpdate_FrequencyUnit) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the VolumeBackupPolicyUpdate_FrequencyUnit as the provided BlankEnum
func (t *VolumeBackupPolicyUpdate_FrequencyUnit) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the VolumeBackupPolicyUpdate_FrequencyUnit, using the provided BlankEnum
func (t *VolumeBackupPolicyUpdate_FrequencyUnit) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the VolumeBackupPolicyUpdate_FrequencyUnit as a NullEnum
func (t VolumeBackupPolicyUpdate_FrequencyUnit) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the VolumeBackupPolicyUpdate_FrequencyUnit as the provided NullEnum
func (t *VolumeBackupPolicyUpdate_FrequencyUnit) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the VolumeBackupPolicyUpdate_FrequencyUnit, using the provided NullEnum
func (t *VolumeBackupPolicyUpdate_FrequencyUnit) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t VolumeBackupPolicyUpdate_FrequencyUnit) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeBackupPolicyUpdate_FrequencyUnit) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AlarmAlarmsList request
	AlarmAlarmsList(ctx context.Context, params *AlarmAlarmsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlarmAlarmsCreate request with any body
	AlarmAlarmsCreateWithBody(ctx context.Context, params *AlarmAlarmsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AlarmAlarmsCreate(ctx context.Context, params *AlarmAlarmsCreateParams, body AlarmAlarmsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	AlarmAlarmsCreateWithFormdataBody(ctx context.Context, params *AlarmAlarmsCreateParams, body AlarmAlarmsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlarmAlarmsDestroy request
	AlarmAlarmsDestroy(ctx context.Context, id openapi_types.UUID, params *AlarmAlarmsDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlarmAlarmsRetrieve request
	AlarmAlarmsRetrieve(ctx context.Context, id openapi_types.UUID, params *AlarmAlarmsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlarmAlarmsPartialUpdate request with any body
	AlarmAlarmsPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *AlarmAlarmsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AlarmAlarmsPartialUpdate(ctx context.Context, id openapi_types.UUID, params *AlarmAlarmsPartialUpdateParams, body AlarmAlarmsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	AlarmAlarmsPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *AlarmAlarmsPartialUpdateParams, body AlarmAlarmsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlarmAlarmsUpdate request with any body
	AlarmAlarmsUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *AlarmAlarmsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AlarmAlarmsUpdate(ctx context.Context, id openapi_types.UUID, params *AlarmAlarmsUpdateParams, body AlarmAlarmsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	AlarmAlarmsUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *AlarmAlarmsUpdateParams, body AlarmAlarmsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BccsOrdersPurchaseCallbackCreate request with any body
	BccsOrdersPurchaseCallbackCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BccsOrdersPurchaseCallbackCreate(ctx context.Context, body BccsOrdersPurchaseCallbackCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	BccsOrdersPurchaseCallbackCreateWithFormdataBody(ctx context.Context, body BccsOrdersPurchaseCallbackCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BccsPlansBackupList request
	BccsPlansBackupList(ctx context.Context, params *BccsPlansBackupListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BccsPlansBackupCreate request with any body
	BccsPlansBackupCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BccsPlansBackupCreate(ctx context.Context, body BccsPlansBackupCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	BccsPlansBackupCreateWithFormdataBody(ctx context.Context, body BccsPlansBackupCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BccsPlansBackupRetrieve request
	BccsPlansBackupRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BccsPlansContainerRegistryList request
	BccsPlansContainerRegistryList(ctx context.Context, params *BccsPlansContainerRegistryListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BccsPlansContainerRegistryCreate request with any body
	BccsPlansContainerRegistryCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BccsPlansContainerRegistryCreate(ctx context.Context, body BccsPlansContainerRegistryCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	BccsPlansContainerRegistryCreateWithFormdataBody(ctx context.Context, body BccsPlansContainerRegistryCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BccsPlansContainerRegistryRetrieve request
	BccsPlansContainerRegistryRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BccsPlansFileStorageList request
	BccsPlansFileStorageList(ctx context.Context, params *BccsPlansFileStorageListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BccsPlansFileStorageCreate request with any body
	BccsPlansFileStorageCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BccsPlansFileStorageCreate(ctx context.Context, body BccsPlansFileStorageCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	BccsPlansFileStorageCreateWithFormdataBody(ctx context.Context, body BccsPlansFileStorageCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BccsPlansFileStorageRetrieve request
	BccsPlansFileStorageRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BccsPlansK8sClusterList request
	BccsPlansK8sClusterList(ctx context.Context, params *BccsPlansK8sClusterListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BccsPlansK8sClusterCreate request with any body
	BccsPlansK8sClusterCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BccsPlansK8sClusterCreate(ctx context.Context, body BccsPlansK8sClusterCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	BccsPlansK8sClusterCreateWithFormdataBody(ctx context.Context, body BccsPlansK8sClusterCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BccsPlansK8sClusterRetrieve request
	BccsPlansK8sClusterRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BccsPlansLoadBalancingList request
	BccsPlansLoadBalancingList(ctx context.Context, params *BccsPlansLoadBalancingListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BccsPlansLoadBalancingCreate request with any body
	BccsPlansLoadBalancingCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BccsPlansLoadBalancingCreate(ctx context.Context, body BccsPlansLoadBalancingCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	BccsPlansLoadBalancingCreateWithFormdataBody(ctx context.Context, body BccsPlansLoadBalancingCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BccsPlansLoadBalancingRetrieve request
	BccsPlansLoadBalancingRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BccsPlansObjectStorageList request
	BccsPlansObjectStorageList(ctx context.Context, params *BccsPlansObjectStorageListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BccsPlansObjectStorageCreate request with any body
	BccsPlansObjectStorageCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BccsPlansObjectStorageCreate(ctx context.Context, body BccsPlansObjectStorageCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	BccsPlansObjectStorageCreateWithFormdataBody(ctx context.Context, body BccsPlansObjectStorageCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BccsPlansObjectStorageRetrieve request
	BccsPlansObjectStorageRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BccsPlansServerList request
	BccsPlansServerList(ctx context.Context, params *BccsPlansServerListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BccsPlansServerCreate request with any body
	BccsPlansServerCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BccsPlansServerCreate(ctx context.Context, body BccsPlansServerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	BccsPlansServerCreateWithFormdataBody(ctx context.Context, body BccsPlansServerCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BccsPlansServerRetrieve request
	BccsPlansServerRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BccsPlansVolumeList request
	BccsPlansVolumeList(ctx context.Context, params *BccsPlansVolumeListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BccsPlansVolumeCreate request with any body
	BccsPlansVolumeCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BccsPlansVolumeCreate(ctx context.Context, body BccsPlansVolumeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	BccsPlansVolumeCreateWithFormdataBody(ctx context.Context, body BccsPlansVolumeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BccsPlansVolumeRetrieve request
	BccsPlansVolumeRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BccsUsersList request
	BccsUsersList(ctx context.Context, params *BccsUsersListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BccsUsersCreate request with any body
	BccsUsersCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BccsUsersCreate(ctx context.Context, body BccsUsersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	BccsUsersCreateWithFormdataBody(ctx context.Context, body BccsUsersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BccsUsersRetrieve request
	BccsUsersRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BccsUsersProjectsRetrieve request
	BccsUsersProjectsRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BccsVolumesList request
	BccsVolumesList(ctx context.Context, params *BccsVolumesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContainerRegistryCliSecretRetrieve request
	ContainerRegistryCliSecretRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContainerRegistryImagesList request
	ContainerRegistryImagesList(ctx context.Context, params *ContainerRegistryImagesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContainerRegistryImagesDestroy request
	ContainerRegistryImagesDestroy(ctx context.Context, imageName string, params *ContainerRegistryImagesDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContainerRegistryImagesRetrieve request
	ContainerRegistryImagesRetrieve(ctx context.Context, imageName string, params *ContainerRegistryImagesRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContainerRegistryImagesArtifactsList request
	ContainerRegistryImagesArtifactsList(ctx context.Context, imageName string, params *ContainerRegistryImagesArtifactsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContainerRegistryImagesArtifactsDestroy request
	ContainerRegistryImagesArtifactsDestroy(ctx context.Context, imageName string, reference string, params *ContainerRegistryImagesArtifactsDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContainerRegistryImagesArtifactsRetrieve request
	ContainerRegistryImagesArtifactsRetrieve(ctx context.Context, imageName string, reference string, params *ContainerRegistryImagesArtifactsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContainerRegistryImagesArtifactsBuildHistoryRetrieve request
	ContainerRegistryImagesArtifactsBuildHistoryRetrieve(ctx context.Context, imageName string, reference string, params *ContainerRegistryImagesArtifactsBuildHistoryRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContainerRegistryImagesArtifactsScanCreate request
	ContainerRegistryImagesArtifactsScanCreate(ctx context.Context, imageName string, reference string, params *ContainerRegistryImagesArtifactsScanCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContainerRegistryImagesArtifactsTagsRetrieve request
	ContainerRegistryImagesArtifactsTagsRetrieve(ctx context.Context, imageName string, reference string, params *ContainerRegistryImagesArtifactsTagsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContainerRegistryImagesArtifactsTagsDestroy request
	ContainerRegistryImagesArtifactsTagsDestroy(ctx context.Context, imageName string, reference string, tagName string, params *ContainerRegistryImagesArtifactsTagsDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContainerRegistryImagesArtifactsVulnerabilitiesRetrieve request
	ContainerRegistryImagesArtifactsVulnerabilitiesRetrieve(ctx context.Context, imageName string, reference string, params *ContainerRegistryImagesArtifactsVulnerabilitiesRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContainerRegistryLogsRetrieve request
	ContainerRegistryLogsRetrieve(ctx context.Context, params *ContainerRegistryLogsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContainerRegistryQuotaRetrieve request
	ContainerRegistryQuotaRetrieve(ctx context.Context, params *ContainerRegistryQuotaRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DbaasDbInstanceBackupsList request
	DbaasDbInstanceBackupsList(ctx context.Context, params *DbaasDbInstanceBackupsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DbaasDbInstanceBackupsCreate request with any body
	DbaasDbInstanceBackupsCreateWithBody(ctx context.Context, params *DbaasDbInstanceBackupsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DbaasDbInstanceBackupsCreate(ctx context.Context, params *DbaasDbInstanceBackupsCreateParams, body DbaasDbInstanceBackupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DbaasDbInstanceBackupsCreateWithFormdataBody(ctx context.Context, params *DbaasDbInstanceBackupsCreateParams, body DbaasDbInstanceBackupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DbaasDbInstanceBackupsDestroy request
	DbaasDbInstanceBackupsDestroy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DbaasDbInstanceBackupsRetrieve request
	DbaasDbInstanceBackupsRetrieve(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstanceBackupsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DbaasDbInstancesList request
	DbaasDbInstancesList(ctx context.Context, params *DbaasDbInstancesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DbaasDbInstancesCreate request with any body
	DbaasDbInstancesCreateWithBody(ctx context.Context, params *DbaasDbInstancesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DbaasDbInstancesCreate(ctx context.Context, params *DbaasDbInstancesCreateParams, body DbaasDbInstancesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DbaasDbInstancesCreateWithFormdataBody(ctx context.Context, params *DbaasDbInstancesCreateParams, body DbaasDbInstancesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DbaasDbInstancesDestroy request
	DbaasDbInstancesDestroy(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DbaasDbInstancesRetrieve request
	DbaasDbInstancesRetrieve(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DbaasDbInstancesExtendVolumeSizePartialUpdate request with any body
	DbaasDbInstancesExtendVolumeSizePartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesExtendVolumeSizePartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DbaasDbInstancesExtendVolumeSizePartialUpdate(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesExtendVolumeSizePartialUpdateParams, body DbaasDbInstancesExtendVolumeSizePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DbaasDbInstancesExtendVolumeSizePartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesExtendVolumeSizePartialUpdateParams, body DbaasDbInstancesExtendVolumeSizePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DbaasDbInstancesUpdateBackupPolicyPartialUpdate request with any body
	DbaasDbInstancesUpdateBackupPolicyPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateBackupPolicyPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DbaasDbInstancesUpdateBackupPolicyPartialUpdate(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateBackupPolicyPartialUpdateParams, body DbaasDbInstancesUpdateBackupPolicyPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DbaasDbInstancesUpdateBackupPolicyPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateBackupPolicyPartialUpdateParams, body DbaasDbInstancesUpdateBackupPolicyPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DbaasDbInstancesUpdateFlavorPartialUpdate request with any body
	DbaasDbInstancesUpdateFlavorPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateFlavorPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DbaasDbInstancesUpdateFlavorPartialUpdate(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateFlavorPartialUpdateParams, body DbaasDbInstancesUpdateFlavorPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DbaasDbInstancesUpdateFlavorPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateFlavorPartialUpdateParams, body DbaasDbInstancesUpdateFlavorPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdate request with any body
	DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdate(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateParams, body DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateParams, body DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DbaasDbInstancesUpdateRootPasswordPartialUpdate request with any body
	DbaasDbInstancesUpdateRootPasswordPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateRootPasswordPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DbaasDbInstancesUpdateRootPasswordPartialUpdate(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateRootPasswordPartialUpdateParams, body DbaasDbInstancesUpdateRootPasswordPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DbaasDbInstancesUpdateRootPasswordPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateRootPasswordPartialUpdateParams, body DbaasDbInstancesUpdateRootPasswordPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DbaasDbVersionsList request
	DbaasDbVersionsList(ctx context.Context, params *DbaasDbVersionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DbaasDbVersionsRetrieve request
	DbaasDbVersionsRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DbaasDbaasFlavorsList request
	DbaasDbaasFlavorsList(ctx context.Context, params *DbaasDbaasFlavorsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DbaasDbaasFlavorsRetrieve request
	DbaasDbaasFlavorsRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DbaasDbaasRegionsList request
	DbaasDbaasRegionsList(ctx context.Context, params *DbaasDbaasRegionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DbaasDbaasRegionsRetrieve request
	DbaasDbaasRegionsRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DbaasDbaasVolumeTypesList request
	DbaasDbaasVolumeTypesList(ctx context.Context, params *DbaasDbaasVolumeTypesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DbaasDbaasVolumeTypesRetrieve request
	DbaasDbaasVolumeTypesRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DbaasDbaasZonesList request
	DbaasDbaasZonesList(ctx context.Context, params *DbaasDbaasZonesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DbaasDbaasZonesRetrieve request
	DbaasDbaasZonesRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DbaasFlavorMappingsList request
	DbaasFlavorMappingsList(ctx context.Context, params *DbaasFlavorMappingsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DbaasFlavorMappingsRetrieve request
	DbaasFlavorMappingsRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DbaasVolumeTypeMappingsList request
	DbaasVolumeTypeMappingsList(ctx context.Context, params *DbaasVolumeTypeMappingsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DbaasVolumeTypeMappingsRetrieve request
	DbaasVolumeTypeMappingsRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraAutoScalingScalingActionList request
	InfraAutoScalingScalingActionList(ctx context.Context, params *InfraAutoScalingScalingActionListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraAutoScalingScalingGroupList request
	InfraAutoScalingScalingGroupList(ctx context.Context, params *InfraAutoScalingScalingGroupListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraAutoScalingScalingGroupCreate request with any body
	InfraAutoScalingScalingGroupCreateWithBody(ctx context.Context, params *InfraAutoScalingScalingGroupCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraAutoScalingScalingGroupCreate(ctx context.Context, params *InfraAutoScalingScalingGroupCreateParams, body InfraAutoScalingScalingGroupCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraAutoScalingScalingGroupCreateWithFormdataBody(ctx context.Context, params *InfraAutoScalingScalingGroupCreateParams, body InfraAutoScalingScalingGroupCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraAutoScalingScalingGroupMetricsSchemaRetrieve request
	InfraAutoScalingScalingGroupMetricsSchemaRetrieve(ctx context.Context, params *InfraAutoScalingScalingGroupMetricsSchemaRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraAutoScalingScalingGroupDestroy request
	InfraAutoScalingScalingGroupDestroy(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingGroupDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraAutoScalingScalingGroupRetrieve request
	InfraAutoScalingScalingGroupRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingGroupRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraAutoScalingScalingGroupPartialUpdate request with any body
	InfraAutoScalingScalingGroupPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingGroupPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraAutoScalingScalingGroupPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingGroupPartialUpdateParams, body InfraAutoScalingScalingGroupPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraAutoScalingScalingGroupPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingGroupPartialUpdateParams, body InfraAutoScalingScalingGroupPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraAutoScalingScalingGroupUpdate request with any body
	InfraAutoScalingScalingGroupUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingGroupUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraAutoScalingScalingGroupUpdate(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingGroupUpdateParams, body InfraAutoScalingScalingGroupUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraAutoScalingScalingGroupUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingGroupUpdateParams, body InfraAutoScalingScalingGroupUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraAutoScalingScalingGroupMetricsRetrieve request
	InfraAutoScalingScalingGroupMetricsRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingGroupMetricsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraAutoScalingScalingPolicyList request
	InfraAutoScalingScalingPolicyList(ctx context.Context, params *InfraAutoScalingScalingPolicyListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraAutoScalingScalingPolicyCreate request with any body
	InfraAutoScalingScalingPolicyCreateWithBody(ctx context.Context, params *InfraAutoScalingScalingPolicyCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraAutoScalingScalingPolicyCreate(ctx context.Context, params *InfraAutoScalingScalingPolicyCreateParams, body InfraAutoScalingScalingPolicyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraAutoScalingScalingPolicyCreateWithFormdataBody(ctx context.Context, params *InfraAutoScalingScalingPolicyCreateParams, body InfraAutoScalingScalingPolicyCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraAutoScalingScalingPolicyDestroy request
	InfraAutoScalingScalingPolicyDestroy(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraAutoScalingScalingPolicyRetrieve request
	InfraAutoScalingScalingPolicyRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraAutoScalingScalingPolicyPartialUpdate request with any body
	InfraAutoScalingScalingPolicyPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraAutoScalingScalingPolicyPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyPartialUpdateParams, body InfraAutoScalingScalingPolicyPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraAutoScalingScalingPolicyPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyPartialUpdateParams, body InfraAutoScalingScalingPolicyPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraAutoScalingScalingPolicyUpdate request with any body
	InfraAutoScalingScalingPolicyUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraAutoScalingScalingPolicyUpdate(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyUpdateParams, body InfraAutoScalingScalingPolicyUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraAutoScalingScalingPolicyUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyUpdateParams, body InfraAutoScalingScalingPolicyUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraAutoScalingScalingQueryList request
	InfraAutoScalingScalingQueryList(ctx context.Context, params *InfraAutoScalingScalingQueryListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraAutoScalingScalingQueryCreate request with any body
	InfraAutoScalingScalingQueryCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraAutoScalingScalingQueryCreate(ctx context.Context, body InfraAutoScalingScalingQueryCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraAutoScalingScalingQueryCreateWithFormdataBody(ctx context.Context, body InfraAutoScalingScalingQueryCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraAutoScalingScalingQueryDestroy request
	InfraAutoScalingScalingQueryDestroy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraAutoScalingScalingScheduleList request
	InfraAutoScalingScalingScheduleList(ctx context.Context, params *InfraAutoScalingScalingScheduleListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraAutoScalingScalingScheduleCreate request with any body
	InfraAutoScalingScalingScheduleCreateWithBody(ctx context.Context, params *InfraAutoScalingScalingScheduleCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraAutoScalingScalingScheduleCreate(ctx context.Context, params *InfraAutoScalingScalingScheduleCreateParams, body InfraAutoScalingScalingScheduleCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraAutoScalingScalingScheduleCreateWithFormdataBody(ctx context.Context, params *InfraAutoScalingScalingScheduleCreateParams, body InfraAutoScalingScalingScheduleCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraAutoScalingScalingScheduleDestroy request
	InfraAutoScalingScalingScheduleDestroy(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingScheduleDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraAutoScalingScalingScheduleRetrieve request
	InfraAutoScalingScalingScheduleRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingScheduleRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraAutoScalingScalingSchedulePartialUpdate request with any body
	InfraAutoScalingScalingSchedulePartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingSchedulePartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraAutoScalingScalingSchedulePartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingSchedulePartialUpdateParams, body InfraAutoScalingScalingSchedulePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraAutoScalingScalingSchedulePartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingSchedulePartialUpdateParams, body InfraAutoScalingScalingSchedulePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraAutoScalingScalingScheduleUpdate request with any body
	InfraAutoScalingScalingScheduleUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingScheduleUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraAutoScalingScalingScheduleUpdate(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingScheduleUpdateParams, body InfraAutoScalingScalingScheduleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraAutoScalingScalingScheduleUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingScheduleUpdateParams, body InfraAutoScalingScalingScheduleUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraAutoScalingScalingServerList request
	InfraAutoScalingScalingServerList(ctx context.Context, params *InfraAutoScalingScalingServerListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraCertificateList request
	InfraCertificateList(ctx context.Context, params *InfraCertificateListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraCertificateCreate request with any body
	InfraCertificateCreateWithBody(ctx context.Context, params *InfraCertificateCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraCertificateCreate(ctx context.Context, params *InfraCertificateCreateParams, body InfraCertificateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraCertificateCreateWithFormdataBody(ctx context.Context, params *InfraCertificateCreateParams, body InfraCertificateCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraCertificateDestroy request
	InfraCertificateDestroy(ctx context.Context, id openapi_types.UUID, params *InfraCertificateDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraCertificateRetrieve request
	InfraCertificateRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraCertificateRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraCertificatePartialUpdate request with any body
	InfraCertificatePartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraCertificatePartialUpdate(ctx context.Context, id openapi_types.UUID, body InfraCertificatePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraCertificatePartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body InfraCertificatePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraCertificateUpdate request with any body
	InfraCertificateUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraCertificateUpdate(ctx context.Context, id openapi_types.UUID, body InfraCertificateUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraCertificateUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body InfraCertificateUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraElasticIpsList request
	InfraElasticIpsList(ctx context.Context, params *InfraElasticIpsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraElasticIpsCreate request with any body
	InfraElasticIpsCreateWithBody(ctx context.Context, params *InfraElasticIpsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraElasticIpsCreate(ctx context.Context, params *InfraElasticIpsCreateParams, body InfraElasticIpsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraElasticIpsCreateWithFormdataBody(ctx context.Context, params *InfraElasticIpsCreateParams, body InfraElasticIpsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraElasticIpsDestroy request
	InfraElasticIpsDestroy(ctx context.Context, id openapi_types.UUID, params *InfraElasticIpsDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraElasticIpsRetrieve request
	InfraElasticIpsRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraElasticIpsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraFilesystemAccessRulesList request
	InfraFilesystemAccessRulesList(ctx context.Context, params *InfraFilesystemAccessRulesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraFilesystemAccessRulesCreate request with any body
	InfraFilesystemAccessRulesCreateWithBody(ctx context.Context, params *InfraFilesystemAccessRulesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraFilesystemAccessRulesCreate(ctx context.Context, params *InfraFilesystemAccessRulesCreateParams, body InfraFilesystemAccessRulesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraFilesystemAccessRulesCreateWithFormdataBody(ctx context.Context, params *InfraFilesystemAccessRulesCreateParams, body InfraFilesystemAccessRulesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraFilesystemAccessRulesDestroy request
	InfraFilesystemAccessRulesDestroy(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemAccessRulesDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraFilesystemAccessRulesRetrieve request
	InfraFilesystemAccessRulesRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemAccessRulesRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraFilesystemAccessRulesPartialUpdate request with any body
	InfraFilesystemAccessRulesPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraFilesystemAccessRulesPartialUpdate(ctx context.Context, id openapi_types.UUID, body InfraFilesystemAccessRulesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraFilesystemAccessRulesPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body InfraFilesystemAccessRulesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraFilesystemAccessRulesUpdate request with any body
	InfraFilesystemAccessRulesUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraFilesystemAccessRulesUpdate(ctx context.Context, id openapi_types.UUID, body InfraFilesystemAccessRulesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraFilesystemAccessRulesUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body InfraFilesystemAccessRulesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraFilesystemSnapshotPoliciesList request
	InfraFilesystemSnapshotPoliciesList(ctx context.Context, params *InfraFilesystemSnapshotPoliciesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraFilesystemSnapshotPoliciesCreate request with any body
	InfraFilesystemSnapshotPoliciesCreateWithBody(ctx context.Context, params *InfraFilesystemSnapshotPoliciesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraFilesystemSnapshotPoliciesCreate(ctx context.Context, params *InfraFilesystemSnapshotPoliciesCreateParams, body InfraFilesystemSnapshotPoliciesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraFilesystemSnapshotPoliciesCreateWithFormdataBody(ctx context.Context, params *InfraFilesystemSnapshotPoliciesCreateParams, body InfraFilesystemSnapshotPoliciesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraFilesystemSnapshotPoliciesDestroy request
	InfraFilesystemSnapshotPoliciesDestroy(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraFilesystemSnapshotPoliciesRetrieve request
	InfraFilesystemSnapshotPoliciesRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraFilesystemSnapshotPoliciesPartialUpdate request with any body
	InfraFilesystemSnapshotPoliciesPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraFilesystemSnapshotPoliciesPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesPartialUpdateParams, body InfraFilesystemSnapshotPoliciesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraFilesystemSnapshotPoliciesPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesPartialUpdateParams, body InfraFilesystemSnapshotPoliciesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraFilesystemSnapshotPoliciesUpdate request with any body
	InfraFilesystemSnapshotPoliciesUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraFilesystemSnapshotPoliciesUpdate(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesUpdateParams, body InfraFilesystemSnapshotPoliciesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraFilesystemSnapshotPoliciesUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesUpdateParams, body InfraFilesystemSnapshotPoliciesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraFilesystemSnapshotsList request
	InfraFilesystemSnapshotsList(ctx context.Context, params *InfraFilesystemSnapshotsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraFilesystemSnapshotsCreate request with any body
	InfraFilesystemSnapshotsCreateWithBody(ctx context.Context, params *InfraFilesystemSnapshotsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraFilesystemSnapshotsCreate(ctx context.Context, params *InfraFilesystemSnapshotsCreateParams, body InfraFilesystemSnapshotsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraFilesystemSnapshotsCreateWithFormdataBody(ctx context.Context, params *InfraFilesystemSnapshotsCreateParams, body InfraFilesystemSnapshotsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraFilesystemSnapshotsDestroy request
	InfraFilesystemSnapshotsDestroy(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotsDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraFilesystemSnapshotsRetrieve request
	InfraFilesystemSnapshotsRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraFilesystemSnapshotsPartialUpdate request with any body
	InfraFilesystemSnapshotsPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraFilesystemSnapshotsPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotsPartialUpdateParams, body InfraFilesystemSnapshotsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraFilesystemSnapshotsPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotsPartialUpdateParams, body InfraFilesystemSnapshotsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraFilesystemSnapshotsUpdate request with any body
	InfraFilesystemSnapshotsUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraFilesystemSnapshotsUpdate(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotsUpdateParams, body InfraFilesystemSnapshotsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraFilesystemSnapshotsUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotsUpdateParams, body InfraFilesystemSnapshotsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraFilesystemTypesList request
	InfraFilesystemTypesList(ctx context.Context, params *InfraFilesystemTypesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraFilesystemTypesRetrieve request
	InfraFilesystemTypesRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemTypesRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraFilesystemsList request
	InfraFilesystemsList(ctx context.Context, params *InfraFilesystemsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraFilesystemsCreate request with any body
	InfraFilesystemsCreateWithBody(ctx context.Context, params *InfraFilesystemsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraFilesystemsCreate(ctx context.Context, params *InfraFilesystemsCreateParams, body InfraFilesystemsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraFilesystemsCreateWithFormdataBody(ctx context.Context, params *InfraFilesystemsCreateParams, body InfraFilesystemsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraFilesystemsDestroy request
	InfraFilesystemsDestroy(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraFilesystemsRetrieve request
	InfraFilesystemsRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraFilesystemsPartialUpdate request with any body
	InfraFilesystemsPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraFilesystemsPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsPartialUpdateParams, body InfraFilesystemsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraFilesystemsPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsPartialUpdateParams, body InfraFilesystemsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraFilesystemsUpdate request with any body
	InfraFilesystemsUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraFilesystemsUpdate(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsUpdateParams, body InfraFilesystemsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraFilesystemsUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsUpdateParams, body InfraFilesystemsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraFilesystemsApplyPolicyCreate request with any body
	InfraFilesystemsApplyPolicyCreateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsApplyPolicyCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraFilesystemsApplyPolicyCreate(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsApplyPolicyCreateParams, body InfraFilesystemsApplyPolicyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraFilesystemsApplyPolicyCreateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsApplyPolicyCreateParams, body InfraFilesystemsApplyPolicyCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraFilesystemsResizeCreate request with any body
	InfraFilesystemsResizeCreateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsResizeCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraFilesystemsResizeCreate(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsResizeCreateParams, body InfraFilesystemsResizeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraFilesystemsResizeCreateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsResizeCreateParams, body InfraFilesystemsResizeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraFilesystemsStartMigrationCreate request with any body
	InfraFilesystemsStartMigrationCreateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsStartMigrationCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraFilesystemsStartMigrationCreate(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsStartMigrationCreateParams, body InfraFilesystemsStartMigrationCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraFilesystemsStartMigrationCreateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsStartMigrationCreateParams, body InfraFilesystemsStartMigrationCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraFilesystemsUnapplyPolicyCreate request
	InfraFilesystemsUnapplyPolicyCreate(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsUnapplyPolicyCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraFlavorsList request
	InfraFlavorsList(ctx context.Context, params *InfraFlavorsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraFlavorsCreate request with any body
	InfraFlavorsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraFlavorsCreate(ctx context.Context, body InfraFlavorsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraFlavorsCreateWithFormdataBody(ctx context.Context, body InfraFlavorsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraFlavorsDestroy request
	InfraFlavorsDestroy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraFlavorsRetrieve request
	InfraFlavorsRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraFlavorsPartialUpdate request with any body
	InfraFlavorsPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraFlavorsPartialUpdate(ctx context.Context, id openapi_types.UUID, body InfraFlavorsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraFlavorsPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body InfraFlavorsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraFlavorsUpdate request with any body
	InfraFlavorsUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraFlavorsUpdate(ctx context.Context, id openapi_types.UUID, body InfraFlavorsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraFlavorsUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body InfraFlavorsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraImagesList request
	InfraImagesList(ctx context.Context, params *InfraImagesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraImagesCreate request with any body
	InfraImagesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraImagesCreate(ctx context.Context, body InfraImagesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraImagesCreateWithFormdataBody(ctx context.Context, body InfraImagesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraImagesDestroy request
	InfraImagesDestroy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraImagesRetrieve request
	InfraImagesRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraImagesPartialUpdate request with any body
	InfraImagesPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraImagesPartialUpdate(ctx context.Context, id openapi_types.UUID, body InfraImagesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraImagesPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body InfraImagesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraImagesUpdate request with any body
	InfraImagesUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraImagesUpdate(ctx context.Context, id openapi_types.UUID, body InfraImagesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraImagesUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body InfraImagesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraKeypairsList request
	InfraKeypairsList(ctx context.Context, params *InfraKeypairsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraKeypairsCreate request with any body
	InfraKeypairsCreateWithBody(ctx context.Context, params *InfraKeypairsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraKeypairsCreate(ctx context.Context, params *InfraKeypairsCreateParams, body InfraKeypairsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraKeypairsCreateWithFormdataBody(ctx context.Context, params *InfraKeypairsCreateParams, body InfraKeypairsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraKeypairsDestroy request
	InfraKeypairsDestroy(ctx context.Context, id openapi_types.UUID, params *InfraKeypairsDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraKeypairsRetrieve request
	InfraKeypairsRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraKeypairsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraKeypairsPartialUpdate request with any body
	InfraKeypairsPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraKeypairsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraKeypairsPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraKeypairsPartialUpdateParams, body InfraKeypairsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraKeypairsPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraKeypairsPartialUpdateParams, body InfraKeypairsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraKeypairsUpdate request with any body
	InfraKeypairsUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraKeypairsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraKeypairsUpdate(ctx context.Context, id openapi_types.UUID, params *InfraKeypairsUpdateParams, body InfraKeypairsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraKeypairsUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraKeypairsUpdateParams, body InfraKeypairsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLaunchTemplateList request
	InfraLaunchTemplateList(ctx context.Context, params *InfraLaunchTemplateListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLaunchTemplateCreate request with any body
	InfraLaunchTemplateCreateWithBody(ctx context.Context, params *InfraLaunchTemplateCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLaunchTemplateCreate(ctx context.Context, params *InfraLaunchTemplateCreateParams, body InfraLaunchTemplateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLaunchTemplateCreateWithFormdataBody(ctx context.Context, params *InfraLaunchTemplateCreateParams, body InfraLaunchTemplateCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLaunchTemplateDestroy request
	InfraLaunchTemplateDestroy(ctx context.Context, id openapi_types.UUID, params *InfraLaunchTemplateDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLaunchTemplateRetrieve request
	InfraLaunchTemplateRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraLaunchTemplateRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLaunchTemplatePartialUpdate request with any body
	InfraLaunchTemplatePartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraLaunchTemplatePartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLaunchTemplatePartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraLaunchTemplatePartialUpdateParams, body InfraLaunchTemplatePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLaunchTemplatePartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraLaunchTemplatePartialUpdateParams, body InfraLaunchTemplatePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLaunchTemplateUpdate request with any body
	InfraLaunchTemplateUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraLaunchTemplateUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLaunchTemplateUpdate(ctx context.Context, id openapi_types.UUID, params *InfraLaunchTemplateUpdateParams, body InfraLaunchTemplateUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLaunchTemplateUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraLaunchTemplateUpdateParams, body InfraLaunchTemplateUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingL7policyList request
	InfraLoadBalancingL7policyList(ctx context.Context, params *InfraLoadBalancingL7policyListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingL7policyCreate request with any body
	InfraLoadBalancingL7policyCreateWithBody(ctx context.Context, params *InfraLoadBalancingL7policyCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLoadBalancingL7policyCreate(ctx context.Context, params *InfraLoadBalancingL7policyCreateParams, body InfraLoadBalancingL7policyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLoadBalancingL7policyCreateWithFormdataBody(ctx context.Context, params *InfraLoadBalancingL7policyCreateParams, body InfraLoadBalancingL7policyCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingL7policyDestroy request
	InfraLoadBalancingL7policyDestroy(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7policyDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingL7policyRetrieve request
	InfraLoadBalancingL7policyRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7policyRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingL7policyPartialUpdate request with any body
	InfraLoadBalancingL7policyPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7policyPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLoadBalancingL7policyPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7policyPartialUpdateParams, body InfraLoadBalancingL7policyPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLoadBalancingL7policyPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7policyPartialUpdateParams, body InfraLoadBalancingL7policyPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingL7policyUpdate request with any body
	InfraLoadBalancingL7policyUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7policyUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLoadBalancingL7policyUpdate(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7policyUpdateParams, body InfraLoadBalancingL7policyUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLoadBalancingL7policyUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7policyUpdateParams, body InfraLoadBalancingL7policyUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingL7ruleList request
	InfraLoadBalancingL7ruleList(ctx context.Context, params *InfraLoadBalancingL7ruleListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingL7ruleCreate request with any body
	InfraLoadBalancingL7ruleCreateWithBody(ctx context.Context, params *InfraLoadBalancingL7ruleCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLoadBalancingL7ruleCreate(ctx context.Context, params *InfraLoadBalancingL7ruleCreateParams, body InfraLoadBalancingL7ruleCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLoadBalancingL7ruleCreateWithFormdataBody(ctx context.Context, params *InfraLoadBalancingL7ruleCreateParams, body InfraLoadBalancingL7ruleCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingL7ruleDestroy request
	InfraLoadBalancingL7ruleDestroy(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7ruleDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingL7ruleRetrieve request
	InfraLoadBalancingL7ruleRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7ruleRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingL7rulePartialUpdate request with any body
	InfraLoadBalancingL7rulePartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7rulePartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLoadBalancingL7rulePartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7rulePartialUpdateParams, body InfraLoadBalancingL7rulePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLoadBalancingL7rulePartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7rulePartialUpdateParams, body InfraLoadBalancingL7rulePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingL7ruleUpdate request with any body
	InfraLoadBalancingL7ruleUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7ruleUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLoadBalancingL7ruleUpdate(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7ruleUpdateParams, body InfraLoadBalancingL7ruleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLoadBalancingL7ruleUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7ruleUpdateParams, body InfraLoadBalancingL7ruleUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingListenerList request
	InfraLoadBalancingListenerList(ctx context.Context, params *InfraLoadBalancingListenerListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingListenerCreate request with any body
	InfraLoadBalancingListenerCreateWithBody(ctx context.Context, params *InfraLoadBalancingListenerCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLoadBalancingListenerCreate(ctx context.Context, params *InfraLoadBalancingListenerCreateParams, body InfraLoadBalancingListenerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLoadBalancingListenerCreateWithFormdataBody(ctx context.Context, params *InfraLoadBalancingListenerCreateParams, body InfraLoadBalancingListenerCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingListenerMetricsSchemaRetrieve request
	InfraLoadBalancingListenerMetricsSchemaRetrieve(ctx context.Context, params *InfraLoadBalancingListenerMetricsSchemaRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingListenerDestroy request
	InfraLoadBalancingListenerDestroy(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingListenerDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingListenerRetrieve request
	InfraLoadBalancingListenerRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingListenerRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingListenerPartialUpdate request with any body
	InfraLoadBalancingListenerPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingListenerPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLoadBalancingListenerPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingListenerPartialUpdateParams, body InfraLoadBalancingListenerPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLoadBalancingListenerPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingListenerPartialUpdateParams, body InfraLoadBalancingListenerPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingListenerUpdate request with any body
	InfraLoadBalancingListenerUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingListenerUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLoadBalancingListenerUpdate(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingListenerUpdateParams, body InfraLoadBalancingListenerUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLoadBalancingListenerUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingListenerUpdateParams, body InfraLoadBalancingListenerUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingListenerMetricsRetrieve request
	InfraLoadBalancingListenerMetricsRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingListenerMetricsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingLoadBalancerList request
	InfraLoadBalancingLoadBalancerList(ctx context.Context, params *InfraLoadBalancingLoadBalancerListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingLoadBalancerCreate request with any body
	InfraLoadBalancingLoadBalancerCreateWithBody(ctx context.Context, params *InfraLoadBalancingLoadBalancerCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLoadBalancingLoadBalancerCreate(ctx context.Context, params *InfraLoadBalancingLoadBalancerCreateParams, body InfraLoadBalancingLoadBalancerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLoadBalancingLoadBalancerCreateWithFormdataBody(ctx context.Context, params *InfraLoadBalancingLoadBalancerCreateParams, body InfraLoadBalancingLoadBalancerCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingLoadBalancerMetricsSchemaRetrieve request
	InfraLoadBalancingLoadBalancerMetricsSchemaRetrieve(ctx context.Context, params *InfraLoadBalancingLoadBalancerMetricsSchemaRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingLoadBalancerDestroy request
	InfraLoadBalancingLoadBalancerDestroy(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingLoadBalancerRetrieve request
	InfraLoadBalancingLoadBalancerRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingLoadBalancerPartialUpdate request with any body
	InfraLoadBalancingLoadBalancerPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLoadBalancingLoadBalancerPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerPartialUpdateParams, body InfraLoadBalancingLoadBalancerPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLoadBalancingLoadBalancerPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerPartialUpdateParams, body InfraLoadBalancingLoadBalancerPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingLoadBalancerUpdate request with any body
	InfraLoadBalancingLoadBalancerUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLoadBalancingLoadBalancerUpdate(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerUpdateParams, body InfraLoadBalancingLoadBalancerUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLoadBalancingLoadBalancerUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerUpdateParams, body InfraLoadBalancingLoadBalancerUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingLoadBalancerMetricsRetrieve request
	InfraLoadBalancingLoadBalancerMetricsRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerMetricsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingServerGroupMemberList request
	InfraLoadBalancingServerGroupMemberList(ctx context.Context, params *InfraLoadBalancingServerGroupMemberListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingServerGroupMemberCreate request with any body
	InfraLoadBalancingServerGroupMemberCreateWithBody(ctx context.Context, params *InfraLoadBalancingServerGroupMemberCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLoadBalancingServerGroupMemberCreate(ctx context.Context, params *InfraLoadBalancingServerGroupMemberCreateParams, body InfraLoadBalancingServerGroupMemberCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLoadBalancingServerGroupMemberCreateWithFormdataBody(ctx context.Context, params *InfraLoadBalancingServerGroupMemberCreateParams, body InfraLoadBalancingServerGroupMemberCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingServerGroupMemberDestroy request
	InfraLoadBalancingServerGroupMemberDestroy(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingServerGroupMemberRetrieve request
	InfraLoadBalancingServerGroupMemberRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingServerGroupMemberPartialUpdate request with any body
	InfraLoadBalancingServerGroupMemberPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLoadBalancingServerGroupMemberPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberPartialUpdateParams, body InfraLoadBalancingServerGroupMemberPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLoadBalancingServerGroupMemberPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberPartialUpdateParams, body InfraLoadBalancingServerGroupMemberPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingServerGroupMemberUpdate request with any body
	InfraLoadBalancingServerGroupMemberUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLoadBalancingServerGroupMemberUpdate(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberUpdateParams, body InfraLoadBalancingServerGroupMemberUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLoadBalancingServerGroupMemberUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberUpdateParams, body InfraLoadBalancingServerGroupMemberUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingServerGroupList request
	InfraLoadBalancingServerGroupList(ctx context.Context, params *InfraLoadBalancingServerGroupListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingServerGroupCreate request with any body
	InfraLoadBalancingServerGroupCreateWithBody(ctx context.Context, params *InfraLoadBalancingServerGroupCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLoadBalancingServerGroupCreate(ctx context.Context, params *InfraLoadBalancingServerGroupCreateParams, body InfraLoadBalancingServerGroupCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLoadBalancingServerGroupCreateWithFormdataBody(ctx context.Context, params *InfraLoadBalancingServerGroupCreateParams, body InfraLoadBalancingServerGroupCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingServerGroupDestroy request
	InfraLoadBalancingServerGroupDestroy(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingServerGroupRetrieve request
	InfraLoadBalancingServerGroupRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingServerGroupPartialUpdate request with any body
	InfraLoadBalancingServerGroupPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLoadBalancingServerGroupPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupPartialUpdateParams, body InfraLoadBalancingServerGroupPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLoadBalancingServerGroupPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupPartialUpdateParams, body InfraLoadBalancingServerGroupPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraLoadBalancingServerGroupUpdate request with any body
	InfraLoadBalancingServerGroupUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLoadBalancingServerGroupUpdate(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupUpdateParams, body InfraLoadBalancingServerGroupUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraLoadBalancingServerGroupUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupUpdateParams, body InfraLoadBalancingServerGroupUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraPlacementgroupsList request
	InfraPlacementgroupsList(ctx context.Context, params *InfraPlacementgroupsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraPlacementgroupsCreate request with any body
	InfraPlacementgroupsCreateWithBody(ctx context.Context, params *InfraPlacementgroupsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraPlacementgroupsCreate(ctx context.Context, params *InfraPlacementgroupsCreateParams, body InfraPlacementgroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraPlacementgroupsCreateWithFormdataBody(ctx context.Context, params *InfraPlacementgroupsCreateParams, body InfraPlacementgroupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraPlacementgroupsDestroy request
	InfraPlacementgroupsDestroy(ctx context.Context, id openapi_types.UUID, params *InfraPlacementgroupsDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraPlacementgroupsRetrieve request
	InfraPlacementgroupsRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraPlacementgroupsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraPlacementgroupsPartialUpdate request with any body
	InfraPlacementgroupsPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraPlacementgroupsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraPlacementgroupsPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraPlacementgroupsPartialUpdateParams, body InfraPlacementgroupsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraPlacementgroupsPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraPlacementgroupsPartialUpdateParams, body InfraPlacementgroupsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraPlacementgroupsUpdate request with any body
	InfraPlacementgroupsUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraPlacementgroupsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraPlacementgroupsUpdate(ctx context.Context, id openapi_types.UUID, params *InfraPlacementgroupsUpdateParams, body InfraPlacementgroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraPlacementgroupsUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraPlacementgroupsUpdateParams, body InfraPlacementgroupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraPrivateIpsList request
	InfraPrivateIpsList(ctx context.Context, params *InfraPrivateIpsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraPrivateIpsCreate request with any body
	InfraPrivateIpsCreateWithBody(ctx context.Context, params *InfraPrivateIpsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraPrivateIpsCreate(ctx context.Context, params *InfraPrivateIpsCreateParams, body InfraPrivateIpsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraPrivateIpsCreateWithFormdataBody(ctx context.Context, params *InfraPrivateIpsCreateParams, body InfraPrivateIpsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraPrivateIpsDestroy request
	InfraPrivateIpsDestroy(ctx context.Context, id openapi_types.UUID, params *InfraPrivateIpsDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraPrivateIpsRetrieve request
	InfraPrivateIpsRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraPrivateIpsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraPrivateIpsPartialUpdate request with any body
	InfraPrivateIpsPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraPrivateIpsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraPrivateIpsPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraPrivateIpsPartialUpdateParams, body InfraPrivateIpsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraPrivateIpsPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraPrivateIpsPartialUpdateParams, body InfraPrivateIpsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraPrivateIpsUpdate request with any body
	InfraPrivateIpsUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraPrivateIpsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraPrivateIpsUpdate(ctx context.Context, id openapi_types.UUID, params *InfraPrivateIpsUpdateParams, body InfraPrivateIpsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraPrivateIpsUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraPrivateIpsUpdateParams, body InfraPrivateIpsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraRouteTablesList request
	InfraRouteTablesList(ctx context.Context, params *InfraRouteTablesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraRouteTablesCreate request with any body
	InfraRouteTablesCreateWithBody(ctx context.Context, params *InfraRouteTablesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraRouteTablesCreate(ctx context.Context, params *InfraRouteTablesCreateParams, body InfraRouteTablesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraRouteTablesCreateWithFormdataBody(ctx context.Context, params *InfraRouteTablesCreateParams, body InfraRouteTablesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraRouteTablesDestroy request
	InfraRouteTablesDestroy(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraRouteTablesRetrieve request
	InfraRouteTablesRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraRouteTablesPartialUpdate request with any body
	InfraRouteTablesPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraRouteTablesPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesPartialUpdateParams, body InfraRouteTablesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraRouteTablesPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesPartialUpdateParams, body InfraRouteTablesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraRouteTablesUpdate request with any body
	InfraRouteTablesUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraRouteTablesUpdate(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesUpdateParams, body InfraRouteTablesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraRouteTablesUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesUpdateParams, body InfraRouteTablesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraRouteTablesDisableInternetAccessUpdate request
	InfraRouteTablesDisableInternetAccessUpdate(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesDisableInternetAccessUpdateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraRouteTablesEnableInternetAccessUpdate request
	InfraRouteTablesEnableInternetAccessUpdate(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesEnableInternetAccessUpdateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraRouteTablesSubnetsRetrieve request
	InfraRouteTablesSubnetsRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesSubnetsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraSecurityGroupRulesList request
	InfraSecurityGroupRulesList(ctx context.Context, params *InfraSecurityGroupRulesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraSecurityGroupRulesCreate request with any body
	InfraSecurityGroupRulesCreateWithBody(ctx context.Context, params *InfraSecurityGroupRulesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraSecurityGroupRulesCreate(ctx context.Context, params *InfraSecurityGroupRulesCreateParams, body InfraSecurityGroupRulesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraSecurityGroupRulesCreateWithFormdataBody(ctx context.Context, params *InfraSecurityGroupRulesCreateParams, body InfraSecurityGroupRulesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraSecurityGroupRulesDestroy request
	InfraSecurityGroupRulesDestroy(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupRulesDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraSecurityGroupRulesRetrieve request
	InfraSecurityGroupRulesRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupRulesRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraSecurityGroupRulesPartialUpdate request with any body
	InfraSecurityGroupRulesPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupRulesPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraSecurityGroupRulesPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupRulesPartialUpdateParams, body InfraSecurityGroupRulesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraSecurityGroupRulesPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupRulesPartialUpdateParams, body InfraSecurityGroupRulesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraSecurityGroupRulesUpdate request with any body
	InfraSecurityGroupRulesUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupRulesUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraSecurityGroupRulesUpdate(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupRulesUpdateParams, body InfraSecurityGroupRulesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraSecurityGroupRulesUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupRulesUpdateParams, body InfraSecurityGroupRulesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraSecurityGroupsList request
	InfraSecurityGroupsList(ctx context.Context, params *InfraSecurityGroupsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraSecurityGroupsCreate request with any body
	InfraSecurityGroupsCreateWithBody(ctx context.Context, params *InfraSecurityGroupsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraSecurityGroupsCreate(ctx context.Context, params *InfraSecurityGroupsCreateParams, body InfraSecurityGroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraSecurityGroupsCreateWithFormdataBody(ctx context.Context, params *InfraSecurityGroupsCreateParams, body InfraSecurityGroupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraSecurityGroupsDestroy request
	InfraSecurityGroupsDestroy(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupsDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraSecurityGroupsRetrieve request
	InfraSecurityGroupsRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraSecurityGroupsPartialUpdate request with any body
	InfraSecurityGroupsPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraSecurityGroupsPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupsPartialUpdateParams, body InfraSecurityGroupsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraSecurityGroupsPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupsPartialUpdateParams, body InfraSecurityGroupsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraSecurityGroupsUpdate request with any body
	InfraSecurityGroupsUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraSecurityGroupsUpdate(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupsUpdateParams, body InfraSecurityGroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraSecurityGroupsUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupsUpdateParams, body InfraSecurityGroupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraServersList request
	InfraServersList(ctx context.Context, params *InfraServersListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraServersCreate request with any body
	InfraServersCreateWithBody(ctx context.Context, params *InfraServersCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraServersCreate(ctx context.Context, params *InfraServersCreateParams, body InfraServersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraServersCreateWithFormdataBody(ctx context.Context, params *InfraServersCreateParams, body InfraServersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraServersMetricsSchemaRetrieve request
	InfraServersMetricsSchemaRetrieve(ctx context.Context, params *InfraServersMetricsSchemaRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraServersDestroy request
	InfraServersDestroy(ctx context.Context, id openapi_types.UUID, params *InfraServersDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraServersRetrieve request
	InfraServersRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraServersRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraServersPartialUpdate request with any body
	InfraServersPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraServersPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraServersPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraServersPartialUpdateParams, body InfraServersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraServersPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraServersPartialUpdateParams, body InfraServersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraServersUpdate request with any body
	InfraServersUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraServersUpdate(ctx context.Context, id openapi_types.UUID, body InfraServersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraServersUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body InfraServersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraServersActionLogRetrieve request
	InfraServersActionLogRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraServersActionLogRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraServersAttachEipCreate request with any body
	InfraServersAttachEipCreateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachEipCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraServersAttachEipCreate(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachEipCreateParams, body InfraServersAttachEipCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraServersAttachEipCreateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachEipCreateParams, body InfraServersAttachEipCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraServersAttachPrivateipCreate request with any body
	InfraServersAttachPrivateipCreateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachPrivateipCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraServersAttachPrivateipCreate(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachPrivateipCreateParams, body InfraServersAttachPrivateipCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraServersAttachPrivateipCreateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachPrivateipCreateParams, body InfraServersAttachPrivateipCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraServersAttachSubnetCreate request with any body
	InfraServersAttachSubnetCreateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachSubnetCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraServersAttachSubnetCreate(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachSubnetCreateParams, body InfraServersAttachSubnetCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraServersAttachSubnetCreateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachSubnetCreateParams, body InfraServersAttachSubnetCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraServersAttachVolumeCreate request with any body
	InfraServersAttachVolumeCreateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachVolumeCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraServersAttachVolumeCreate(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachVolumeCreateParams, body InfraServersAttachVolumeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraServersAttachVolumeCreateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachVolumeCreateParams, body InfraServersAttachVolumeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraServersChangePasswordCreate request with any body
	InfraServersChangePasswordCreateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraServersChangePasswordCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraServersChangePasswordCreate(ctx context.Context, id openapi_types.UUID, params *InfraServersChangePasswordCreateParams, body InfraServersChangePasswordCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraServersChangePasswordCreateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraServersChangePasswordCreateParams, body InfraServersChangePasswordCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraServersConsoleLogRetrieve request
	InfraServersConsoleLogRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraServersConsoleLogRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraServersConsoleCreate request
	InfraServersConsoleCreate(ctx context.Context, id openapi_types.UUID, params *InfraServersConsoleCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraServersDeleteCreate request with any body
	InfraServersDeleteCreateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraServersDeleteCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraServersDeleteCreate(ctx context.Context, id openapi_types.UUID, params *InfraServersDeleteCreateParams, body InfraServersDeleteCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraServersDeleteCreateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraServersDeleteCreateParams, body InfraServersDeleteCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraServersDetachEipCreate request with any body
	InfraServersDetachEipCreateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraServersDetachEipCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraServersDetachEipCreate(ctx context.Context, id openapi_types.UUID, params *InfraServersDetachEipCreateParams, body InfraServersDetachEipCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraServersDetachEipCreateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraServersDetachEipCreateParams, body InfraServersDetachEipCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraServersDetachPrivateIpCreate request with any body
	InfraServersDetachPrivateIpCreateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraServersDetachPrivateIpCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraServersDetachPrivateIpCreate(ctx context.Context, id openapi_types.UUID, params *InfraServersDetachPrivateIpCreateParams, body InfraServersDetachPrivateIpCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraServersDetachPrivateIpCreateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraServersDetachPrivateIpCreateParams, body InfraServersDetachPrivateIpCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraServersDetachVolumeCreate request with any body
	InfraServersDetachVolumeCreateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraServersDetachVolumeCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraServersDetachVolumeCreate(ctx context.Context, id openapi_types.UUID, params *InfraServersDetachVolumeCreateParams, body InfraServersDetachVolumeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraServersDetachVolumeCreateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraServersDetachVolumeCreateParams, body InfraServersDetachVolumeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraServersMetricsRetrieve request
	InfraServersMetricsRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraServersMetricsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraServersResizeCreate request with any body
	InfraServersResizeCreateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraServersResizeCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraServersResizeCreate(ctx context.Context, id openapi_types.UUID, params *InfraServersResizeCreateParams, body InfraServersResizeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraServersResizeCreateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraServersResizeCreateParams, body InfraServersResizeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraServersStartCreate request
	InfraServersStartCreate(ctx context.Context, id openapi_types.UUID, params *InfraServersStartCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraServersStopCreate request
	InfraServersStopCreate(ctx context.Context, id openapi_types.UUID, params *InfraServersStopCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraSnapshotpolicyList request
	InfraSnapshotpolicyList(ctx context.Context, params *InfraSnapshotpolicyListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraSnapshotpolicyCreate request with any body
	InfraSnapshotpolicyCreateWithBody(ctx context.Context, params *InfraSnapshotpolicyCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraSnapshotpolicyCreate(ctx context.Context, params *InfraSnapshotpolicyCreateParams, body InfraSnapshotpolicyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraSnapshotpolicyCreateWithFormdataBody(ctx context.Context, params *InfraSnapshotpolicyCreateParams, body InfraSnapshotpolicyCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraSnapshotpolicyDestroy request
	InfraSnapshotpolicyDestroy(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotpolicyDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraSnapshotpolicyRetrieve request
	InfraSnapshotpolicyRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotpolicyRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraSnapshotpolicyPartialUpdate request with any body
	InfraSnapshotpolicyPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotpolicyPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraSnapshotpolicyPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotpolicyPartialUpdateParams, body InfraSnapshotpolicyPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraSnapshotpolicyPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotpolicyPartialUpdateParams, body InfraSnapshotpolicyPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraSnapshotpolicyUpdate request with any body
	InfraSnapshotpolicyUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotpolicyUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraSnapshotpolicyUpdate(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotpolicyUpdateParams, body InfraSnapshotpolicyUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraSnapshotpolicyUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotpolicyUpdateParams, body InfraSnapshotpolicyUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraSnapshotsList request
	InfraSnapshotsList(ctx context.Context, params *InfraSnapshotsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraSnapshotsCreate request with any body
	InfraSnapshotsCreateWithBody(ctx context.Context, params *InfraSnapshotsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraSnapshotsCreate(ctx context.Context, params *InfraSnapshotsCreateParams, body InfraSnapshotsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraSnapshotsCreateWithFormdataBody(ctx context.Context, params *InfraSnapshotsCreateParams, body InfraSnapshotsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraSnapshotsDestroy request
	InfraSnapshotsDestroy(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotsDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraSnapshotsRetrieve request
	InfraSnapshotsRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraSnapshotsPartialUpdate request with any body
	InfraSnapshotsPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraSnapshotsPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotsPartialUpdateParams, body InfraSnapshotsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraSnapshotsPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotsPartialUpdateParams, body InfraSnapshotsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraSnapshotsUpdate request with any body
	InfraSnapshotsUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraSnapshotsUpdate(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotsUpdateParams, body InfraSnapshotsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraSnapshotsUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotsUpdateParams, body InfraSnapshotsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraSubnetsList request
	InfraSubnetsList(ctx context.Context, params *InfraSubnetsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraSubnetsCreate request with any body
	InfraSubnetsCreateWithBody(ctx context.Context, params *InfraSubnetsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraSubnetsCreate(ctx context.Context, params *InfraSubnetsCreateParams, body InfraSubnetsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraSubnetsCreateWithFormdataBody(ctx context.Context, params *InfraSubnetsCreateParams, body InfraSubnetsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraSubnetsDestroy request
	InfraSubnetsDestroy(ctx context.Context, id openapi_types.UUID, params *InfraSubnetsDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraSubnetsRetrieve request
	InfraSubnetsRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraSubnetsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraSubnetsPartialUpdate request with any body
	InfraSubnetsPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraSubnetsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraSubnetsPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraSubnetsPartialUpdateParams, body InfraSubnetsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraSubnetsPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraSubnetsPartialUpdateParams, body InfraSubnetsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraSubnetsUpdate request with any body
	InfraSubnetsUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraSubnetsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraSubnetsUpdate(ctx context.Context, id openapi_types.UUID, params *InfraSubnetsUpdateParams, body InfraSubnetsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraSubnetsUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraSubnetsUpdateParams, body InfraSubnetsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraVolumeBackupPoliciesList request
	InfraVolumeBackupPoliciesList(ctx context.Context, params *InfraVolumeBackupPoliciesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraVolumeBackupPoliciesCreate request with any body
	InfraVolumeBackupPoliciesCreateWithBody(ctx context.Context, params *InfraVolumeBackupPoliciesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraVolumeBackupPoliciesCreate(ctx context.Context, params *InfraVolumeBackupPoliciesCreateParams, body InfraVolumeBackupPoliciesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraVolumeBackupPoliciesCreateWithFormdataBody(ctx context.Context, params *InfraVolumeBackupPoliciesCreateParams, body InfraVolumeBackupPoliciesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraVolumeBackupPoliciesDestroy request
	InfraVolumeBackupPoliciesDestroy(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupPoliciesDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraVolumeBackupPoliciesRetrieve request
	InfraVolumeBackupPoliciesRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupPoliciesRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraVolumeBackupPoliciesPartialUpdate request with any body
	InfraVolumeBackupPoliciesPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupPoliciesPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraVolumeBackupPoliciesPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupPoliciesPartialUpdateParams, body InfraVolumeBackupPoliciesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraVolumeBackupPoliciesPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupPoliciesPartialUpdateParams, body InfraVolumeBackupPoliciesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraVolumeBackupPoliciesUpdate request with any body
	InfraVolumeBackupPoliciesUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupPoliciesUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraVolumeBackupPoliciesUpdate(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupPoliciesUpdateParams, body InfraVolumeBackupPoliciesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraVolumeBackupPoliciesUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupPoliciesUpdateParams, body InfraVolumeBackupPoliciesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraVolumeBackupsList request
	InfraVolumeBackupsList(ctx context.Context, params *InfraVolumeBackupsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraVolumeBackupsCreate request with any body
	InfraVolumeBackupsCreateWithBody(ctx context.Context, params *InfraVolumeBackupsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraVolumeBackupsCreate(ctx context.Context, params *InfraVolumeBackupsCreateParams, body InfraVolumeBackupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraVolumeBackupsCreateWithFormdataBody(ctx context.Context, params *InfraVolumeBackupsCreateParams, body InfraVolumeBackupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraVolumeBackupsDestroy request
	InfraVolumeBackupsDestroy(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraVolumeBackupsRetrieve request
	InfraVolumeBackupsRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraVolumeBackupsPartialUpdate request with any body
	InfraVolumeBackupsPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraVolumeBackupsPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsPartialUpdateParams, body InfraVolumeBackupsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraVolumeBackupsPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsPartialUpdateParams, body InfraVolumeBackupsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraVolumeBackupsUpdate request with any body
	InfraVolumeBackupsUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraVolumeBackupsUpdate(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsUpdateParams, body InfraVolumeBackupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraVolumeBackupsUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsUpdateParams, body InfraVolumeBackupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraVolumeBackupsRestoreCreate request with any body
	InfraVolumeBackupsRestoreCreateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsRestoreCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraVolumeBackupsRestoreCreate(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsRestoreCreateParams, body InfraVolumeBackupsRestoreCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraVolumeBackupsRestoreCreateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsRestoreCreateParams, body InfraVolumeBackupsRestoreCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraVolumeTypeList request
	InfraVolumeTypeList(ctx context.Context, params *InfraVolumeTypeListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraVolumeTypeCreate request with any body
	InfraVolumeTypeCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraVolumeTypeCreate(ctx context.Context, body InfraVolumeTypeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraVolumeTypeCreateWithFormdataBody(ctx context.Context, body InfraVolumeTypeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraVolumeTypeDestroy request
	InfraVolumeTypeDestroy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraVolumeTypeRetrieve request
	InfraVolumeTypeRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraVolumeTypePartialUpdate request with any body
	InfraVolumeTypePartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraVolumeTypePartialUpdate(ctx context.Context, id openapi_types.UUID, body InfraVolumeTypePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraVolumeTypePartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body InfraVolumeTypePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraVolumeTypeUpdate request with any body
	InfraVolumeTypeUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraVolumeTypeUpdate(ctx context.Context, id openapi_types.UUID, body InfraVolumeTypeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraVolumeTypeUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body InfraVolumeTypeUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraVolumesList request
	InfraVolumesList(ctx context.Context, params *InfraVolumesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraVolumesCreate request with any body
	InfraVolumesCreateWithBody(ctx context.Context, params *InfraVolumesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraVolumesCreate(ctx context.Context, params *InfraVolumesCreateParams, body InfraVolumesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraVolumesCreateWithFormdataBody(ctx context.Context, params *InfraVolumesCreateParams, body InfraVolumesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraVolumesDestroy request
	InfraVolumesDestroy(ctx context.Context, id openapi_types.UUID, params *InfraVolumesDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraVolumesRetrieve request
	InfraVolumesRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraVolumesRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraVolumesPartialUpdate request with any body
	InfraVolumesPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumesPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraVolumesPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraVolumesPartialUpdateParams, body InfraVolumesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraVolumesPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumesPartialUpdateParams, body InfraVolumesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraVolumesUpdate request with any body
	InfraVolumesUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumesUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraVolumesUpdate(ctx context.Context, id openapi_types.UUID, params *InfraVolumesUpdateParams, body InfraVolumesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraVolumesUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumesUpdateParams, body InfraVolumesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraVolumesApplyBackupPolicyCreate request with any body
	InfraVolumesApplyBackupPolicyCreateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumesApplyBackupPolicyCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraVolumesApplyBackupPolicyCreate(ctx context.Context, id openapi_types.UUID, params *InfraVolumesApplyBackupPolicyCreateParams, body InfraVolumesApplyBackupPolicyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraVolumesApplyBackupPolicyCreateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumesApplyBackupPolicyCreateParams, body InfraVolumesApplyBackupPolicyCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraVolumesApplySnapshotPolicyCreate request with any body
	InfraVolumesApplySnapshotPolicyCreateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumesApplySnapshotPolicyCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraVolumesApplySnapshotPolicyCreate(ctx context.Context, id openapi_types.UUID, params *InfraVolumesApplySnapshotPolicyCreateParams, body InfraVolumesApplySnapshotPolicyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraVolumesApplySnapshotPolicyCreateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumesApplySnapshotPolicyCreateParams, body InfraVolumesApplySnapshotPolicyCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraVolumesExtendCreate request with any body
	InfraVolumesExtendCreateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumesExtendCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraVolumesExtendCreate(ctx context.Context, id openapi_types.UUID, params *InfraVolumesExtendCreateParams, body InfraVolumesExtendCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraVolumesExtendCreateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumesExtendCreateParams, body InfraVolumesExtendCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraVolumesUnapplyBackupPolicyCreate request
	InfraVolumesUnapplyBackupPolicyCreate(ctx context.Context, id openapi_types.UUID, params *InfraVolumesUnapplyBackupPolicyCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraVolumesUnapplySnapshotPolicyCreate request
	InfraVolumesUnapplySnapshotPolicyCreate(ctx context.Context, id openapi_types.UUID, params *InfraVolumesUnapplySnapshotPolicyCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraVpcsList request
	InfraVpcsList(ctx context.Context, params *InfraVpcsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraVpcsCreate request with any body
	InfraVpcsCreateWithBody(ctx context.Context, params *InfraVpcsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraVpcsCreate(ctx context.Context, params *InfraVpcsCreateParams, body InfraVpcsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraVpcsCreateWithFormdataBody(ctx context.Context, params *InfraVpcsCreateParams, body InfraVpcsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraVpcsDestroy request
	InfraVpcsDestroy(ctx context.Context, id openapi_types.UUID, params *InfraVpcsDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraVpcsRetrieve request
	InfraVpcsRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraVpcsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraVpcsPartialUpdate request with any body
	InfraVpcsPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraVpcsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraVpcsPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraVpcsPartialUpdateParams, body InfraVpcsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraVpcsPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraVpcsPartialUpdateParams, body InfraVpcsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfraVpcsUpdate request with any body
	InfraVpcsUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraVpcsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraVpcsUpdate(ctx context.Context, id openapi_types.UUID, params *InfraVpcsUpdateParams, body InfraVpcsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	InfraVpcsUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraVpcsUpdateParams, body InfraVpcsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProjectUserAccept request with any body
	ProjectUserAcceptWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProjectUserAccept(ctx context.Context, body ProjectUserAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProjectUserAcceptWithFormdataBody(ctx context.Context, body ProjectUserAcceptFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProjectUserInvite request with any body
	ProjectUserInviteWithBody(ctx context.Context, params *ProjectUserInviteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProjectUserInvite(ctx context.Context, params *ProjectUserInviteParams, body ProjectUserInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProjectUserInviteWithFormdataBody(ctx context.Context, params *ProjectUserInviteParams, body ProjectUserInviteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasBackupPlansList request
	KaasBackupPlansList(ctx context.Context, params *KaasBackupPlansListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasBackupPlansCreate request with any body
	KaasBackupPlansCreateWithBody(ctx context.Context, params *KaasBackupPlansCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	KaasBackupPlansCreate(ctx context.Context, params *KaasBackupPlansCreateParams, body KaasBackupPlansCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	KaasBackupPlansCreateWithFormdataBody(ctx context.Context, params *KaasBackupPlansCreateParams, body KaasBackupPlansCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasBackupPlansDestroy request
	KaasBackupPlansDestroy(ctx context.Context, id openapi_types.UUID, params *KaasBackupPlansDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasBackupPlansRetrieve request
	KaasBackupPlansRetrieve(ctx context.Context, id openapi_types.UUID, params *KaasBackupPlansRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasBackupPlansPartialUpdate request with any body
	KaasBackupPlansPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *KaasBackupPlansPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	KaasBackupPlansPartialUpdate(ctx context.Context, id openapi_types.UUID, params *KaasBackupPlansPartialUpdateParams, body KaasBackupPlansPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	KaasBackupPlansPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *KaasBackupPlansPartialUpdateParams, body KaasBackupPlansPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasBackupPlansUpdate request with any body
	KaasBackupPlansUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *KaasBackupPlansUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	KaasBackupPlansUpdate(ctx context.Context, id openapi_types.UUID, params *KaasBackupPlansUpdateParams, body KaasBackupPlansUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	KaasBackupPlansUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *KaasBackupPlansUpdateParams, body KaasBackupPlansUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasBackupsList request
	KaasBackupsList(ctx context.Context, params *KaasBackupsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasBackupsCreate request with any body
	KaasBackupsCreateWithBody(ctx context.Context, params *KaasBackupsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	KaasBackupsCreate(ctx context.Context, params *KaasBackupsCreateParams, body KaasBackupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	KaasBackupsCreateWithFormdataBody(ctx context.Context, params *KaasBackupsCreateParams, body KaasBackupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasBackupsDestroy request
	KaasBackupsDestroy(ctx context.Context, id openapi_types.UUID, params *KaasBackupsDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasBackupsRetrieve request
	KaasBackupsRetrieve(ctx context.Context, id openapi_types.UUID, params *KaasBackupsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasBackupsPartialUpdate request with any body
	KaasBackupsPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *KaasBackupsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	KaasBackupsPartialUpdate(ctx context.Context, id openapi_types.UUID, params *KaasBackupsPartialUpdateParams, body KaasBackupsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	KaasBackupsPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *KaasBackupsPartialUpdateParams, body KaasBackupsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasBackupsUpdate request with any body
	KaasBackupsUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *KaasBackupsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	KaasBackupsUpdate(ctx context.Context, id openapi_types.UUID, params *KaasBackupsUpdateParams, body KaasBackupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	KaasBackupsUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *KaasBackupsUpdateParams, body KaasBackupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasCniVersionsList request
	KaasCniVersionsList(ctx context.Context, params *KaasCniVersionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasCniVersionsRetrieve request
	KaasCniVersionsRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasCsiVersionsList request
	KaasCsiVersionsList(ctx context.Context, params *KaasCsiVersionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasCsiVersionsRetrieve request
	KaasCsiVersionsRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasDashboardVersionsList request
	KaasDashboardVersionsList(ctx context.Context, params *KaasDashboardVersionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasDashboardVersionsRetrieve request
	KaasDashboardVersionsRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasK8sVersionsList request
	KaasK8sVersionsList(ctx context.Context, params *KaasK8sVersionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasK8sVersionsRetrieve request
	KaasK8sVersionsRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasRestoresList request
	KaasRestoresList(ctx context.Context, params *KaasRestoresListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasRestoresCreate request with any body
	KaasRestoresCreateWithBody(ctx context.Context, params *KaasRestoresCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	KaasRestoresCreate(ctx context.Context, params *KaasRestoresCreateParams, body KaasRestoresCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	KaasRestoresCreateWithFormdataBody(ctx context.Context, params *KaasRestoresCreateParams, body KaasRestoresCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasRestoresDestroy request
	KaasRestoresDestroy(ctx context.Context, id openapi_types.UUID, params *KaasRestoresDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasRestoresRetrieve request
	KaasRestoresRetrieve(ctx context.Context, id openapi_types.UUID, params *KaasRestoresRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasRestoresPartialUpdate request with any body
	KaasRestoresPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *KaasRestoresPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	KaasRestoresPartialUpdate(ctx context.Context, id openapi_types.UUID, params *KaasRestoresPartialUpdateParams, body KaasRestoresPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	KaasRestoresPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *KaasRestoresPartialUpdateParams, body KaasRestoresPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasRestoresUpdate request with any body
	KaasRestoresUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *KaasRestoresUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	KaasRestoresUpdate(ctx context.Context, id openapi_types.UUID, params *KaasRestoresUpdateParams, body KaasRestoresUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	KaasRestoresUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *KaasRestoresUpdateParams, body KaasRestoresUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasVkeClustersList request
	KaasVkeClustersList(ctx context.Context, params *KaasVkeClustersListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasVkeClustersCreate request with any body
	KaasVkeClustersCreateWithBody(ctx context.Context, params *KaasVkeClustersCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	KaasVkeClustersCreate(ctx context.Context, params *KaasVkeClustersCreateParams, body KaasVkeClustersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	KaasVkeClustersCreateWithFormdataBody(ctx context.Context, params *KaasVkeClustersCreateParams, body KaasVkeClustersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasVkeClustersDestroy request
	KaasVkeClustersDestroy(ctx context.Context, id openapi_types.UUID, params *KaasVkeClustersDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasVkeClustersRetrieve request
	KaasVkeClustersRetrieve(ctx context.Context, id openapi_types.UUID, params *KaasVkeClustersRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasVkeClustersPartialUpdate request with any body
	KaasVkeClustersPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *KaasVkeClustersPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	KaasVkeClustersPartialUpdate(ctx context.Context, id openapi_types.UUID, params *KaasVkeClustersPartialUpdateParams, body KaasVkeClustersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	KaasVkeClustersPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *KaasVkeClustersPartialUpdateParams, body KaasVkeClustersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasVkeClustersUpdate request with any body
	KaasVkeClustersUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *KaasVkeClustersUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	KaasVkeClustersUpdate(ctx context.Context, id openapi_types.UUID, params *KaasVkeClustersUpdateParams, body KaasVkeClustersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	KaasVkeClustersUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *KaasVkeClustersUpdateParams, body KaasVkeClustersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasVkeKubeconfigsRetrieve request
	KaasVkeKubeconfigsRetrieve(ctx context.Context, id openapi_types.UUID, params *KaasVkeKubeconfigsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasVkeKubedashboardsRetrieve request
	KaasVkeKubedashboardsRetrieve(ctx context.Context, id openapi_types.UUID, params *KaasVkeKubedashboardsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasVkeMachinesList request
	KaasVkeMachinesList(ctx context.Context, params *KaasVkeMachinesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasVkeNodePoolsList request
	KaasVkeNodePoolsList(ctx context.Context, params *KaasVkeNodePoolsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasVkeNodePoolsCreate request with any body
	KaasVkeNodePoolsCreateWithBody(ctx context.Context, params *KaasVkeNodePoolsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	KaasVkeNodePoolsCreate(ctx context.Context, params *KaasVkeNodePoolsCreateParams, body KaasVkeNodePoolsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	KaasVkeNodePoolsCreateWithFormdataBody(ctx context.Context, params *KaasVkeNodePoolsCreateParams, body KaasVkeNodePoolsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasVkeNodePoolsDestroy request
	KaasVkeNodePoolsDestroy(ctx context.Context, id openapi_types.UUID, params *KaasVkeNodePoolsDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasVkeNodePoolsRetrieve request
	KaasVkeNodePoolsRetrieve(ctx context.Context, id openapi_types.UUID, params *KaasVkeNodePoolsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasVkeNodePoolsPartialUpdate request with any body
	KaasVkeNodePoolsPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *KaasVkeNodePoolsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	KaasVkeNodePoolsPartialUpdate(ctx context.Context, id openapi_types.UUID, params *KaasVkeNodePoolsPartialUpdateParams, body KaasVkeNodePoolsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	KaasVkeNodePoolsPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *KaasVkeNodePoolsPartialUpdateParams, body KaasVkeNodePoolsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasVkeNodePoolsUpdate request with any body
	KaasVkeNodePoolsUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *KaasVkeNodePoolsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	KaasVkeNodePoolsUpdate(ctx context.Context, id openapi_types.UUID, params *KaasVkeNodePoolsUpdateParams, body KaasVkeNodePoolsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	KaasVkeNodePoolsUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *KaasVkeNodePoolsUpdateParams, body KaasVkeNodePoolsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KaasVkeWebcliRetrieve request
	KaasVkeWebcliRetrieve(ctx context.Context, id openapi_types.UUID, params *KaasVkeWebcliRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarketplaceCategoriesList request
	MarketplaceCategoriesList(ctx context.Context, params *MarketplaceCategoriesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarketplaceCategoriesCreate request with any body
	MarketplaceCategoriesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MarketplaceCategoriesCreate(ctx context.Context, body MarketplaceCategoriesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	MarketplaceCategoriesCreateWithFormdataBody(ctx context.Context, body MarketplaceCategoriesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarketplaceCategoriesRetrieve request
	MarketplaceCategoriesRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarketplaceCategoriesPartialUpdate request with any body
	MarketplaceCategoriesPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MarketplaceCategoriesPartialUpdate(ctx context.Context, id openapi_types.UUID, body MarketplaceCategoriesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	MarketplaceCategoriesPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body MarketplaceCategoriesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarketplacePricingPlansList request
	MarketplacePricingPlansList(ctx context.Context, params *MarketplacePricingPlansListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarketplacePricingPlansCreate request with any body
	MarketplacePricingPlansCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MarketplacePricingPlansCreate(ctx context.Context, body MarketplacePricingPlansCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	MarketplacePricingPlansCreateWithFormdataBody(ctx context.Context, body MarketplacePricingPlansCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarketplacePricingPlansRetrieve request
	MarketplacePricingPlansRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarketplacePricingPlansPartialUpdate request with any body
	MarketplacePricingPlansPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MarketplacePricingPlansPartialUpdate(ctx context.Context, id openapi_types.UUID, body MarketplacePricingPlansPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	MarketplacePricingPlansPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body MarketplacePricingPlansPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarketplaceProductsList request
	MarketplaceProductsList(ctx context.Context, params *MarketplaceProductsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarketplaceProductsCreate request with any body
	MarketplaceProductsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MarketplaceProductsCreate(ctx context.Context, body MarketplaceProductsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	MarketplaceProductsCreateWithFormdataBody(ctx context.Context, body MarketplaceProductsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarketplaceProductsRetrieve request
	MarketplaceProductsRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarketplaceProductsPartialUpdate request with any body
	MarketplaceProductsPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MarketplaceProductsPartialUpdate(ctx context.Context, id openapi_types.UUID, body MarketplaceProductsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	MarketplaceProductsPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body MarketplaceProductsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarketplaceSubscriptionsList request
	MarketplaceSubscriptionsList(ctx context.Context, params *MarketplaceSubscriptionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarketplaceSubscriptionsCreate request with any body
	MarketplaceSubscriptionsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MarketplaceSubscriptionsCreate(ctx context.Context, body MarketplaceSubscriptionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	MarketplaceSubscriptionsCreateWithFormdataBody(ctx context.Context, body MarketplaceSubscriptionsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarketplaceSubscriptionsDestroy request
	MarketplaceSubscriptionsDestroy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarketplaceSubscriptionsRetrieve request
	MarketplaceSubscriptionsRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarketplaceVendorsList request
	MarketplaceVendorsList(ctx context.Context, params *MarketplaceVendorsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarketplaceVendorsCreate request with any body
	MarketplaceVendorsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MarketplaceVendorsCreate(ctx context.Context, body MarketplaceVendorsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	MarketplaceVendorsCreateWithFormdataBody(ctx context.Context, body MarketplaceVendorsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarketplaceVendorsRetrieve request
	MarketplaceVendorsRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarketplaceVendorsPartialUpdate request with any body
	MarketplaceVendorsPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MarketplaceVendorsPartialUpdate(ctx context.Context, id openapi_types.UUID, body MarketplaceVendorsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	MarketplaceVendorsPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body MarketplaceVendorsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ObjectStorageActivateServiceCreate request
	ObjectStorageActivateServiceCreate(ctx context.Context, params *ObjectStorageActivateServiceCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ObjectStorageBucketsList request
	ObjectStorageBucketsList(ctx context.Context, params *ObjectStorageBucketsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ObjectStorageBucketsCreate request with any body
	ObjectStorageBucketsCreateWithBody(ctx context.Context, params *ObjectStorageBucketsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ObjectStorageBucketsCreate(ctx context.Context, params *ObjectStorageBucketsCreateParams, body ObjectStorageBucketsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ObjectStorageBucketsCreateWithFormdataBody(ctx context.Context, params *ObjectStorageBucketsCreateParams, body ObjectStorageBucketsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BucketAclShow request
	BucketAclShow(ctx context.Context, bucketName string, params *BucketAclShowParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BucketAclPatch request with any body
	BucketAclPatchWithBody(ctx context.Context, bucketName string, params *BucketAclPatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BucketAclPatch(ctx context.Context, bucketName string, params *BucketAclPatchParams, body BucketAclPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	BucketAclPatchWithFormdataBody(ctx context.Context, bucketName string, params *BucketAclPatchParams, body BucketAclPatchFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BucketCorsDelete request
	BucketCorsDelete(ctx context.Context, bucketName string, params *BucketCorsDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BucketCorsShow request
	BucketCorsShow(ctx context.Context, bucketName string, params *BucketCorsShowParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BucketCorsEdit request with any body
	BucketCorsEditWithBody(ctx context.Context, bucketName string, params *BucketCorsEditParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BucketCorsEdit(ctx context.Context, bucketName string, params *BucketCorsEditParams, body BucketCorsEditJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	BucketCorsEditWithFormdataBody(ctx context.Context, bucketName string, params *BucketCorsEditParams, body BucketCorsEditFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BucketLifecycleDelete request
	BucketLifecycleDelete(ctx context.Context, bucketName string, params *BucketLifecycleDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BucketLifecycleList request
	BucketLifecycleList(ctx context.Context, bucketName string, params *BucketLifecycleListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BucketLifecyclePut request with any body
	BucketLifecyclePutWithBody(ctx context.Context, bucketName string, params *BucketLifecyclePutParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BucketLifecyclePut(ctx context.Context, bucketName string, params *BucketLifecyclePutParams, body BucketLifecyclePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	BucketLifecyclePutWithFormdataBody(ctx context.Context, bucketName string, params *BucketLifecyclePutParams, body BucketLifecyclePutFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BucketObjectList request
	BucketObjectList(ctx context.Context, bucketName string, params *BucketObjectListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFolderGetAwsTokenUploadFile request with any body
	CreateFolderGetAwsTokenUploadFileWithBody(ctx context.Context, bucketName string, params *CreateFolderGetAwsTokenUploadFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFolderGetAwsTokenUploadFile(ctx context.Context, bucketName string, params *CreateFolderGetAwsTokenUploadFileParams, body CreateFolderGetAwsTokenUploadFileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFolderGetAwsTokenUploadFileWithFormdataBody(ctx context.Context, bucketName string, params *CreateFolderGetAwsTokenUploadFileParams, body CreateFolderGetAwsTokenUploadFileFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObjectAcl request
	GetObjectAcl(ctx context.Context, bucketName string, objectName string, params *GetObjectAclParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchObjectAcl request with any body
	PatchObjectAclWithBody(ctx context.Context, bucketName string, objectName string, params *PatchObjectAclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchObjectAcl(ctx context.Context, bucketName string, objectName string, params *PatchObjectAclParams, body PatchObjectAclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchObjectAclWithFormdataBody(ctx context.Context, bucketName string, objectName string, params *PatchObjectAclParams, body PatchObjectAclFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ObjectBatchDelete request with any body
	ObjectBatchDeleteWithBody(ctx context.Context, bucketName string, params *ObjectBatchDeleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ObjectBatchDelete(ctx context.Context, bucketName string, params *ObjectBatchDeleteParams, body ObjectBatchDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ObjectBatchDeleteWithFormdataBody(ctx context.Context, bucketName string, params *ObjectBatchDeleteParams, body ObjectBatchDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteObject request
	DeleteObject(ctx context.Context, bucketName string, objectName string, params *DeleteObjectParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ObjectDetails request
	ObjectDetails(ctx context.Context, bucketName string, objectName string, params *ObjectDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObjectShareUrl request
	GetObjectShareUrl(ctx context.Context, bucketName string, objectName string, params *GetObjectShareUrlParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAllObjectTags request
	DeleteAllObjectTags(ctx context.Context, bucketName string, objectName string, params *DeleteAllObjectTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObjectTags request
	GetObjectTags(ctx context.Context, bucketName string, objectName string, params *GetObjectTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutObjectTags request with any body
	PutObjectTagsWithBody(ctx context.Context, bucketName string, objectName string, params *PutObjectTagsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutObjectTags(ctx context.Context, bucketName string, objectName string, params *PutObjectTagsParams, body PutObjectTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutObjectTagsWithFormdataBody(ctx context.Context, bucketName string, objectName string, params *PutObjectTagsParams, body PutObjectTagsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BucketPolicyDelete request
	BucketPolicyDelete(ctx context.Context, bucketName string, params *BucketPolicyDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BucketPolicyGet request
	BucketPolicyGet(ctx context.Context, bucketName string, params *BucketPolicyGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BucketPolicyPut request with any body
	BucketPolicyPutWithBody(ctx context.Context, bucketName string, params *BucketPolicyPutParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BucketPolicyPut(ctx context.Context, bucketName string, params *BucketPolicyPutParams, body BucketPolicyPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	BucketPolicyPutWithFormdataBody(ctx context.Context, bucketName string, params *BucketPolicyPutParams, body BucketPolicyPutFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BucketStaticWebDelete request
	BucketStaticWebDelete(ctx context.Context, bucketName string, params *BucketStaticWebDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BucketStaticWebCreate request
	BucketStaticWebCreate(ctx context.Context, bucketName string, params *BucketStaticWebCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BucketStaticWebShow request with any body
	BucketStaticWebShowWithBody(ctx context.Context, bucketName string, params *BucketStaticWebShowParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BucketStaticWebShow(ctx context.Context, bucketName string, params *BucketStaticWebShowParams, body BucketStaticWebShowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	BucketStaticWebShowWithFormdataBody(ctx context.Context, bucketName string, params *BucketStaticWebShowParams, body BucketStaticWebShowFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBucketTags request
	DeleteBucketTags(ctx context.Context, bucketName string, params *DeleteBucketTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBucketTags request
	GetBucketTags(ctx context.Context, bucketName string, params *GetBucketTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBucketTags request with any body
	PutBucketTagsWithBody(ctx context.Context, bucketName string, params *PutBucketTagsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBucketTags(ctx context.Context, bucketName string, params *PutBucketTagsParams, body PutBucketTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBucketTagsWithFormdataBody(ctx context.Context, bucketName string, params *PutBucketTagsParams, body PutBucketTagsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BucketVersioningShow request
	BucketVersioningShow(ctx context.Context, bucketName string, params *BucketVersioningShowParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BucketVersioningAction request with any body
	BucketVersioningActionWithBody(ctx context.Context, bucketName string, params *BucketVersioningActionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BucketVersioningAction(ctx context.Context, bucketName string, params *BucketVersioningActionParams, body BucketVersioningActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	BucketVersioningActionWithFormdataBody(ctx context.Context, bucketName string, params *BucketVersioningActionParams, body BucketVersioningActionFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BucketObjectVersionList request
	BucketObjectVersionList(ctx context.Context, bucketName string, params *BucketObjectVersionListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObjectVersionAcl request
	GetObjectVersionAcl(ctx context.Context, bucketName string, objectName string, params *GetObjectVersionAclParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchObjectVersionAcl request with any body
	PatchObjectVersionAclWithBody(ctx context.Context, bucketName string, objectName string, params *PatchObjectVersionAclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchObjectVersionAcl(ctx context.Context, bucketName string, objectName string, params *PatchObjectVersionAclParams, body PatchObjectVersionAclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchObjectVersionAclWithFormdataBody(ctx context.Context, bucketName string, objectName string, params *PatchObjectVersionAclParams, body PatchObjectVersionAclFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ObjectVersionBatchDelete request with any body
	ObjectVersionBatchDeleteWithBody(ctx context.Context, bucketName string, params *ObjectVersionBatchDeleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ObjectVersionBatchDelete(ctx context.Context, bucketName string, params *ObjectVersionBatchDeleteParams, body ObjectVersionBatchDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ObjectVersionBatchDeleteWithFormdataBody(ctx context.Context, bucketName string, params *ObjectVersionBatchDeleteParams, body ObjectVersionBatchDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteObjectVersion request
	DeleteObjectVersion(ctx context.Context, bucketName string, objectName string, params *DeleteObjectVersionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ObjectVersionDetails request
	ObjectVersionDetails(ctx context.Context, bucketName string, objectName string, params *ObjectVersionDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ObjectVersionRestore request
	ObjectVersionRestore(ctx context.Context, bucketName string, objectName string, params *ObjectVersionRestoreParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObjectVersionShareUrl request
	GetObjectVersionShareUrl(ctx context.Context, bucketName string, objectName string, params *GetObjectVersionShareUrlParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAllObjectVersionTags request
	DeleteAllObjectVersionTags(ctx context.Context, bucketName string, objectName string, params *DeleteAllObjectVersionTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObjectVersionTags request
	GetObjectVersionTags(ctx context.Context, bucketName string, objectName string, params *GetObjectVersionTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutObjectVersionTags request with any body
	PutObjectVersionTagsWithBody(ctx context.Context, bucketName string, objectName string, params *PutObjectVersionTagsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutObjectVersionTags(ctx context.Context, bucketName string, objectName string, params *PutObjectVersionTagsParams, body PutObjectVersionTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutObjectVersionTagsWithFormdataBody(ctx context.Context, bucketName string, objectName string, params *PutObjectVersionTagsParams, body PutObjectVersionTagsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ObjectStorageBucketsDestroy request
	ObjectStorageBucketsDestroy(ctx context.Context, id openapi_types.UUID, params *ObjectStorageBucketsDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ObjectStorageBucketsRetrieve request
	ObjectStorageBucketsRetrieve(ctx context.Context, id openapi_types.UUID, params *ObjectStorageBucketsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// S3KeyList request
	S3KeyList(ctx context.Context, params *S3KeyListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// S3KeyCreate request
	S3KeyCreate(ctx context.Context, params *S3KeyCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// S3KeyDelete request
	S3KeyDelete(ctx context.Context, accessKey string, params *S3KeyDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StorageClassList request
	StorageClassList(ctx context.Context, params *StorageClassListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationRegionsList request
	OrganizationRegionsList(ctx context.Context, params *OrganizationRegionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationRegionsRetrieve request
	OrganizationRegionsRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationZonesList request
	OrganizationZonesList(ctx context.Context, params *OrganizationZonesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationZonesRetrieve request
	OrganizationZonesRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlanTemplateObjectStoragesList request
	PlanTemplateObjectStoragesList(ctx context.Context, params *PlanTemplateObjectStoragesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlanTemplateObjectStoragesRetrieve request
	PlanTemplateObjectStoragesRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlanTemplateServersList request
	PlanTemplateServersList(ctx context.Context, params *PlanTemplateServersListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlanTemplateServersRetrieve request
	PlanTemplateServersRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlanTemplateVolumesList request
	PlanTemplateVolumesList(ctx context.Context, params *PlanTemplateVolumesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlanTemplateVolumesRetrieve request
	PlanTemplateVolumesRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlanCustomersCacheInfoCreate request with any body
	PlanCustomersCacheInfoCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PlanCustomersCacheInfoCreate(ctx context.Context, body PlanCustomersCacheInfoCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PlanCustomersCacheInfoCreateWithFormdataBody(ctx context.Context, body PlanCustomersCacheInfoCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlanCustomersCustomerTypesList request
	PlanCustomersCustomerTypesList(ctx context.Context, params *PlanCustomersCustomerTypesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlanCustomersDistrictsList request
	PlanCustomersDistrictsList(ctx context.Context, params *PlanCustomersDistrictsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlanCustomersGetInfoRetrieve request
	PlanCustomersGetInfoRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlanCustomersGroupTypesList request
	PlanCustomersGroupTypesList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlanCustomersPrecinctsList request
	PlanCustomersPrecinctsList(ctx context.Context, params *PlanCustomersPrecinctsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlanCustomersProvincesList request
	PlanCustomersProvincesList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlanCustomersUploadIdCreate request with any body
	PlanCustomersUploadIdCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PlanCustomersUploadIdCreate(ctx context.Context, body PlanCustomersUploadIdCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PlanCustomersUploadIdCreateWithFormdataBody(ctx context.Context, body PlanCustomersUploadIdCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlanObjectStoragesList request
	PlanObjectStoragesList(ctx context.Context, params *PlanObjectStoragesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlanObjectStoragesRetrieve request
	PlanObjectStoragesRetrieve(ctx context.Context, id openapi_types.UUID, params *PlanObjectStoragesRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlanOrdersList request
	PlanOrdersList(ctx context.Context, params *PlanOrdersListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlanOrdersCreate request with any body
	PlanOrdersCreateWithBody(ctx context.Context, params *PlanOrdersCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PlanOrdersCreate(ctx context.Context, params *PlanOrdersCreateParams, body PlanOrdersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PlanOrdersCreateWithFormdataBody(ctx context.Context, params *PlanOrdersCreateParams, body PlanOrdersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlanOrdersCalculatePriceCreate request with any body
	PlanOrdersCalculatePriceCreateWithBody(ctx context.Context, params *PlanOrdersCalculatePriceCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PlanOrdersCalculatePriceCreate(ctx context.Context, params *PlanOrdersCalculatePriceCreateParams, body PlanOrdersCalculatePriceCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PlanOrdersCalculatePriceCreateWithFormdataBody(ctx context.Context, params *PlanOrdersCalculatePriceCreateParams, body PlanOrdersCalculatePriceCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlanOrdersPreviewContractCreate request with any body
	PlanOrdersPreviewContractCreateWithBody(ctx context.Context, params *PlanOrdersPreviewContractCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PlanOrdersPreviewContractCreate(ctx context.Context, params *PlanOrdersPreviewContractCreateParams, body PlanOrdersPreviewContractCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PlanOrdersPreviewContractCreateWithFormdataBody(ctx context.Context, params *PlanOrdersPreviewContractCreateParams, body PlanOrdersPreviewContractCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlanOrdersRetrieve request
	PlanOrdersRetrieve(ctx context.Context, id openapi_types.UUID, params *PlanOrdersRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlanOrdersCancelCreate request
	PlanOrdersCancelCreate(ctx context.Context, id openapi_types.UUID, params *PlanOrdersCancelCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlanOrdersInvoiceRetrieve request
	PlanOrdersInvoiceRetrieve(ctx context.Context, id openapi_types.UUID, params *PlanOrdersInvoiceRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlanServersList request
	PlanServersList(ctx context.Context, params *PlanServersListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlanServersRetrieve request
	PlanServersRetrieve(ctx context.Context, id openapi_types.UUID, params *PlanServersRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlanVolumesList request
	PlanVolumesList(ctx context.Context, params *PlanVolumesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlanVolumesRetrieve request
	PlanVolumesRetrieve(ctx context.Context, id openapi_types.UUID, params *PlanVolumesRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecretManagerSecretsList request
	SecretManagerSecretsList(ctx context.Context, params *SecretManagerSecretsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecretManagerSecretsCreate request with any body
	SecretManagerSecretsCreateWithBody(ctx context.Context, params *SecretManagerSecretsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SecretManagerSecretsCreate(ctx context.Context, params *SecretManagerSecretsCreateParams, body SecretManagerSecretsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	SecretManagerSecretsCreateWithFormdataBody(ctx context.Context, params *SecretManagerSecretsCreateParams, body SecretManagerSecretsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecretManagerSecretsDestroy request
	SecretManagerSecretsDestroy(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecretManagerSecretsRetrieve request
	SecretManagerSecretsRetrieve(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecretManagerSecretsPartialUpdate request with any body
	SecretManagerSecretsPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SecretManagerSecretsPartialUpdate(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsPartialUpdateParams, body SecretManagerSecretsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	SecretManagerSecretsPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsPartialUpdateParams, body SecretManagerSecretsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecretManagerSecretsUpdate request with any body
	SecretManagerSecretsUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SecretManagerSecretsUpdate(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsUpdateParams, body SecretManagerSecretsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	SecretManagerSecretsUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsUpdateParams, body SecretManagerSecretsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecretManagerSecretsMetadataRetrieve request
	SecretManagerSecretsMetadataRetrieve(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsMetadataRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecretManagerSecretsMetadataCreate request with any body
	SecretManagerSecretsMetadataCreateWithBody(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsMetadataCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SecretManagerSecretsMetadataCreate(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsMetadataCreateParams, body SecretManagerSecretsMetadataCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	SecretManagerSecretsMetadataCreateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsMetadataCreateParams, body SecretManagerSecretsMetadataCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ServiceCatalogFavoriteServicesList request
	ServiceCatalogFavoriteServicesList(ctx context.Context, params *ServiceCatalogFavoriteServicesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ServiceCatalogFavoriteServicesCreate request with any body
	ServiceCatalogFavoriteServicesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ServiceCatalogFavoriteServicesCreate(ctx context.Context, body ServiceCatalogFavoriteServicesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ServiceCatalogFavoriteServicesCreateWithFormdataBody(ctx context.Context, body ServiceCatalogFavoriteServicesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ServiceCatalogFavoriteServicesDestroy request
	ServiceCatalogFavoriteServicesDestroy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ServiceCatalogFavoriteServicesRetrieve request
	ServiceCatalogFavoriteServicesRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ServiceCatalogServicesList request
	ServiceCatalogServicesList(ctx context.Context, params *ServiceCatalogServicesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ServiceCatalogServicesCreate request with any body
	ServiceCatalogServicesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ServiceCatalogServicesCreate(ctx context.Context, body ServiceCatalogServicesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ServiceCatalogServicesCreateWithFormdataBody(ctx context.Context, body ServiceCatalogServicesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ServiceCatalogServicesUsingServicesRetrieve request
	ServiceCatalogServicesUsingServicesRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ServiceCatalogServicesDestroy request
	ServiceCatalogServicesDestroy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ServiceCatalogServicesRetrieve request
	ServiceCatalogServicesRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ServiceCatalogServicesPartialUpdate request with any body
	ServiceCatalogServicesPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ServiceCatalogServicesPartialUpdate(ctx context.Context, id openapi_types.UUID, body ServiceCatalogServicesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ServiceCatalogServicesPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body ServiceCatalogServicesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ServiceCatalogServicesUpdate request with any body
	ServiceCatalogServicesUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ServiceCatalogServicesUpdate(ctx context.Context, id openapi_types.UUID, body ServiceCatalogServicesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ServiceCatalogServicesUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body ServiceCatalogServicesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SupportQuestionsList request
	SupportQuestionsList(ctx context.Context, params *SupportQuestionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SupportQuestionsCreate request with any body
	SupportQuestionsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SupportQuestionsCreate(ctx context.Context, body SupportQuestionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	SupportQuestionsCreateWithFormdataBody(ctx context.Context, body SupportQuestionsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SupportQuestionsRetrieve request
	SupportQuestionsRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SupportQuestionsPartialUpdate request with any body
	SupportQuestionsPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SupportQuestionsPartialUpdate(ctx context.Context, id openapi_types.UUID, body SupportQuestionsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	SupportQuestionsPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body SupportQuestionsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TenantProjectUsersList request
	TenantProjectUsersList(ctx context.Context, params *TenantProjectUsersListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TenantProjectUsersDestroy request
	TenantProjectUsersDestroy(ctx context.Context, id openapi_types.UUID, params *TenantProjectUsersDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TenantProjectUsersRetrieve request
	TenantProjectUsersRetrieve(ctx context.Context, id openapi_types.UUID, params *TenantProjectUsersRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TenantProjectUsersPartialUpdate request with any body
	TenantProjectUsersPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *TenantProjectUsersPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TenantProjectUsersPartialUpdate(ctx context.Context, id openapi_types.UUID, params *TenantProjectUsersPartialUpdateParams, body TenantProjectUsersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TenantProjectUsersPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *TenantProjectUsersPartialUpdateParams, body TenantProjectUsersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TenantProjectUsersUpdate request with any body
	TenantProjectUsersUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *TenantProjectUsersUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TenantProjectUsersUpdate(ctx context.Context, id openapi_types.UUID, params *TenantProjectUsersUpdateParams, body TenantProjectUsersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TenantProjectUsersUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *TenantProjectUsersUpdateParams, body TenantProjectUsersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TenantProjectsList request
	TenantProjectsList(ctx context.Context, params *TenantProjectsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TenantProjectsCreate request with any body
	TenantProjectsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TenantProjectsCreate(ctx context.Context, body TenantProjectsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TenantProjectsCreateWithFormdataBody(ctx context.Context, body TenantProjectsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TenantProjectsDestroy request
	TenantProjectsDestroy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TenantProjectsRetrieve request
	TenantProjectsRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TenantProjectsPartialUpdate request with any body
	TenantProjectsPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TenantProjectsPartialUpdate(ctx context.Context, id openapi_types.UUID, body TenantProjectsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TenantProjectsPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body TenantProjectsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TenantProjectsUpdate request with any body
	TenantProjectsUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TenantProjectsUpdate(ctx context.Context, id openapi_types.UUID, body TenantProjectsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TenantProjectsUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body TenantProjectsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TenantProjectsServicesRetrieve request
	TenantProjectsServicesRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TenantUsersList request
	TenantUsersList(ctx context.Context, params *TenantUsersListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TenantUsersCurrentUserRetrieve request
	TenantUsersCurrentUserRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TenantUsersRetrieve request
	TenantUsersRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TenantUsersPartialUpdate request with any body
	TenantUsersPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TenantUsersPartialUpdate(ctx context.Context, id openapi_types.UUID, body TenantUsersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TenantUsersPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body TenantUsersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TenantUsersUpdate request with any body
	TenantUsersUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TenantUsersUpdate(ctx context.Context, id openapi_types.UUID, body TenantUsersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TenantUsersUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body TenantUsersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AlarmAlarmsList(ctx context.Context, params *AlarmAlarmsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlarmAlarmsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlarmAlarmsCreateWithBody(ctx context.Context, params *AlarmAlarmsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlarmAlarmsCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlarmAlarmsCreate(ctx context.Context, params *AlarmAlarmsCreateParams, body AlarmAlarmsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlarmAlarmsCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlarmAlarmsCreateWithFormdataBody(ctx context.Context, params *AlarmAlarmsCreateParams, body AlarmAlarmsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlarmAlarmsCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlarmAlarmsDestroy(ctx context.Context, id openapi_types.UUID, params *AlarmAlarmsDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlarmAlarmsDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlarmAlarmsRetrieve(ctx context.Context, id openapi_types.UUID, params *AlarmAlarmsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlarmAlarmsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlarmAlarmsPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *AlarmAlarmsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlarmAlarmsPartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlarmAlarmsPartialUpdate(ctx context.Context, id openapi_types.UUID, params *AlarmAlarmsPartialUpdateParams, body AlarmAlarmsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlarmAlarmsPartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlarmAlarmsPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *AlarmAlarmsPartialUpdateParams, body AlarmAlarmsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlarmAlarmsPartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlarmAlarmsUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *AlarmAlarmsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlarmAlarmsUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlarmAlarmsUpdate(ctx context.Context, id openapi_types.UUID, params *AlarmAlarmsUpdateParams, body AlarmAlarmsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlarmAlarmsUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlarmAlarmsUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *AlarmAlarmsUpdateParams, body AlarmAlarmsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlarmAlarmsUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsOrdersPurchaseCallbackCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsOrdersPurchaseCallbackCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsOrdersPurchaseCallbackCreate(ctx context.Context, body BccsOrdersPurchaseCallbackCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsOrdersPurchaseCallbackCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsOrdersPurchaseCallbackCreateWithFormdataBody(ctx context.Context, body BccsOrdersPurchaseCallbackCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsOrdersPurchaseCallbackCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansBackupList(ctx context.Context, params *BccsPlansBackupListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansBackupListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansBackupCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansBackupCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansBackupCreate(ctx context.Context, body BccsPlansBackupCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansBackupCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansBackupCreateWithFormdataBody(ctx context.Context, body BccsPlansBackupCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansBackupCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansBackupRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansBackupRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansContainerRegistryList(ctx context.Context, params *BccsPlansContainerRegistryListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansContainerRegistryListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansContainerRegistryCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansContainerRegistryCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansContainerRegistryCreate(ctx context.Context, body BccsPlansContainerRegistryCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansContainerRegistryCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansContainerRegistryCreateWithFormdataBody(ctx context.Context, body BccsPlansContainerRegistryCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansContainerRegistryCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansContainerRegistryRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansContainerRegistryRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansFileStorageList(ctx context.Context, params *BccsPlansFileStorageListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansFileStorageListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansFileStorageCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansFileStorageCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansFileStorageCreate(ctx context.Context, body BccsPlansFileStorageCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansFileStorageCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansFileStorageCreateWithFormdataBody(ctx context.Context, body BccsPlansFileStorageCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansFileStorageCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansFileStorageRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansFileStorageRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansK8sClusterList(ctx context.Context, params *BccsPlansK8sClusterListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansK8sClusterListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansK8sClusterCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansK8sClusterCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansK8sClusterCreate(ctx context.Context, body BccsPlansK8sClusterCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansK8sClusterCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansK8sClusterCreateWithFormdataBody(ctx context.Context, body BccsPlansK8sClusterCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansK8sClusterCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansK8sClusterRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansK8sClusterRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansLoadBalancingList(ctx context.Context, params *BccsPlansLoadBalancingListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansLoadBalancingListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansLoadBalancingCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansLoadBalancingCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansLoadBalancingCreate(ctx context.Context, body BccsPlansLoadBalancingCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansLoadBalancingCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansLoadBalancingCreateWithFormdataBody(ctx context.Context, body BccsPlansLoadBalancingCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansLoadBalancingCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansLoadBalancingRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansLoadBalancingRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansObjectStorageList(ctx context.Context, params *BccsPlansObjectStorageListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansObjectStorageListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansObjectStorageCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansObjectStorageCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansObjectStorageCreate(ctx context.Context, body BccsPlansObjectStorageCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansObjectStorageCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansObjectStorageCreateWithFormdataBody(ctx context.Context, body BccsPlansObjectStorageCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansObjectStorageCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansObjectStorageRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansObjectStorageRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansServerList(ctx context.Context, params *BccsPlansServerListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansServerListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansServerCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansServerCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansServerCreate(ctx context.Context, body BccsPlansServerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansServerCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansServerCreateWithFormdataBody(ctx context.Context, body BccsPlansServerCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansServerCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansServerRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansServerRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansVolumeList(ctx context.Context, params *BccsPlansVolumeListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansVolumeListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansVolumeCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansVolumeCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansVolumeCreate(ctx context.Context, body BccsPlansVolumeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansVolumeCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansVolumeCreateWithFormdataBody(ctx context.Context, body BccsPlansVolumeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansVolumeCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsPlansVolumeRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsPlansVolumeRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsUsersList(ctx context.Context, params *BccsUsersListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsUsersListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsUsersCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsUsersCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsUsersCreate(ctx context.Context, body BccsUsersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsUsersCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsUsersCreateWithFormdataBody(ctx context.Context, body BccsUsersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsUsersCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsUsersRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsUsersRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsUsersProjectsRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsUsersProjectsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BccsVolumesList(ctx context.Context, params *BccsVolumesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBccsVolumesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContainerRegistryCliSecretRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContainerRegistryCliSecretRetrieveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContainerRegistryImagesList(ctx context.Context, params *ContainerRegistryImagesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContainerRegistryImagesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContainerRegistryImagesDestroy(ctx context.Context, imageName string, params *ContainerRegistryImagesDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContainerRegistryImagesDestroyRequest(c.Server, imageName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContainerRegistryImagesRetrieve(ctx context.Context, imageName string, params *ContainerRegistryImagesRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContainerRegistryImagesRetrieveRequest(c.Server, imageName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContainerRegistryImagesArtifactsList(ctx context.Context, imageName string, params *ContainerRegistryImagesArtifactsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContainerRegistryImagesArtifactsListRequest(c.Server, imageName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContainerRegistryImagesArtifactsDestroy(ctx context.Context, imageName string, reference string, params *ContainerRegistryImagesArtifactsDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContainerRegistryImagesArtifactsDestroyRequest(c.Server, imageName, reference, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContainerRegistryImagesArtifactsRetrieve(ctx context.Context, imageName string, reference string, params *ContainerRegistryImagesArtifactsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContainerRegistryImagesArtifactsRetrieveRequest(c.Server, imageName, reference, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContainerRegistryImagesArtifactsBuildHistoryRetrieve(ctx context.Context, imageName string, reference string, params *ContainerRegistryImagesArtifactsBuildHistoryRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContainerRegistryImagesArtifactsBuildHistoryRetrieveRequest(c.Server, imageName, reference, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContainerRegistryImagesArtifactsScanCreate(ctx context.Context, imageName string, reference string, params *ContainerRegistryImagesArtifactsScanCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContainerRegistryImagesArtifactsScanCreateRequest(c.Server, imageName, reference, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContainerRegistryImagesArtifactsTagsRetrieve(ctx context.Context, imageName string, reference string, params *ContainerRegistryImagesArtifactsTagsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContainerRegistryImagesArtifactsTagsRetrieveRequest(c.Server, imageName, reference, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContainerRegistryImagesArtifactsTagsDestroy(ctx context.Context, imageName string, reference string, tagName string, params *ContainerRegistryImagesArtifactsTagsDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContainerRegistryImagesArtifactsTagsDestroyRequest(c.Server, imageName, reference, tagName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContainerRegistryImagesArtifactsVulnerabilitiesRetrieve(ctx context.Context, imageName string, reference string, params *ContainerRegistryImagesArtifactsVulnerabilitiesRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContainerRegistryImagesArtifactsVulnerabilitiesRetrieveRequest(c.Server, imageName, reference, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContainerRegistryLogsRetrieve(ctx context.Context, params *ContainerRegistryLogsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContainerRegistryLogsRetrieveRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContainerRegistryQuotaRetrieve(ctx context.Context, params *ContainerRegistryQuotaRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContainerRegistryQuotaRetrieveRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasDbInstanceBackupsList(ctx context.Context, params *DbaasDbInstanceBackupsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasDbInstanceBackupsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasDbInstanceBackupsCreateWithBody(ctx context.Context, params *DbaasDbInstanceBackupsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasDbInstanceBackupsCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasDbInstanceBackupsCreate(ctx context.Context, params *DbaasDbInstanceBackupsCreateParams, body DbaasDbInstanceBackupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasDbInstanceBackupsCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasDbInstanceBackupsCreateWithFormdataBody(ctx context.Context, params *DbaasDbInstanceBackupsCreateParams, body DbaasDbInstanceBackupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasDbInstanceBackupsCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasDbInstanceBackupsDestroy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasDbInstanceBackupsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasDbInstanceBackupsRetrieve(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstanceBackupsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasDbInstanceBackupsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasDbInstancesList(ctx context.Context, params *DbaasDbInstancesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasDbInstancesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasDbInstancesCreateWithBody(ctx context.Context, params *DbaasDbInstancesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasDbInstancesCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasDbInstancesCreate(ctx context.Context, params *DbaasDbInstancesCreateParams, body DbaasDbInstancesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasDbInstancesCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasDbInstancesCreateWithFormdataBody(ctx context.Context, params *DbaasDbInstancesCreateParams, body DbaasDbInstancesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasDbInstancesCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasDbInstancesDestroy(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasDbInstancesDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasDbInstancesRetrieve(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasDbInstancesRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasDbInstancesExtendVolumeSizePartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesExtendVolumeSizePartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasDbInstancesExtendVolumeSizePartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasDbInstancesExtendVolumeSizePartialUpdate(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesExtendVolumeSizePartialUpdateParams, body DbaasDbInstancesExtendVolumeSizePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasDbInstancesExtendVolumeSizePartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasDbInstancesExtendVolumeSizePartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesExtendVolumeSizePartialUpdateParams, body DbaasDbInstancesExtendVolumeSizePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasDbInstancesExtendVolumeSizePartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasDbInstancesUpdateBackupPolicyPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateBackupPolicyPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasDbInstancesUpdateBackupPolicyPartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasDbInstancesUpdateBackupPolicyPartialUpdate(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateBackupPolicyPartialUpdateParams, body DbaasDbInstancesUpdateBackupPolicyPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasDbInstancesUpdateBackupPolicyPartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasDbInstancesUpdateBackupPolicyPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateBackupPolicyPartialUpdateParams, body DbaasDbInstancesUpdateBackupPolicyPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasDbInstancesUpdateBackupPolicyPartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasDbInstancesUpdateFlavorPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateFlavorPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasDbInstancesUpdateFlavorPartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasDbInstancesUpdateFlavorPartialUpdate(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateFlavorPartialUpdateParams, body DbaasDbInstancesUpdateFlavorPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasDbInstancesUpdateFlavorPartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasDbInstancesUpdateFlavorPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateFlavorPartialUpdateParams, body DbaasDbInstancesUpdateFlavorPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasDbInstancesUpdateFlavorPartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdate(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateParams, body DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateParams, body DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasDbInstancesUpdateRootPasswordPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateRootPasswordPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasDbInstancesUpdateRootPasswordPartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasDbInstancesUpdateRootPasswordPartialUpdate(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateRootPasswordPartialUpdateParams, body DbaasDbInstancesUpdateRootPasswordPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasDbInstancesUpdateRootPasswordPartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasDbInstancesUpdateRootPasswordPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateRootPasswordPartialUpdateParams, body DbaasDbInstancesUpdateRootPasswordPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasDbInstancesUpdateRootPasswordPartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasDbVersionsList(ctx context.Context, params *DbaasDbVersionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasDbVersionsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasDbVersionsRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasDbVersionsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasDbaasFlavorsList(ctx context.Context, params *DbaasDbaasFlavorsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasDbaasFlavorsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasDbaasFlavorsRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasDbaasFlavorsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasDbaasRegionsList(ctx context.Context, params *DbaasDbaasRegionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasDbaasRegionsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasDbaasRegionsRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasDbaasRegionsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasDbaasVolumeTypesList(ctx context.Context, params *DbaasDbaasVolumeTypesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasDbaasVolumeTypesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasDbaasVolumeTypesRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasDbaasVolumeTypesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasDbaasZonesList(ctx context.Context, params *DbaasDbaasZonesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasDbaasZonesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasDbaasZonesRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasDbaasZonesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasFlavorMappingsList(ctx context.Context, params *DbaasFlavorMappingsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasFlavorMappingsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasFlavorMappingsRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasFlavorMappingsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasVolumeTypeMappingsList(ctx context.Context, params *DbaasVolumeTypeMappingsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasVolumeTypeMappingsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DbaasVolumeTypeMappingsRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDbaasVolumeTypeMappingsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingActionList(ctx context.Context, params *InfraAutoScalingScalingActionListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingActionListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingGroupList(ctx context.Context, params *InfraAutoScalingScalingGroupListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingGroupListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingGroupCreateWithBody(ctx context.Context, params *InfraAutoScalingScalingGroupCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingGroupCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingGroupCreate(ctx context.Context, params *InfraAutoScalingScalingGroupCreateParams, body InfraAutoScalingScalingGroupCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingGroupCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingGroupCreateWithFormdataBody(ctx context.Context, params *InfraAutoScalingScalingGroupCreateParams, body InfraAutoScalingScalingGroupCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingGroupCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingGroupMetricsSchemaRetrieve(ctx context.Context, params *InfraAutoScalingScalingGroupMetricsSchemaRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingGroupMetricsSchemaRetrieveRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingGroupDestroy(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingGroupDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingGroupDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingGroupRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingGroupRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingGroupRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingGroupPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingGroupPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingGroupPartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingGroupPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingGroupPartialUpdateParams, body InfraAutoScalingScalingGroupPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingGroupPartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingGroupPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingGroupPartialUpdateParams, body InfraAutoScalingScalingGroupPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingGroupPartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingGroupUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingGroupUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingGroupUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingGroupUpdate(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingGroupUpdateParams, body InfraAutoScalingScalingGroupUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingGroupUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingGroupUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingGroupUpdateParams, body InfraAutoScalingScalingGroupUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingGroupUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingGroupMetricsRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingGroupMetricsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingGroupMetricsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingPolicyList(ctx context.Context, params *InfraAutoScalingScalingPolicyListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingPolicyListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingPolicyCreateWithBody(ctx context.Context, params *InfraAutoScalingScalingPolicyCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingPolicyCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingPolicyCreate(ctx context.Context, params *InfraAutoScalingScalingPolicyCreateParams, body InfraAutoScalingScalingPolicyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingPolicyCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingPolicyCreateWithFormdataBody(ctx context.Context, params *InfraAutoScalingScalingPolicyCreateParams, body InfraAutoScalingScalingPolicyCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingPolicyCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingPolicyDestroy(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingPolicyDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingPolicyRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingPolicyRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingPolicyPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingPolicyPartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingPolicyPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyPartialUpdateParams, body InfraAutoScalingScalingPolicyPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingPolicyPartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingPolicyPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyPartialUpdateParams, body InfraAutoScalingScalingPolicyPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingPolicyPartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingPolicyUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingPolicyUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingPolicyUpdate(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyUpdateParams, body InfraAutoScalingScalingPolicyUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingPolicyUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingPolicyUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyUpdateParams, body InfraAutoScalingScalingPolicyUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingPolicyUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingQueryList(ctx context.Context, params *InfraAutoScalingScalingQueryListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingQueryListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingQueryCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingQueryCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingQueryCreate(ctx context.Context, body InfraAutoScalingScalingQueryCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingQueryCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingQueryCreateWithFormdataBody(ctx context.Context, body InfraAutoScalingScalingQueryCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingQueryCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingQueryDestroy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingQueryDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingScheduleList(ctx context.Context, params *InfraAutoScalingScalingScheduleListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingScheduleListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingScheduleCreateWithBody(ctx context.Context, params *InfraAutoScalingScalingScheduleCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingScheduleCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingScheduleCreate(ctx context.Context, params *InfraAutoScalingScalingScheduleCreateParams, body InfraAutoScalingScalingScheduleCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingScheduleCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingScheduleCreateWithFormdataBody(ctx context.Context, params *InfraAutoScalingScalingScheduleCreateParams, body InfraAutoScalingScalingScheduleCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingScheduleCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingScheduleDestroy(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingScheduleDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingScheduleDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingScheduleRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingScheduleRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingScheduleRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingSchedulePartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingSchedulePartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingSchedulePartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingSchedulePartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingSchedulePartialUpdateParams, body InfraAutoScalingScalingSchedulePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingSchedulePartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingSchedulePartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingSchedulePartialUpdateParams, body InfraAutoScalingScalingSchedulePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingSchedulePartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingScheduleUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingScheduleUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingScheduleUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingScheduleUpdate(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingScheduleUpdateParams, body InfraAutoScalingScalingScheduleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingScheduleUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingScheduleUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingScheduleUpdateParams, body InfraAutoScalingScalingScheduleUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingScheduleUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraAutoScalingScalingServerList(ctx context.Context, params *InfraAutoScalingScalingServerListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraAutoScalingScalingServerListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraCertificateList(ctx context.Context, params *InfraCertificateListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraCertificateListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraCertificateCreateWithBody(ctx context.Context, params *InfraCertificateCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraCertificateCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraCertificateCreate(ctx context.Context, params *InfraCertificateCreateParams, body InfraCertificateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraCertificateCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraCertificateCreateWithFormdataBody(ctx context.Context, params *InfraCertificateCreateParams, body InfraCertificateCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraCertificateCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraCertificateDestroy(ctx context.Context, id openapi_types.UUID, params *InfraCertificateDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraCertificateDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraCertificateRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraCertificateRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraCertificateRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraCertificatePartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraCertificatePartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraCertificatePartialUpdate(ctx context.Context, id openapi_types.UUID, body InfraCertificatePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraCertificatePartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraCertificatePartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body InfraCertificatePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraCertificatePartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraCertificateUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraCertificateUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraCertificateUpdate(ctx context.Context, id openapi_types.UUID, body InfraCertificateUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraCertificateUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraCertificateUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body InfraCertificateUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraCertificateUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraElasticIpsList(ctx context.Context, params *InfraElasticIpsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraElasticIpsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraElasticIpsCreateWithBody(ctx context.Context, params *InfraElasticIpsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraElasticIpsCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraElasticIpsCreate(ctx context.Context, params *InfraElasticIpsCreateParams, body InfraElasticIpsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraElasticIpsCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraElasticIpsCreateWithFormdataBody(ctx context.Context, params *InfraElasticIpsCreateParams, body InfraElasticIpsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraElasticIpsCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraElasticIpsDestroy(ctx context.Context, id openapi_types.UUID, params *InfraElasticIpsDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraElasticIpsDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraElasticIpsRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraElasticIpsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraElasticIpsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemAccessRulesList(ctx context.Context, params *InfraFilesystemAccessRulesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemAccessRulesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemAccessRulesCreateWithBody(ctx context.Context, params *InfraFilesystemAccessRulesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemAccessRulesCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemAccessRulesCreate(ctx context.Context, params *InfraFilesystemAccessRulesCreateParams, body InfraFilesystemAccessRulesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemAccessRulesCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemAccessRulesCreateWithFormdataBody(ctx context.Context, params *InfraFilesystemAccessRulesCreateParams, body InfraFilesystemAccessRulesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemAccessRulesCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemAccessRulesDestroy(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemAccessRulesDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemAccessRulesDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemAccessRulesRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemAccessRulesRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemAccessRulesRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemAccessRulesPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemAccessRulesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemAccessRulesPartialUpdate(ctx context.Context, id openapi_types.UUID, body InfraFilesystemAccessRulesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemAccessRulesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemAccessRulesPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body InfraFilesystemAccessRulesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemAccessRulesPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemAccessRulesUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemAccessRulesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemAccessRulesUpdate(ctx context.Context, id openapi_types.UUID, body InfraFilesystemAccessRulesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemAccessRulesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemAccessRulesUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body InfraFilesystemAccessRulesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemAccessRulesUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemSnapshotPoliciesList(ctx context.Context, params *InfraFilesystemSnapshotPoliciesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemSnapshotPoliciesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemSnapshotPoliciesCreateWithBody(ctx context.Context, params *InfraFilesystemSnapshotPoliciesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemSnapshotPoliciesCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemSnapshotPoliciesCreate(ctx context.Context, params *InfraFilesystemSnapshotPoliciesCreateParams, body InfraFilesystemSnapshotPoliciesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemSnapshotPoliciesCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemSnapshotPoliciesCreateWithFormdataBody(ctx context.Context, params *InfraFilesystemSnapshotPoliciesCreateParams, body InfraFilesystemSnapshotPoliciesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemSnapshotPoliciesCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemSnapshotPoliciesDestroy(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemSnapshotPoliciesDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemSnapshotPoliciesRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemSnapshotPoliciesRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemSnapshotPoliciesPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemSnapshotPoliciesPartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemSnapshotPoliciesPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesPartialUpdateParams, body InfraFilesystemSnapshotPoliciesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemSnapshotPoliciesPartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemSnapshotPoliciesPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesPartialUpdateParams, body InfraFilesystemSnapshotPoliciesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemSnapshotPoliciesPartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemSnapshotPoliciesUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemSnapshotPoliciesUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemSnapshotPoliciesUpdate(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesUpdateParams, body InfraFilesystemSnapshotPoliciesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemSnapshotPoliciesUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemSnapshotPoliciesUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesUpdateParams, body InfraFilesystemSnapshotPoliciesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemSnapshotPoliciesUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemSnapshotsList(ctx context.Context, params *InfraFilesystemSnapshotsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemSnapshotsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemSnapshotsCreateWithBody(ctx context.Context, params *InfraFilesystemSnapshotsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemSnapshotsCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemSnapshotsCreate(ctx context.Context, params *InfraFilesystemSnapshotsCreateParams, body InfraFilesystemSnapshotsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemSnapshotsCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemSnapshotsCreateWithFormdataBody(ctx context.Context, params *InfraFilesystemSnapshotsCreateParams, body InfraFilesystemSnapshotsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemSnapshotsCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemSnapshotsDestroy(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotsDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemSnapshotsDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemSnapshotsRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemSnapshotsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemSnapshotsPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemSnapshotsPartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemSnapshotsPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotsPartialUpdateParams, body InfraFilesystemSnapshotsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemSnapshotsPartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemSnapshotsPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotsPartialUpdateParams, body InfraFilesystemSnapshotsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemSnapshotsPartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemSnapshotsUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemSnapshotsUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemSnapshotsUpdate(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotsUpdateParams, body InfraFilesystemSnapshotsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemSnapshotsUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemSnapshotsUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotsUpdateParams, body InfraFilesystemSnapshotsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemSnapshotsUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemTypesList(ctx context.Context, params *InfraFilesystemTypesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemTypesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemTypesRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemTypesRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemTypesRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemsList(ctx context.Context, params *InfraFilesystemsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemsCreateWithBody(ctx context.Context, params *InfraFilesystemsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemsCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemsCreate(ctx context.Context, params *InfraFilesystemsCreateParams, body InfraFilesystemsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemsCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemsCreateWithFormdataBody(ctx context.Context, params *InfraFilesystemsCreateParams, body InfraFilesystemsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemsCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemsDestroy(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemsDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemsRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemsPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemsPartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemsPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsPartialUpdateParams, body InfraFilesystemsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemsPartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemsPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsPartialUpdateParams, body InfraFilesystemsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemsPartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemsUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemsUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemsUpdate(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsUpdateParams, body InfraFilesystemsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemsUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemsUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsUpdateParams, body InfraFilesystemsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemsUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemsApplyPolicyCreateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsApplyPolicyCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemsApplyPolicyCreateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemsApplyPolicyCreate(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsApplyPolicyCreateParams, body InfraFilesystemsApplyPolicyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemsApplyPolicyCreateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemsApplyPolicyCreateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsApplyPolicyCreateParams, body InfraFilesystemsApplyPolicyCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemsApplyPolicyCreateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemsResizeCreateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsResizeCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemsResizeCreateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemsResizeCreate(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsResizeCreateParams, body InfraFilesystemsResizeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemsResizeCreateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemsResizeCreateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsResizeCreateParams, body InfraFilesystemsResizeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemsResizeCreateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemsStartMigrationCreateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsStartMigrationCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemsStartMigrationCreateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemsStartMigrationCreate(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsStartMigrationCreateParams, body InfraFilesystemsStartMigrationCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemsStartMigrationCreateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemsStartMigrationCreateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsStartMigrationCreateParams, body InfraFilesystemsStartMigrationCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemsStartMigrationCreateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFilesystemsUnapplyPolicyCreate(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsUnapplyPolicyCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFilesystemsUnapplyPolicyCreateRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFlavorsList(ctx context.Context, params *InfraFlavorsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFlavorsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFlavorsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFlavorsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFlavorsCreate(ctx context.Context, body InfraFlavorsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFlavorsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFlavorsCreateWithFormdataBody(ctx context.Context, body InfraFlavorsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFlavorsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFlavorsDestroy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFlavorsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFlavorsRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFlavorsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFlavorsPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFlavorsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFlavorsPartialUpdate(ctx context.Context, id openapi_types.UUID, body InfraFlavorsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFlavorsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFlavorsPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body InfraFlavorsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFlavorsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFlavorsUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFlavorsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFlavorsUpdate(ctx context.Context, id openapi_types.UUID, body InfraFlavorsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFlavorsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraFlavorsUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body InfraFlavorsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraFlavorsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraImagesList(ctx context.Context, params *InfraImagesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraImagesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraImagesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraImagesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraImagesCreate(ctx context.Context, body InfraImagesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraImagesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraImagesCreateWithFormdataBody(ctx context.Context, body InfraImagesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraImagesCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraImagesDestroy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraImagesDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraImagesRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraImagesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraImagesPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraImagesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraImagesPartialUpdate(ctx context.Context, id openapi_types.UUID, body InfraImagesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraImagesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraImagesPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body InfraImagesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraImagesPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraImagesUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraImagesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraImagesUpdate(ctx context.Context, id openapi_types.UUID, body InfraImagesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraImagesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraImagesUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body InfraImagesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraImagesUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraKeypairsList(ctx context.Context, params *InfraKeypairsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraKeypairsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraKeypairsCreateWithBody(ctx context.Context, params *InfraKeypairsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraKeypairsCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraKeypairsCreate(ctx context.Context, params *InfraKeypairsCreateParams, body InfraKeypairsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraKeypairsCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraKeypairsCreateWithFormdataBody(ctx context.Context, params *InfraKeypairsCreateParams, body InfraKeypairsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraKeypairsCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraKeypairsDestroy(ctx context.Context, id openapi_types.UUID, params *InfraKeypairsDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraKeypairsDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraKeypairsRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraKeypairsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraKeypairsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraKeypairsPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraKeypairsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraKeypairsPartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraKeypairsPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraKeypairsPartialUpdateParams, body InfraKeypairsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraKeypairsPartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraKeypairsPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraKeypairsPartialUpdateParams, body InfraKeypairsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraKeypairsPartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraKeypairsUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraKeypairsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraKeypairsUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraKeypairsUpdate(ctx context.Context, id openapi_types.UUID, params *InfraKeypairsUpdateParams, body InfraKeypairsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraKeypairsUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraKeypairsUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraKeypairsUpdateParams, body InfraKeypairsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraKeypairsUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLaunchTemplateList(ctx context.Context, params *InfraLaunchTemplateListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLaunchTemplateListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLaunchTemplateCreateWithBody(ctx context.Context, params *InfraLaunchTemplateCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLaunchTemplateCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLaunchTemplateCreate(ctx context.Context, params *InfraLaunchTemplateCreateParams, body InfraLaunchTemplateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLaunchTemplateCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLaunchTemplateCreateWithFormdataBody(ctx context.Context, params *InfraLaunchTemplateCreateParams, body InfraLaunchTemplateCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLaunchTemplateCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLaunchTemplateDestroy(ctx context.Context, id openapi_types.UUID, params *InfraLaunchTemplateDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLaunchTemplateDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLaunchTemplateRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraLaunchTemplateRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLaunchTemplateRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLaunchTemplatePartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraLaunchTemplatePartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLaunchTemplatePartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLaunchTemplatePartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraLaunchTemplatePartialUpdateParams, body InfraLaunchTemplatePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLaunchTemplatePartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLaunchTemplatePartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraLaunchTemplatePartialUpdateParams, body InfraLaunchTemplatePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLaunchTemplatePartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLaunchTemplateUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraLaunchTemplateUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLaunchTemplateUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLaunchTemplateUpdate(ctx context.Context, id openapi_types.UUID, params *InfraLaunchTemplateUpdateParams, body InfraLaunchTemplateUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLaunchTemplateUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLaunchTemplateUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraLaunchTemplateUpdateParams, body InfraLaunchTemplateUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLaunchTemplateUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingL7policyList(ctx context.Context, params *InfraLoadBalancingL7policyListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingL7policyListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingL7policyCreateWithBody(ctx context.Context, params *InfraLoadBalancingL7policyCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingL7policyCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingL7policyCreate(ctx context.Context, params *InfraLoadBalancingL7policyCreateParams, body InfraLoadBalancingL7policyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingL7policyCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingL7policyCreateWithFormdataBody(ctx context.Context, params *InfraLoadBalancingL7policyCreateParams, body InfraLoadBalancingL7policyCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingL7policyCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingL7policyDestroy(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7policyDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingL7policyDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingL7policyRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7policyRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingL7policyRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingL7policyPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7policyPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingL7policyPartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingL7policyPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7policyPartialUpdateParams, body InfraLoadBalancingL7policyPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingL7policyPartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingL7policyPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7policyPartialUpdateParams, body InfraLoadBalancingL7policyPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingL7policyPartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingL7policyUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7policyUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingL7policyUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingL7policyUpdate(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7policyUpdateParams, body InfraLoadBalancingL7policyUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingL7policyUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingL7policyUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7policyUpdateParams, body InfraLoadBalancingL7policyUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingL7policyUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingL7ruleList(ctx context.Context, params *InfraLoadBalancingL7ruleListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingL7ruleListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingL7ruleCreateWithBody(ctx context.Context, params *InfraLoadBalancingL7ruleCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingL7ruleCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingL7ruleCreate(ctx context.Context, params *InfraLoadBalancingL7ruleCreateParams, body InfraLoadBalancingL7ruleCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingL7ruleCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingL7ruleCreateWithFormdataBody(ctx context.Context, params *InfraLoadBalancingL7ruleCreateParams, body InfraLoadBalancingL7ruleCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingL7ruleCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingL7ruleDestroy(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7ruleDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingL7ruleDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingL7ruleRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7ruleRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingL7ruleRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingL7rulePartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7rulePartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingL7rulePartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingL7rulePartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7rulePartialUpdateParams, body InfraLoadBalancingL7rulePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingL7rulePartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingL7rulePartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7rulePartialUpdateParams, body InfraLoadBalancingL7rulePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingL7rulePartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingL7ruleUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7ruleUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingL7ruleUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingL7ruleUpdate(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7ruleUpdateParams, body InfraLoadBalancingL7ruleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingL7ruleUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingL7ruleUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7ruleUpdateParams, body InfraLoadBalancingL7ruleUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingL7ruleUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingListenerList(ctx context.Context, params *InfraLoadBalancingListenerListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingListenerListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingListenerCreateWithBody(ctx context.Context, params *InfraLoadBalancingListenerCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingListenerCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingListenerCreate(ctx context.Context, params *InfraLoadBalancingListenerCreateParams, body InfraLoadBalancingListenerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingListenerCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingListenerCreateWithFormdataBody(ctx context.Context, params *InfraLoadBalancingListenerCreateParams, body InfraLoadBalancingListenerCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingListenerCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingListenerMetricsSchemaRetrieve(ctx context.Context, params *InfraLoadBalancingListenerMetricsSchemaRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingListenerMetricsSchemaRetrieveRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingListenerDestroy(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingListenerDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingListenerDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingListenerRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingListenerRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingListenerRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingListenerPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingListenerPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingListenerPartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingListenerPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingListenerPartialUpdateParams, body InfraLoadBalancingListenerPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingListenerPartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingListenerPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingListenerPartialUpdateParams, body InfraLoadBalancingListenerPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingListenerPartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingListenerUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingListenerUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingListenerUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingListenerUpdate(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingListenerUpdateParams, body InfraLoadBalancingListenerUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingListenerUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingListenerUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingListenerUpdateParams, body InfraLoadBalancingListenerUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingListenerUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingListenerMetricsRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingListenerMetricsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingListenerMetricsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingLoadBalancerList(ctx context.Context, params *InfraLoadBalancingLoadBalancerListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingLoadBalancerListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingLoadBalancerCreateWithBody(ctx context.Context, params *InfraLoadBalancingLoadBalancerCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingLoadBalancerCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingLoadBalancerCreate(ctx context.Context, params *InfraLoadBalancingLoadBalancerCreateParams, body InfraLoadBalancingLoadBalancerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingLoadBalancerCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingLoadBalancerCreateWithFormdataBody(ctx context.Context, params *InfraLoadBalancingLoadBalancerCreateParams, body InfraLoadBalancingLoadBalancerCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingLoadBalancerCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingLoadBalancerMetricsSchemaRetrieve(ctx context.Context, params *InfraLoadBalancingLoadBalancerMetricsSchemaRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingLoadBalancerMetricsSchemaRetrieveRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingLoadBalancerDestroy(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingLoadBalancerDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingLoadBalancerRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingLoadBalancerRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingLoadBalancerPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingLoadBalancerPartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingLoadBalancerPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerPartialUpdateParams, body InfraLoadBalancingLoadBalancerPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingLoadBalancerPartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingLoadBalancerPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerPartialUpdateParams, body InfraLoadBalancingLoadBalancerPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingLoadBalancerPartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingLoadBalancerUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingLoadBalancerUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingLoadBalancerUpdate(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerUpdateParams, body InfraLoadBalancingLoadBalancerUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingLoadBalancerUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingLoadBalancerUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerUpdateParams, body InfraLoadBalancingLoadBalancerUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingLoadBalancerUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingLoadBalancerMetricsRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerMetricsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingLoadBalancerMetricsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingServerGroupMemberList(ctx context.Context, params *InfraLoadBalancingServerGroupMemberListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingServerGroupMemberListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingServerGroupMemberCreateWithBody(ctx context.Context, params *InfraLoadBalancingServerGroupMemberCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingServerGroupMemberCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingServerGroupMemberCreate(ctx context.Context, params *InfraLoadBalancingServerGroupMemberCreateParams, body InfraLoadBalancingServerGroupMemberCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingServerGroupMemberCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingServerGroupMemberCreateWithFormdataBody(ctx context.Context, params *InfraLoadBalancingServerGroupMemberCreateParams, body InfraLoadBalancingServerGroupMemberCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingServerGroupMemberCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingServerGroupMemberDestroy(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingServerGroupMemberDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingServerGroupMemberRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingServerGroupMemberRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingServerGroupMemberPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingServerGroupMemberPartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingServerGroupMemberPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberPartialUpdateParams, body InfraLoadBalancingServerGroupMemberPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingServerGroupMemberPartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingServerGroupMemberPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberPartialUpdateParams, body InfraLoadBalancingServerGroupMemberPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingServerGroupMemberPartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingServerGroupMemberUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingServerGroupMemberUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingServerGroupMemberUpdate(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberUpdateParams, body InfraLoadBalancingServerGroupMemberUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingServerGroupMemberUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingServerGroupMemberUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberUpdateParams, body InfraLoadBalancingServerGroupMemberUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingServerGroupMemberUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingServerGroupList(ctx context.Context, params *InfraLoadBalancingServerGroupListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingServerGroupListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingServerGroupCreateWithBody(ctx context.Context, params *InfraLoadBalancingServerGroupCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingServerGroupCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingServerGroupCreate(ctx context.Context, params *InfraLoadBalancingServerGroupCreateParams, body InfraLoadBalancingServerGroupCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingServerGroupCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingServerGroupCreateWithFormdataBody(ctx context.Context, params *InfraLoadBalancingServerGroupCreateParams, body InfraLoadBalancingServerGroupCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingServerGroupCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingServerGroupDestroy(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingServerGroupDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingServerGroupRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingServerGroupRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingServerGroupPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingServerGroupPartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingServerGroupPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupPartialUpdateParams, body InfraLoadBalancingServerGroupPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingServerGroupPartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingServerGroupPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupPartialUpdateParams, body InfraLoadBalancingServerGroupPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingServerGroupPartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingServerGroupUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingServerGroupUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingServerGroupUpdate(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupUpdateParams, body InfraLoadBalancingServerGroupUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingServerGroupUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraLoadBalancingServerGroupUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupUpdateParams, body InfraLoadBalancingServerGroupUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraLoadBalancingServerGroupUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraPlacementgroupsList(ctx context.Context, params *InfraPlacementgroupsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraPlacementgroupsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraPlacementgroupsCreateWithBody(ctx context.Context, params *InfraPlacementgroupsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraPlacementgroupsCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraPlacementgroupsCreate(ctx context.Context, params *InfraPlacementgroupsCreateParams, body InfraPlacementgroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraPlacementgroupsCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraPlacementgroupsCreateWithFormdataBody(ctx context.Context, params *InfraPlacementgroupsCreateParams, body InfraPlacementgroupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraPlacementgroupsCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraPlacementgroupsDestroy(ctx context.Context, id openapi_types.UUID, params *InfraPlacementgroupsDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraPlacementgroupsDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraPlacementgroupsRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraPlacementgroupsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraPlacementgroupsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraPlacementgroupsPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraPlacementgroupsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraPlacementgroupsPartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraPlacementgroupsPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraPlacementgroupsPartialUpdateParams, body InfraPlacementgroupsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraPlacementgroupsPartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraPlacementgroupsPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraPlacementgroupsPartialUpdateParams, body InfraPlacementgroupsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraPlacementgroupsPartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraPlacementgroupsUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraPlacementgroupsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraPlacementgroupsUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraPlacementgroupsUpdate(ctx context.Context, id openapi_types.UUID, params *InfraPlacementgroupsUpdateParams, body InfraPlacementgroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraPlacementgroupsUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraPlacementgroupsUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraPlacementgroupsUpdateParams, body InfraPlacementgroupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraPlacementgroupsUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraPrivateIpsList(ctx context.Context, params *InfraPrivateIpsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraPrivateIpsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraPrivateIpsCreateWithBody(ctx context.Context, params *InfraPrivateIpsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraPrivateIpsCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraPrivateIpsCreate(ctx context.Context, params *InfraPrivateIpsCreateParams, body InfraPrivateIpsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraPrivateIpsCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraPrivateIpsCreateWithFormdataBody(ctx context.Context, params *InfraPrivateIpsCreateParams, body InfraPrivateIpsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraPrivateIpsCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraPrivateIpsDestroy(ctx context.Context, id openapi_types.UUID, params *InfraPrivateIpsDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraPrivateIpsDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraPrivateIpsRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraPrivateIpsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraPrivateIpsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraPrivateIpsPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraPrivateIpsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraPrivateIpsPartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraPrivateIpsPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraPrivateIpsPartialUpdateParams, body InfraPrivateIpsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraPrivateIpsPartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraPrivateIpsPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraPrivateIpsPartialUpdateParams, body InfraPrivateIpsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraPrivateIpsPartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraPrivateIpsUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraPrivateIpsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraPrivateIpsUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraPrivateIpsUpdate(ctx context.Context, id openapi_types.UUID, params *InfraPrivateIpsUpdateParams, body InfraPrivateIpsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraPrivateIpsUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraPrivateIpsUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraPrivateIpsUpdateParams, body InfraPrivateIpsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraPrivateIpsUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraRouteTablesList(ctx context.Context, params *InfraRouteTablesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraRouteTablesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraRouteTablesCreateWithBody(ctx context.Context, params *InfraRouteTablesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraRouteTablesCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraRouteTablesCreate(ctx context.Context, params *InfraRouteTablesCreateParams, body InfraRouteTablesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraRouteTablesCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraRouteTablesCreateWithFormdataBody(ctx context.Context, params *InfraRouteTablesCreateParams, body InfraRouteTablesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraRouteTablesCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraRouteTablesDestroy(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraRouteTablesDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraRouteTablesRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraRouteTablesRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraRouteTablesPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraRouteTablesPartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraRouteTablesPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesPartialUpdateParams, body InfraRouteTablesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraRouteTablesPartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraRouteTablesPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesPartialUpdateParams, body InfraRouteTablesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraRouteTablesPartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraRouteTablesUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraRouteTablesUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraRouteTablesUpdate(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesUpdateParams, body InfraRouteTablesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraRouteTablesUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraRouteTablesUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesUpdateParams, body InfraRouteTablesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraRouteTablesUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraRouteTablesDisableInternetAccessUpdate(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesDisableInternetAccessUpdateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraRouteTablesDisableInternetAccessUpdateRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraRouteTablesEnableInternetAccessUpdate(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesEnableInternetAccessUpdateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraRouteTablesEnableInternetAccessUpdateRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraRouteTablesSubnetsRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesSubnetsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraRouteTablesSubnetsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSecurityGroupRulesList(ctx context.Context, params *InfraSecurityGroupRulesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSecurityGroupRulesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSecurityGroupRulesCreateWithBody(ctx context.Context, params *InfraSecurityGroupRulesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSecurityGroupRulesCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSecurityGroupRulesCreate(ctx context.Context, params *InfraSecurityGroupRulesCreateParams, body InfraSecurityGroupRulesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSecurityGroupRulesCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSecurityGroupRulesCreateWithFormdataBody(ctx context.Context, params *InfraSecurityGroupRulesCreateParams, body InfraSecurityGroupRulesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSecurityGroupRulesCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSecurityGroupRulesDestroy(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupRulesDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSecurityGroupRulesDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSecurityGroupRulesRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupRulesRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSecurityGroupRulesRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSecurityGroupRulesPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupRulesPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSecurityGroupRulesPartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSecurityGroupRulesPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupRulesPartialUpdateParams, body InfraSecurityGroupRulesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSecurityGroupRulesPartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSecurityGroupRulesPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupRulesPartialUpdateParams, body InfraSecurityGroupRulesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSecurityGroupRulesPartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSecurityGroupRulesUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupRulesUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSecurityGroupRulesUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSecurityGroupRulesUpdate(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupRulesUpdateParams, body InfraSecurityGroupRulesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSecurityGroupRulesUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSecurityGroupRulesUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupRulesUpdateParams, body InfraSecurityGroupRulesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSecurityGroupRulesUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSecurityGroupsList(ctx context.Context, params *InfraSecurityGroupsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSecurityGroupsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSecurityGroupsCreateWithBody(ctx context.Context, params *InfraSecurityGroupsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSecurityGroupsCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSecurityGroupsCreate(ctx context.Context, params *InfraSecurityGroupsCreateParams, body InfraSecurityGroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSecurityGroupsCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSecurityGroupsCreateWithFormdataBody(ctx context.Context, params *InfraSecurityGroupsCreateParams, body InfraSecurityGroupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSecurityGroupsCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSecurityGroupsDestroy(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupsDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSecurityGroupsDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSecurityGroupsRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSecurityGroupsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSecurityGroupsPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSecurityGroupsPartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSecurityGroupsPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupsPartialUpdateParams, body InfraSecurityGroupsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSecurityGroupsPartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSecurityGroupsPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupsPartialUpdateParams, body InfraSecurityGroupsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSecurityGroupsPartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSecurityGroupsUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSecurityGroupsUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSecurityGroupsUpdate(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupsUpdateParams, body InfraSecurityGroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSecurityGroupsUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSecurityGroupsUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupsUpdateParams, body InfraSecurityGroupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSecurityGroupsUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersList(ctx context.Context, params *InfraServersListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersCreateWithBody(ctx context.Context, params *InfraServersCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersCreate(ctx context.Context, params *InfraServersCreateParams, body InfraServersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersCreateWithFormdataBody(ctx context.Context, params *InfraServersCreateParams, body InfraServersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersMetricsSchemaRetrieve(ctx context.Context, params *InfraServersMetricsSchemaRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersMetricsSchemaRetrieveRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersDestroy(ctx context.Context, id openapi_types.UUID, params *InfraServersDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraServersRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraServersPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersPartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraServersPartialUpdateParams, body InfraServersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersPartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraServersPartialUpdateParams, body InfraServersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersPartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersUpdate(ctx context.Context, id openapi_types.UUID, body InfraServersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body InfraServersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersActionLogRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraServersActionLogRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersActionLogRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersAttachEipCreateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachEipCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersAttachEipCreateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersAttachEipCreate(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachEipCreateParams, body InfraServersAttachEipCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersAttachEipCreateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersAttachEipCreateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachEipCreateParams, body InfraServersAttachEipCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersAttachEipCreateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersAttachPrivateipCreateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachPrivateipCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersAttachPrivateipCreateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersAttachPrivateipCreate(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachPrivateipCreateParams, body InfraServersAttachPrivateipCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersAttachPrivateipCreateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersAttachPrivateipCreateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachPrivateipCreateParams, body InfraServersAttachPrivateipCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersAttachPrivateipCreateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersAttachSubnetCreateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachSubnetCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersAttachSubnetCreateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersAttachSubnetCreate(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachSubnetCreateParams, body InfraServersAttachSubnetCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersAttachSubnetCreateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersAttachSubnetCreateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachSubnetCreateParams, body InfraServersAttachSubnetCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersAttachSubnetCreateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersAttachVolumeCreateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachVolumeCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersAttachVolumeCreateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersAttachVolumeCreate(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachVolumeCreateParams, body InfraServersAttachVolumeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersAttachVolumeCreateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersAttachVolumeCreateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachVolumeCreateParams, body InfraServersAttachVolumeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersAttachVolumeCreateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersChangePasswordCreateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraServersChangePasswordCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersChangePasswordCreateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersChangePasswordCreate(ctx context.Context, id openapi_types.UUID, params *InfraServersChangePasswordCreateParams, body InfraServersChangePasswordCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersChangePasswordCreateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersChangePasswordCreateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraServersChangePasswordCreateParams, body InfraServersChangePasswordCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersChangePasswordCreateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersConsoleLogRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraServersConsoleLogRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersConsoleLogRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersConsoleCreate(ctx context.Context, id openapi_types.UUID, params *InfraServersConsoleCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersConsoleCreateRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersDeleteCreateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraServersDeleteCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersDeleteCreateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersDeleteCreate(ctx context.Context, id openapi_types.UUID, params *InfraServersDeleteCreateParams, body InfraServersDeleteCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersDeleteCreateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersDeleteCreateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraServersDeleteCreateParams, body InfraServersDeleteCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersDeleteCreateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersDetachEipCreateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraServersDetachEipCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersDetachEipCreateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersDetachEipCreate(ctx context.Context, id openapi_types.UUID, params *InfraServersDetachEipCreateParams, body InfraServersDetachEipCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersDetachEipCreateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersDetachEipCreateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraServersDetachEipCreateParams, body InfraServersDetachEipCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersDetachEipCreateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersDetachPrivateIpCreateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraServersDetachPrivateIpCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersDetachPrivateIpCreateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersDetachPrivateIpCreate(ctx context.Context, id openapi_types.UUID, params *InfraServersDetachPrivateIpCreateParams, body InfraServersDetachPrivateIpCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersDetachPrivateIpCreateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersDetachPrivateIpCreateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraServersDetachPrivateIpCreateParams, body InfraServersDetachPrivateIpCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersDetachPrivateIpCreateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersDetachVolumeCreateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraServersDetachVolumeCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersDetachVolumeCreateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersDetachVolumeCreate(ctx context.Context, id openapi_types.UUID, params *InfraServersDetachVolumeCreateParams, body InfraServersDetachVolumeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersDetachVolumeCreateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersDetachVolumeCreateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraServersDetachVolumeCreateParams, body InfraServersDetachVolumeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersDetachVolumeCreateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersMetricsRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraServersMetricsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersMetricsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersResizeCreateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraServersResizeCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersResizeCreateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersResizeCreate(ctx context.Context, id openapi_types.UUID, params *InfraServersResizeCreateParams, body InfraServersResizeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersResizeCreateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersResizeCreateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraServersResizeCreateParams, body InfraServersResizeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersResizeCreateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersStartCreate(ctx context.Context, id openapi_types.UUID, params *InfraServersStartCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersStartCreateRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraServersStopCreate(ctx context.Context, id openapi_types.UUID, params *InfraServersStopCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraServersStopCreateRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSnapshotpolicyList(ctx context.Context, params *InfraSnapshotpolicyListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSnapshotpolicyListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSnapshotpolicyCreateWithBody(ctx context.Context, params *InfraSnapshotpolicyCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSnapshotpolicyCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSnapshotpolicyCreate(ctx context.Context, params *InfraSnapshotpolicyCreateParams, body InfraSnapshotpolicyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSnapshotpolicyCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSnapshotpolicyCreateWithFormdataBody(ctx context.Context, params *InfraSnapshotpolicyCreateParams, body InfraSnapshotpolicyCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSnapshotpolicyCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSnapshotpolicyDestroy(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotpolicyDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSnapshotpolicyDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSnapshotpolicyRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotpolicyRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSnapshotpolicyRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSnapshotpolicyPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotpolicyPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSnapshotpolicyPartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSnapshotpolicyPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotpolicyPartialUpdateParams, body InfraSnapshotpolicyPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSnapshotpolicyPartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSnapshotpolicyPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotpolicyPartialUpdateParams, body InfraSnapshotpolicyPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSnapshotpolicyPartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSnapshotpolicyUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotpolicyUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSnapshotpolicyUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSnapshotpolicyUpdate(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotpolicyUpdateParams, body InfraSnapshotpolicyUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSnapshotpolicyUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSnapshotpolicyUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotpolicyUpdateParams, body InfraSnapshotpolicyUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSnapshotpolicyUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSnapshotsList(ctx context.Context, params *InfraSnapshotsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSnapshotsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSnapshotsCreateWithBody(ctx context.Context, params *InfraSnapshotsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSnapshotsCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSnapshotsCreate(ctx context.Context, params *InfraSnapshotsCreateParams, body InfraSnapshotsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSnapshotsCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSnapshotsCreateWithFormdataBody(ctx context.Context, params *InfraSnapshotsCreateParams, body InfraSnapshotsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSnapshotsCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSnapshotsDestroy(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotsDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSnapshotsDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSnapshotsRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSnapshotsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSnapshotsPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSnapshotsPartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSnapshotsPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotsPartialUpdateParams, body InfraSnapshotsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSnapshotsPartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSnapshotsPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotsPartialUpdateParams, body InfraSnapshotsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSnapshotsPartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSnapshotsUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSnapshotsUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSnapshotsUpdate(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotsUpdateParams, body InfraSnapshotsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSnapshotsUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSnapshotsUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotsUpdateParams, body InfraSnapshotsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSnapshotsUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSubnetsList(ctx context.Context, params *InfraSubnetsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSubnetsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSubnetsCreateWithBody(ctx context.Context, params *InfraSubnetsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSubnetsCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSubnetsCreate(ctx context.Context, params *InfraSubnetsCreateParams, body InfraSubnetsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSubnetsCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSubnetsCreateWithFormdataBody(ctx context.Context, params *InfraSubnetsCreateParams, body InfraSubnetsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSubnetsCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSubnetsDestroy(ctx context.Context, id openapi_types.UUID, params *InfraSubnetsDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSubnetsDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSubnetsRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraSubnetsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSubnetsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSubnetsPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraSubnetsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSubnetsPartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSubnetsPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraSubnetsPartialUpdateParams, body InfraSubnetsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSubnetsPartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSubnetsPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraSubnetsPartialUpdateParams, body InfraSubnetsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSubnetsPartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSubnetsUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraSubnetsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSubnetsUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSubnetsUpdate(ctx context.Context, id openapi_types.UUID, params *InfraSubnetsUpdateParams, body InfraSubnetsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSubnetsUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraSubnetsUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraSubnetsUpdateParams, body InfraSubnetsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraSubnetsUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumeBackupPoliciesList(ctx context.Context, params *InfraVolumeBackupPoliciesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumeBackupPoliciesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumeBackupPoliciesCreateWithBody(ctx context.Context, params *InfraVolumeBackupPoliciesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumeBackupPoliciesCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumeBackupPoliciesCreate(ctx context.Context, params *InfraVolumeBackupPoliciesCreateParams, body InfraVolumeBackupPoliciesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumeBackupPoliciesCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumeBackupPoliciesCreateWithFormdataBody(ctx context.Context, params *InfraVolumeBackupPoliciesCreateParams, body InfraVolumeBackupPoliciesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumeBackupPoliciesCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumeBackupPoliciesDestroy(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupPoliciesDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumeBackupPoliciesDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumeBackupPoliciesRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupPoliciesRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumeBackupPoliciesRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumeBackupPoliciesPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupPoliciesPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumeBackupPoliciesPartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumeBackupPoliciesPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupPoliciesPartialUpdateParams, body InfraVolumeBackupPoliciesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumeBackupPoliciesPartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumeBackupPoliciesPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupPoliciesPartialUpdateParams, body InfraVolumeBackupPoliciesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumeBackupPoliciesPartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumeBackupPoliciesUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupPoliciesUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumeBackupPoliciesUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumeBackupPoliciesUpdate(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupPoliciesUpdateParams, body InfraVolumeBackupPoliciesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumeBackupPoliciesUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumeBackupPoliciesUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupPoliciesUpdateParams, body InfraVolumeBackupPoliciesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumeBackupPoliciesUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumeBackupsList(ctx context.Context, params *InfraVolumeBackupsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumeBackupsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumeBackupsCreateWithBody(ctx context.Context, params *InfraVolumeBackupsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumeBackupsCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumeBackupsCreate(ctx context.Context, params *InfraVolumeBackupsCreateParams, body InfraVolumeBackupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumeBackupsCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumeBackupsCreateWithFormdataBody(ctx context.Context, params *InfraVolumeBackupsCreateParams, body InfraVolumeBackupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumeBackupsCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumeBackupsDestroy(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumeBackupsDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumeBackupsRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumeBackupsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumeBackupsPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumeBackupsPartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumeBackupsPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsPartialUpdateParams, body InfraVolumeBackupsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumeBackupsPartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumeBackupsPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsPartialUpdateParams, body InfraVolumeBackupsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumeBackupsPartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumeBackupsUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumeBackupsUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumeBackupsUpdate(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsUpdateParams, body InfraVolumeBackupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumeBackupsUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumeBackupsUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsUpdateParams, body InfraVolumeBackupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumeBackupsUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumeBackupsRestoreCreateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsRestoreCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumeBackupsRestoreCreateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumeBackupsRestoreCreate(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsRestoreCreateParams, body InfraVolumeBackupsRestoreCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumeBackupsRestoreCreateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumeBackupsRestoreCreateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsRestoreCreateParams, body InfraVolumeBackupsRestoreCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumeBackupsRestoreCreateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumeTypeList(ctx context.Context, params *InfraVolumeTypeListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumeTypeListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumeTypeCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumeTypeCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumeTypeCreate(ctx context.Context, body InfraVolumeTypeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumeTypeCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumeTypeCreateWithFormdataBody(ctx context.Context, body InfraVolumeTypeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumeTypeCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumeTypeDestroy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumeTypeDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumeTypeRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumeTypeRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumeTypePartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumeTypePartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumeTypePartialUpdate(ctx context.Context, id openapi_types.UUID, body InfraVolumeTypePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumeTypePartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumeTypePartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body InfraVolumeTypePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumeTypePartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumeTypeUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumeTypeUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumeTypeUpdate(ctx context.Context, id openapi_types.UUID, body InfraVolumeTypeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumeTypeUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumeTypeUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body InfraVolumeTypeUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumeTypeUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumesList(ctx context.Context, params *InfraVolumesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumesCreateWithBody(ctx context.Context, params *InfraVolumesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumesCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumesCreate(ctx context.Context, params *InfraVolumesCreateParams, body InfraVolumesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumesCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumesCreateWithFormdataBody(ctx context.Context, params *InfraVolumesCreateParams, body InfraVolumesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumesCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumesDestroy(ctx context.Context, id openapi_types.UUID, params *InfraVolumesDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumesDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumesRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraVolumesRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumesRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumesPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumesPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumesPartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumesPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraVolumesPartialUpdateParams, body InfraVolumesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumesPartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumesPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumesPartialUpdateParams, body InfraVolumesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumesPartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumesUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumesUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumesUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumesUpdate(ctx context.Context, id openapi_types.UUID, params *InfraVolumesUpdateParams, body InfraVolumesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumesUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumesUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumesUpdateParams, body InfraVolumesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumesUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumesApplyBackupPolicyCreateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumesApplyBackupPolicyCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumesApplyBackupPolicyCreateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumesApplyBackupPolicyCreate(ctx context.Context, id openapi_types.UUID, params *InfraVolumesApplyBackupPolicyCreateParams, body InfraVolumesApplyBackupPolicyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumesApplyBackupPolicyCreateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumesApplyBackupPolicyCreateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumesApplyBackupPolicyCreateParams, body InfraVolumesApplyBackupPolicyCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumesApplyBackupPolicyCreateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumesApplySnapshotPolicyCreateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumesApplySnapshotPolicyCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumesApplySnapshotPolicyCreateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumesApplySnapshotPolicyCreate(ctx context.Context, id openapi_types.UUID, params *InfraVolumesApplySnapshotPolicyCreateParams, body InfraVolumesApplySnapshotPolicyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumesApplySnapshotPolicyCreateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumesApplySnapshotPolicyCreateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumesApplySnapshotPolicyCreateParams, body InfraVolumesApplySnapshotPolicyCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumesApplySnapshotPolicyCreateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumesExtendCreateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumesExtendCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumesExtendCreateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumesExtendCreate(ctx context.Context, id openapi_types.UUID, params *InfraVolumesExtendCreateParams, body InfraVolumesExtendCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumesExtendCreateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumesExtendCreateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraVolumesExtendCreateParams, body InfraVolumesExtendCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumesExtendCreateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumesUnapplyBackupPolicyCreate(ctx context.Context, id openapi_types.UUID, params *InfraVolumesUnapplyBackupPolicyCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumesUnapplyBackupPolicyCreateRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVolumesUnapplySnapshotPolicyCreate(ctx context.Context, id openapi_types.UUID, params *InfraVolumesUnapplySnapshotPolicyCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVolumesUnapplySnapshotPolicyCreateRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVpcsList(ctx context.Context, params *InfraVpcsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVpcsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVpcsCreateWithBody(ctx context.Context, params *InfraVpcsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVpcsCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVpcsCreate(ctx context.Context, params *InfraVpcsCreateParams, body InfraVpcsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVpcsCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVpcsCreateWithFormdataBody(ctx context.Context, params *InfraVpcsCreateParams, body InfraVpcsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVpcsCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVpcsDestroy(ctx context.Context, id openapi_types.UUID, params *InfraVpcsDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVpcsDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVpcsRetrieve(ctx context.Context, id openapi_types.UUID, params *InfraVpcsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVpcsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVpcsPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraVpcsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVpcsPartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVpcsPartialUpdate(ctx context.Context, id openapi_types.UUID, params *InfraVpcsPartialUpdateParams, body InfraVpcsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVpcsPartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVpcsPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraVpcsPartialUpdateParams, body InfraVpcsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVpcsPartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVpcsUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *InfraVpcsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVpcsUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVpcsUpdate(ctx context.Context, id openapi_types.UUID, params *InfraVpcsUpdateParams, body InfraVpcsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVpcsUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfraVpcsUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *InfraVpcsUpdateParams, body InfraVpcsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfraVpcsUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProjectUserAcceptWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProjectUserAcceptRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProjectUserAccept(ctx context.Context, body ProjectUserAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProjectUserAcceptRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProjectUserAcceptWithFormdataBody(ctx context.Context, body ProjectUserAcceptFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProjectUserAcceptRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProjectUserInviteWithBody(ctx context.Context, params *ProjectUserInviteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProjectUserInviteRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProjectUserInvite(ctx context.Context, params *ProjectUserInviteParams, body ProjectUserInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProjectUserInviteRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProjectUserInviteWithFormdataBody(ctx context.Context, params *ProjectUserInviteParams, body ProjectUserInviteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProjectUserInviteRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasBackupPlansList(ctx context.Context, params *KaasBackupPlansListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasBackupPlansListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasBackupPlansCreateWithBody(ctx context.Context, params *KaasBackupPlansCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasBackupPlansCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasBackupPlansCreate(ctx context.Context, params *KaasBackupPlansCreateParams, body KaasBackupPlansCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasBackupPlansCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasBackupPlansCreateWithFormdataBody(ctx context.Context, params *KaasBackupPlansCreateParams, body KaasBackupPlansCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasBackupPlansCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasBackupPlansDestroy(ctx context.Context, id openapi_types.UUID, params *KaasBackupPlansDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasBackupPlansDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasBackupPlansRetrieve(ctx context.Context, id openapi_types.UUID, params *KaasBackupPlansRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasBackupPlansRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasBackupPlansPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *KaasBackupPlansPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasBackupPlansPartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasBackupPlansPartialUpdate(ctx context.Context, id openapi_types.UUID, params *KaasBackupPlansPartialUpdateParams, body KaasBackupPlansPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasBackupPlansPartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasBackupPlansPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *KaasBackupPlansPartialUpdateParams, body KaasBackupPlansPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasBackupPlansPartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasBackupPlansUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *KaasBackupPlansUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasBackupPlansUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasBackupPlansUpdate(ctx context.Context, id openapi_types.UUID, params *KaasBackupPlansUpdateParams, body KaasBackupPlansUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasBackupPlansUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasBackupPlansUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *KaasBackupPlansUpdateParams, body KaasBackupPlansUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasBackupPlansUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasBackupsList(ctx context.Context, params *KaasBackupsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasBackupsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasBackupsCreateWithBody(ctx context.Context, params *KaasBackupsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasBackupsCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasBackupsCreate(ctx context.Context, params *KaasBackupsCreateParams, body KaasBackupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasBackupsCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasBackupsCreateWithFormdataBody(ctx context.Context, params *KaasBackupsCreateParams, body KaasBackupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasBackupsCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasBackupsDestroy(ctx context.Context, id openapi_types.UUID, params *KaasBackupsDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasBackupsDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasBackupsRetrieve(ctx context.Context, id openapi_types.UUID, params *KaasBackupsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasBackupsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasBackupsPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *KaasBackupsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasBackupsPartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasBackupsPartialUpdate(ctx context.Context, id openapi_types.UUID, params *KaasBackupsPartialUpdateParams, body KaasBackupsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasBackupsPartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasBackupsPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *KaasBackupsPartialUpdateParams, body KaasBackupsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasBackupsPartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasBackupsUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *KaasBackupsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasBackupsUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasBackupsUpdate(ctx context.Context, id openapi_types.UUID, params *KaasBackupsUpdateParams, body KaasBackupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasBackupsUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasBackupsUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *KaasBackupsUpdateParams, body KaasBackupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasBackupsUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasCniVersionsList(ctx context.Context, params *KaasCniVersionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasCniVersionsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasCniVersionsRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasCniVersionsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasCsiVersionsList(ctx context.Context, params *KaasCsiVersionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasCsiVersionsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasCsiVersionsRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasCsiVersionsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasDashboardVersionsList(ctx context.Context, params *KaasDashboardVersionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasDashboardVersionsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasDashboardVersionsRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasDashboardVersionsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasK8sVersionsList(ctx context.Context, params *KaasK8sVersionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasK8sVersionsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasK8sVersionsRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasK8sVersionsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasRestoresList(ctx context.Context, params *KaasRestoresListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasRestoresListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasRestoresCreateWithBody(ctx context.Context, params *KaasRestoresCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasRestoresCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasRestoresCreate(ctx context.Context, params *KaasRestoresCreateParams, body KaasRestoresCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasRestoresCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasRestoresCreateWithFormdataBody(ctx context.Context, params *KaasRestoresCreateParams, body KaasRestoresCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasRestoresCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasRestoresDestroy(ctx context.Context, id openapi_types.UUID, params *KaasRestoresDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasRestoresDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasRestoresRetrieve(ctx context.Context, id openapi_types.UUID, params *KaasRestoresRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasRestoresRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasRestoresPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *KaasRestoresPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasRestoresPartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasRestoresPartialUpdate(ctx context.Context, id openapi_types.UUID, params *KaasRestoresPartialUpdateParams, body KaasRestoresPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasRestoresPartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasRestoresPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *KaasRestoresPartialUpdateParams, body KaasRestoresPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasRestoresPartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasRestoresUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *KaasRestoresUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasRestoresUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasRestoresUpdate(ctx context.Context, id openapi_types.UUID, params *KaasRestoresUpdateParams, body KaasRestoresUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasRestoresUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasRestoresUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *KaasRestoresUpdateParams, body KaasRestoresUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasRestoresUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasVkeClustersList(ctx context.Context, params *KaasVkeClustersListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasVkeClustersListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasVkeClustersCreateWithBody(ctx context.Context, params *KaasVkeClustersCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasVkeClustersCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasVkeClustersCreate(ctx context.Context, params *KaasVkeClustersCreateParams, body KaasVkeClustersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasVkeClustersCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasVkeClustersCreateWithFormdataBody(ctx context.Context, params *KaasVkeClustersCreateParams, body KaasVkeClustersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasVkeClustersCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasVkeClustersDestroy(ctx context.Context, id openapi_types.UUID, params *KaasVkeClustersDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasVkeClustersDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasVkeClustersRetrieve(ctx context.Context, id openapi_types.UUID, params *KaasVkeClustersRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasVkeClustersRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasVkeClustersPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *KaasVkeClustersPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasVkeClustersPartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasVkeClustersPartialUpdate(ctx context.Context, id openapi_types.UUID, params *KaasVkeClustersPartialUpdateParams, body KaasVkeClustersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasVkeClustersPartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasVkeClustersPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *KaasVkeClustersPartialUpdateParams, body KaasVkeClustersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasVkeClustersPartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasVkeClustersUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *KaasVkeClustersUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasVkeClustersUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasVkeClustersUpdate(ctx context.Context, id openapi_types.UUID, params *KaasVkeClustersUpdateParams, body KaasVkeClustersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasVkeClustersUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasVkeClustersUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *KaasVkeClustersUpdateParams, body KaasVkeClustersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasVkeClustersUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasVkeKubeconfigsRetrieve(ctx context.Context, id openapi_types.UUID, params *KaasVkeKubeconfigsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasVkeKubeconfigsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasVkeKubedashboardsRetrieve(ctx context.Context, id openapi_types.UUID, params *KaasVkeKubedashboardsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasVkeKubedashboardsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasVkeMachinesList(ctx context.Context, params *KaasVkeMachinesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasVkeMachinesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasVkeNodePoolsList(ctx context.Context, params *KaasVkeNodePoolsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasVkeNodePoolsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasVkeNodePoolsCreateWithBody(ctx context.Context, params *KaasVkeNodePoolsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasVkeNodePoolsCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasVkeNodePoolsCreate(ctx context.Context, params *KaasVkeNodePoolsCreateParams, body KaasVkeNodePoolsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasVkeNodePoolsCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasVkeNodePoolsCreateWithFormdataBody(ctx context.Context, params *KaasVkeNodePoolsCreateParams, body KaasVkeNodePoolsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasVkeNodePoolsCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasVkeNodePoolsDestroy(ctx context.Context, id openapi_types.UUID, params *KaasVkeNodePoolsDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasVkeNodePoolsDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasVkeNodePoolsRetrieve(ctx context.Context, id openapi_types.UUID, params *KaasVkeNodePoolsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasVkeNodePoolsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasVkeNodePoolsPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *KaasVkeNodePoolsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasVkeNodePoolsPartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasVkeNodePoolsPartialUpdate(ctx context.Context, id openapi_types.UUID, params *KaasVkeNodePoolsPartialUpdateParams, body KaasVkeNodePoolsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasVkeNodePoolsPartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasVkeNodePoolsPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *KaasVkeNodePoolsPartialUpdateParams, body KaasVkeNodePoolsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasVkeNodePoolsPartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasVkeNodePoolsUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *KaasVkeNodePoolsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasVkeNodePoolsUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasVkeNodePoolsUpdate(ctx context.Context, id openapi_types.UUID, params *KaasVkeNodePoolsUpdateParams, body KaasVkeNodePoolsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasVkeNodePoolsUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasVkeNodePoolsUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *KaasVkeNodePoolsUpdateParams, body KaasVkeNodePoolsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasVkeNodePoolsUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KaasVkeWebcliRetrieve(ctx context.Context, id openapi_types.UUID, params *KaasVkeWebcliRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKaasVkeWebcliRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplaceCategoriesList(ctx context.Context, params *MarketplaceCategoriesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplaceCategoriesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplaceCategoriesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplaceCategoriesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplaceCategoriesCreate(ctx context.Context, body MarketplaceCategoriesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplaceCategoriesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplaceCategoriesCreateWithFormdataBody(ctx context.Context, body MarketplaceCategoriesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplaceCategoriesCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplaceCategoriesRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplaceCategoriesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplaceCategoriesPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplaceCategoriesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplaceCategoriesPartialUpdate(ctx context.Context, id openapi_types.UUID, body MarketplaceCategoriesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplaceCategoriesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplaceCategoriesPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body MarketplaceCategoriesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplaceCategoriesPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplacePricingPlansList(ctx context.Context, params *MarketplacePricingPlansListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplacePricingPlansListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplacePricingPlansCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplacePricingPlansCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplacePricingPlansCreate(ctx context.Context, body MarketplacePricingPlansCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplacePricingPlansCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplacePricingPlansCreateWithFormdataBody(ctx context.Context, body MarketplacePricingPlansCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplacePricingPlansCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplacePricingPlansRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplacePricingPlansRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplacePricingPlansPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplacePricingPlansPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplacePricingPlansPartialUpdate(ctx context.Context, id openapi_types.UUID, body MarketplacePricingPlansPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplacePricingPlansPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplacePricingPlansPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body MarketplacePricingPlansPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplacePricingPlansPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplaceProductsList(ctx context.Context, params *MarketplaceProductsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplaceProductsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplaceProductsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplaceProductsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplaceProductsCreate(ctx context.Context, body MarketplaceProductsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplaceProductsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplaceProductsCreateWithFormdataBody(ctx context.Context, body MarketplaceProductsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplaceProductsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplaceProductsRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplaceProductsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplaceProductsPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplaceProductsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplaceProductsPartialUpdate(ctx context.Context, id openapi_types.UUID, body MarketplaceProductsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplaceProductsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplaceProductsPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body MarketplaceProductsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplaceProductsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplaceSubscriptionsList(ctx context.Context, params *MarketplaceSubscriptionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplaceSubscriptionsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplaceSubscriptionsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplaceSubscriptionsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplaceSubscriptionsCreate(ctx context.Context, body MarketplaceSubscriptionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplaceSubscriptionsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplaceSubscriptionsCreateWithFormdataBody(ctx context.Context, body MarketplaceSubscriptionsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplaceSubscriptionsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplaceSubscriptionsDestroy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplaceSubscriptionsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplaceSubscriptionsRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplaceSubscriptionsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplaceVendorsList(ctx context.Context, params *MarketplaceVendorsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplaceVendorsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplaceVendorsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplaceVendorsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplaceVendorsCreate(ctx context.Context, body MarketplaceVendorsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplaceVendorsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplaceVendorsCreateWithFormdataBody(ctx context.Context, body MarketplaceVendorsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplaceVendorsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplaceVendorsRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplaceVendorsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplaceVendorsPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplaceVendorsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplaceVendorsPartialUpdate(ctx context.Context, id openapi_types.UUID, body MarketplaceVendorsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplaceVendorsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplaceVendorsPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body MarketplaceVendorsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplaceVendorsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ObjectStorageActivateServiceCreate(ctx context.Context, params *ObjectStorageActivateServiceCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewObjectStorageActivateServiceCreateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ObjectStorageBucketsList(ctx context.Context, params *ObjectStorageBucketsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewObjectStorageBucketsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ObjectStorageBucketsCreateWithBody(ctx context.Context, params *ObjectStorageBucketsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewObjectStorageBucketsCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ObjectStorageBucketsCreate(ctx context.Context, params *ObjectStorageBucketsCreateParams, body ObjectStorageBucketsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewObjectStorageBucketsCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ObjectStorageBucketsCreateWithFormdataBody(ctx context.Context, params *ObjectStorageBucketsCreateParams, body ObjectStorageBucketsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewObjectStorageBucketsCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BucketAclShow(ctx context.Context, bucketName string, params *BucketAclShowParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBucketAclShowRequest(c.Server, bucketName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BucketAclPatchWithBody(ctx context.Context, bucketName string, params *BucketAclPatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBucketAclPatchRequestWithBody(c.Server, bucketName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BucketAclPatch(ctx context.Context, bucketName string, params *BucketAclPatchParams, body BucketAclPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBucketAclPatchRequest(c.Server, bucketName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BucketAclPatchWithFormdataBody(ctx context.Context, bucketName string, params *BucketAclPatchParams, body BucketAclPatchFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBucketAclPatchRequestWithFormdataBody(c.Server, bucketName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BucketCorsDelete(ctx context.Context, bucketName string, params *BucketCorsDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBucketCorsDeleteRequest(c.Server, bucketName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BucketCorsShow(ctx context.Context, bucketName string, params *BucketCorsShowParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBucketCorsShowRequest(c.Server, bucketName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BucketCorsEditWithBody(ctx context.Context, bucketName string, params *BucketCorsEditParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBucketCorsEditRequestWithBody(c.Server, bucketName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BucketCorsEdit(ctx context.Context, bucketName string, params *BucketCorsEditParams, body BucketCorsEditJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBucketCorsEditRequest(c.Server, bucketName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BucketCorsEditWithFormdataBody(ctx context.Context, bucketName string, params *BucketCorsEditParams, body BucketCorsEditFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBucketCorsEditRequestWithFormdataBody(c.Server, bucketName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BucketLifecycleDelete(ctx context.Context, bucketName string, params *BucketLifecycleDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBucketLifecycleDeleteRequest(c.Server, bucketName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BucketLifecycleList(ctx context.Context, bucketName string, params *BucketLifecycleListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBucketLifecycleListRequest(c.Server, bucketName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BucketLifecyclePutWithBody(ctx context.Context, bucketName string, params *BucketLifecyclePutParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBucketLifecyclePutRequestWithBody(c.Server, bucketName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BucketLifecyclePut(ctx context.Context, bucketName string, params *BucketLifecyclePutParams, body BucketLifecyclePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBucketLifecyclePutRequest(c.Server, bucketName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BucketLifecyclePutWithFormdataBody(ctx context.Context, bucketName string, params *BucketLifecyclePutParams, body BucketLifecyclePutFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBucketLifecyclePutRequestWithFormdataBody(c.Server, bucketName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BucketObjectList(ctx context.Context, bucketName string, params *BucketObjectListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBucketObjectListRequest(c.Server, bucketName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFolderGetAwsTokenUploadFileWithBody(ctx context.Context, bucketName string, params *CreateFolderGetAwsTokenUploadFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFolderGetAwsTokenUploadFileRequestWithBody(c.Server, bucketName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFolderGetAwsTokenUploadFile(ctx context.Context, bucketName string, params *CreateFolderGetAwsTokenUploadFileParams, body CreateFolderGetAwsTokenUploadFileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFolderGetAwsTokenUploadFileRequest(c.Server, bucketName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFolderGetAwsTokenUploadFileWithFormdataBody(ctx context.Context, bucketName string, params *CreateFolderGetAwsTokenUploadFileParams, body CreateFolderGetAwsTokenUploadFileFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFolderGetAwsTokenUploadFileRequestWithFormdataBody(c.Server, bucketName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObjectAcl(ctx context.Context, bucketName string, objectName string, params *GetObjectAclParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObjectAclRequest(c.Server, bucketName, objectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchObjectAclWithBody(ctx context.Context, bucketName string, objectName string, params *PatchObjectAclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchObjectAclRequestWithBody(c.Server, bucketName, objectName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchObjectAcl(ctx context.Context, bucketName string, objectName string, params *PatchObjectAclParams, body PatchObjectAclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchObjectAclRequest(c.Server, bucketName, objectName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchObjectAclWithFormdataBody(ctx context.Context, bucketName string, objectName string, params *PatchObjectAclParams, body PatchObjectAclFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchObjectAclRequestWithFormdataBody(c.Server, bucketName, objectName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ObjectBatchDeleteWithBody(ctx context.Context, bucketName string, params *ObjectBatchDeleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewObjectBatchDeleteRequestWithBody(c.Server, bucketName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ObjectBatchDelete(ctx context.Context, bucketName string, params *ObjectBatchDeleteParams, body ObjectBatchDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewObjectBatchDeleteRequest(c.Server, bucketName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ObjectBatchDeleteWithFormdataBody(ctx context.Context, bucketName string, params *ObjectBatchDeleteParams, body ObjectBatchDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewObjectBatchDeleteRequestWithFormdataBody(c.Server, bucketName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteObject(ctx context.Context, bucketName string, objectName string, params *DeleteObjectParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteObjectRequest(c.Server, bucketName, objectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ObjectDetails(ctx context.Context, bucketName string, objectName string, params *ObjectDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewObjectDetailsRequest(c.Server, bucketName, objectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObjectShareUrl(ctx context.Context, bucketName string, objectName string, params *GetObjectShareUrlParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObjectShareUrlRequest(c.Server, bucketName, objectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAllObjectTags(ctx context.Context, bucketName string, objectName string, params *DeleteAllObjectTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAllObjectTagsRequest(c.Server, bucketName, objectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObjectTags(ctx context.Context, bucketName string, objectName string, params *GetObjectTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObjectTagsRequest(c.Server, bucketName, objectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutObjectTagsWithBody(ctx context.Context, bucketName string, objectName string, params *PutObjectTagsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutObjectTagsRequestWithBody(c.Server, bucketName, objectName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutObjectTags(ctx context.Context, bucketName string, objectName string, params *PutObjectTagsParams, body PutObjectTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutObjectTagsRequest(c.Server, bucketName, objectName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutObjectTagsWithFormdataBody(ctx context.Context, bucketName string, objectName string, params *PutObjectTagsParams, body PutObjectTagsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutObjectTagsRequestWithFormdataBody(c.Server, bucketName, objectName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BucketPolicyDelete(ctx context.Context, bucketName string, params *BucketPolicyDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBucketPolicyDeleteRequest(c.Server, bucketName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BucketPolicyGet(ctx context.Context, bucketName string, params *BucketPolicyGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBucketPolicyGetRequest(c.Server, bucketName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BucketPolicyPutWithBody(ctx context.Context, bucketName string, params *BucketPolicyPutParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBucketPolicyPutRequestWithBody(c.Server, bucketName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BucketPolicyPut(ctx context.Context, bucketName string, params *BucketPolicyPutParams, body BucketPolicyPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBucketPolicyPutRequest(c.Server, bucketName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BucketPolicyPutWithFormdataBody(ctx context.Context, bucketName string, params *BucketPolicyPutParams, body BucketPolicyPutFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBucketPolicyPutRequestWithFormdataBody(c.Server, bucketName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BucketStaticWebDelete(ctx context.Context, bucketName string, params *BucketStaticWebDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBucketStaticWebDeleteRequest(c.Server, bucketName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BucketStaticWebCreate(ctx context.Context, bucketName string, params *BucketStaticWebCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBucketStaticWebCreateRequest(c.Server, bucketName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BucketStaticWebShowWithBody(ctx context.Context, bucketName string, params *BucketStaticWebShowParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBucketStaticWebShowRequestWithBody(c.Server, bucketName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BucketStaticWebShow(ctx context.Context, bucketName string, params *BucketStaticWebShowParams, body BucketStaticWebShowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBucketStaticWebShowRequest(c.Server, bucketName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BucketStaticWebShowWithFormdataBody(ctx context.Context, bucketName string, params *BucketStaticWebShowParams, body BucketStaticWebShowFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBucketStaticWebShowRequestWithFormdataBody(c.Server, bucketName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBucketTags(ctx context.Context, bucketName string, params *DeleteBucketTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBucketTagsRequest(c.Server, bucketName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBucketTags(ctx context.Context, bucketName string, params *GetBucketTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBucketTagsRequest(c.Server, bucketName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBucketTagsWithBody(ctx context.Context, bucketName string, params *PutBucketTagsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBucketTagsRequestWithBody(c.Server, bucketName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBucketTags(ctx context.Context, bucketName string, params *PutBucketTagsParams, body PutBucketTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBucketTagsRequest(c.Server, bucketName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBucketTagsWithFormdataBody(ctx context.Context, bucketName string, params *PutBucketTagsParams, body PutBucketTagsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBucketTagsRequestWithFormdataBody(c.Server, bucketName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BucketVersioningShow(ctx context.Context, bucketName string, params *BucketVersioningShowParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBucketVersioningShowRequest(c.Server, bucketName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BucketVersioningActionWithBody(ctx context.Context, bucketName string, params *BucketVersioningActionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBucketVersioningActionRequestWithBody(c.Server, bucketName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BucketVersioningAction(ctx context.Context, bucketName string, params *BucketVersioningActionParams, body BucketVersioningActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBucketVersioningActionRequest(c.Server, bucketName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BucketVersioningActionWithFormdataBody(ctx context.Context, bucketName string, params *BucketVersioningActionParams, body BucketVersioningActionFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBucketVersioningActionRequestWithFormdataBody(c.Server, bucketName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BucketObjectVersionList(ctx context.Context, bucketName string, params *BucketObjectVersionListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBucketObjectVersionListRequest(c.Server, bucketName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObjectVersionAcl(ctx context.Context, bucketName string, objectName string, params *GetObjectVersionAclParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObjectVersionAclRequest(c.Server, bucketName, objectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchObjectVersionAclWithBody(ctx context.Context, bucketName string, objectName string, params *PatchObjectVersionAclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchObjectVersionAclRequestWithBody(c.Server, bucketName, objectName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchObjectVersionAcl(ctx context.Context, bucketName string, objectName string, params *PatchObjectVersionAclParams, body PatchObjectVersionAclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchObjectVersionAclRequest(c.Server, bucketName, objectName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchObjectVersionAclWithFormdataBody(ctx context.Context, bucketName string, objectName string, params *PatchObjectVersionAclParams, body PatchObjectVersionAclFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchObjectVersionAclRequestWithFormdataBody(c.Server, bucketName, objectName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ObjectVersionBatchDeleteWithBody(ctx context.Context, bucketName string, params *ObjectVersionBatchDeleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewObjectVersionBatchDeleteRequestWithBody(c.Server, bucketName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ObjectVersionBatchDelete(ctx context.Context, bucketName string, params *ObjectVersionBatchDeleteParams, body ObjectVersionBatchDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewObjectVersionBatchDeleteRequest(c.Server, bucketName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ObjectVersionBatchDeleteWithFormdataBody(ctx context.Context, bucketName string, params *ObjectVersionBatchDeleteParams, body ObjectVersionBatchDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewObjectVersionBatchDeleteRequestWithFormdataBody(c.Server, bucketName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteObjectVersion(ctx context.Context, bucketName string, objectName string, params *DeleteObjectVersionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteObjectVersionRequest(c.Server, bucketName, objectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ObjectVersionDetails(ctx context.Context, bucketName string, objectName string, params *ObjectVersionDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewObjectVersionDetailsRequest(c.Server, bucketName, objectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ObjectVersionRestore(ctx context.Context, bucketName string, objectName string, params *ObjectVersionRestoreParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewObjectVersionRestoreRequest(c.Server, bucketName, objectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObjectVersionShareUrl(ctx context.Context, bucketName string, objectName string, params *GetObjectVersionShareUrlParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObjectVersionShareUrlRequest(c.Server, bucketName, objectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAllObjectVersionTags(ctx context.Context, bucketName string, objectName string, params *DeleteAllObjectVersionTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAllObjectVersionTagsRequest(c.Server, bucketName, objectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObjectVersionTags(ctx context.Context, bucketName string, objectName string, params *GetObjectVersionTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObjectVersionTagsRequest(c.Server, bucketName, objectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutObjectVersionTagsWithBody(ctx context.Context, bucketName string, objectName string, params *PutObjectVersionTagsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutObjectVersionTagsRequestWithBody(c.Server, bucketName, objectName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutObjectVersionTags(ctx context.Context, bucketName string, objectName string, params *PutObjectVersionTagsParams, body PutObjectVersionTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutObjectVersionTagsRequest(c.Server, bucketName, objectName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutObjectVersionTagsWithFormdataBody(ctx context.Context, bucketName string, objectName string, params *PutObjectVersionTagsParams, body PutObjectVersionTagsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutObjectVersionTagsRequestWithFormdataBody(c.Server, bucketName, objectName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ObjectStorageBucketsDestroy(ctx context.Context, id openapi_types.UUID, params *ObjectStorageBucketsDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewObjectStorageBucketsDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ObjectStorageBucketsRetrieve(ctx context.Context, id openapi_types.UUID, params *ObjectStorageBucketsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewObjectStorageBucketsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) S3KeyList(ctx context.Context, params *S3KeyListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewS3KeyListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) S3KeyCreate(ctx context.Context, params *S3KeyCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewS3KeyCreateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) S3KeyDelete(ctx context.Context, accessKey string, params *S3KeyDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewS3KeyDeleteRequest(c.Server, accessKey, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StorageClassList(ctx context.Context, params *StorageClassListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStorageClassListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationRegionsList(ctx context.Context, params *OrganizationRegionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationRegionsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationRegionsRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationRegionsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationZonesList(ctx context.Context, params *OrganizationZonesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationZonesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationZonesRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationZonesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanTemplateObjectStoragesList(ctx context.Context, params *PlanTemplateObjectStoragesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanTemplateObjectStoragesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanTemplateObjectStoragesRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanTemplateObjectStoragesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanTemplateServersList(ctx context.Context, params *PlanTemplateServersListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanTemplateServersListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanTemplateServersRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanTemplateServersRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanTemplateVolumesList(ctx context.Context, params *PlanTemplateVolumesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanTemplateVolumesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanTemplateVolumesRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanTemplateVolumesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanCustomersCacheInfoCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanCustomersCacheInfoCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanCustomersCacheInfoCreate(ctx context.Context, body PlanCustomersCacheInfoCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanCustomersCacheInfoCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanCustomersCacheInfoCreateWithFormdataBody(ctx context.Context, body PlanCustomersCacheInfoCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanCustomersCacheInfoCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanCustomersCustomerTypesList(ctx context.Context, params *PlanCustomersCustomerTypesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanCustomersCustomerTypesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanCustomersDistrictsList(ctx context.Context, params *PlanCustomersDistrictsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanCustomersDistrictsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanCustomersGetInfoRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanCustomersGetInfoRetrieveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanCustomersGroupTypesList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanCustomersGroupTypesListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanCustomersPrecinctsList(ctx context.Context, params *PlanCustomersPrecinctsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanCustomersPrecinctsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanCustomersProvincesList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanCustomersProvincesListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanCustomersUploadIdCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanCustomersUploadIdCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanCustomersUploadIdCreate(ctx context.Context, body PlanCustomersUploadIdCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanCustomersUploadIdCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanCustomersUploadIdCreateWithFormdataBody(ctx context.Context, body PlanCustomersUploadIdCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanCustomersUploadIdCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanObjectStoragesList(ctx context.Context, params *PlanObjectStoragesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanObjectStoragesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanObjectStoragesRetrieve(ctx context.Context, id openapi_types.UUID, params *PlanObjectStoragesRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanObjectStoragesRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanOrdersList(ctx context.Context, params *PlanOrdersListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanOrdersListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanOrdersCreateWithBody(ctx context.Context, params *PlanOrdersCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanOrdersCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanOrdersCreate(ctx context.Context, params *PlanOrdersCreateParams, body PlanOrdersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanOrdersCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanOrdersCreateWithFormdataBody(ctx context.Context, params *PlanOrdersCreateParams, body PlanOrdersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanOrdersCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanOrdersCalculatePriceCreateWithBody(ctx context.Context, params *PlanOrdersCalculatePriceCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanOrdersCalculatePriceCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanOrdersCalculatePriceCreate(ctx context.Context, params *PlanOrdersCalculatePriceCreateParams, body PlanOrdersCalculatePriceCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanOrdersCalculatePriceCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanOrdersCalculatePriceCreateWithFormdataBody(ctx context.Context, params *PlanOrdersCalculatePriceCreateParams, body PlanOrdersCalculatePriceCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanOrdersCalculatePriceCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanOrdersPreviewContractCreateWithBody(ctx context.Context, params *PlanOrdersPreviewContractCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanOrdersPreviewContractCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanOrdersPreviewContractCreate(ctx context.Context, params *PlanOrdersPreviewContractCreateParams, body PlanOrdersPreviewContractCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanOrdersPreviewContractCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanOrdersPreviewContractCreateWithFormdataBody(ctx context.Context, params *PlanOrdersPreviewContractCreateParams, body PlanOrdersPreviewContractCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanOrdersPreviewContractCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanOrdersRetrieve(ctx context.Context, id openapi_types.UUID, params *PlanOrdersRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanOrdersRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanOrdersCancelCreate(ctx context.Context, id openapi_types.UUID, params *PlanOrdersCancelCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanOrdersCancelCreateRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanOrdersInvoiceRetrieve(ctx context.Context, id openapi_types.UUID, params *PlanOrdersInvoiceRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanOrdersInvoiceRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanServersList(ctx context.Context, params *PlanServersListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanServersListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanServersRetrieve(ctx context.Context, id openapi_types.UUID, params *PlanServersRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanServersRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanVolumesList(ctx context.Context, params *PlanVolumesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanVolumesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanVolumesRetrieve(ctx context.Context, id openapi_types.UUID, params *PlanVolumesRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanVolumesRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecretManagerSecretsList(ctx context.Context, params *SecretManagerSecretsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSecretManagerSecretsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecretManagerSecretsCreateWithBody(ctx context.Context, params *SecretManagerSecretsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSecretManagerSecretsCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecretManagerSecretsCreate(ctx context.Context, params *SecretManagerSecretsCreateParams, body SecretManagerSecretsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSecretManagerSecretsCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecretManagerSecretsCreateWithFormdataBody(ctx context.Context, params *SecretManagerSecretsCreateParams, body SecretManagerSecretsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSecretManagerSecretsCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecretManagerSecretsDestroy(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSecretManagerSecretsDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecretManagerSecretsRetrieve(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSecretManagerSecretsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecretManagerSecretsPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSecretManagerSecretsPartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecretManagerSecretsPartialUpdate(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsPartialUpdateParams, body SecretManagerSecretsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSecretManagerSecretsPartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecretManagerSecretsPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsPartialUpdateParams, body SecretManagerSecretsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSecretManagerSecretsPartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecretManagerSecretsUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSecretManagerSecretsUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecretManagerSecretsUpdate(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsUpdateParams, body SecretManagerSecretsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSecretManagerSecretsUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecretManagerSecretsUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsUpdateParams, body SecretManagerSecretsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSecretManagerSecretsUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecretManagerSecretsMetadataRetrieve(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsMetadataRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSecretManagerSecretsMetadataRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecretManagerSecretsMetadataCreateWithBody(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsMetadataCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSecretManagerSecretsMetadataCreateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecretManagerSecretsMetadataCreate(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsMetadataCreateParams, body SecretManagerSecretsMetadataCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSecretManagerSecretsMetadataCreateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecretManagerSecretsMetadataCreateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsMetadataCreateParams, body SecretManagerSecretsMetadataCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSecretManagerSecretsMetadataCreateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServiceCatalogFavoriteServicesList(ctx context.Context, params *ServiceCatalogFavoriteServicesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServiceCatalogFavoriteServicesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServiceCatalogFavoriteServicesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServiceCatalogFavoriteServicesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServiceCatalogFavoriteServicesCreate(ctx context.Context, body ServiceCatalogFavoriteServicesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServiceCatalogFavoriteServicesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServiceCatalogFavoriteServicesCreateWithFormdataBody(ctx context.Context, body ServiceCatalogFavoriteServicesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServiceCatalogFavoriteServicesCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServiceCatalogFavoriteServicesDestroy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServiceCatalogFavoriteServicesDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServiceCatalogFavoriteServicesRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServiceCatalogFavoriteServicesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServiceCatalogServicesList(ctx context.Context, params *ServiceCatalogServicesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServiceCatalogServicesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServiceCatalogServicesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServiceCatalogServicesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServiceCatalogServicesCreate(ctx context.Context, body ServiceCatalogServicesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServiceCatalogServicesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServiceCatalogServicesCreateWithFormdataBody(ctx context.Context, body ServiceCatalogServicesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServiceCatalogServicesCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServiceCatalogServicesUsingServicesRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServiceCatalogServicesUsingServicesRetrieveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServiceCatalogServicesDestroy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServiceCatalogServicesDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServiceCatalogServicesRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServiceCatalogServicesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServiceCatalogServicesPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServiceCatalogServicesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServiceCatalogServicesPartialUpdate(ctx context.Context, id openapi_types.UUID, body ServiceCatalogServicesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServiceCatalogServicesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServiceCatalogServicesPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body ServiceCatalogServicesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServiceCatalogServicesPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServiceCatalogServicesUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServiceCatalogServicesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServiceCatalogServicesUpdate(ctx context.Context, id openapi_types.UUID, body ServiceCatalogServicesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServiceCatalogServicesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServiceCatalogServicesUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body ServiceCatalogServicesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServiceCatalogServicesUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SupportQuestionsList(ctx context.Context, params *SupportQuestionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSupportQuestionsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SupportQuestionsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSupportQuestionsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SupportQuestionsCreate(ctx context.Context, body SupportQuestionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSupportQuestionsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SupportQuestionsCreateWithFormdataBody(ctx context.Context, body SupportQuestionsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSupportQuestionsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SupportQuestionsRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSupportQuestionsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SupportQuestionsPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSupportQuestionsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SupportQuestionsPartialUpdate(ctx context.Context, id openapi_types.UUID, body SupportQuestionsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSupportQuestionsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SupportQuestionsPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body SupportQuestionsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSupportQuestionsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TenantProjectUsersList(ctx context.Context, params *TenantProjectUsersListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTenantProjectUsersListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TenantProjectUsersDestroy(ctx context.Context, id openapi_types.UUID, params *TenantProjectUsersDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTenantProjectUsersDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TenantProjectUsersRetrieve(ctx context.Context, id openapi_types.UUID, params *TenantProjectUsersRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTenantProjectUsersRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TenantProjectUsersPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *TenantProjectUsersPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTenantProjectUsersPartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TenantProjectUsersPartialUpdate(ctx context.Context, id openapi_types.UUID, params *TenantProjectUsersPartialUpdateParams, body TenantProjectUsersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTenantProjectUsersPartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TenantProjectUsersPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *TenantProjectUsersPartialUpdateParams, body TenantProjectUsersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTenantProjectUsersPartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TenantProjectUsersUpdateWithBody(ctx context.Context, id openapi_types.UUID, params *TenantProjectUsersUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTenantProjectUsersUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TenantProjectUsersUpdate(ctx context.Context, id openapi_types.UUID, params *TenantProjectUsersUpdateParams, body TenantProjectUsersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTenantProjectUsersUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TenantProjectUsersUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, params *TenantProjectUsersUpdateParams, body TenantProjectUsersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTenantProjectUsersUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TenantProjectsList(ctx context.Context, params *TenantProjectsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTenantProjectsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TenantProjectsGetUUID(ctx context.Context, params *TenantProjectsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTenantProjectsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TenantProjectsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTenantProjectsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TenantProjectsCreate(ctx context.Context, body TenantProjectsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTenantProjectsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TenantProjectsCreateWithFormdataBody(ctx context.Context, body TenantProjectsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTenantProjectsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TenantProjectsDestroy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTenantProjectsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TenantProjectsRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTenantProjectsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TenantProjectsPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTenantProjectsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TenantProjectsPartialUpdate(ctx context.Context, id openapi_types.UUID, body TenantProjectsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTenantProjectsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TenantProjectsPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body TenantProjectsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTenantProjectsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TenantProjectsUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTenantProjectsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TenantProjectsUpdate(ctx context.Context, id openapi_types.UUID, body TenantProjectsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTenantProjectsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TenantProjectsUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body TenantProjectsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTenantProjectsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TenantProjectsServicesRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTenantProjectsServicesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TenantUsersList(ctx context.Context, params *TenantUsersListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTenantUsersListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TenantUsersCurrentUserRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTenantUsersCurrentUserRetrieveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TenantUsersRetrieve(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTenantUsersRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TenantUsersPartialUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTenantUsersPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TenantUsersPartialUpdate(ctx context.Context, id openapi_types.UUID, body TenantUsersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTenantUsersPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TenantUsersPartialUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body TenantUsersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTenantUsersPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TenantUsersUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTenantUsersUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TenantUsersUpdate(ctx context.Context, id openapi_types.UUID, body TenantUsersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTenantUsersUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TenantUsersUpdateWithFormdataBody(ctx context.Context, id openapi_types.UUID, body TenantUsersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTenantUsersUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAlarmAlarmsListRequest generates requests for AlarmAlarmsList
func NewAlarmAlarmsListRequest(server string, params *AlarmAlarmsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alarm/alarms/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewAlarmAlarmsCreateRequest calls the generic AlarmAlarmsCreate builder with application/json body
func NewAlarmAlarmsCreateRequest(server string, params *AlarmAlarmsCreateParams, body AlarmAlarmsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAlarmAlarmsCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAlarmAlarmsCreateRequestWithFormdataBody calls the generic AlarmAlarmsCreate builder with application/x-www-form-urlencoded body
func NewAlarmAlarmsCreateRequestWithFormdataBody(server string, params *AlarmAlarmsCreateParams, body AlarmAlarmsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewAlarmAlarmsCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewAlarmAlarmsCreateRequestWithBody generates requests for AlarmAlarmsCreate with any type of body
func NewAlarmAlarmsCreateRequestWithBody(server string, params *AlarmAlarmsCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alarm/alarms/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewAlarmAlarmsDestroyRequest generates requests for AlarmAlarmsDestroy
func NewAlarmAlarmsDestroyRequest(server string, id openapi_types.UUID, params *AlarmAlarmsDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alarm/alarms/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewAlarmAlarmsRetrieveRequest generates requests for AlarmAlarmsRetrieve
func NewAlarmAlarmsRetrieveRequest(server string, id openapi_types.UUID, params *AlarmAlarmsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alarm/alarms/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewAlarmAlarmsPartialUpdateRequest calls the generic AlarmAlarmsPartialUpdate builder with application/json body
func NewAlarmAlarmsPartialUpdateRequest(server string, id openapi_types.UUID, params *AlarmAlarmsPartialUpdateParams, body AlarmAlarmsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAlarmAlarmsPartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewAlarmAlarmsPartialUpdateRequestWithFormdataBody calls the generic AlarmAlarmsPartialUpdate builder with application/x-www-form-urlencoded body
func NewAlarmAlarmsPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *AlarmAlarmsPartialUpdateParams, body AlarmAlarmsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewAlarmAlarmsPartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewAlarmAlarmsPartialUpdateRequestWithBody generates requests for AlarmAlarmsPartialUpdate with any type of body
func NewAlarmAlarmsPartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *AlarmAlarmsPartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alarm/alarms/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewAlarmAlarmsUpdateRequest calls the generic AlarmAlarmsUpdate builder with application/json body
func NewAlarmAlarmsUpdateRequest(server string, id openapi_types.UUID, params *AlarmAlarmsUpdateParams, body AlarmAlarmsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAlarmAlarmsUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewAlarmAlarmsUpdateRequestWithFormdataBody calls the generic AlarmAlarmsUpdate builder with application/x-www-form-urlencoded body
func NewAlarmAlarmsUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *AlarmAlarmsUpdateParams, body AlarmAlarmsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewAlarmAlarmsUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewAlarmAlarmsUpdateRequestWithBody generates requests for AlarmAlarmsUpdate with any type of body
func NewAlarmAlarmsUpdateRequestWithBody(server string, id openapi_types.UUID, params *AlarmAlarmsUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alarm/alarms/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewBccsOrdersPurchaseCallbackCreateRequest calls the generic BccsOrdersPurchaseCallbackCreate builder with application/json body
func NewBccsOrdersPurchaseCallbackCreateRequest(server string, body BccsOrdersPurchaseCallbackCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBccsOrdersPurchaseCallbackCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewBccsOrdersPurchaseCallbackCreateRequestWithFormdataBody calls the generic BccsOrdersPurchaseCallbackCreate builder with application/x-www-form-urlencoded body
func NewBccsOrdersPurchaseCallbackCreateRequestWithFormdataBody(server string, body BccsOrdersPurchaseCallbackCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewBccsOrdersPurchaseCallbackCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewBccsOrdersPurchaseCallbackCreateRequestWithBody generates requests for BccsOrdersPurchaseCallbackCreate with any type of body
func NewBccsOrdersPurchaseCallbackCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bccs/orders/purchase-callback/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBccsPlansBackupListRequest generates requests for BccsPlansBackupList
func NewBccsPlansBackupListRequest(server string, params *BccsPlansBackupListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bccs/plans/backup/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBccsPlansBackupCreateRequest calls the generic BccsPlansBackupCreate builder with application/json body
func NewBccsPlansBackupCreateRequest(server string, body BccsPlansBackupCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBccsPlansBackupCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewBccsPlansBackupCreateRequestWithFormdataBody calls the generic BccsPlansBackupCreate builder with application/x-www-form-urlencoded body
func NewBccsPlansBackupCreateRequestWithFormdataBody(server string, body BccsPlansBackupCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewBccsPlansBackupCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewBccsPlansBackupCreateRequestWithBody generates requests for BccsPlansBackupCreate with any type of body
func NewBccsPlansBackupCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bccs/plans/backup/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBccsPlansBackupRetrieveRequest generates requests for BccsPlansBackupRetrieve
func NewBccsPlansBackupRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bccs/plans/backup/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBccsPlansContainerRegistryListRequest generates requests for BccsPlansContainerRegistryList
func NewBccsPlansContainerRegistryListRequest(server string, params *BccsPlansContainerRegistryListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bccs/plans/container-registry/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBccsPlansContainerRegistryCreateRequest calls the generic BccsPlansContainerRegistryCreate builder with application/json body
func NewBccsPlansContainerRegistryCreateRequest(server string, body BccsPlansContainerRegistryCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBccsPlansContainerRegistryCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewBccsPlansContainerRegistryCreateRequestWithFormdataBody calls the generic BccsPlansContainerRegistryCreate builder with application/x-www-form-urlencoded body
func NewBccsPlansContainerRegistryCreateRequestWithFormdataBody(server string, body BccsPlansContainerRegistryCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewBccsPlansContainerRegistryCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewBccsPlansContainerRegistryCreateRequestWithBody generates requests for BccsPlansContainerRegistryCreate with any type of body
func NewBccsPlansContainerRegistryCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bccs/plans/container-registry/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBccsPlansContainerRegistryRetrieveRequest generates requests for BccsPlansContainerRegistryRetrieve
func NewBccsPlansContainerRegistryRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bccs/plans/container-registry/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBccsPlansFileStorageListRequest generates requests for BccsPlansFileStorageList
func NewBccsPlansFileStorageListRequest(server string, params *BccsPlansFileStorageListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bccs/plans/file-storage/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBccsPlansFileStorageCreateRequest calls the generic BccsPlansFileStorageCreate builder with application/json body
func NewBccsPlansFileStorageCreateRequest(server string, body BccsPlansFileStorageCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBccsPlansFileStorageCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewBccsPlansFileStorageCreateRequestWithFormdataBody calls the generic BccsPlansFileStorageCreate builder with application/x-www-form-urlencoded body
func NewBccsPlansFileStorageCreateRequestWithFormdataBody(server string, body BccsPlansFileStorageCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewBccsPlansFileStorageCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewBccsPlansFileStorageCreateRequestWithBody generates requests for BccsPlansFileStorageCreate with any type of body
func NewBccsPlansFileStorageCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bccs/plans/file-storage/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBccsPlansFileStorageRetrieveRequest generates requests for BccsPlansFileStorageRetrieve
func NewBccsPlansFileStorageRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bccs/plans/file-storage/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBccsPlansK8sClusterListRequest generates requests for BccsPlansK8sClusterList
func NewBccsPlansK8sClusterListRequest(server string, params *BccsPlansK8sClusterListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bccs/plans/k8s-cluster/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBccsPlansK8sClusterCreateRequest calls the generic BccsPlansK8sClusterCreate builder with application/json body
func NewBccsPlansK8sClusterCreateRequest(server string, body BccsPlansK8sClusterCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBccsPlansK8sClusterCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewBccsPlansK8sClusterCreateRequestWithFormdataBody calls the generic BccsPlansK8sClusterCreate builder with application/x-www-form-urlencoded body
func NewBccsPlansK8sClusterCreateRequestWithFormdataBody(server string, body BccsPlansK8sClusterCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewBccsPlansK8sClusterCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewBccsPlansK8sClusterCreateRequestWithBody generates requests for BccsPlansK8sClusterCreate with any type of body
func NewBccsPlansK8sClusterCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bccs/plans/k8s-cluster/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBccsPlansK8sClusterRetrieveRequest generates requests for BccsPlansK8sClusterRetrieve
func NewBccsPlansK8sClusterRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bccs/plans/k8s-cluster/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBccsPlansLoadBalancingListRequest generates requests for BccsPlansLoadBalancingList
func NewBccsPlansLoadBalancingListRequest(server string, params *BccsPlansLoadBalancingListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bccs/plans/load-balancing/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBccsPlansLoadBalancingCreateRequest calls the generic BccsPlansLoadBalancingCreate builder with application/json body
func NewBccsPlansLoadBalancingCreateRequest(server string, body BccsPlansLoadBalancingCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBccsPlansLoadBalancingCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewBccsPlansLoadBalancingCreateRequestWithFormdataBody calls the generic BccsPlansLoadBalancingCreate builder with application/x-www-form-urlencoded body
func NewBccsPlansLoadBalancingCreateRequestWithFormdataBody(server string, body BccsPlansLoadBalancingCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewBccsPlansLoadBalancingCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewBccsPlansLoadBalancingCreateRequestWithBody generates requests for BccsPlansLoadBalancingCreate with any type of body
func NewBccsPlansLoadBalancingCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bccs/plans/load-balancing/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBccsPlansLoadBalancingRetrieveRequest generates requests for BccsPlansLoadBalancingRetrieve
func NewBccsPlansLoadBalancingRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bccs/plans/load-balancing/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBccsPlansObjectStorageListRequest generates requests for BccsPlansObjectStorageList
func NewBccsPlansObjectStorageListRequest(server string, params *BccsPlansObjectStorageListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bccs/plans/object-storage/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBccsPlansObjectStorageCreateRequest calls the generic BccsPlansObjectStorageCreate builder with application/json body
func NewBccsPlansObjectStorageCreateRequest(server string, body BccsPlansObjectStorageCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBccsPlansObjectStorageCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewBccsPlansObjectStorageCreateRequestWithFormdataBody calls the generic BccsPlansObjectStorageCreate builder with application/x-www-form-urlencoded body
func NewBccsPlansObjectStorageCreateRequestWithFormdataBody(server string, body BccsPlansObjectStorageCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewBccsPlansObjectStorageCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewBccsPlansObjectStorageCreateRequestWithBody generates requests for BccsPlansObjectStorageCreate with any type of body
func NewBccsPlansObjectStorageCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bccs/plans/object-storage/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBccsPlansObjectStorageRetrieveRequest generates requests for BccsPlansObjectStorageRetrieve
func NewBccsPlansObjectStorageRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bccs/plans/object-storage/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBccsPlansServerListRequest generates requests for BccsPlansServerList
func NewBccsPlansServerListRequest(server string, params *BccsPlansServerListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bccs/plans/server/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBccsPlansServerCreateRequest calls the generic BccsPlansServerCreate builder with application/json body
func NewBccsPlansServerCreateRequest(server string, body BccsPlansServerCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBccsPlansServerCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewBccsPlansServerCreateRequestWithFormdataBody calls the generic BccsPlansServerCreate builder with application/x-www-form-urlencoded body
func NewBccsPlansServerCreateRequestWithFormdataBody(server string, body BccsPlansServerCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewBccsPlansServerCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewBccsPlansServerCreateRequestWithBody generates requests for BccsPlansServerCreate with any type of body
func NewBccsPlansServerCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bccs/plans/server/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBccsPlansServerRetrieveRequest generates requests for BccsPlansServerRetrieve
func NewBccsPlansServerRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bccs/plans/server/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBccsPlansVolumeListRequest generates requests for BccsPlansVolumeList
func NewBccsPlansVolumeListRequest(server string, params *BccsPlansVolumeListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bccs/plans/volume/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBccsPlansVolumeCreateRequest calls the generic BccsPlansVolumeCreate builder with application/json body
func NewBccsPlansVolumeCreateRequest(server string, body BccsPlansVolumeCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBccsPlansVolumeCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewBccsPlansVolumeCreateRequestWithFormdataBody calls the generic BccsPlansVolumeCreate builder with application/x-www-form-urlencoded body
func NewBccsPlansVolumeCreateRequestWithFormdataBody(server string, body BccsPlansVolumeCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewBccsPlansVolumeCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewBccsPlansVolumeCreateRequestWithBody generates requests for BccsPlansVolumeCreate with any type of body
func NewBccsPlansVolumeCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bccs/plans/volume/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBccsPlansVolumeRetrieveRequest generates requests for BccsPlansVolumeRetrieve
func NewBccsPlansVolumeRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bccs/plans/volume/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBccsUsersListRequest generates requests for BccsUsersList
func NewBccsUsersListRequest(server string, params *BccsUsersListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bccs/users/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Email != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Username != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, *params.Username); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBccsUsersCreateRequest calls the generic BccsUsersCreate builder with application/json body
func NewBccsUsersCreateRequest(server string, body BccsUsersCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBccsUsersCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewBccsUsersCreateRequestWithFormdataBody calls the generic BccsUsersCreate builder with application/x-www-form-urlencoded body
func NewBccsUsersCreateRequestWithFormdataBody(server string, body BccsUsersCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewBccsUsersCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewBccsUsersCreateRequestWithBody generates requests for BccsUsersCreate with any type of body
func NewBccsUsersCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bccs/users/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBccsUsersRetrieveRequest generates requests for BccsUsersRetrieve
func NewBccsUsersRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bccs/users/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBccsUsersProjectsRetrieveRequest generates requests for BccsUsersProjectsRetrieve
func NewBccsUsersProjectsRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bccs/users/%s/projects/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBccsVolumesListRequest generates requests for BccsVolumesList
func NewBccsVolumesListRequest(server string, params *BccsVolumesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bccs/volumes/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.BackupOrigin != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "backup_origin", runtime.ParamLocationQuery, *params.BackupOrigin); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.BackupPolicy != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "backup_policy", runtime.ParamLocationQuery, *params.BackupPolicy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.BackupPolicyNull != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "backup_policy__null", runtime.ParamLocationQuery, *params.BackupPolicyNull); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DiskType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disk_type", runtime.ParamLocationQuery, *params.DiskType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegionId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region_id", runtime.ParamLocationQuery, *params.RegionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Server != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "server", runtime.ParamLocationQuery, *params.Server); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Size != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SnapshotOrigin != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "snapshot_origin", runtime.ParamLocationQuery, *params.SnapshotOrigin); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SnapshotPolicy != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "snapshot_policy", runtime.ParamLocationQuery, *params.SnapshotPolicy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SnapshotPolicyNull != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "snapshot_policy__null", runtime.ParamLocationQuery, *params.SnapshotPolicyNull); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.VolumeType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "volume_type", runtime.ParamLocationQuery, *params.VolumeType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Zone != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone", runtime.ParamLocationQuery, *params.Zone); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ZoneId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone_id", runtime.ParamLocationQuery, *params.ZoneId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContainerRegistryCliSecretRetrieveRequest generates requests for ContainerRegistryCliSecretRetrieve
func NewContainerRegistryCliSecretRetrieveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/container-registry/cli-secret/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContainerRegistryImagesListRequest generates requests for ContainerRegistryImagesList
func NewContainerRegistryImagesListRequest(server string, params *ContainerRegistryImagesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/container-registry/images/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewContainerRegistryImagesDestroyRequest generates requests for ContainerRegistryImagesDestroy
func NewContainerRegistryImagesDestroyRequest(server string, imageName string, params *ContainerRegistryImagesDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "image_name", runtime.ParamLocationPath, imageName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/container-registry/images/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewContainerRegistryImagesRetrieveRequest generates requests for ContainerRegistryImagesRetrieve
func NewContainerRegistryImagesRetrieveRequest(server string, imageName string, params *ContainerRegistryImagesRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "image_name", runtime.ParamLocationPath, imageName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/container-registry/images/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewContainerRegistryImagesArtifactsListRequest generates requests for ContainerRegistryImagesArtifactsList
func NewContainerRegistryImagesArtifactsListRequest(server string, imageName string, params *ContainerRegistryImagesArtifactsListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "image_name", runtime.ParamLocationPath, imageName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/container-registry/images/%s/artifacts/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewContainerRegistryImagesArtifactsDestroyRequest generates requests for ContainerRegistryImagesArtifactsDestroy
func NewContainerRegistryImagesArtifactsDestroyRequest(server string, imageName string, reference string, params *ContainerRegistryImagesArtifactsDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "image_name", runtime.ParamLocationPath, imageName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "reference", runtime.ParamLocationPath, reference)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/container-registry/images/%s/artifacts/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewContainerRegistryImagesArtifactsRetrieveRequest generates requests for ContainerRegistryImagesArtifactsRetrieve
func NewContainerRegistryImagesArtifactsRetrieveRequest(server string, imageName string, reference string, params *ContainerRegistryImagesArtifactsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "image_name", runtime.ParamLocationPath, imageName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "reference", runtime.ParamLocationPath, reference)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/container-registry/images/%s/artifacts/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewContainerRegistryImagesArtifactsBuildHistoryRetrieveRequest generates requests for ContainerRegistryImagesArtifactsBuildHistoryRetrieve
func NewContainerRegistryImagesArtifactsBuildHistoryRetrieveRequest(server string, imageName string, reference string, params *ContainerRegistryImagesArtifactsBuildHistoryRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "image_name", runtime.ParamLocationPath, imageName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "reference", runtime.ParamLocationPath, reference)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/container-registry/images/%s/artifacts/%s/build_history/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewContainerRegistryImagesArtifactsScanCreateRequest generates requests for ContainerRegistryImagesArtifactsScanCreate
func NewContainerRegistryImagesArtifactsScanCreateRequest(server string, imageName string, reference string, params *ContainerRegistryImagesArtifactsScanCreateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "image_name", runtime.ParamLocationPath, imageName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "reference", runtime.ParamLocationPath, reference)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/container-registry/images/%s/artifacts/%s/scan/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewContainerRegistryImagesArtifactsTagsRetrieveRequest generates requests for ContainerRegistryImagesArtifactsTagsRetrieve
func NewContainerRegistryImagesArtifactsTagsRetrieveRequest(server string, imageName string, reference string, params *ContainerRegistryImagesArtifactsTagsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "image_name", runtime.ParamLocationPath, imageName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "reference", runtime.ParamLocationPath, reference)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/container-registry/images/%s/artifacts/%s/tags/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewContainerRegistryImagesArtifactsTagsDestroyRequest generates requests for ContainerRegistryImagesArtifactsTagsDestroy
func NewContainerRegistryImagesArtifactsTagsDestroyRequest(server string, imageName string, reference string, tagName string, params *ContainerRegistryImagesArtifactsTagsDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "image_name", runtime.ParamLocationPath, imageName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "reference", runtime.ParamLocationPath, reference)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "tag_name", runtime.ParamLocationPath, tagName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/container-registry/images/%s/artifacts/%s/tags/%s/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewContainerRegistryImagesArtifactsVulnerabilitiesRetrieveRequest generates requests for ContainerRegistryImagesArtifactsVulnerabilitiesRetrieve
func NewContainerRegistryImagesArtifactsVulnerabilitiesRetrieveRequest(server string, imageName string, reference string, params *ContainerRegistryImagesArtifactsVulnerabilitiesRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "image_name", runtime.ParamLocationPath, imageName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "reference", runtime.ParamLocationPath, reference)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/container-registry/images/%s/artifacts/%s/vulnerabilities/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewContainerRegistryLogsRetrieveRequest generates requests for ContainerRegistryLogsRetrieve
func NewContainerRegistryLogsRetrieveRequest(server string, params *ContainerRegistryLogsRetrieveParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/container-registry/logs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewContainerRegistryQuotaRetrieveRequest generates requests for ContainerRegistryQuotaRetrieve
func NewContainerRegistryQuotaRetrieveRequest(server string, params *ContainerRegistryQuotaRetrieveParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/container-registry/quota/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewDbaasDbInstanceBackupsListRequest generates requests for DbaasDbInstanceBackupsList
func NewDbaasDbInstanceBackupsListRequest(server string, params *DbaasDbInstanceBackupsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dbaas/db-instance-backups/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.DbInstanceId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "db_instance_id", runtime.ParamLocationQuery, *params.DbInstanceId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegionId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region_id", runtime.ParamLocationQuery, *params.RegionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewDbaasDbInstanceBackupsCreateRequest calls the generic DbaasDbInstanceBackupsCreate builder with application/json body
func NewDbaasDbInstanceBackupsCreateRequest(server string, params *DbaasDbInstanceBackupsCreateParams, body DbaasDbInstanceBackupsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDbaasDbInstanceBackupsCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewDbaasDbInstanceBackupsCreateRequestWithFormdataBody calls the generic DbaasDbInstanceBackupsCreate builder with application/x-www-form-urlencoded body
func NewDbaasDbInstanceBackupsCreateRequestWithFormdataBody(server string, params *DbaasDbInstanceBackupsCreateParams, body DbaasDbInstanceBackupsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDbaasDbInstanceBackupsCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewDbaasDbInstanceBackupsCreateRequestWithBody generates requests for DbaasDbInstanceBackupsCreate with any type of body
func NewDbaasDbInstanceBackupsCreateRequestWithBody(server string, params *DbaasDbInstanceBackupsCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dbaas/db-instance-backups/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewDbaasDbInstanceBackupsDestroyRequest generates requests for DbaasDbInstanceBackupsDestroy
func NewDbaasDbInstanceBackupsDestroyRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dbaas/db-instance-backups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDbaasDbInstanceBackupsRetrieveRequest generates requests for DbaasDbInstanceBackupsRetrieve
func NewDbaasDbInstanceBackupsRetrieveRequest(server string, id openapi_types.UUID, params *DbaasDbInstanceBackupsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dbaas/db-instance-backups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewDbaasDbInstancesListRequest generates requests for DbaasDbInstancesList
func NewDbaasDbInstancesListRequest(server string, params *DbaasDbInstancesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dbaas/db-instances/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegionId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region_id", runtime.ParamLocationQuery, *params.RegionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegionName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region_name", runtime.ParamLocationQuery, *params.RegionName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewDbaasDbInstancesCreateRequest calls the generic DbaasDbInstancesCreate builder with application/json body
func NewDbaasDbInstancesCreateRequest(server string, params *DbaasDbInstancesCreateParams, body DbaasDbInstancesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDbaasDbInstancesCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewDbaasDbInstancesCreateRequestWithFormdataBody calls the generic DbaasDbInstancesCreate builder with application/x-www-form-urlencoded body
func NewDbaasDbInstancesCreateRequestWithFormdataBody(server string, params *DbaasDbInstancesCreateParams, body DbaasDbInstancesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDbaasDbInstancesCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewDbaasDbInstancesCreateRequestWithBody generates requests for DbaasDbInstancesCreate with any type of body
func NewDbaasDbInstancesCreateRequestWithBody(server string, params *DbaasDbInstancesCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dbaas/db-instances/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewDbaasDbInstancesDestroyRequest generates requests for DbaasDbInstancesDestroy
func NewDbaasDbInstancesDestroyRequest(server string, id openapi_types.UUID, params *DbaasDbInstancesDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dbaas/db-instances/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewDbaasDbInstancesRetrieveRequest generates requests for DbaasDbInstancesRetrieve
func NewDbaasDbInstancesRetrieveRequest(server string, id openapi_types.UUID, params *DbaasDbInstancesRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dbaas/db-instances/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewDbaasDbInstancesExtendVolumeSizePartialUpdateRequest calls the generic DbaasDbInstancesExtendVolumeSizePartialUpdate builder with application/json body
func NewDbaasDbInstancesExtendVolumeSizePartialUpdateRequest(server string, id openapi_types.UUID, params *DbaasDbInstancesExtendVolumeSizePartialUpdateParams, body DbaasDbInstancesExtendVolumeSizePartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDbaasDbInstancesExtendVolumeSizePartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewDbaasDbInstancesExtendVolumeSizePartialUpdateRequestWithFormdataBody calls the generic DbaasDbInstancesExtendVolumeSizePartialUpdate builder with application/x-www-form-urlencoded body
func NewDbaasDbInstancesExtendVolumeSizePartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *DbaasDbInstancesExtendVolumeSizePartialUpdateParams, body DbaasDbInstancesExtendVolumeSizePartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDbaasDbInstancesExtendVolumeSizePartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewDbaasDbInstancesExtendVolumeSizePartialUpdateRequestWithBody generates requests for DbaasDbInstancesExtendVolumeSizePartialUpdate with any type of body
func NewDbaasDbInstancesExtendVolumeSizePartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *DbaasDbInstancesExtendVolumeSizePartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dbaas/db-instances/%s/extend_volume_size/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewDbaasDbInstancesUpdateBackupPolicyPartialUpdateRequest calls the generic DbaasDbInstancesUpdateBackupPolicyPartialUpdate builder with application/json body
func NewDbaasDbInstancesUpdateBackupPolicyPartialUpdateRequest(server string, id openapi_types.UUID, params *DbaasDbInstancesUpdateBackupPolicyPartialUpdateParams, body DbaasDbInstancesUpdateBackupPolicyPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDbaasDbInstancesUpdateBackupPolicyPartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewDbaasDbInstancesUpdateBackupPolicyPartialUpdateRequestWithFormdataBody calls the generic DbaasDbInstancesUpdateBackupPolicyPartialUpdate builder with application/x-www-form-urlencoded body
func NewDbaasDbInstancesUpdateBackupPolicyPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *DbaasDbInstancesUpdateBackupPolicyPartialUpdateParams, body DbaasDbInstancesUpdateBackupPolicyPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDbaasDbInstancesUpdateBackupPolicyPartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewDbaasDbInstancesUpdateBackupPolicyPartialUpdateRequestWithBody generates requests for DbaasDbInstancesUpdateBackupPolicyPartialUpdate with any type of body
func NewDbaasDbInstancesUpdateBackupPolicyPartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *DbaasDbInstancesUpdateBackupPolicyPartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dbaas/db-instances/%s/update_backup_policy/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewDbaasDbInstancesUpdateFlavorPartialUpdateRequest calls the generic DbaasDbInstancesUpdateFlavorPartialUpdate builder with application/json body
func NewDbaasDbInstancesUpdateFlavorPartialUpdateRequest(server string, id openapi_types.UUID, params *DbaasDbInstancesUpdateFlavorPartialUpdateParams, body DbaasDbInstancesUpdateFlavorPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDbaasDbInstancesUpdateFlavorPartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewDbaasDbInstancesUpdateFlavorPartialUpdateRequestWithFormdataBody calls the generic DbaasDbInstancesUpdateFlavorPartialUpdate builder with application/x-www-form-urlencoded body
func NewDbaasDbInstancesUpdateFlavorPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *DbaasDbInstancesUpdateFlavorPartialUpdateParams, body DbaasDbInstancesUpdateFlavorPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDbaasDbInstancesUpdateFlavorPartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewDbaasDbInstancesUpdateFlavorPartialUpdateRequestWithBody generates requests for DbaasDbInstancesUpdateFlavorPartialUpdate with any type of body
func NewDbaasDbInstancesUpdateFlavorPartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *DbaasDbInstancesUpdateFlavorPartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dbaas/db-instances/%s/update_flavor/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewDbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateRequest calls the generic DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdate builder with application/json body
func NewDbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateRequest(server string, id openapi_types.UUID, params *DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateParams, body DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewDbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateRequestWithFormdataBody calls the generic DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdate builder with application/x-www-form-urlencoded body
func NewDbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateParams, body DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewDbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateRequestWithBody generates requests for DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdate with any type of body
func NewDbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dbaas/db-instances/%s/update_keep_backup_policy/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewDbaasDbInstancesUpdateRootPasswordPartialUpdateRequest calls the generic DbaasDbInstancesUpdateRootPasswordPartialUpdate builder with application/json body
func NewDbaasDbInstancesUpdateRootPasswordPartialUpdateRequest(server string, id openapi_types.UUID, params *DbaasDbInstancesUpdateRootPasswordPartialUpdateParams, body DbaasDbInstancesUpdateRootPasswordPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDbaasDbInstancesUpdateRootPasswordPartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewDbaasDbInstancesUpdateRootPasswordPartialUpdateRequestWithFormdataBody calls the generic DbaasDbInstancesUpdateRootPasswordPartialUpdate builder with application/x-www-form-urlencoded body
func NewDbaasDbInstancesUpdateRootPasswordPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *DbaasDbInstancesUpdateRootPasswordPartialUpdateParams, body DbaasDbInstancesUpdateRootPasswordPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDbaasDbInstancesUpdateRootPasswordPartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewDbaasDbInstancesUpdateRootPasswordPartialUpdateRequestWithBody generates requests for DbaasDbInstancesUpdateRootPasswordPartialUpdate with any type of body
func NewDbaasDbInstancesUpdateRootPasswordPartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *DbaasDbInstancesUpdateRootPasswordPartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dbaas/db-instances/%s/update_root_password/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewDbaasDbVersionsListRequest generates requests for DbaasDbVersionsList
func NewDbaasDbVersionsListRequest(server string, params *DbaasDbVersionsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dbaas/db-versions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.DatabaseType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "database_type", runtime.ParamLocationQuery, *params.DatabaseType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegionId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region_id", runtime.ParamLocationQuery, *params.RegionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegionName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region_name", runtime.ParamLocationQuery, *params.RegionName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDbaasDbVersionsRetrieveRequest generates requests for DbaasDbVersionsRetrieve
func NewDbaasDbVersionsRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dbaas/db-versions/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDbaasDbaasFlavorsListRequest generates requests for DbaasDbaasFlavorsList
func NewDbaasDbaasFlavorsListRequest(server string, params *DbaasDbaasFlavorsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dbaas/dbaas-flavors/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegionId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region_id", runtime.ParamLocationQuery, *params.RegionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDbaasDbaasFlavorsRetrieveRequest generates requests for DbaasDbaasFlavorsRetrieve
func NewDbaasDbaasFlavorsRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dbaas/dbaas-flavors/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDbaasDbaasRegionsListRequest generates requests for DbaasDbaasRegionsList
func NewDbaasDbaasRegionsListRequest(server string, params *DbaasDbaasRegionsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dbaas/dbaas-regions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IsActive != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_active", runtime.ParamLocationQuery, *params.IsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDbaasDbaasRegionsRetrieveRequest generates requests for DbaasDbaasRegionsRetrieve
func NewDbaasDbaasRegionsRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dbaas/dbaas-regions/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDbaasDbaasVolumeTypesListRequest generates requests for DbaasDbaasVolumeTypesList
func NewDbaasDbaasVolumeTypesListRequest(server string, params *DbaasDbaasVolumeTypesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dbaas/dbaas-volume-types/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegionId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region_id", runtime.ParamLocationQuery, *params.RegionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDbaasDbaasVolumeTypesRetrieveRequest generates requests for DbaasDbaasVolumeTypesRetrieve
func NewDbaasDbaasVolumeTypesRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dbaas/dbaas-volume-types/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDbaasDbaasZonesListRequest generates requests for DbaasDbaasZonesList
func NewDbaasDbaasZonesListRequest(server string, params *DbaasDbaasZonesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dbaas/dbaas-zones/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.DbaasRegionId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dbaas_region_id", runtime.ParamLocationQuery, *params.DbaasRegionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsActive != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_active", runtime.ParamLocationQuery, *params.IsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDbaasDbaasZonesRetrieveRequest generates requests for DbaasDbaasZonesRetrieve
func NewDbaasDbaasZonesRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dbaas/dbaas-zones/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDbaasFlavorMappingsListRequest generates requests for DbaasFlavorMappingsList
func NewDbaasFlavorMappingsListRequest(server string, params *DbaasFlavorMappingsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dbaas/flavor-mappings/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegionId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region_id", runtime.ParamLocationQuery, *params.RegionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegionName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region_name", runtime.ParamLocationQuery, *params.RegionName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDbaasFlavorMappingsRetrieveRequest generates requests for DbaasFlavorMappingsRetrieve
func NewDbaasFlavorMappingsRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dbaas/flavor-mappings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDbaasVolumeTypeMappingsListRequest generates requests for DbaasVolumeTypeMappingsList
func NewDbaasVolumeTypeMappingsListRequest(server string, params *DbaasVolumeTypeMappingsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dbaas/volume-type-mappings/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegionId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region_id", runtime.ParamLocationQuery, *params.RegionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegionName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region_name", runtime.ParamLocationQuery, *params.RegionName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDbaasVolumeTypeMappingsRetrieveRequest generates requests for DbaasVolumeTypeMappingsRetrieve
func NewDbaasVolumeTypeMappingsRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dbaas/volume-type-mappings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInfraAutoScalingScalingActionListRequest generates requests for InfraAutoScalingScalingActionList
func NewInfraAutoScalingScalingActionListRequest(server string, params *InfraAutoScalingScalingActionListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/auto-scaling/scaling-action/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.EventTimeAfter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "event_time_after", runtime.ParamLocationQuery, *params.EventTimeAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EventTimeBefore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "event_time_before", runtime.ParamLocationQuery, *params.EventTimeBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegionId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region_id", runtime.ParamLocationQuery, *params.RegionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scaling_group", runtime.ParamLocationQuery, params.ScalingGroup); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.ScalingPolicy != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scaling_policy", runtime.ParamLocationQuery, *params.ScalingPolicy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraAutoScalingScalingGroupListRequest generates requests for InfraAutoScalingScalingGroupList
func NewInfraAutoScalingScalingGroupListRequest(server string, params *InfraAutoScalingScalingGroupListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/auto-scaling/scaling-group/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegionId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region_id", runtime.ParamLocationQuery, *params.RegionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraAutoScalingScalingGroupCreateRequest calls the generic InfraAutoScalingScalingGroupCreate builder with application/json body
func NewInfraAutoScalingScalingGroupCreateRequest(server string, params *InfraAutoScalingScalingGroupCreateParams, body InfraAutoScalingScalingGroupCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraAutoScalingScalingGroupCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewInfraAutoScalingScalingGroupCreateRequestWithFormdataBody calls the generic InfraAutoScalingScalingGroupCreate builder with application/x-www-form-urlencoded body
func NewInfraAutoScalingScalingGroupCreateRequestWithFormdataBody(server string, params *InfraAutoScalingScalingGroupCreateParams, body InfraAutoScalingScalingGroupCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraAutoScalingScalingGroupCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraAutoScalingScalingGroupCreateRequestWithBody generates requests for InfraAutoScalingScalingGroupCreate with any type of body
func NewInfraAutoScalingScalingGroupCreateRequestWithBody(server string, params *InfraAutoScalingScalingGroupCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/auto-scaling/scaling-group/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraAutoScalingScalingGroupMetricsSchemaRetrieveRequest generates requests for InfraAutoScalingScalingGroupMetricsSchemaRetrieve
func NewInfraAutoScalingScalingGroupMetricsSchemaRetrieveRequest(server string, params *InfraAutoScalingScalingGroupMetricsSchemaRetrieveParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/auto-scaling/scaling-group/metrics-schema/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraAutoScalingScalingGroupDestroyRequest generates requests for InfraAutoScalingScalingGroupDestroy
func NewInfraAutoScalingScalingGroupDestroyRequest(server string, id openapi_types.UUID, params *InfraAutoScalingScalingGroupDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/auto-scaling/scaling-group/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraAutoScalingScalingGroupRetrieveRequest generates requests for InfraAutoScalingScalingGroupRetrieve
func NewInfraAutoScalingScalingGroupRetrieveRequest(server string, id openapi_types.UUID, params *InfraAutoScalingScalingGroupRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/auto-scaling/scaling-group/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraAutoScalingScalingGroupPartialUpdateRequest calls the generic InfraAutoScalingScalingGroupPartialUpdate builder with application/json body
func NewInfraAutoScalingScalingGroupPartialUpdateRequest(server string, id openapi_types.UUID, params *InfraAutoScalingScalingGroupPartialUpdateParams, body InfraAutoScalingScalingGroupPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraAutoScalingScalingGroupPartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraAutoScalingScalingGroupPartialUpdateRequestWithFormdataBody calls the generic InfraAutoScalingScalingGroupPartialUpdate builder with application/x-www-form-urlencoded body
func NewInfraAutoScalingScalingGroupPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraAutoScalingScalingGroupPartialUpdateParams, body InfraAutoScalingScalingGroupPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraAutoScalingScalingGroupPartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraAutoScalingScalingGroupPartialUpdateRequestWithBody generates requests for InfraAutoScalingScalingGroupPartialUpdate with any type of body
func NewInfraAutoScalingScalingGroupPartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraAutoScalingScalingGroupPartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/auto-scaling/scaling-group/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraAutoScalingScalingGroupUpdateRequest calls the generic InfraAutoScalingScalingGroupUpdate builder with application/json body
func NewInfraAutoScalingScalingGroupUpdateRequest(server string, id openapi_types.UUID, params *InfraAutoScalingScalingGroupUpdateParams, body InfraAutoScalingScalingGroupUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraAutoScalingScalingGroupUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraAutoScalingScalingGroupUpdateRequestWithFormdataBody calls the generic InfraAutoScalingScalingGroupUpdate builder with application/x-www-form-urlencoded body
func NewInfraAutoScalingScalingGroupUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraAutoScalingScalingGroupUpdateParams, body InfraAutoScalingScalingGroupUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraAutoScalingScalingGroupUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraAutoScalingScalingGroupUpdateRequestWithBody generates requests for InfraAutoScalingScalingGroupUpdate with any type of body
func NewInfraAutoScalingScalingGroupUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraAutoScalingScalingGroupUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/auto-scaling/scaling-group/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraAutoScalingScalingGroupMetricsRetrieveRequest generates requests for InfraAutoScalingScalingGroupMetricsRetrieve
func NewInfraAutoScalingScalingGroupMetricsRetrieveRequest(server string, id openapi_types.UUID, params *InfraAutoScalingScalingGroupMetricsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/auto-scaling/scaling-group/%s/metrics/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.End != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, *params.End); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Metric != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "metric", runtime.ParamLocationQuery, *params.Metric); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraAutoScalingScalingPolicyListRequest generates requests for InfraAutoScalingScalingPolicyList
func NewInfraAutoScalingScalingPolicyListRequest(server string, params *InfraAutoScalingScalingPolicyListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/auto-scaling/scaling-policy/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegionId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region_id", runtime.ParamLocationQuery, *params.RegionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ScalingGroup != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scaling_group", runtime.ParamLocationQuery, *params.ScalingGroup); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraAutoScalingScalingPolicyCreateRequest calls the generic InfraAutoScalingScalingPolicyCreate builder with application/json body
func NewInfraAutoScalingScalingPolicyCreateRequest(server string, params *InfraAutoScalingScalingPolicyCreateParams, body InfraAutoScalingScalingPolicyCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraAutoScalingScalingPolicyCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewInfraAutoScalingScalingPolicyCreateRequestWithFormdataBody calls the generic InfraAutoScalingScalingPolicyCreate builder with application/x-www-form-urlencoded body
func NewInfraAutoScalingScalingPolicyCreateRequestWithFormdataBody(server string, params *InfraAutoScalingScalingPolicyCreateParams, body InfraAutoScalingScalingPolicyCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraAutoScalingScalingPolicyCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraAutoScalingScalingPolicyCreateRequestWithBody generates requests for InfraAutoScalingScalingPolicyCreate with any type of body
func NewInfraAutoScalingScalingPolicyCreateRequestWithBody(server string, params *InfraAutoScalingScalingPolicyCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/auto-scaling/scaling-policy/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraAutoScalingScalingPolicyDestroyRequest generates requests for InfraAutoScalingScalingPolicyDestroy
func NewInfraAutoScalingScalingPolicyDestroyRequest(server string, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/auto-scaling/scaling-policy/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraAutoScalingScalingPolicyRetrieveRequest generates requests for InfraAutoScalingScalingPolicyRetrieve
func NewInfraAutoScalingScalingPolicyRetrieveRequest(server string, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/auto-scaling/scaling-policy/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraAutoScalingScalingPolicyPartialUpdateRequest calls the generic InfraAutoScalingScalingPolicyPartialUpdate builder with application/json body
func NewInfraAutoScalingScalingPolicyPartialUpdateRequest(server string, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyPartialUpdateParams, body InfraAutoScalingScalingPolicyPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraAutoScalingScalingPolicyPartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraAutoScalingScalingPolicyPartialUpdateRequestWithFormdataBody calls the generic InfraAutoScalingScalingPolicyPartialUpdate builder with application/x-www-form-urlencoded body
func NewInfraAutoScalingScalingPolicyPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyPartialUpdateParams, body InfraAutoScalingScalingPolicyPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraAutoScalingScalingPolicyPartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraAutoScalingScalingPolicyPartialUpdateRequestWithBody generates requests for InfraAutoScalingScalingPolicyPartialUpdate with any type of body
func NewInfraAutoScalingScalingPolicyPartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyPartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/auto-scaling/scaling-policy/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraAutoScalingScalingPolicyUpdateRequest calls the generic InfraAutoScalingScalingPolicyUpdate builder with application/json body
func NewInfraAutoScalingScalingPolicyUpdateRequest(server string, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyUpdateParams, body InfraAutoScalingScalingPolicyUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraAutoScalingScalingPolicyUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraAutoScalingScalingPolicyUpdateRequestWithFormdataBody calls the generic InfraAutoScalingScalingPolicyUpdate builder with application/x-www-form-urlencoded body
func NewInfraAutoScalingScalingPolicyUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyUpdateParams, body InfraAutoScalingScalingPolicyUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraAutoScalingScalingPolicyUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraAutoScalingScalingPolicyUpdateRequestWithBody generates requests for InfraAutoScalingScalingPolicyUpdate with any type of body
func NewInfraAutoScalingScalingPolicyUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/auto-scaling/scaling-policy/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraAutoScalingScalingQueryListRequest generates requests for InfraAutoScalingScalingQueryList
func NewInfraAutoScalingScalingQueryListRequest(server string, params *InfraAutoScalingScalingQueryListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/auto-scaling/scaling-query/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInfraAutoScalingScalingQueryCreateRequest calls the generic InfraAutoScalingScalingQueryCreate builder with application/json body
func NewInfraAutoScalingScalingQueryCreateRequest(server string, body InfraAutoScalingScalingQueryCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraAutoScalingScalingQueryCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewInfraAutoScalingScalingQueryCreateRequestWithFormdataBody calls the generic InfraAutoScalingScalingQueryCreate builder with application/x-www-form-urlencoded body
func NewInfraAutoScalingScalingQueryCreateRequestWithFormdataBody(server string, body InfraAutoScalingScalingQueryCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraAutoScalingScalingQueryCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraAutoScalingScalingQueryCreateRequestWithBody generates requests for InfraAutoScalingScalingQueryCreate with any type of body
func NewInfraAutoScalingScalingQueryCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/auto-scaling/scaling-query/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInfraAutoScalingScalingQueryDestroyRequest generates requests for InfraAutoScalingScalingQueryDestroy
func NewInfraAutoScalingScalingQueryDestroyRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/auto-scaling/scaling-query/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInfraAutoScalingScalingScheduleListRequest generates requests for InfraAutoScalingScalingScheduleList
func NewInfraAutoScalingScalingScheduleListRequest(server string, params *InfraAutoScalingScalingScheduleListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/auto-scaling/scaling-schedule/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegionId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region_id", runtime.ParamLocationQuery, *params.RegionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ScalingGroup != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scaling_group", runtime.ParamLocationQuery, *params.ScalingGroup); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraAutoScalingScalingScheduleCreateRequest calls the generic InfraAutoScalingScalingScheduleCreate builder with application/json body
func NewInfraAutoScalingScalingScheduleCreateRequest(server string, params *InfraAutoScalingScalingScheduleCreateParams, body InfraAutoScalingScalingScheduleCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraAutoScalingScalingScheduleCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewInfraAutoScalingScalingScheduleCreateRequestWithFormdataBody calls the generic InfraAutoScalingScalingScheduleCreate builder with application/x-www-form-urlencoded body
func NewInfraAutoScalingScalingScheduleCreateRequestWithFormdataBody(server string, params *InfraAutoScalingScalingScheduleCreateParams, body InfraAutoScalingScalingScheduleCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraAutoScalingScalingScheduleCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraAutoScalingScalingScheduleCreateRequestWithBody generates requests for InfraAutoScalingScalingScheduleCreate with any type of body
func NewInfraAutoScalingScalingScheduleCreateRequestWithBody(server string, params *InfraAutoScalingScalingScheduleCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/auto-scaling/scaling-schedule/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraAutoScalingScalingScheduleDestroyRequest generates requests for InfraAutoScalingScalingScheduleDestroy
func NewInfraAutoScalingScalingScheduleDestroyRequest(server string, id openapi_types.UUID, params *InfraAutoScalingScalingScheduleDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/auto-scaling/scaling-schedule/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraAutoScalingScalingScheduleRetrieveRequest generates requests for InfraAutoScalingScalingScheduleRetrieve
func NewInfraAutoScalingScalingScheduleRetrieveRequest(server string, id openapi_types.UUID, params *InfraAutoScalingScalingScheduleRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/auto-scaling/scaling-schedule/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraAutoScalingScalingSchedulePartialUpdateRequest calls the generic InfraAutoScalingScalingSchedulePartialUpdate builder with application/json body
func NewInfraAutoScalingScalingSchedulePartialUpdateRequest(server string, id openapi_types.UUID, params *InfraAutoScalingScalingSchedulePartialUpdateParams, body InfraAutoScalingScalingSchedulePartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraAutoScalingScalingSchedulePartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraAutoScalingScalingSchedulePartialUpdateRequestWithFormdataBody calls the generic InfraAutoScalingScalingSchedulePartialUpdate builder with application/x-www-form-urlencoded body
func NewInfraAutoScalingScalingSchedulePartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraAutoScalingScalingSchedulePartialUpdateParams, body InfraAutoScalingScalingSchedulePartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraAutoScalingScalingSchedulePartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraAutoScalingScalingSchedulePartialUpdateRequestWithBody generates requests for InfraAutoScalingScalingSchedulePartialUpdate with any type of body
func NewInfraAutoScalingScalingSchedulePartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraAutoScalingScalingSchedulePartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/auto-scaling/scaling-schedule/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraAutoScalingScalingScheduleUpdateRequest calls the generic InfraAutoScalingScalingScheduleUpdate builder with application/json body
func NewInfraAutoScalingScalingScheduleUpdateRequest(server string, id openapi_types.UUID, params *InfraAutoScalingScalingScheduleUpdateParams, body InfraAutoScalingScalingScheduleUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraAutoScalingScalingScheduleUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraAutoScalingScalingScheduleUpdateRequestWithFormdataBody calls the generic InfraAutoScalingScalingScheduleUpdate builder with application/x-www-form-urlencoded body
func NewInfraAutoScalingScalingScheduleUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraAutoScalingScalingScheduleUpdateParams, body InfraAutoScalingScalingScheduleUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraAutoScalingScalingScheduleUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraAutoScalingScalingScheduleUpdateRequestWithBody generates requests for InfraAutoScalingScalingScheduleUpdate with any type of body
func NewInfraAutoScalingScalingScheduleUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraAutoScalingScalingScheduleUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/auto-scaling/scaling-schedule/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraAutoScalingScalingServerListRequest generates requests for InfraAutoScalingScalingServerList
func NewInfraAutoScalingScalingServerListRequest(server string, params *InfraAutoScalingScalingServerListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/auto-scaling/scaling-server/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegionId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region_id", runtime.ParamLocationQuery, *params.RegionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scaling_group", runtime.ParamLocationQuery, params.ScalingGroup); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.StartedAtAfter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at_after", runtime.ParamLocationQuery, *params.StartedAtAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartedAtBefore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at_before", runtime.ParamLocationQuery, *params.StartedAtBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraCertificateListRequest generates requests for InfraCertificateList
func NewInfraCertificateListRequest(server string, params *InfraCertificateListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/certificate/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegionId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region_id", runtime.ParamLocationQuery, *params.RegionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraCertificateCreateRequest calls the generic InfraCertificateCreate builder with application/json body
func NewInfraCertificateCreateRequest(server string, params *InfraCertificateCreateParams, body InfraCertificateCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraCertificateCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewInfraCertificateCreateRequestWithFormdataBody calls the generic InfraCertificateCreate builder with application/x-www-form-urlencoded body
func NewInfraCertificateCreateRequestWithFormdataBody(server string, params *InfraCertificateCreateParams, body InfraCertificateCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraCertificateCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraCertificateCreateRequestWithBody generates requests for InfraCertificateCreate with any type of body
func NewInfraCertificateCreateRequestWithBody(server string, params *InfraCertificateCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/certificate/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraCertificateDestroyRequest generates requests for InfraCertificateDestroy
func NewInfraCertificateDestroyRequest(server string, id openapi_types.UUID, params *InfraCertificateDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/certificate/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraCertificateRetrieveRequest generates requests for InfraCertificateRetrieve
func NewInfraCertificateRetrieveRequest(server string, id openapi_types.UUID, params *InfraCertificateRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/certificate/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraCertificatePartialUpdateRequest calls the generic InfraCertificatePartialUpdate builder with application/json body
func NewInfraCertificatePartialUpdateRequest(server string, id openapi_types.UUID, body InfraCertificatePartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraCertificatePartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewInfraCertificatePartialUpdateRequestWithFormdataBody calls the generic InfraCertificatePartialUpdate builder with application/x-www-form-urlencoded body
func NewInfraCertificatePartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, body InfraCertificatePartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraCertificatePartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraCertificatePartialUpdateRequestWithBody generates requests for InfraCertificatePartialUpdate with any type of body
func NewInfraCertificatePartialUpdateRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/certificate/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInfraCertificateUpdateRequest calls the generic InfraCertificateUpdate builder with application/json body
func NewInfraCertificateUpdateRequest(server string, id openapi_types.UUID, body InfraCertificateUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraCertificateUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewInfraCertificateUpdateRequestWithFormdataBody calls the generic InfraCertificateUpdate builder with application/x-www-form-urlencoded body
func NewInfraCertificateUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, body InfraCertificateUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraCertificateUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraCertificateUpdateRequestWithBody generates requests for InfraCertificateUpdate with any type of body
func NewInfraCertificateUpdateRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/certificate/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInfraElasticIpsListRequest generates requests for InfraElasticIpsList
func NewInfraElasticIpsListRequest(server string, params *InfraElasticIpsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/elastic-ips/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Available != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "available", runtime.ParamLocationQuery, *params.Available); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EnableIpv6 != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enable_ipv6", runtime.ParamLocationQuery, *params.EnableIpv6); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IpAddress != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ip_address", runtime.ParamLocationQuery, *params.IpAddress); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegionId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region_id", runtime.ParamLocationQuery, *params.RegionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraElasticIpsCreateRequest calls the generic InfraElasticIpsCreate builder with application/json body
func NewInfraElasticIpsCreateRequest(server string, params *InfraElasticIpsCreateParams, body InfraElasticIpsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraElasticIpsCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewInfraElasticIpsCreateRequestWithFormdataBody calls the generic InfraElasticIpsCreate builder with application/x-www-form-urlencoded body
func NewInfraElasticIpsCreateRequestWithFormdataBody(server string, params *InfraElasticIpsCreateParams, body InfraElasticIpsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraElasticIpsCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraElasticIpsCreateRequestWithBody generates requests for InfraElasticIpsCreate with any type of body
func NewInfraElasticIpsCreateRequestWithBody(server string, params *InfraElasticIpsCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/elastic-ips/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraElasticIpsDestroyRequest generates requests for InfraElasticIpsDestroy
func NewInfraElasticIpsDestroyRequest(server string, id openapi_types.UUID, params *InfraElasticIpsDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/elastic-ips/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraElasticIpsRetrieveRequest generates requests for InfraElasticIpsRetrieve
func NewInfraElasticIpsRetrieveRequest(server string, id openapi_types.UUID, params *InfraElasticIpsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/elastic-ips/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraFilesystemAccessRulesListRequest generates requests for InfraFilesystemAccessRulesList
func NewInfraFilesystemAccessRulesListRequest(server string, params *InfraFilesystemAccessRulesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/filesystem-access-rules/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilesystemId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filesystem_id", runtime.ParamLocationQuery, *params.FilesystemId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.State != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraFilesystemAccessRulesCreateRequest calls the generic InfraFilesystemAccessRulesCreate builder with application/json body
func NewInfraFilesystemAccessRulesCreateRequest(server string, params *InfraFilesystemAccessRulesCreateParams, body InfraFilesystemAccessRulesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraFilesystemAccessRulesCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewInfraFilesystemAccessRulesCreateRequestWithFormdataBody calls the generic InfraFilesystemAccessRulesCreate builder with application/x-www-form-urlencoded body
func NewInfraFilesystemAccessRulesCreateRequestWithFormdataBody(server string, params *InfraFilesystemAccessRulesCreateParams, body InfraFilesystemAccessRulesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraFilesystemAccessRulesCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraFilesystemAccessRulesCreateRequestWithBody generates requests for InfraFilesystemAccessRulesCreate with any type of body
func NewInfraFilesystemAccessRulesCreateRequestWithBody(server string, params *InfraFilesystemAccessRulesCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/filesystem-access-rules/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraFilesystemAccessRulesDestroyRequest generates requests for InfraFilesystemAccessRulesDestroy
func NewInfraFilesystemAccessRulesDestroyRequest(server string, id openapi_types.UUID, params *InfraFilesystemAccessRulesDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/filesystem-access-rules/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraFilesystemAccessRulesRetrieveRequest generates requests for InfraFilesystemAccessRulesRetrieve
func NewInfraFilesystemAccessRulesRetrieveRequest(server string, id openapi_types.UUID, params *InfraFilesystemAccessRulesRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/filesystem-access-rules/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraFilesystemAccessRulesPartialUpdateRequest calls the generic InfraFilesystemAccessRulesPartialUpdate builder with application/json body
func NewInfraFilesystemAccessRulesPartialUpdateRequest(server string, id openapi_types.UUID, body InfraFilesystemAccessRulesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraFilesystemAccessRulesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewInfraFilesystemAccessRulesPartialUpdateRequestWithFormdataBody calls the generic InfraFilesystemAccessRulesPartialUpdate builder with application/x-www-form-urlencoded body
func NewInfraFilesystemAccessRulesPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, body InfraFilesystemAccessRulesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraFilesystemAccessRulesPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraFilesystemAccessRulesPartialUpdateRequestWithBody generates requests for InfraFilesystemAccessRulesPartialUpdate with any type of body
func NewInfraFilesystemAccessRulesPartialUpdateRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/filesystem-access-rules/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInfraFilesystemAccessRulesUpdateRequest calls the generic InfraFilesystemAccessRulesUpdate builder with application/json body
func NewInfraFilesystemAccessRulesUpdateRequest(server string, id openapi_types.UUID, body InfraFilesystemAccessRulesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraFilesystemAccessRulesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewInfraFilesystemAccessRulesUpdateRequestWithFormdataBody calls the generic InfraFilesystemAccessRulesUpdate builder with application/x-www-form-urlencoded body
func NewInfraFilesystemAccessRulesUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, body InfraFilesystemAccessRulesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraFilesystemAccessRulesUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraFilesystemAccessRulesUpdateRequestWithBody generates requests for InfraFilesystemAccessRulesUpdate with any type of body
func NewInfraFilesystemAccessRulesUpdateRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/filesystem-access-rules/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInfraFilesystemSnapshotPoliciesListRequest generates requests for InfraFilesystemSnapshotPoliciesList
func NewInfraFilesystemSnapshotPoliciesListRequest(server string, params *InfraFilesystemSnapshotPoliciesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/filesystem-snapshot-policies/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.DaysOfWeek != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "days_of_week", runtime.ParamLocationQuery, *params.DaysOfWeek); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegionId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region_id", runtime.ParamLocationQuery, *params.RegionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Retention != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "retention", runtime.ParamLocationQuery, *params.Retention); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Time != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time", runtime.ParamLocationQuery, *params.Time); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraFilesystemSnapshotPoliciesCreateRequest calls the generic InfraFilesystemSnapshotPoliciesCreate builder with application/json body
func NewInfraFilesystemSnapshotPoliciesCreateRequest(server string, params *InfraFilesystemSnapshotPoliciesCreateParams, body InfraFilesystemSnapshotPoliciesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraFilesystemSnapshotPoliciesCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewInfraFilesystemSnapshotPoliciesCreateRequestWithFormdataBody calls the generic InfraFilesystemSnapshotPoliciesCreate builder with application/x-www-form-urlencoded body
func NewInfraFilesystemSnapshotPoliciesCreateRequestWithFormdataBody(server string, params *InfraFilesystemSnapshotPoliciesCreateParams, body InfraFilesystemSnapshotPoliciesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraFilesystemSnapshotPoliciesCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraFilesystemSnapshotPoliciesCreateRequestWithBody generates requests for InfraFilesystemSnapshotPoliciesCreate with any type of body
func NewInfraFilesystemSnapshotPoliciesCreateRequestWithBody(server string, params *InfraFilesystemSnapshotPoliciesCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/filesystem-snapshot-policies/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraFilesystemSnapshotPoliciesDestroyRequest generates requests for InfraFilesystemSnapshotPoliciesDestroy
func NewInfraFilesystemSnapshotPoliciesDestroyRequest(server string, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/filesystem-snapshot-policies/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraFilesystemSnapshotPoliciesRetrieveRequest generates requests for InfraFilesystemSnapshotPoliciesRetrieve
func NewInfraFilesystemSnapshotPoliciesRetrieveRequest(server string, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/filesystem-snapshot-policies/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraFilesystemSnapshotPoliciesPartialUpdateRequest calls the generic InfraFilesystemSnapshotPoliciesPartialUpdate builder with application/json body
func NewInfraFilesystemSnapshotPoliciesPartialUpdateRequest(server string, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesPartialUpdateParams, body InfraFilesystemSnapshotPoliciesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraFilesystemSnapshotPoliciesPartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraFilesystemSnapshotPoliciesPartialUpdateRequestWithFormdataBody calls the generic InfraFilesystemSnapshotPoliciesPartialUpdate builder with application/x-www-form-urlencoded body
func NewInfraFilesystemSnapshotPoliciesPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesPartialUpdateParams, body InfraFilesystemSnapshotPoliciesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraFilesystemSnapshotPoliciesPartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraFilesystemSnapshotPoliciesPartialUpdateRequestWithBody generates requests for InfraFilesystemSnapshotPoliciesPartialUpdate with any type of body
func NewInfraFilesystemSnapshotPoliciesPartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesPartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/filesystem-snapshot-policies/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraFilesystemSnapshotPoliciesUpdateRequest calls the generic InfraFilesystemSnapshotPoliciesUpdate builder with application/json body
func NewInfraFilesystemSnapshotPoliciesUpdateRequest(server string, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesUpdateParams, body InfraFilesystemSnapshotPoliciesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraFilesystemSnapshotPoliciesUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraFilesystemSnapshotPoliciesUpdateRequestWithFormdataBody calls the generic InfraFilesystemSnapshotPoliciesUpdate builder with application/x-www-form-urlencoded body
func NewInfraFilesystemSnapshotPoliciesUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesUpdateParams, body InfraFilesystemSnapshotPoliciesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraFilesystemSnapshotPoliciesUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraFilesystemSnapshotPoliciesUpdateRequestWithBody generates requests for InfraFilesystemSnapshotPoliciesUpdate with any type of body
func NewInfraFilesystemSnapshotPoliciesUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/filesystem-snapshot-policies/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraFilesystemSnapshotsListRequest generates requests for InfraFilesystemSnapshotsList
func NewInfraFilesystemSnapshotsListRequest(server string, params *InfraFilesystemSnapshotsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/filesystem-snapshots/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Filesystem != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filesystem", runtime.ParamLocationQuery, *params.Filesystem); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilesystemId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filesystem_id", runtime.ParamLocationQuery, *params.FilesystemId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FromPolicy != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from_policy", runtime.ParamLocationQuery, *params.FromPolicy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegionId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region_id", runtime.ParamLocationQuery, *params.RegionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Size != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Zone != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone", runtime.ParamLocationQuery, *params.Zone); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ZoneId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone_id", runtime.ParamLocationQuery, *params.ZoneId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraFilesystemSnapshotsCreateRequest calls the generic InfraFilesystemSnapshotsCreate builder with application/json body
func NewInfraFilesystemSnapshotsCreateRequest(server string, params *InfraFilesystemSnapshotsCreateParams, body InfraFilesystemSnapshotsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraFilesystemSnapshotsCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewInfraFilesystemSnapshotsCreateRequestWithFormdataBody calls the generic InfraFilesystemSnapshotsCreate builder with application/x-www-form-urlencoded body
func NewInfraFilesystemSnapshotsCreateRequestWithFormdataBody(server string, params *InfraFilesystemSnapshotsCreateParams, body InfraFilesystemSnapshotsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraFilesystemSnapshotsCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraFilesystemSnapshotsCreateRequestWithBody generates requests for InfraFilesystemSnapshotsCreate with any type of body
func NewInfraFilesystemSnapshotsCreateRequestWithBody(server string, params *InfraFilesystemSnapshotsCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/filesystem-snapshots/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraFilesystemSnapshotsDestroyRequest generates requests for InfraFilesystemSnapshotsDestroy
func NewInfraFilesystemSnapshotsDestroyRequest(server string, id openapi_types.UUID, params *InfraFilesystemSnapshotsDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/filesystem-snapshots/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraFilesystemSnapshotsRetrieveRequest generates requests for InfraFilesystemSnapshotsRetrieve
func NewInfraFilesystemSnapshotsRetrieveRequest(server string, id openapi_types.UUID, params *InfraFilesystemSnapshotsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/filesystem-snapshots/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraFilesystemSnapshotsPartialUpdateRequest calls the generic InfraFilesystemSnapshotsPartialUpdate builder with application/json body
func NewInfraFilesystemSnapshotsPartialUpdateRequest(server string, id openapi_types.UUID, params *InfraFilesystemSnapshotsPartialUpdateParams, body InfraFilesystemSnapshotsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraFilesystemSnapshotsPartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraFilesystemSnapshotsPartialUpdateRequestWithFormdataBody calls the generic InfraFilesystemSnapshotsPartialUpdate builder with application/x-www-form-urlencoded body
func NewInfraFilesystemSnapshotsPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraFilesystemSnapshotsPartialUpdateParams, body InfraFilesystemSnapshotsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraFilesystemSnapshotsPartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraFilesystemSnapshotsPartialUpdateRequestWithBody generates requests for InfraFilesystemSnapshotsPartialUpdate with any type of body
func NewInfraFilesystemSnapshotsPartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraFilesystemSnapshotsPartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/filesystem-snapshots/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraFilesystemSnapshotsUpdateRequest calls the generic InfraFilesystemSnapshotsUpdate builder with application/json body
func NewInfraFilesystemSnapshotsUpdateRequest(server string, id openapi_types.UUID, params *InfraFilesystemSnapshotsUpdateParams, body InfraFilesystemSnapshotsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraFilesystemSnapshotsUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraFilesystemSnapshotsUpdateRequestWithFormdataBody calls the generic InfraFilesystemSnapshotsUpdate builder with application/x-www-form-urlencoded body
func NewInfraFilesystemSnapshotsUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraFilesystemSnapshotsUpdateParams, body InfraFilesystemSnapshotsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraFilesystemSnapshotsUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraFilesystemSnapshotsUpdateRequestWithBody generates requests for InfraFilesystemSnapshotsUpdate with any type of body
func NewInfraFilesystemSnapshotsUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraFilesystemSnapshotsUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/filesystem-snapshots/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraFilesystemTypesListRequest generates requests for InfraFilesystemTypesList
func NewInfraFilesystemTypesListRequest(server string, params *InfraFilesystemTypesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/filesystem-types/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Description != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Zone != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone", runtime.ParamLocationQuery, *params.Zone); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraFilesystemTypesRetrieveRequest generates requests for InfraFilesystemTypesRetrieve
func NewInfraFilesystemTypesRetrieveRequest(server string, id openapi_types.UUID, params *InfraFilesystemTypesRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/filesystem-types/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraFilesystemsListRequest generates requests for InfraFilesystemsList
func NewInfraFilesystemsListRequest(server string, params *InfraFilesystemsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/filesystems/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilesystemType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filesystem_type", runtime.ParamLocationQuery, *params.FilesystemType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilesystemTypeId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filesystem_type_id", runtime.ParamLocationQuery, *params.FilesystemTypeId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegionId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region_id", runtime.ParamLocationQuery, *params.RegionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SnapshotId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "snapshot_id", runtime.ParamLocationQuery, *params.SnapshotId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SnapshotPolicyId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "snapshot_policy_id", runtime.ParamLocationQuery, *params.SnapshotPolicyId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SnapshotPolicyNull != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "snapshot_policy_null", runtime.ParamLocationQuery, *params.SnapshotPolicyNull); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SubnetId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subnet_id", runtime.ParamLocationQuery, *params.SubnetId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Zone != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone", runtime.ParamLocationQuery, *params.Zone); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ZoneId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone_id", runtime.ParamLocationQuery, *params.ZoneId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraFilesystemsCreateRequest calls the generic InfraFilesystemsCreate builder with application/json body
func NewInfraFilesystemsCreateRequest(server string, params *InfraFilesystemsCreateParams, body InfraFilesystemsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraFilesystemsCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewInfraFilesystemsCreateRequestWithFormdataBody calls the generic InfraFilesystemsCreate builder with application/x-www-form-urlencoded body
func NewInfraFilesystemsCreateRequestWithFormdataBody(server string, params *InfraFilesystemsCreateParams, body InfraFilesystemsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraFilesystemsCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraFilesystemsCreateRequestWithBody generates requests for InfraFilesystemsCreate with any type of body
func NewInfraFilesystemsCreateRequestWithBody(server string, params *InfraFilesystemsCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/filesystems/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraFilesystemsDestroyRequest generates requests for InfraFilesystemsDestroy
func NewInfraFilesystemsDestroyRequest(server string, id openapi_types.UUID, params *InfraFilesystemsDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/filesystems/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraFilesystemsRetrieveRequest generates requests for InfraFilesystemsRetrieve
func NewInfraFilesystemsRetrieveRequest(server string, id openapi_types.UUID, params *InfraFilesystemsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/filesystems/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraFilesystemsPartialUpdateRequest calls the generic InfraFilesystemsPartialUpdate builder with application/json body
func NewInfraFilesystemsPartialUpdateRequest(server string, id openapi_types.UUID, params *InfraFilesystemsPartialUpdateParams, body InfraFilesystemsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraFilesystemsPartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraFilesystemsPartialUpdateRequestWithFormdataBody calls the generic InfraFilesystemsPartialUpdate builder with application/x-www-form-urlencoded body
func NewInfraFilesystemsPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraFilesystemsPartialUpdateParams, body InfraFilesystemsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraFilesystemsPartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraFilesystemsPartialUpdateRequestWithBody generates requests for InfraFilesystemsPartialUpdate with any type of body
func NewInfraFilesystemsPartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraFilesystemsPartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/filesystems/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraFilesystemsUpdateRequest calls the generic InfraFilesystemsUpdate builder with application/json body
func NewInfraFilesystemsUpdateRequest(server string, id openapi_types.UUID, params *InfraFilesystemsUpdateParams, body InfraFilesystemsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraFilesystemsUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraFilesystemsUpdateRequestWithFormdataBody calls the generic InfraFilesystemsUpdate builder with application/x-www-form-urlencoded body
func NewInfraFilesystemsUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraFilesystemsUpdateParams, body InfraFilesystemsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraFilesystemsUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraFilesystemsUpdateRequestWithBody generates requests for InfraFilesystemsUpdate with any type of body
func NewInfraFilesystemsUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraFilesystemsUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/filesystems/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraFilesystemsApplyPolicyCreateRequest calls the generic InfraFilesystemsApplyPolicyCreate builder with application/json body
func NewInfraFilesystemsApplyPolicyCreateRequest(server string, id openapi_types.UUID, params *InfraFilesystemsApplyPolicyCreateParams, body InfraFilesystemsApplyPolicyCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraFilesystemsApplyPolicyCreateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraFilesystemsApplyPolicyCreateRequestWithFormdataBody calls the generic InfraFilesystemsApplyPolicyCreate builder with application/x-www-form-urlencoded body
func NewInfraFilesystemsApplyPolicyCreateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraFilesystemsApplyPolicyCreateParams, body InfraFilesystemsApplyPolicyCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraFilesystemsApplyPolicyCreateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraFilesystemsApplyPolicyCreateRequestWithBody generates requests for InfraFilesystemsApplyPolicyCreate with any type of body
func NewInfraFilesystemsApplyPolicyCreateRequestWithBody(server string, id openapi_types.UUID, params *InfraFilesystemsApplyPolicyCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/filesystems/%s/apply-policy/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraFilesystemsResizeCreateRequest calls the generic InfraFilesystemsResizeCreate builder with application/json body
func NewInfraFilesystemsResizeCreateRequest(server string, id openapi_types.UUID, params *InfraFilesystemsResizeCreateParams, body InfraFilesystemsResizeCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraFilesystemsResizeCreateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraFilesystemsResizeCreateRequestWithFormdataBody calls the generic InfraFilesystemsResizeCreate builder with application/x-www-form-urlencoded body
func NewInfraFilesystemsResizeCreateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraFilesystemsResizeCreateParams, body InfraFilesystemsResizeCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraFilesystemsResizeCreateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraFilesystemsResizeCreateRequestWithBody generates requests for InfraFilesystemsResizeCreate with any type of body
func NewInfraFilesystemsResizeCreateRequestWithBody(server string, id openapi_types.UUID, params *InfraFilesystemsResizeCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/filesystems/%s/resize/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraFilesystemsStartMigrationCreateRequest calls the generic InfraFilesystemsStartMigrationCreate builder with application/json body
func NewInfraFilesystemsStartMigrationCreateRequest(server string, id openapi_types.UUID, params *InfraFilesystemsStartMigrationCreateParams, body InfraFilesystemsStartMigrationCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraFilesystemsStartMigrationCreateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraFilesystemsStartMigrationCreateRequestWithFormdataBody calls the generic InfraFilesystemsStartMigrationCreate builder with application/x-www-form-urlencoded body
func NewInfraFilesystemsStartMigrationCreateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraFilesystemsStartMigrationCreateParams, body InfraFilesystemsStartMigrationCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraFilesystemsStartMigrationCreateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraFilesystemsStartMigrationCreateRequestWithBody generates requests for InfraFilesystemsStartMigrationCreate with any type of body
func NewInfraFilesystemsStartMigrationCreateRequestWithBody(server string, id openapi_types.UUID, params *InfraFilesystemsStartMigrationCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/filesystems/%s/start-migration/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraFilesystemsUnapplyPolicyCreateRequest generates requests for InfraFilesystemsUnapplyPolicyCreate
func NewInfraFilesystemsUnapplyPolicyCreateRequest(server string, id openapi_types.UUID, params *InfraFilesystemsUnapplyPolicyCreateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/filesystems/%s/unapply-policy/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraFlavorsListRequest generates requests for InfraFlavorsList
func NewInfraFlavorsListRequest(server string, params *InfraFlavorsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/flavors/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Description != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Family != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "family", runtime.ParamLocationQuery, *params.Family); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Gpus != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gpus", runtime.ParamLocationQuery, *params.Gpus); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ram != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ram", runtime.ParamLocationQuery, *params.Ram); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Vcpus != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vcpus", runtime.ParamLocationQuery, *params.Vcpus); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Zone != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone", runtime.ParamLocationQuery, *params.Zone); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInfraFlavorsCreateRequest calls the generic InfraFlavorsCreate builder with application/json body
func NewInfraFlavorsCreateRequest(server string, body InfraFlavorsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraFlavorsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewInfraFlavorsCreateRequestWithFormdataBody calls the generic InfraFlavorsCreate builder with application/x-www-form-urlencoded body
func NewInfraFlavorsCreateRequestWithFormdataBody(server string, body InfraFlavorsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraFlavorsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraFlavorsCreateRequestWithBody generates requests for InfraFlavorsCreate with any type of body
func NewInfraFlavorsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/flavors/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInfraFlavorsDestroyRequest generates requests for InfraFlavorsDestroy
func NewInfraFlavorsDestroyRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/flavors/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInfraFlavorsRetrieveRequest generates requests for InfraFlavorsRetrieve
func NewInfraFlavorsRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/flavors/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInfraFlavorsPartialUpdateRequest calls the generic InfraFlavorsPartialUpdate builder with application/json body
func NewInfraFlavorsPartialUpdateRequest(server string, id openapi_types.UUID, body InfraFlavorsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraFlavorsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewInfraFlavorsPartialUpdateRequestWithFormdataBody calls the generic InfraFlavorsPartialUpdate builder with application/x-www-form-urlencoded body
func NewInfraFlavorsPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, body InfraFlavorsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraFlavorsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraFlavorsPartialUpdateRequestWithBody generates requests for InfraFlavorsPartialUpdate with any type of body
func NewInfraFlavorsPartialUpdateRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/flavors/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInfraFlavorsUpdateRequest calls the generic InfraFlavorsUpdate builder with application/json body
func NewInfraFlavorsUpdateRequest(server string, id openapi_types.UUID, body InfraFlavorsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraFlavorsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewInfraFlavorsUpdateRequestWithFormdataBody calls the generic InfraFlavorsUpdate builder with application/x-www-form-urlencoded body
func NewInfraFlavorsUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, body InfraFlavorsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraFlavorsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraFlavorsUpdateRequestWithBody generates requests for InfraFlavorsUpdate with any type of body
func NewInfraFlavorsUpdateRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/flavors/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInfraImagesListRequest generates requests for InfraImagesList
func NewInfraImagesListRequest(server string, params *InfraImagesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/images/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Id != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Os != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "os", runtime.ParamLocationQuery, *params.Os); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.State != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInfraImagesCreateRequest calls the generic InfraImagesCreate builder with application/json body
func NewInfraImagesCreateRequest(server string, body InfraImagesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraImagesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewInfraImagesCreateRequestWithFormdataBody calls the generic InfraImagesCreate builder with application/x-www-form-urlencoded body
func NewInfraImagesCreateRequestWithFormdataBody(server string, body InfraImagesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraImagesCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraImagesCreateRequestWithBody generates requests for InfraImagesCreate with any type of body
func NewInfraImagesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/images/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInfraImagesDestroyRequest generates requests for InfraImagesDestroy
func NewInfraImagesDestroyRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/images/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInfraImagesRetrieveRequest generates requests for InfraImagesRetrieve
func NewInfraImagesRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/images/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInfraImagesPartialUpdateRequest calls the generic InfraImagesPartialUpdate builder with application/json body
func NewInfraImagesPartialUpdateRequest(server string, id openapi_types.UUID, body InfraImagesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraImagesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewInfraImagesPartialUpdateRequestWithFormdataBody calls the generic InfraImagesPartialUpdate builder with application/x-www-form-urlencoded body
func NewInfraImagesPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, body InfraImagesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraImagesPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraImagesPartialUpdateRequestWithBody generates requests for InfraImagesPartialUpdate with any type of body
func NewInfraImagesPartialUpdateRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/images/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInfraImagesUpdateRequest calls the generic InfraImagesUpdate builder with application/json body
func NewInfraImagesUpdateRequest(server string, id openapi_types.UUID, body InfraImagesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraImagesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewInfraImagesUpdateRequestWithFormdataBody calls the generic InfraImagesUpdate builder with application/x-www-form-urlencoded body
func NewInfraImagesUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, body InfraImagesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraImagesUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraImagesUpdateRequestWithBody generates requests for InfraImagesUpdate with any type of body
func NewInfraImagesUpdateRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/images/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInfraKeypairsListRequest generates requests for InfraKeypairsList
func NewInfraKeypairsListRequest(server string, params *InfraKeypairsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/keypairs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraKeypairsCreateRequest calls the generic InfraKeypairsCreate builder with application/json body
func NewInfraKeypairsCreateRequest(server string, params *InfraKeypairsCreateParams, body InfraKeypairsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraKeypairsCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewInfraKeypairsCreateRequestWithFormdataBody calls the generic InfraKeypairsCreate builder with application/x-www-form-urlencoded body
func NewInfraKeypairsCreateRequestWithFormdataBody(server string, params *InfraKeypairsCreateParams, body InfraKeypairsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraKeypairsCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraKeypairsCreateRequestWithBody generates requests for InfraKeypairsCreate with any type of body
func NewInfraKeypairsCreateRequestWithBody(server string, params *InfraKeypairsCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/keypairs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraKeypairsDestroyRequest generates requests for InfraKeypairsDestroy
func NewInfraKeypairsDestroyRequest(server string, id openapi_types.UUID, params *InfraKeypairsDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/keypairs/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraKeypairsRetrieveRequest generates requests for InfraKeypairsRetrieve
func NewInfraKeypairsRetrieveRequest(server string, id openapi_types.UUID, params *InfraKeypairsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/keypairs/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraKeypairsPartialUpdateRequest calls the generic InfraKeypairsPartialUpdate builder with application/json body
func NewInfraKeypairsPartialUpdateRequest(server string, id openapi_types.UUID, params *InfraKeypairsPartialUpdateParams, body InfraKeypairsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraKeypairsPartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraKeypairsPartialUpdateRequestWithFormdataBody calls the generic InfraKeypairsPartialUpdate builder with application/x-www-form-urlencoded body
func NewInfraKeypairsPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraKeypairsPartialUpdateParams, body InfraKeypairsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraKeypairsPartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraKeypairsPartialUpdateRequestWithBody generates requests for InfraKeypairsPartialUpdate with any type of body
func NewInfraKeypairsPartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraKeypairsPartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/keypairs/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraKeypairsUpdateRequest calls the generic InfraKeypairsUpdate builder with application/json body
func NewInfraKeypairsUpdateRequest(server string, id openapi_types.UUID, params *InfraKeypairsUpdateParams, body InfraKeypairsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraKeypairsUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraKeypairsUpdateRequestWithFormdataBody calls the generic InfraKeypairsUpdate builder with application/x-www-form-urlencoded body
func NewInfraKeypairsUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraKeypairsUpdateParams, body InfraKeypairsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraKeypairsUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraKeypairsUpdateRequestWithBody generates requests for InfraKeypairsUpdate with any type of body
func NewInfraKeypairsUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraKeypairsUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/keypairs/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLaunchTemplateListRequest generates requests for InfraLaunchTemplateList
func NewInfraLaunchTemplateListRequest(server string, params *InfraLaunchTemplateListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/launch-template/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FlavorNull != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "flavor__null", runtime.ParamLocationQuery, *params.FlavorNull); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ImageNull != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "image__null", runtime.ParamLocationQuery, *params.ImageNull); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SubnetNull != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subnet__null", runtime.ParamLocationQuery, *params.SubnetNull); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.VpcNull != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vpc__null", runtime.ParamLocationQuery, *params.VpcNull); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLaunchTemplateCreateRequest calls the generic InfraLaunchTemplateCreate builder with application/json body
func NewInfraLaunchTemplateCreateRequest(server string, params *InfraLaunchTemplateCreateParams, body InfraLaunchTemplateCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraLaunchTemplateCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewInfraLaunchTemplateCreateRequestWithFormdataBody calls the generic InfraLaunchTemplateCreate builder with application/x-www-form-urlencoded body
func NewInfraLaunchTemplateCreateRequestWithFormdataBody(server string, params *InfraLaunchTemplateCreateParams, body InfraLaunchTemplateCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraLaunchTemplateCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraLaunchTemplateCreateRequestWithBody generates requests for InfraLaunchTemplateCreate with any type of body
func NewInfraLaunchTemplateCreateRequestWithBody(server string, params *InfraLaunchTemplateCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/launch-template/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLaunchTemplateDestroyRequest generates requests for InfraLaunchTemplateDestroy
func NewInfraLaunchTemplateDestroyRequest(server string, id openapi_types.UUID, params *InfraLaunchTemplateDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/launch-template/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLaunchTemplateRetrieveRequest generates requests for InfraLaunchTemplateRetrieve
func NewInfraLaunchTemplateRetrieveRequest(server string, id openapi_types.UUID, params *InfraLaunchTemplateRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/launch-template/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLaunchTemplatePartialUpdateRequest calls the generic InfraLaunchTemplatePartialUpdate builder with application/json body
func NewInfraLaunchTemplatePartialUpdateRequest(server string, id openapi_types.UUID, params *InfraLaunchTemplatePartialUpdateParams, body InfraLaunchTemplatePartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraLaunchTemplatePartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraLaunchTemplatePartialUpdateRequestWithFormdataBody calls the generic InfraLaunchTemplatePartialUpdate builder with application/x-www-form-urlencoded body
func NewInfraLaunchTemplatePartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraLaunchTemplatePartialUpdateParams, body InfraLaunchTemplatePartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraLaunchTemplatePartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraLaunchTemplatePartialUpdateRequestWithBody generates requests for InfraLaunchTemplatePartialUpdate with any type of body
func NewInfraLaunchTemplatePartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraLaunchTemplatePartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/launch-template/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLaunchTemplateUpdateRequest calls the generic InfraLaunchTemplateUpdate builder with application/json body
func NewInfraLaunchTemplateUpdateRequest(server string, id openapi_types.UUID, params *InfraLaunchTemplateUpdateParams, body InfraLaunchTemplateUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraLaunchTemplateUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraLaunchTemplateUpdateRequestWithFormdataBody calls the generic InfraLaunchTemplateUpdate builder with application/x-www-form-urlencoded body
func NewInfraLaunchTemplateUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraLaunchTemplateUpdateParams, body InfraLaunchTemplateUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraLaunchTemplateUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraLaunchTemplateUpdateRequestWithBody generates requests for InfraLaunchTemplateUpdate with any type of body
func NewInfraLaunchTemplateUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraLaunchTemplateUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/launch-template/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingL7policyListRequest generates requests for InfraLoadBalancingL7policyList
func NewInfraLoadBalancingL7policyListRequest(server string, params *InfraLoadBalancingL7policyListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/l7policy/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Listener != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "listener", runtime.ParamLocationQuery, *params.Listener); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LoadBalancer != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "load_balancer", runtime.ParamLocationQuery, *params.LoadBalancer); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegionId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region_id", runtime.ParamLocationQuery, *params.RegionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingL7policyCreateRequest calls the generic InfraLoadBalancingL7policyCreate builder with application/json body
func NewInfraLoadBalancingL7policyCreateRequest(server string, params *InfraLoadBalancingL7policyCreateParams, body InfraLoadBalancingL7policyCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraLoadBalancingL7policyCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewInfraLoadBalancingL7policyCreateRequestWithFormdataBody calls the generic InfraLoadBalancingL7policyCreate builder with application/x-www-form-urlencoded body
func NewInfraLoadBalancingL7policyCreateRequestWithFormdataBody(server string, params *InfraLoadBalancingL7policyCreateParams, body InfraLoadBalancingL7policyCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraLoadBalancingL7policyCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraLoadBalancingL7policyCreateRequestWithBody generates requests for InfraLoadBalancingL7policyCreate with any type of body
func NewInfraLoadBalancingL7policyCreateRequestWithBody(server string, params *InfraLoadBalancingL7policyCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/l7policy/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingL7policyDestroyRequest generates requests for InfraLoadBalancingL7policyDestroy
func NewInfraLoadBalancingL7policyDestroyRequest(server string, id openapi_types.UUID, params *InfraLoadBalancingL7policyDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/l7policy/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingL7policyRetrieveRequest generates requests for InfraLoadBalancingL7policyRetrieve
func NewInfraLoadBalancingL7policyRetrieveRequest(server string, id openapi_types.UUID, params *InfraLoadBalancingL7policyRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/l7policy/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingL7policyPartialUpdateRequest calls the generic InfraLoadBalancingL7policyPartialUpdate builder with application/json body
func NewInfraLoadBalancingL7policyPartialUpdateRequest(server string, id openapi_types.UUID, params *InfraLoadBalancingL7policyPartialUpdateParams, body InfraLoadBalancingL7policyPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraLoadBalancingL7policyPartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraLoadBalancingL7policyPartialUpdateRequestWithFormdataBody calls the generic InfraLoadBalancingL7policyPartialUpdate builder with application/x-www-form-urlencoded body
func NewInfraLoadBalancingL7policyPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraLoadBalancingL7policyPartialUpdateParams, body InfraLoadBalancingL7policyPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraLoadBalancingL7policyPartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraLoadBalancingL7policyPartialUpdateRequestWithBody generates requests for InfraLoadBalancingL7policyPartialUpdate with any type of body
func NewInfraLoadBalancingL7policyPartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraLoadBalancingL7policyPartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/l7policy/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingL7policyUpdateRequest calls the generic InfraLoadBalancingL7policyUpdate builder with application/json body
func NewInfraLoadBalancingL7policyUpdateRequest(server string, id openapi_types.UUID, params *InfraLoadBalancingL7policyUpdateParams, body InfraLoadBalancingL7policyUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraLoadBalancingL7policyUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraLoadBalancingL7policyUpdateRequestWithFormdataBody calls the generic InfraLoadBalancingL7policyUpdate builder with application/x-www-form-urlencoded body
func NewInfraLoadBalancingL7policyUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraLoadBalancingL7policyUpdateParams, body InfraLoadBalancingL7policyUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraLoadBalancingL7policyUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraLoadBalancingL7policyUpdateRequestWithBody generates requests for InfraLoadBalancingL7policyUpdate with any type of body
func NewInfraLoadBalancingL7policyUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraLoadBalancingL7policyUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/l7policy/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingL7ruleListRequest generates requests for InfraLoadBalancingL7ruleList
func NewInfraLoadBalancingL7ruleListRequest(server string, params *InfraLoadBalancingL7ruleListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/l7rule/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingL7ruleCreateRequest calls the generic InfraLoadBalancingL7ruleCreate builder with application/json body
func NewInfraLoadBalancingL7ruleCreateRequest(server string, params *InfraLoadBalancingL7ruleCreateParams, body InfraLoadBalancingL7ruleCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraLoadBalancingL7ruleCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewInfraLoadBalancingL7ruleCreateRequestWithFormdataBody calls the generic InfraLoadBalancingL7ruleCreate builder with application/x-www-form-urlencoded body
func NewInfraLoadBalancingL7ruleCreateRequestWithFormdataBody(server string, params *InfraLoadBalancingL7ruleCreateParams, body InfraLoadBalancingL7ruleCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraLoadBalancingL7ruleCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraLoadBalancingL7ruleCreateRequestWithBody generates requests for InfraLoadBalancingL7ruleCreate with any type of body
func NewInfraLoadBalancingL7ruleCreateRequestWithBody(server string, params *InfraLoadBalancingL7ruleCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/l7rule/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingL7ruleDestroyRequest generates requests for InfraLoadBalancingL7ruleDestroy
func NewInfraLoadBalancingL7ruleDestroyRequest(server string, id openapi_types.UUID, params *InfraLoadBalancingL7ruleDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/l7rule/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingL7ruleRetrieveRequest generates requests for InfraLoadBalancingL7ruleRetrieve
func NewInfraLoadBalancingL7ruleRetrieveRequest(server string, id openapi_types.UUID, params *InfraLoadBalancingL7ruleRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/l7rule/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingL7rulePartialUpdateRequest calls the generic InfraLoadBalancingL7rulePartialUpdate builder with application/json body
func NewInfraLoadBalancingL7rulePartialUpdateRequest(server string, id openapi_types.UUID, params *InfraLoadBalancingL7rulePartialUpdateParams, body InfraLoadBalancingL7rulePartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraLoadBalancingL7rulePartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraLoadBalancingL7rulePartialUpdateRequestWithFormdataBody calls the generic InfraLoadBalancingL7rulePartialUpdate builder with application/x-www-form-urlencoded body
func NewInfraLoadBalancingL7rulePartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraLoadBalancingL7rulePartialUpdateParams, body InfraLoadBalancingL7rulePartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraLoadBalancingL7rulePartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraLoadBalancingL7rulePartialUpdateRequestWithBody generates requests for InfraLoadBalancingL7rulePartialUpdate with any type of body
func NewInfraLoadBalancingL7rulePartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraLoadBalancingL7rulePartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/l7rule/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingL7ruleUpdateRequest calls the generic InfraLoadBalancingL7ruleUpdate builder with application/json body
func NewInfraLoadBalancingL7ruleUpdateRequest(server string, id openapi_types.UUID, params *InfraLoadBalancingL7ruleUpdateParams, body InfraLoadBalancingL7ruleUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraLoadBalancingL7ruleUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraLoadBalancingL7ruleUpdateRequestWithFormdataBody calls the generic InfraLoadBalancingL7ruleUpdate builder with application/x-www-form-urlencoded body
func NewInfraLoadBalancingL7ruleUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraLoadBalancingL7ruleUpdateParams, body InfraLoadBalancingL7ruleUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraLoadBalancingL7ruleUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraLoadBalancingL7ruleUpdateRequestWithBody generates requests for InfraLoadBalancingL7ruleUpdate with any type of body
func NewInfraLoadBalancingL7ruleUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraLoadBalancingL7ruleUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/l7rule/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingListenerListRequest generates requests for InfraLoadBalancingListenerList
func NewInfraLoadBalancingListenerListRequest(server string, params *InfraLoadBalancingListenerListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/listener/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.LoadBalancer != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "load_balancer", runtime.ParamLocationQuery, *params.LoadBalancer); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegionId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region_id", runtime.ParamLocationQuery, *params.RegionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingListenerCreateRequest calls the generic InfraLoadBalancingListenerCreate builder with application/json body
func NewInfraLoadBalancingListenerCreateRequest(server string, params *InfraLoadBalancingListenerCreateParams, body InfraLoadBalancingListenerCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraLoadBalancingListenerCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewInfraLoadBalancingListenerCreateRequestWithFormdataBody calls the generic InfraLoadBalancingListenerCreate builder with application/x-www-form-urlencoded body
func NewInfraLoadBalancingListenerCreateRequestWithFormdataBody(server string, params *InfraLoadBalancingListenerCreateParams, body InfraLoadBalancingListenerCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraLoadBalancingListenerCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraLoadBalancingListenerCreateRequestWithBody generates requests for InfraLoadBalancingListenerCreate with any type of body
func NewInfraLoadBalancingListenerCreateRequestWithBody(server string, params *InfraLoadBalancingListenerCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/listener/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingListenerMetricsSchemaRetrieveRequest generates requests for InfraLoadBalancingListenerMetricsSchemaRetrieve
func NewInfraLoadBalancingListenerMetricsSchemaRetrieveRequest(server string, params *InfraLoadBalancingListenerMetricsSchemaRetrieveParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/listener/metrics-schema/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingListenerDestroyRequest generates requests for InfraLoadBalancingListenerDestroy
func NewInfraLoadBalancingListenerDestroyRequest(server string, id openapi_types.UUID, params *InfraLoadBalancingListenerDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/listener/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingListenerRetrieveRequest generates requests for InfraLoadBalancingListenerRetrieve
func NewInfraLoadBalancingListenerRetrieveRequest(server string, id openapi_types.UUID, params *InfraLoadBalancingListenerRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/listener/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingListenerPartialUpdateRequest calls the generic InfraLoadBalancingListenerPartialUpdate builder with application/json body
func NewInfraLoadBalancingListenerPartialUpdateRequest(server string, id openapi_types.UUID, params *InfraLoadBalancingListenerPartialUpdateParams, body InfraLoadBalancingListenerPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraLoadBalancingListenerPartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraLoadBalancingListenerPartialUpdateRequestWithFormdataBody calls the generic InfraLoadBalancingListenerPartialUpdate builder with application/x-www-form-urlencoded body
func NewInfraLoadBalancingListenerPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraLoadBalancingListenerPartialUpdateParams, body InfraLoadBalancingListenerPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraLoadBalancingListenerPartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraLoadBalancingListenerPartialUpdateRequestWithBody generates requests for InfraLoadBalancingListenerPartialUpdate with any type of body
func NewInfraLoadBalancingListenerPartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraLoadBalancingListenerPartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/listener/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingListenerUpdateRequest calls the generic InfraLoadBalancingListenerUpdate builder with application/json body
func NewInfraLoadBalancingListenerUpdateRequest(server string, id openapi_types.UUID, params *InfraLoadBalancingListenerUpdateParams, body InfraLoadBalancingListenerUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraLoadBalancingListenerUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraLoadBalancingListenerUpdateRequestWithFormdataBody calls the generic InfraLoadBalancingListenerUpdate builder with application/x-www-form-urlencoded body
func NewInfraLoadBalancingListenerUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraLoadBalancingListenerUpdateParams, body InfraLoadBalancingListenerUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraLoadBalancingListenerUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraLoadBalancingListenerUpdateRequestWithBody generates requests for InfraLoadBalancingListenerUpdate with any type of body
func NewInfraLoadBalancingListenerUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraLoadBalancingListenerUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/listener/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingListenerMetricsRetrieveRequest generates requests for InfraLoadBalancingListenerMetricsRetrieve
func NewInfraLoadBalancingListenerMetricsRetrieveRequest(server string, id openapi_types.UUID, params *InfraLoadBalancingListenerMetricsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/listener/%s/metrics/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.End != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, *params.End); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Metric != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "metric", runtime.ParamLocationQuery, *params.Metric); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingLoadBalancerListRequest generates requests for InfraLoadBalancingLoadBalancerList
func NewInfraLoadBalancingLoadBalancerListRequest(server string, params *InfraLoadBalancingLoadBalancerListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/load-balancer/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegionId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region_id", runtime.ParamLocationQuery, *params.RegionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.VipAddress != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vip_address", runtime.ParamLocationQuery, *params.VipAddress); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingLoadBalancerCreateRequest calls the generic InfraLoadBalancingLoadBalancerCreate builder with application/json body
func NewInfraLoadBalancingLoadBalancerCreateRequest(server string, params *InfraLoadBalancingLoadBalancerCreateParams, body InfraLoadBalancingLoadBalancerCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraLoadBalancingLoadBalancerCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewInfraLoadBalancingLoadBalancerCreateRequestWithFormdataBody calls the generic InfraLoadBalancingLoadBalancerCreate builder with application/x-www-form-urlencoded body
func NewInfraLoadBalancingLoadBalancerCreateRequestWithFormdataBody(server string, params *InfraLoadBalancingLoadBalancerCreateParams, body InfraLoadBalancingLoadBalancerCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraLoadBalancingLoadBalancerCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraLoadBalancingLoadBalancerCreateRequestWithBody generates requests for InfraLoadBalancingLoadBalancerCreate with any type of body
func NewInfraLoadBalancingLoadBalancerCreateRequestWithBody(server string, params *InfraLoadBalancingLoadBalancerCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/load-balancer/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingLoadBalancerMetricsSchemaRetrieveRequest generates requests for InfraLoadBalancingLoadBalancerMetricsSchemaRetrieve
func NewInfraLoadBalancingLoadBalancerMetricsSchemaRetrieveRequest(server string, params *InfraLoadBalancingLoadBalancerMetricsSchemaRetrieveParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/load-balancer/metrics-schema/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingLoadBalancerDestroyRequest generates requests for InfraLoadBalancingLoadBalancerDestroy
func NewInfraLoadBalancingLoadBalancerDestroyRequest(server string, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/load-balancer/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingLoadBalancerRetrieveRequest generates requests for InfraLoadBalancingLoadBalancerRetrieve
func NewInfraLoadBalancingLoadBalancerRetrieveRequest(server string, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/load-balancer/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingLoadBalancerPartialUpdateRequest calls the generic InfraLoadBalancingLoadBalancerPartialUpdate builder with application/json body
func NewInfraLoadBalancingLoadBalancerPartialUpdateRequest(server string, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerPartialUpdateParams, body InfraLoadBalancingLoadBalancerPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraLoadBalancingLoadBalancerPartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraLoadBalancingLoadBalancerPartialUpdateRequestWithFormdataBody calls the generic InfraLoadBalancingLoadBalancerPartialUpdate builder with application/x-www-form-urlencoded body
func NewInfraLoadBalancingLoadBalancerPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerPartialUpdateParams, body InfraLoadBalancingLoadBalancerPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraLoadBalancingLoadBalancerPartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraLoadBalancingLoadBalancerPartialUpdateRequestWithBody generates requests for InfraLoadBalancingLoadBalancerPartialUpdate with any type of body
func NewInfraLoadBalancingLoadBalancerPartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerPartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/load-balancer/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingLoadBalancerUpdateRequest calls the generic InfraLoadBalancingLoadBalancerUpdate builder with application/json body
func NewInfraLoadBalancingLoadBalancerUpdateRequest(server string, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerUpdateParams, body InfraLoadBalancingLoadBalancerUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraLoadBalancingLoadBalancerUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraLoadBalancingLoadBalancerUpdateRequestWithFormdataBody calls the generic InfraLoadBalancingLoadBalancerUpdate builder with application/x-www-form-urlencoded body
func NewInfraLoadBalancingLoadBalancerUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerUpdateParams, body InfraLoadBalancingLoadBalancerUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraLoadBalancingLoadBalancerUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraLoadBalancingLoadBalancerUpdateRequestWithBody generates requests for InfraLoadBalancingLoadBalancerUpdate with any type of body
func NewInfraLoadBalancingLoadBalancerUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/load-balancer/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingLoadBalancerMetricsRetrieveRequest generates requests for InfraLoadBalancingLoadBalancerMetricsRetrieve
func NewInfraLoadBalancingLoadBalancerMetricsRetrieveRequest(server string, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerMetricsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/load-balancer/%s/metrics/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.End != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, *params.End); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Metric != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "metric", runtime.ParamLocationQuery, *params.Metric); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingServerGroupMemberListRequest generates requests for InfraLoadBalancingServerGroupMemberList
func NewInfraLoadBalancingServerGroupMemberListRequest(server string, params *InfraLoadBalancingServerGroupMemberListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/server-group-member/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Address != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "address", runtime.ParamLocationQuery, *params.Address); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegionId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region_id", runtime.ParamLocationQuery, *params.RegionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ServerGroup != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "server_group", runtime.ParamLocationQuery, *params.ServerGroup); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingServerGroupMemberCreateRequest calls the generic InfraLoadBalancingServerGroupMemberCreate builder with application/json body
func NewInfraLoadBalancingServerGroupMemberCreateRequest(server string, params *InfraLoadBalancingServerGroupMemberCreateParams, body InfraLoadBalancingServerGroupMemberCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraLoadBalancingServerGroupMemberCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewInfraLoadBalancingServerGroupMemberCreateRequestWithFormdataBody calls the generic InfraLoadBalancingServerGroupMemberCreate builder with application/x-www-form-urlencoded body
func NewInfraLoadBalancingServerGroupMemberCreateRequestWithFormdataBody(server string, params *InfraLoadBalancingServerGroupMemberCreateParams, body InfraLoadBalancingServerGroupMemberCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraLoadBalancingServerGroupMemberCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraLoadBalancingServerGroupMemberCreateRequestWithBody generates requests for InfraLoadBalancingServerGroupMemberCreate with any type of body
func NewInfraLoadBalancingServerGroupMemberCreateRequestWithBody(server string, params *InfraLoadBalancingServerGroupMemberCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/server-group-member/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingServerGroupMemberDestroyRequest generates requests for InfraLoadBalancingServerGroupMemberDestroy
func NewInfraLoadBalancingServerGroupMemberDestroyRequest(server string, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/server-group-member/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingServerGroupMemberRetrieveRequest generates requests for InfraLoadBalancingServerGroupMemberRetrieve
func NewInfraLoadBalancingServerGroupMemberRetrieveRequest(server string, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/server-group-member/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingServerGroupMemberPartialUpdateRequest calls the generic InfraLoadBalancingServerGroupMemberPartialUpdate builder with application/json body
func NewInfraLoadBalancingServerGroupMemberPartialUpdateRequest(server string, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberPartialUpdateParams, body InfraLoadBalancingServerGroupMemberPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraLoadBalancingServerGroupMemberPartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraLoadBalancingServerGroupMemberPartialUpdateRequestWithFormdataBody calls the generic InfraLoadBalancingServerGroupMemberPartialUpdate builder with application/x-www-form-urlencoded body
func NewInfraLoadBalancingServerGroupMemberPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberPartialUpdateParams, body InfraLoadBalancingServerGroupMemberPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraLoadBalancingServerGroupMemberPartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraLoadBalancingServerGroupMemberPartialUpdateRequestWithBody generates requests for InfraLoadBalancingServerGroupMemberPartialUpdate with any type of body
func NewInfraLoadBalancingServerGroupMemberPartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberPartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/server-group-member/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingServerGroupMemberUpdateRequest calls the generic InfraLoadBalancingServerGroupMemberUpdate builder with application/json body
func NewInfraLoadBalancingServerGroupMemberUpdateRequest(server string, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberUpdateParams, body InfraLoadBalancingServerGroupMemberUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraLoadBalancingServerGroupMemberUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraLoadBalancingServerGroupMemberUpdateRequestWithFormdataBody calls the generic InfraLoadBalancingServerGroupMemberUpdate builder with application/x-www-form-urlencoded body
func NewInfraLoadBalancingServerGroupMemberUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberUpdateParams, body InfraLoadBalancingServerGroupMemberUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraLoadBalancingServerGroupMemberUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraLoadBalancingServerGroupMemberUpdateRequestWithBody generates requests for InfraLoadBalancingServerGroupMemberUpdate with any type of body
func NewInfraLoadBalancingServerGroupMemberUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/server-group-member/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingServerGroupListRequest generates requests for InfraLoadBalancingServerGroupList
func NewInfraLoadBalancingServerGroupListRequest(server string, params *InfraLoadBalancingServerGroupListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/server-group/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.LoadBalancer != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "load_balancer", runtime.ParamLocationQuery, *params.LoadBalancer); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegionId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region_id", runtime.ParamLocationQuery, *params.RegionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingServerGroupCreateRequest calls the generic InfraLoadBalancingServerGroupCreate builder with application/json body
func NewInfraLoadBalancingServerGroupCreateRequest(server string, params *InfraLoadBalancingServerGroupCreateParams, body InfraLoadBalancingServerGroupCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraLoadBalancingServerGroupCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewInfraLoadBalancingServerGroupCreateRequestWithFormdataBody calls the generic InfraLoadBalancingServerGroupCreate builder with application/x-www-form-urlencoded body
func NewInfraLoadBalancingServerGroupCreateRequestWithFormdataBody(server string, params *InfraLoadBalancingServerGroupCreateParams, body InfraLoadBalancingServerGroupCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraLoadBalancingServerGroupCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraLoadBalancingServerGroupCreateRequestWithBody generates requests for InfraLoadBalancingServerGroupCreate with any type of body
func NewInfraLoadBalancingServerGroupCreateRequestWithBody(server string, params *InfraLoadBalancingServerGroupCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/server-group/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingServerGroupDestroyRequest generates requests for InfraLoadBalancingServerGroupDestroy
func NewInfraLoadBalancingServerGroupDestroyRequest(server string, id openapi_types.UUID, params *InfraLoadBalancingServerGroupDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/server-group/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingServerGroupRetrieveRequest generates requests for InfraLoadBalancingServerGroupRetrieve
func NewInfraLoadBalancingServerGroupRetrieveRequest(server string, id openapi_types.UUID, params *InfraLoadBalancingServerGroupRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/server-group/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingServerGroupPartialUpdateRequest calls the generic InfraLoadBalancingServerGroupPartialUpdate builder with application/json body
func NewInfraLoadBalancingServerGroupPartialUpdateRequest(server string, id openapi_types.UUID, params *InfraLoadBalancingServerGroupPartialUpdateParams, body InfraLoadBalancingServerGroupPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraLoadBalancingServerGroupPartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraLoadBalancingServerGroupPartialUpdateRequestWithFormdataBody calls the generic InfraLoadBalancingServerGroupPartialUpdate builder with application/x-www-form-urlencoded body
func NewInfraLoadBalancingServerGroupPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraLoadBalancingServerGroupPartialUpdateParams, body InfraLoadBalancingServerGroupPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraLoadBalancingServerGroupPartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraLoadBalancingServerGroupPartialUpdateRequestWithBody generates requests for InfraLoadBalancingServerGroupPartialUpdate with any type of body
func NewInfraLoadBalancingServerGroupPartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraLoadBalancingServerGroupPartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/server-group/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraLoadBalancingServerGroupUpdateRequest calls the generic InfraLoadBalancingServerGroupUpdate builder with application/json body
func NewInfraLoadBalancingServerGroupUpdateRequest(server string, id openapi_types.UUID, params *InfraLoadBalancingServerGroupUpdateParams, body InfraLoadBalancingServerGroupUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraLoadBalancingServerGroupUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraLoadBalancingServerGroupUpdateRequestWithFormdataBody calls the generic InfraLoadBalancingServerGroupUpdate builder with application/x-www-form-urlencoded body
func NewInfraLoadBalancingServerGroupUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraLoadBalancingServerGroupUpdateParams, body InfraLoadBalancingServerGroupUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraLoadBalancingServerGroupUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraLoadBalancingServerGroupUpdateRequestWithBody generates requests for InfraLoadBalancingServerGroupUpdate with any type of body
func NewInfraLoadBalancingServerGroupUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraLoadBalancingServerGroupUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/load-balancing/server-group/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraPlacementgroupsListRequest generates requests for InfraPlacementgroupsList
func NewInfraPlacementgroupsListRequest(server string, params *InfraPlacementgroupsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/placementgroups/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Id != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Policy != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "policy", runtime.ParamLocationQuery, *params.Policy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraPlacementgroupsCreateRequest calls the generic InfraPlacementgroupsCreate builder with application/json body
func NewInfraPlacementgroupsCreateRequest(server string, params *InfraPlacementgroupsCreateParams, body InfraPlacementgroupsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraPlacementgroupsCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewInfraPlacementgroupsCreateRequestWithFormdataBody calls the generic InfraPlacementgroupsCreate builder with application/x-www-form-urlencoded body
func NewInfraPlacementgroupsCreateRequestWithFormdataBody(server string, params *InfraPlacementgroupsCreateParams, body InfraPlacementgroupsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraPlacementgroupsCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraPlacementgroupsCreateRequestWithBody generates requests for InfraPlacementgroupsCreate with any type of body
func NewInfraPlacementgroupsCreateRequestWithBody(server string, params *InfraPlacementgroupsCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/placementgroups/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraPlacementgroupsDestroyRequest generates requests for InfraPlacementgroupsDestroy
func NewInfraPlacementgroupsDestroyRequest(server string, id openapi_types.UUID, params *InfraPlacementgroupsDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/placementgroups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraPlacementgroupsRetrieveRequest generates requests for InfraPlacementgroupsRetrieve
func NewInfraPlacementgroupsRetrieveRequest(server string, id openapi_types.UUID, params *InfraPlacementgroupsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/placementgroups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraPlacementgroupsPartialUpdateRequest calls the generic InfraPlacementgroupsPartialUpdate builder with application/json body
func NewInfraPlacementgroupsPartialUpdateRequest(server string, id openapi_types.UUID, params *InfraPlacementgroupsPartialUpdateParams, body InfraPlacementgroupsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraPlacementgroupsPartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraPlacementgroupsPartialUpdateRequestWithFormdataBody calls the generic InfraPlacementgroupsPartialUpdate builder with application/x-www-form-urlencoded body
func NewInfraPlacementgroupsPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraPlacementgroupsPartialUpdateParams, body InfraPlacementgroupsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraPlacementgroupsPartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraPlacementgroupsPartialUpdateRequestWithBody generates requests for InfraPlacementgroupsPartialUpdate with any type of body
func NewInfraPlacementgroupsPartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraPlacementgroupsPartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/placementgroups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraPlacementgroupsUpdateRequest calls the generic InfraPlacementgroupsUpdate builder with application/json body
func NewInfraPlacementgroupsUpdateRequest(server string, id openapi_types.UUID, params *InfraPlacementgroupsUpdateParams, body InfraPlacementgroupsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraPlacementgroupsUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraPlacementgroupsUpdateRequestWithFormdataBody calls the generic InfraPlacementgroupsUpdate builder with application/x-www-form-urlencoded body
func NewInfraPlacementgroupsUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraPlacementgroupsUpdateParams, body InfraPlacementgroupsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraPlacementgroupsUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraPlacementgroupsUpdateRequestWithBody generates requests for InfraPlacementgroupsUpdate with any type of body
func NewInfraPlacementgroupsUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraPlacementgroupsUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/placementgroups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraPrivateIpsListRequest generates requests for InfraPrivateIpsList
func NewInfraPrivateIpsListRequest(server string, params *InfraPrivateIpsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/private-ips/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Available != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "available", runtime.ParamLocationQuery, *params.Available); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IpAddress != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ip_address", runtime.ParamLocationQuery, *params.IpAddress); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegionId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region_id", runtime.ParamLocationQuery, *params.RegionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SubnetId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subnet_id", runtime.ParamLocationQuery, *params.SubnetId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraPrivateIpsCreateRequest calls the generic InfraPrivateIpsCreate builder with application/json body
func NewInfraPrivateIpsCreateRequest(server string, params *InfraPrivateIpsCreateParams, body InfraPrivateIpsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraPrivateIpsCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewInfraPrivateIpsCreateRequestWithFormdataBody calls the generic InfraPrivateIpsCreate builder with application/x-www-form-urlencoded body
func NewInfraPrivateIpsCreateRequestWithFormdataBody(server string, params *InfraPrivateIpsCreateParams, body InfraPrivateIpsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraPrivateIpsCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraPrivateIpsCreateRequestWithBody generates requests for InfraPrivateIpsCreate with any type of body
func NewInfraPrivateIpsCreateRequestWithBody(server string, params *InfraPrivateIpsCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/private-ips/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraPrivateIpsDestroyRequest generates requests for InfraPrivateIpsDestroy
func NewInfraPrivateIpsDestroyRequest(server string, id openapi_types.UUID, params *InfraPrivateIpsDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/private-ips/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraPrivateIpsRetrieveRequest generates requests for InfraPrivateIpsRetrieve
func NewInfraPrivateIpsRetrieveRequest(server string, id openapi_types.UUID, params *InfraPrivateIpsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/private-ips/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraPrivateIpsPartialUpdateRequest calls the generic InfraPrivateIpsPartialUpdate builder with application/json body
func NewInfraPrivateIpsPartialUpdateRequest(server string, id openapi_types.UUID, params *InfraPrivateIpsPartialUpdateParams, body InfraPrivateIpsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraPrivateIpsPartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraPrivateIpsPartialUpdateRequestWithFormdataBody calls the generic InfraPrivateIpsPartialUpdate builder with application/x-www-form-urlencoded body
func NewInfraPrivateIpsPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraPrivateIpsPartialUpdateParams, body InfraPrivateIpsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraPrivateIpsPartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraPrivateIpsPartialUpdateRequestWithBody generates requests for InfraPrivateIpsPartialUpdate with any type of body
func NewInfraPrivateIpsPartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraPrivateIpsPartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/private-ips/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraPrivateIpsUpdateRequest calls the generic InfraPrivateIpsUpdate builder with application/json body
func NewInfraPrivateIpsUpdateRequest(server string, id openapi_types.UUID, params *InfraPrivateIpsUpdateParams, body InfraPrivateIpsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraPrivateIpsUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraPrivateIpsUpdateRequestWithFormdataBody calls the generic InfraPrivateIpsUpdate builder with application/x-www-form-urlencoded body
func NewInfraPrivateIpsUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraPrivateIpsUpdateParams, body InfraPrivateIpsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraPrivateIpsUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraPrivateIpsUpdateRequestWithBody generates requests for InfraPrivateIpsUpdate with any type of body
func NewInfraPrivateIpsUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraPrivateIpsUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/private-ips/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraRouteTablesListRequest generates requests for InfraRouteTablesList
func NewInfraRouteTablesListRequest(server string, params *InfraRouteTablesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/route-tables/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegionId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region_id", runtime.ParamLocationQuery, *params.RegionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraRouteTablesCreateRequest calls the generic InfraRouteTablesCreate builder with application/json body
func NewInfraRouteTablesCreateRequest(server string, params *InfraRouteTablesCreateParams, body InfraRouteTablesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraRouteTablesCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewInfraRouteTablesCreateRequestWithFormdataBody calls the generic InfraRouteTablesCreate builder with application/x-www-form-urlencoded body
func NewInfraRouteTablesCreateRequestWithFormdataBody(server string, params *InfraRouteTablesCreateParams, body InfraRouteTablesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraRouteTablesCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraRouteTablesCreateRequestWithBody generates requests for InfraRouteTablesCreate with any type of body
func NewInfraRouteTablesCreateRequestWithBody(server string, params *InfraRouteTablesCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/route-tables/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraRouteTablesDestroyRequest generates requests for InfraRouteTablesDestroy
func NewInfraRouteTablesDestroyRequest(server string, id openapi_types.UUID, params *InfraRouteTablesDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/route-tables/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraRouteTablesRetrieveRequest generates requests for InfraRouteTablesRetrieve
func NewInfraRouteTablesRetrieveRequest(server string, id openapi_types.UUID, params *InfraRouteTablesRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/route-tables/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraRouteTablesPartialUpdateRequest calls the generic InfraRouteTablesPartialUpdate builder with application/json body
func NewInfraRouteTablesPartialUpdateRequest(server string, id openapi_types.UUID, params *InfraRouteTablesPartialUpdateParams, body InfraRouteTablesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraRouteTablesPartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraRouteTablesPartialUpdateRequestWithFormdataBody calls the generic InfraRouteTablesPartialUpdate builder with application/x-www-form-urlencoded body
func NewInfraRouteTablesPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraRouteTablesPartialUpdateParams, body InfraRouteTablesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraRouteTablesPartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraRouteTablesPartialUpdateRequestWithBody generates requests for InfraRouteTablesPartialUpdate with any type of body
func NewInfraRouteTablesPartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraRouteTablesPartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/route-tables/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraRouteTablesUpdateRequest calls the generic InfraRouteTablesUpdate builder with application/json body
func NewInfraRouteTablesUpdateRequest(server string, id openapi_types.UUID, params *InfraRouteTablesUpdateParams, body InfraRouteTablesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraRouteTablesUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraRouteTablesUpdateRequestWithFormdataBody calls the generic InfraRouteTablesUpdate builder with application/x-www-form-urlencoded body
func NewInfraRouteTablesUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraRouteTablesUpdateParams, body InfraRouteTablesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraRouteTablesUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraRouteTablesUpdateRequestWithBody generates requests for InfraRouteTablesUpdate with any type of body
func NewInfraRouteTablesUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraRouteTablesUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/route-tables/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraRouteTablesDisableInternetAccessUpdateRequest generates requests for InfraRouteTablesDisableInternetAccessUpdate
func NewInfraRouteTablesDisableInternetAccessUpdateRequest(server string, id openapi_types.UUID, params *InfraRouteTablesDisableInternetAccessUpdateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/route-tables/%s/disable-internet-access/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraRouteTablesEnableInternetAccessUpdateRequest generates requests for InfraRouteTablesEnableInternetAccessUpdate
func NewInfraRouteTablesEnableInternetAccessUpdateRequest(server string, id openapi_types.UUID, params *InfraRouteTablesEnableInternetAccessUpdateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/route-tables/%s/enable-internet-access/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraRouteTablesSubnetsRetrieveRequest generates requests for InfraRouteTablesSubnetsRetrieve
func NewInfraRouteTablesSubnetsRetrieveRequest(server string, id openapi_types.UUID, params *InfraRouteTablesSubnetsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/route-tables/%s/subnets/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraSecurityGroupRulesListRequest generates requests for InfraSecurityGroupRulesList
func NewInfraSecurityGroupRulesListRequest(server string, params *InfraSecurityGroupRulesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/security-group-rules/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Direction != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "direction", runtime.ParamLocationQuery, *params.Direction); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SecurityGroupId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "security_group_id", runtime.ParamLocationQuery, *params.SecurityGroupId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraSecurityGroupRulesCreateRequest calls the generic InfraSecurityGroupRulesCreate builder with application/json body
func NewInfraSecurityGroupRulesCreateRequest(server string, params *InfraSecurityGroupRulesCreateParams, body InfraSecurityGroupRulesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraSecurityGroupRulesCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewInfraSecurityGroupRulesCreateRequestWithFormdataBody calls the generic InfraSecurityGroupRulesCreate builder with application/x-www-form-urlencoded body
func NewInfraSecurityGroupRulesCreateRequestWithFormdataBody(server string, params *InfraSecurityGroupRulesCreateParams, body InfraSecurityGroupRulesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraSecurityGroupRulesCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraSecurityGroupRulesCreateRequestWithBody generates requests for InfraSecurityGroupRulesCreate with any type of body
func NewInfraSecurityGroupRulesCreateRequestWithBody(server string, params *InfraSecurityGroupRulesCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/security-group-rules/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraSecurityGroupRulesDestroyRequest generates requests for InfraSecurityGroupRulesDestroy
func NewInfraSecurityGroupRulesDestroyRequest(server string, id openapi_types.UUID, params *InfraSecurityGroupRulesDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/security-group-rules/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraSecurityGroupRulesRetrieveRequest generates requests for InfraSecurityGroupRulesRetrieve
func NewInfraSecurityGroupRulesRetrieveRequest(server string, id openapi_types.UUID, params *InfraSecurityGroupRulesRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/security-group-rules/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraSecurityGroupRulesPartialUpdateRequest calls the generic InfraSecurityGroupRulesPartialUpdate builder with application/json body
func NewInfraSecurityGroupRulesPartialUpdateRequest(server string, id openapi_types.UUID, params *InfraSecurityGroupRulesPartialUpdateParams, body InfraSecurityGroupRulesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraSecurityGroupRulesPartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraSecurityGroupRulesPartialUpdateRequestWithFormdataBody calls the generic InfraSecurityGroupRulesPartialUpdate builder with application/x-www-form-urlencoded body
func NewInfraSecurityGroupRulesPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraSecurityGroupRulesPartialUpdateParams, body InfraSecurityGroupRulesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraSecurityGroupRulesPartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraSecurityGroupRulesPartialUpdateRequestWithBody generates requests for InfraSecurityGroupRulesPartialUpdate with any type of body
func NewInfraSecurityGroupRulesPartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraSecurityGroupRulesPartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/security-group-rules/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraSecurityGroupRulesUpdateRequest calls the generic InfraSecurityGroupRulesUpdate builder with application/json body
func NewInfraSecurityGroupRulesUpdateRequest(server string, id openapi_types.UUID, params *InfraSecurityGroupRulesUpdateParams, body InfraSecurityGroupRulesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraSecurityGroupRulesUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraSecurityGroupRulesUpdateRequestWithFormdataBody calls the generic InfraSecurityGroupRulesUpdate builder with application/x-www-form-urlencoded body
func NewInfraSecurityGroupRulesUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraSecurityGroupRulesUpdateParams, body InfraSecurityGroupRulesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraSecurityGroupRulesUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraSecurityGroupRulesUpdateRequestWithBody generates requests for InfraSecurityGroupRulesUpdate with any type of body
func NewInfraSecurityGroupRulesUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraSecurityGroupRulesUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/security-group-rules/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraSecurityGroupsListRequest generates requests for InfraSecurityGroupsList
func NewInfraSecurityGroupsListRequest(server string, params *InfraSecurityGroupsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/security-groups/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegionId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region_id", runtime.ParamLocationQuery, *params.RegionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraSecurityGroupsCreateRequest calls the generic InfraSecurityGroupsCreate builder with application/json body
func NewInfraSecurityGroupsCreateRequest(server string, params *InfraSecurityGroupsCreateParams, body InfraSecurityGroupsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraSecurityGroupsCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewInfraSecurityGroupsCreateRequestWithFormdataBody calls the generic InfraSecurityGroupsCreate builder with application/x-www-form-urlencoded body
func NewInfraSecurityGroupsCreateRequestWithFormdataBody(server string, params *InfraSecurityGroupsCreateParams, body InfraSecurityGroupsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraSecurityGroupsCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraSecurityGroupsCreateRequestWithBody generates requests for InfraSecurityGroupsCreate with any type of body
func NewInfraSecurityGroupsCreateRequestWithBody(server string, params *InfraSecurityGroupsCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/security-groups/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraSecurityGroupsDestroyRequest generates requests for InfraSecurityGroupsDestroy
func NewInfraSecurityGroupsDestroyRequest(server string, id openapi_types.UUID, params *InfraSecurityGroupsDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/security-groups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraSecurityGroupsRetrieveRequest generates requests for InfraSecurityGroupsRetrieve
func NewInfraSecurityGroupsRetrieveRequest(server string, id openapi_types.UUID, params *InfraSecurityGroupsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/security-groups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraSecurityGroupsPartialUpdateRequest calls the generic InfraSecurityGroupsPartialUpdate builder with application/json body
func NewInfraSecurityGroupsPartialUpdateRequest(server string, id openapi_types.UUID, params *InfraSecurityGroupsPartialUpdateParams, body InfraSecurityGroupsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraSecurityGroupsPartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraSecurityGroupsPartialUpdateRequestWithFormdataBody calls the generic InfraSecurityGroupsPartialUpdate builder with application/x-www-form-urlencoded body
func NewInfraSecurityGroupsPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraSecurityGroupsPartialUpdateParams, body InfraSecurityGroupsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraSecurityGroupsPartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraSecurityGroupsPartialUpdateRequestWithBody generates requests for InfraSecurityGroupsPartialUpdate with any type of body
func NewInfraSecurityGroupsPartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraSecurityGroupsPartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/security-groups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraSecurityGroupsUpdateRequest calls the generic InfraSecurityGroupsUpdate builder with application/json body
func NewInfraSecurityGroupsUpdateRequest(server string, id openapi_types.UUID, params *InfraSecurityGroupsUpdateParams, body InfraSecurityGroupsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraSecurityGroupsUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraSecurityGroupsUpdateRequestWithFormdataBody calls the generic InfraSecurityGroupsUpdate builder with application/x-www-form-urlencoded body
func NewInfraSecurityGroupsUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraSecurityGroupsUpdateParams, body InfraSecurityGroupsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraSecurityGroupsUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraSecurityGroupsUpdateRequestWithBody generates requests for InfraSecurityGroupsUpdate with any type of body
func NewInfraSecurityGroupsUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraSecurityGroupsUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/security-groups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraServersListRequest generates requests for InfraServersList
func NewInfraServersListRequest(server string, params *InfraServersListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/servers/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ElasticIp != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "elastic_ip", runtime.ParamLocationQuery, *params.ElasticIp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Id != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Owner != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owner", runtime.ParamLocationQuery, *params.Owner); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PlacementGroup != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "placement_group", runtime.ParamLocationQuery, *params.PlacementGroup); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PowerState != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "power_state", runtime.ParamLocationQuery, *params.PowerState); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PrivateIp != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "private_ip", runtime.ParamLocationQuery, *params.PrivateIp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Project != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, *params.Project); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Vpc != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vpc", runtime.ParamLocationQuery, *params.Vpc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Zone != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone", runtime.ParamLocationQuery, *params.Zone); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraServersCreateRequest calls the generic InfraServersCreate builder with application/json body
func NewInfraServersCreateRequest(server string, params *InfraServersCreateParams, body InfraServersCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraServersCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewInfraServersCreateRequestWithFormdataBody calls the generic InfraServersCreate builder with application/x-www-form-urlencoded body
func NewInfraServersCreateRequestWithFormdataBody(server string, params *InfraServersCreateParams, body InfraServersCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraServersCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraServersCreateRequestWithBody generates requests for InfraServersCreate with any type of body
func NewInfraServersCreateRequestWithBody(server string, params *InfraServersCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/servers/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraServersMetricsSchemaRetrieveRequest generates requests for InfraServersMetricsSchemaRetrieve
func NewInfraServersMetricsSchemaRetrieveRequest(server string, params *InfraServersMetricsSchemaRetrieveParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/servers/metrics-schema/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraServersDestroyRequest generates requests for InfraServersDestroy
func NewInfraServersDestroyRequest(server string, id openapi_types.UUID, params *InfraServersDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/servers/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraServersRetrieveRequest generates requests for InfraServersRetrieve
func NewInfraServersRetrieveRequest(server string, id openapi_types.UUID, params *InfraServersRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/servers/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraServersPartialUpdateRequest calls the generic InfraServersPartialUpdate builder with application/json body
func NewInfraServersPartialUpdateRequest(server string, id openapi_types.UUID, params *InfraServersPartialUpdateParams, body InfraServersPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraServersPartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraServersPartialUpdateRequestWithFormdataBody calls the generic InfraServersPartialUpdate builder with application/x-www-form-urlencoded body
func NewInfraServersPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraServersPartialUpdateParams, body InfraServersPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraServersPartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraServersPartialUpdateRequestWithBody generates requests for InfraServersPartialUpdate with any type of body
func NewInfraServersPartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraServersPartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/servers/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraServersUpdateRequest calls the generic InfraServersUpdate builder with application/json body
func NewInfraServersUpdateRequest(server string, id openapi_types.UUID, body InfraServersUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraServersUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewInfraServersUpdateRequestWithFormdataBody calls the generic InfraServersUpdate builder with application/x-www-form-urlencoded body
func NewInfraServersUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, body InfraServersUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraServersUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraServersUpdateRequestWithBody generates requests for InfraServersUpdate with any type of body
func NewInfraServersUpdateRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/servers/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInfraServersActionLogRetrieveRequest generates requests for InfraServersActionLogRetrieve
func NewInfraServersActionLogRetrieveRequest(server string, id openapi_types.UUID, params *InfraServersActionLogRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/servers/%s/action-log/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraServersAttachEipCreateRequest calls the generic InfraServersAttachEipCreate builder with application/json body
func NewInfraServersAttachEipCreateRequest(server string, id openapi_types.UUID, params *InfraServersAttachEipCreateParams, body InfraServersAttachEipCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraServersAttachEipCreateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraServersAttachEipCreateRequestWithFormdataBody calls the generic InfraServersAttachEipCreate builder with application/x-www-form-urlencoded body
func NewInfraServersAttachEipCreateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraServersAttachEipCreateParams, body InfraServersAttachEipCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraServersAttachEipCreateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraServersAttachEipCreateRequestWithBody generates requests for InfraServersAttachEipCreate with any type of body
func NewInfraServersAttachEipCreateRequestWithBody(server string, id openapi_types.UUID, params *InfraServersAttachEipCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/servers/%s/attach-eip/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraServersAttachPrivateipCreateRequest calls the generic InfraServersAttachPrivateipCreate builder with application/json body
func NewInfraServersAttachPrivateipCreateRequest(server string, id openapi_types.UUID, params *InfraServersAttachPrivateipCreateParams, body InfraServersAttachPrivateipCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraServersAttachPrivateipCreateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraServersAttachPrivateipCreateRequestWithFormdataBody calls the generic InfraServersAttachPrivateipCreate builder with application/x-www-form-urlencoded body
func NewInfraServersAttachPrivateipCreateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraServersAttachPrivateipCreateParams, body InfraServersAttachPrivateipCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraServersAttachPrivateipCreateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraServersAttachPrivateipCreateRequestWithBody generates requests for InfraServersAttachPrivateipCreate with any type of body
func NewInfraServersAttachPrivateipCreateRequestWithBody(server string, id openapi_types.UUID, params *InfraServersAttachPrivateipCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/servers/%s/attach-privateip/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraServersAttachSubnetCreateRequest calls the generic InfraServersAttachSubnetCreate builder with application/json body
func NewInfraServersAttachSubnetCreateRequest(server string, id openapi_types.UUID, params *InfraServersAttachSubnetCreateParams, body InfraServersAttachSubnetCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraServersAttachSubnetCreateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraServersAttachSubnetCreateRequestWithFormdataBody calls the generic InfraServersAttachSubnetCreate builder with application/x-www-form-urlencoded body
func NewInfraServersAttachSubnetCreateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraServersAttachSubnetCreateParams, body InfraServersAttachSubnetCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraServersAttachSubnetCreateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraServersAttachSubnetCreateRequestWithBody generates requests for InfraServersAttachSubnetCreate with any type of body
func NewInfraServersAttachSubnetCreateRequestWithBody(server string, id openapi_types.UUID, params *InfraServersAttachSubnetCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/servers/%s/attach-subnet/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraServersAttachVolumeCreateRequest calls the generic InfraServersAttachVolumeCreate builder with application/json body
func NewInfraServersAttachVolumeCreateRequest(server string, id openapi_types.UUID, params *InfraServersAttachVolumeCreateParams, body InfraServersAttachVolumeCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraServersAttachVolumeCreateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraServersAttachVolumeCreateRequestWithFormdataBody calls the generic InfraServersAttachVolumeCreate builder with application/x-www-form-urlencoded body
func NewInfraServersAttachVolumeCreateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraServersAttachVolumeCreateParams, body InfraServersAttachVolumeCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraServersAttachVolumeCreateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraServersAttachVolumeCreateRequestWithBody generates requests for InfraServersAttachVolumeCreate with any type of body
func NewInfraServersAttachVolumeCreateRequestWithBody(server string, id openapi_types.UUID, params *InfraServersAttachVolumeCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/servers/%s/attach-volume/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraServersChangePasswordCreateRequest calls the generic InfraServersChangePasswordCreate builder with application/json body
func NewInfraServersChangePasswordCreateRequest(server string, id openapi_types.UUID, params *InfraServersChangePasswordCreateParams, body InfraServersChangePasswordCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraServersChangePasswordCreateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraServersChangePasswordCreateRequestWithFormdataBody calls the generic InfraServersChangePasswordCreate builder with application/x-www-form-urlencoded body
func NewInfraServersChangePasswordCreateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraServersChangePasswordCreateParams, body InfraServersChangePasswordCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraServersChangePasswordCreateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraServersChangePasswordCreateRequestWithBody generates requests for InfraServersChangePasswordCreate with any type of body
func NewInfraServersChangePasswordCreateRequestWithBody(server string, id openapi_types.UUID, params *InfraServersChangePasswordCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/servers/%s/change-password/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraServersConsoleLogRetrieveRequest generates requests for InfraServersConsoleLogRetrieve
func NewInfraServersConsoleLogRetrieveRequest(server string, id openapi_types.UUID, params *InfraServersConsoleLogRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/servers/%s/console-log/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraServersConsoleCreateRequest generates requests for InfraServersConsoleCreate
func NewInfraServersConsoleCreateRequest(server string, id openapi_types.UUID, params *InfraServersConsoleCreateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/servers/%s/console/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraServersDeleteCreateRequest calls the generic InfraServersDeleteCreate builder with application/json body
func NewInfraServersDeleteCreateRequest(server string, id openapi_types.UUID, params *InfraServersDeleteCreateParams, body InfraServersDeleteCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraServersDeleteCreateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraServersDeleteCreateRequestWithFormdataBody calls the generic InfraServersDeleteCreate builder with application/x-www-form-urlencoded body
func NewInfraServersDeleteCreateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraServersDeleteCreateParams, body InfraServersDeleteCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraServersDeleteCreateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraServersDeleteCreateRequestWithBody generates requests for InfraServersDeleteCreate with any type of body
func NewInfraServersDeleteCreateRequestWithBody(server string, id openapi_types.UUID, params *InfraServersDeleteCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/servers/%s/delete/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraServersDetachEipCreateRequest calls the generic InfraServersDetachEipCreate builder with application/json body
func NewInfraServersDetachEipCreateRequest(server string, id openapi_types.UUID, params *InfraServersDetachEipCreateParams, body InfraServersDetachEipCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraServersDetachEipCreateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraServersDetachEipCreateRequestWithFormdataBody calls the generic InfraServersDetachEipCreate builder with application/x-www-form-urlencoded body
func NewInfraServersDetachEipCreateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraServersDetachEipCreateParams, body InfraServersDetachEipCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraServersDetachEipCreateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraServersDetachEipCreateRequestWithBody generates requests for InfraServersDetachEipCreate with any type of body
func NewInfraServersDetachEipCreateRequestWithBody(server string, id openapi_types.UUID, params *InfraServersDetachEipCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/servers/%s/detach-eip/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraServersDetachPrivateIpCreateRequest calls the generic InfraServersDetachPrivateIpCreate builder with application/json body
func NewInfraServersDetachPrivateIpCreateRequest(server string, id openapi_types.UUID, params *InfraServersDetachPrivateIpCreateParams, body InfraServersDetachPrivateIpCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraServersDetachPrivateIpCreateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraServersDetachPrivateIpCreateRequestWithFormdataBody calls the generic InfraServersDetachPrivateIpCreate builder with application/x-www-form-urlencoded body
func NewInfraServersDetachPrivateIpCreateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraServersDetachPrivateIpCreateParams, body InfraServersDetachPrivateIpCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraServersDetachPrivateIpCreateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraServersDetachPrivateIpCreateRequestWithBody generates requests for InfraServersDetachPrivateIpCreate with any type of body
func NewInfraServersDetachPrivateIpCreateRequestWithBody(server string, id openapi_types.UUID, params *InfraServersDetachPrivateIpCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/servers/%s/detach-private-ip/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraServersDetachVolumeCreateRequest calls the generic InfraServersDetachVolumeCreate builder with application/json body
func NewInfraServersDetachVolumeCreateRequest(server string, id openapi_types.UUID, params *InfraServersDetachVolumeCreateParams, body InfraServersDetachVolumeCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraServersDetachVolumeCreateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraServersDetachVolumeCreateRequestWithFormdataBody calls the generic InfraServersDetachVolumeCreate builder with application/x-www-form-urlencoded body
func NewInfraServersDetachVolumeCreateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraServersDetachVolumeCreateParams, body InfraServersDetachVolumeCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraServersDetachVolumeCreateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraServersDetachVolumeCreateRequestWithBody generates requests for InfraServersDetachVolumeCreate with any type of body
func NewInfraServersDetachVolumeCreateRequestWithBody(server string, id openapi_types.UUID, params *InfraServersDetachVolumeCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/servers/%s/detach-volume/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraServersMetricsRetrieveRequest generates requests for InfraServersMetricsRetrieve
func NewInfraServersMetricsRetrieveRequest(server string, id openapi_types.UUID, params *InfraServersMetricsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/servers/%s/metrics/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.End != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, *params.End); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Metric != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "metric", runtime.ParamLocationQuery, *params.Metric); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraServersResizeCreateRequest calls the generic InfraServersResizeCreate builder with application/json body
func NewInfraServersResizeCreateRequest(server string, id openapi_types.UUID, params *InfraServersResizeCreateParams, body InfraServersResizeCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraServersResizeCreateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraServersResizeCreateRequestWithFormdataBody calls the generic InfraServersResizeCreate builder with application/x-www-form-urlencoded body
func NewInfraServersResizeCreateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraServersResizeCreateParams, body InfraServersResizeCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraServersResizeCreateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraServersResizeCreateRequestWithBody generates requests for InfraServersResizeCreate with any type of body
func NewInfraServersResizeCreateRequestWithBody(server string, id openapi_types.UUID, params *InfraServersResizeCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/servers/%s/resize/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraServersStartCreateRequest generates requests for InfraServersStartCreate
func NewInfraServersStartCreateRequest(server string, id openapi_types.UUID, params *InfraServersStartCreateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/servers/%s/start/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraServersStopCreateRequest generates requests for InfraServersStopCreate
func NewInfraServersStopCreateRequest(server string, id openapi_types.UUID, params *InfraServersStopCreateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/servers/%s/stop/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraSnapshotpolicyListRequest generates requests for InfraSnapshotpolicyList
func NewInfraSnapshotpolicyListRequest(server string, params *InfraSnapshotpolicyListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/snapshotpolicy/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.DaysOfWeek != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "days_of_week", runtime.ParamLocationQuery, *params.DaysOfWeek); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Id != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Retention != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "retention", runtime.ParamLocationQuery, *params.Retention); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Time != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time", runtime.ParamLocationQuery, *params.Time); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraSnapshotpolicyCreateRequest calls the generic InfraSnapshotpolicyCreate builder with application/json body
func NewInfraSnapshotpolicyCreateRequest(server string, params *InfraSnapshotpolicyCreateParams, body InfraSnapshotpolicyCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraSnapshotpolicyCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewInfraSnapshotpolicyCreateRequestWithFormdataBody calls the generic InfraSnapshotpolicyCreate builder with application/x-www-form-urlencoded body
func NewInfraSnapshotpolicyCreateRequestWithFormdataBody(server string, params *InfraSnapshotpolicyCreateParams, body InfraSnapshotpolicyCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraSnapshotpolicyCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraSnapshotpolicyCreateRequestWithBody generates requests for InfraSnapshotpolicyCreate with any type of body
func NewInfraSnapshotpolicyCreateRequestWithBody(server string, params *InfraSnapshotpolicyCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/snapshotpolicy/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraSnapshotpolicyDestroyRequest generates requests for InfraSnapshotpolicyDestroy
func NewInfraSnapshotpolicyDestroyRequest(server string, id openapi_types.UUID, params *InfraSnapshotpolicyDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/snapshotpolicy/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraSnapshotpolicyRetrieveRequest generates requests for InfraSnapshotpolicyRetrieve
func NewInfraSnapshotpolicyRetrieveRequest(server string, id openapi_types.UUID, params *InfraSnapshotpolicyRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/snapshotpolicy/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraSnapshotpolicyPartialUpdateRequest calls the generic InfraSnapshotpolicyPartialUpdate builder with application/json body
func NewInfraSnapshotpolicyPartialUpdateRequest(server string, id openapi_types.UUID, params *InfraSnapshotpolicyPartialUpdateParams, body InfraSnapshotpolicyPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraSnapshotpolicyPartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraSnapshotpolicyPartialUpdateRequestWithFormdataBody calls the generic InfraSnapshotpolicyPartialUpdate builder with application/x-www-form-urlencoded body
func NewInfraSnapshotpolicyPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraSnapshotpolicyPartialUpdateParams, body InfraSnapshotpolicyPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraSnapshotpolicyPartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraSnapshotpolicyPartialUpdateRequestWithBody generates requests for InfraSnapshotpolicyPartialUpdate with any type of body
func NewInfraSnapshotpolicyPartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraSnapshotpolicyPartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/snapshotpolicy/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraSnapshotpolicyUpdateRequest calls the generic InfraSnapshotpolicyUpdate builder with application/json body
func NewInfraSnapshotpolicyUpdateRequest(server string, id openapi_types.UUID, params *InfraSnapshotpolicyUpdateParams, body InfraSnapshotpolicyUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraSnapshotpolicyUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraSnapshotpolicyUpdateRequestWithFormdataBody calls the generic InfraSnapshotpolicyUpdate builder with application/x-www-form-urlencoded body
func NewInfraSnapshotpolicyUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraSnapshotpolicyUpdateParams, body InfraSnapshotpolicyUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraSnapshotpolicyUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraSnapshotpolicyUpdateRequestWithBody generates requests for InfraSnapshotpolicyUpdate with any type of body
func NewInfraSnapshotpolicyUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraSnapshotpolicyUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/snapshotpolicy/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraSnapshotsListRequest generates requests for InfraSnapshotsList
func NewInfraSnapshotsListRequest(server string, params *InfraSnapshotsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/snapshots/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegionId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region_id", runtime.ParamLocationQuery, *params.RegionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Size != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Volume != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "volume", runtime.ParamLocationQuery, *params.Volume); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.VolumeId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "volume_id", runtime.ParamLocationQuery, *params.VolumeId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Zone != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone", runtime.ParamLocationQuery, *params.Zone); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ZoneId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone_id", runtime.ParamLocationQuery, *params.ZoneId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraSnapshotsCreateRequest calls the generic InfraSnapshotsCreate builder with application/json body
func NewInfraSnapshotsCreateRequest(server string, params *InfraSnapshotsCreateParams, body InfraSnapshotsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraSnapshotsCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewInfraSnapshotsCreateRequestWithFormdataBody calls the generic InfraSnapshotsCreate builder with application/x-www-form-urlencoded body
func NewInfraSnapshotsCreateRequestWithFormdataBody(server string, params *InfraSnapshotsCreateParams, body InfraSnapshotsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraSnapshotsCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraSnapshotsCreateRequestWithBody generates requests for InfraSnapshotsCreate with any type of body
func NewInfraSnapshotsCreateRequestWithBody(server string, params *InfraSnapshotsCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/snapshots/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraSnapshotsDestroyRequest generates requests for InfraSnapshotsDestroy
func NewInfraSnapshotsDestroyRequest(server string, id openapi_types.UUID, params *InfraSnapshotsDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/snapshots/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraSnapshotsRetrieveRequest generates requests for InfraSnapshotsRetrieve
func NewInfraSnapshotsRetrieveRequest(server string, id openapi_types.UUID, params *InfraSnapshotsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/snapshots/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraSnapshotsPartialUpdateRequest calls the generic InfraSnapshotsPartialUpdate builder with application/json body
func NewInfraSnapshotsPartialUpdateRequest(server string, id openapi_types.UUID, params *InfraSnapshotsPartialUpdateParams, body InfraSnapshotsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraSnapshotsPartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraSnapshotsPartialUpdateRequestWithFormdataBody calls the generic InfraSnapshotsPartialUpdate builder with application/x-www-form-urlencoded body
func NewInfraSnapshotsPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraSnapshotsPartialUpdateParams, body InfraSnapshotsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraSnapshotsPartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraSnapshotsPartialUpdateRequestWithBody generates requests for InfraSnapshotsPartialUpdate with any type of body
func NewInfraSnapshotsPartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraSnapshotsPartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/snapshots/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraSnapshotsUpdateRequest calls the generic InfraSnapshotsUpdate builder with application/json body
func NewInfraSnapshotsUpdateRequest(server string, id openapi_types.UUID, params *InfraSnapshotsUpdateParams, body InfraSnapshotsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraSnapshotsUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraSnapshotsUpdateRequestWithFormdataBody calls the generic InfraSnapshotsUpdate builder with application/x-www-form-urlencoded body
func NewInfraSnapshotsUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraSnapshotsUpdateParams, body InfraSnapshotsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraSnapshotsUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraSnapshotsUpdateRequestWithBody generates requests for InfraSnapshotsUpdate with any type of body
func NewInfraSnapshotsUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraSnapshotsUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/snapshots/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraSubnetsListRequest generates requests for InfraSubnetsList
func NewInfraSubnetsListRequest(server string, params *InfraSubnetsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/subnets/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Cidr != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cidr", runtime.ParamLocationQuery, *params.Cidr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegionId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region_id", runtime.ParamLocationQuery, *params.RegionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Vpc != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vpc", runtime.ParamLocationQuery, *params.Vpc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.VpcName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vpc_name", runtime.ParamLocationQuery, *params.VpcName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraSubnetsCreateRequest calls the generic InfraSubnetsCreate builder with application/json body
func NewInfraSubnetsCreateRequest(server string, params *InfraSubnetsCreateParams, body InfraSubnetsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraSubnetsCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewInfraSubnetsCreateRequestWithFormdataBody calls the generic InfraSubnetsCreate builder with application/x-www-form-urlencoded body
func NewInfraSubnetsCreateRequestWithFormdataBody(server string, params *InfraSubnetsCreateParams, body InfraSubnetsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraSubnetsCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraSubnetsCreateRequestWithBody generates requests for InfraSubnetsCreate with any type of body
func NewInfraSubnetsCreateRequestWithBody(server string, params *InfraSubnetsCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/subnets/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraSubnetsDestroyRequest generates requests for InfraSubnetsDestroy
func NewInfraSubnetsDestroyRequest(server string, id openapi_types.UUID, params *InfraSubnetsDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/subnets/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraSubnetsRetrieveRequest generates requests for InfraSubnetsRetrieve
func NewInfraSubnetsRetrieveRequest(server string, id openapi_types.UUID, params *InfraSubnetsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/subnets/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraSubnetsPartialUpdateRequest calls the generic InfraSubnetsPartialUpdate builder with application/json body
func NewInfraSubnetsPartialUpdateRequest(server string, id openapi_types.UUID, params *InfraSubnetsPartialUpdateParams, body InfraSubnetsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraSubnetsPartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraSubnetsPartialUpdateRequestWithFormdataBody calls the generic InfraSubnetsPartialUpdate builder with application/x-www-form-urlencoded body
func NewInfraSubnetsPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraSubnetsPartialUpdateParams, body InfraSubnetsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraSubnetsPartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraSubnetsPartialUpdateRequestWithBody generates requests for InfraSubnetsPartialUpdate with any type of body
func NewInfraSubnetsPartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraSubnetsPartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/subnets/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraSubnetsUpdateRequest calls the generic InfraSubnetsUpdate builder with application/json body
func NewInfraSubnetsUpdateRequest(server string, id openapi_types.UUID, params *InfraSubnetsUpdateParams, body InfraSubnetsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraSubnetsUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraSubnetsUpdateRequestWithFormdataBody calls the generic InfraSubnetsUpdate builder with application/x-www-form-urlencoded body
func NewInfraSubnetsUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraSubnetsUpdateParams, body InfraSubnetsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraSubnetsUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraSubnetsUpdateRequestWithBody generates requests for InfraSubnetsUpdate with any type of body
func NewInfraSubnetsUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraSubnetsUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/subnets/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraVolumeBackupPoliciesListRequest generates requests for InfraVolumeBackupPoliciesList
func NewInfraVolumeBackupPoliciesListRequest(server string, params *InfraVolumeBackupPoliciesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/volume-backup-policies/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Retention != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "retention", runtime.ParamLocationQuery, *params.Retention); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Time != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time", runtime.ParamLocationQuery, *params.Time); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraVolumeBackupPoliciesCreateRequest calls the generic InfraVolumeBackupPoliciesCreate builder with application/json body
func NewInfraVolumeBackupPoliciesCreateRequest(server string, params *InfraVolumeBackupPoliciesCreateParams, body InfraVolumeBackupPoliciesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraVolumeBackupPoliciesCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewInfraVolumeBackupPoliciesCreateRequestWithFormdataBody calls the generic InfraVolumeBackupPoliciesCreate builder with application/x-www-form-urlencoded body
func NewInfraVolumeBackupPoliciesCreateRequestWithFormdataBody(server string, params *InfraVolumeBackupPoliciesCreateParams, body InfraVolumeBackupPoliciesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraVolumeBackupPoliciesCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraVolumeBackupPoliciesCreateRequestWithBody generates requests for InfraVolumeBackupPoliciesCreate with any type of body
func NewInfraVolumeBackupPoliciesCreateRequestWithBody(server string, params *InfraVolumeBackupPoliciesCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/volume-backup-policies/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraVolumeBackupPoliciesDestroyRequest generates requests for InfraVolumeBackupPoliciesDestroy
func NewInfraVolumeBackupPoliciesDestroyRequest(server string, id openapi_types.UUID, params *InfraVolumeBackupPoliciesDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/volume-backup-policies/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraVolumeBackupPoliciesRetrieveRequest generates requests for InfraVolumeBackupPoliciesRetrieve
func NewInfraVolumeBackupPoliciesRetrieveRequest(server string, id openapi_types.UUID, params *InfraVolumeBackupPoliciesRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/volume-backup-policies/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraVolumeBackupPoliciesPartialUpdateRequest calls the generic InfraVolumeBackupPoliciesPartialUpdate builder with application/json body
func NewInfraVolumeBackupPoliciesPartialUpdateRequest(server string, id openapi_types.UUID, params *InfraVolumeBackupPoliciesPartialUpdateParams, body InfraVolumeBackupPoliciesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraVolumeBackupPoliciesPartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraVolumeBackupPoliciesPartialUpdateRequestWithFormdataBody calls the generic InfraVolumeBackupPoliciesPartialUpdate builder with application/x-www-form-urlencoded body
func NewInfraVolumeBackupPoliciesPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraVolumeBackupPoliciesPartialUpdateParams, body InfraVolumeBackupPoliciesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraVolumeBackupPoliciesPartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraVolumeBackupPoliciesPartialUpdateRequestWithBody generates requests for InfraVolumeBackupPoliciesPartialUpdate with any type of body
func NewInfraVolumeBackupPoliciesPartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraVolumeBackupPoliciesPartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/volume-backup-policies/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraVolumeBackupPoliciesUpdateRequest calls the generic InfraVolumeBackupPoliciesUpdate builder with application/json body
func NewInfraVolumeBackupPoliciesUpdateRequest(server string, id openapi_types.UUID, params *InfraVolumeBackupPoliciesUpdateParams, body InfraVolumeBackupPoliciesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraVolumeBackupPoliciesUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraVolumeBackupPoliciesUpdateRequestWithFormdataBody calls the generic InfraVolumeBackupPoliciesUpdate builder with application/x-www-form-urlencoded body
func NewInfraVolumeBackupPoliciesUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraVolumeBackupPoliciesUpdateParams, body InfraVolumeBackupPoliciesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraVolumeBackupPoliciesUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraVolumeBackupPoliciesUpdateRequestWithBody generates requests for InfraVolumeBackupPoliciesUpdate with any type of body
func NewInfraVolumeBackupPoliciesUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraVolumeBackupPoliciesUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/volume-backup-policies/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraVolumeBackupsListRequest generates requests for InfraVolumeBackupsList
func NewInfraVolumeBackupsListRequest(server string, params *InfraVolumeBackupsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/volume-backups/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegionId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region_id", runtime.ParamLocationQuery, *params.RegionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Size != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Volume != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "volume", runtime.ParamLocationQuery, *params.Volume); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.VolumeId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "volume_id", runtime.ParamLocationQuery, *params.VolumeId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Zone != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone", runtime.ParamLocationQuery, *params.Zone); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ZoneId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone_id", runtime.ParamLocationQuery, *params.ZoneId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraVolumeBackupsCreateRequest calls the generic InfraVolumeBackupsCreate builder with application/json body
func NewInfraVolumeBackupsCreateRequest(server string, params *InfraVolumeBackupsCreateParams, body InfraVolumeBackupsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraVolumeBackupsCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewInfraVolumeBackupsCreateRequestWithFormdataBody calls the generic InfraVolumeBackupsCreate builder with application/x-www-form-urlencoded body
func NewInfraVolumeBackupsCreateRequestWithFormdataBody(server string, params *InfraVolumeBackupsCreateParams, body InfraVolumeBackupsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraVolumeBackupsCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraVolumeBackupsCreateRequestWithBody generates requests for InfraVolumeBackupsCreate with any type of body
func NewInfraVolumeBackupsCreateRequestWithBody(server string, params *InfraVolumeBackupsCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/volume-backups/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraVolumeBackupsDestroyRequest generates requests for InfraVolumeBackupsDestroy
func NewInfraVolumeBackupsDestroyRequest(server string, id openapi_types.UUID, params *InfraVolumeBackupsDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/volume-backups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraVolumeBackupsRetrieveRequest generates requests for InfraVolumeBackupsRetrieve
func NewInfraVolumeBackupsRetrieveRequest(server string, id openapi_types.UUID, params *InfraVolumeBackupsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/volume-backups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraVolumeBackupsPartialUpdateRequest calls the generic InfraVolumeBackupsPartialUpdate builder with application/json body
func NewInfraVolumeBackupsPartialUpdateRequest(server string, id openapi_types.UUID, params *InfraVolumeBackupsPartialUpdateParams, body InfraVolumeBackupsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraVolumeBackupsPartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraVolumeBackupsPartialUpdateRequestWithFormdataBody calls the generic InfraVolumeBackupsPartialUpdate builder with application/x-www-form-urlencoded body
func NewInfraVolumeBackupsPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraVolumeBackupsPartialUpdateParams, body InfraVolumeBackupsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraVolumeBackupsPartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraVolumeBackupsPartialUpdateRequestWithBody generates requests for InfraVolumeBackupsPartialUpdate with any type of body
func NewInfraVolumeBackupsPartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraVolumeBackupsPartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/volume-backups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraVolumeBackupsUpdateRequest calls the generic InfraVolumeBackupsUpdate builder with application/json body
func NewInfraVolumeBackupsUpdateRequest(server string, id openapi_types.UUID, params *InfraVolumeBackupsUpdateParams, body InfraVolumeBackupsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraVolumeBackupsUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraVolumeBackupsUpdateRequestWithFormdataBody calls the generic InfraVolumeBackupsUpdate builder with application/x-www-form-urlencoded body
func NewInfraVolumeBackupsUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraVolumeBackupsUpdateParams, body InfraVolumeBackupsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraVolumeBackupsUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraVolumeBackupsUpdateRequestWithBody generates requests for InfraVolumeBackupsUpdate with any type of body
func NewInfraVolumeBackupsUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraVolumeBackupsUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/volume-backups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraVolumeBackupsRestoreCreateRequest calls the generic InfraVolumeBackupsRestoreCreate builder with application/json body
func NewInfraVolumeBackupsRestoreCreateRequest(server string, id openapi_types.UUID, params *InfraVolumeBackupsRestoreCreateParams, body InfraVolumeBackupsRestoreCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraVolumeBackupsRestoreCreateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraVolumeBackupsRestoreCreateRequestWithFormdataBody calls the generic InfraVolumeBackupsRestoreCreate builder with application/x-www-form-urlencoded body
func NewInfraVolumeBackupsRestoreCreateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraVolumeBackupsRestoreCreateParams, body InfraVolumeBackupsRestoreCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraVolumeBackupsRestoreCreateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraVolumeBackupsRestoreCreateRequestWithBody generates requests for InfraVolumeBackupsRestoreCreate with any type of body
func NewInfraVolumeBackupsRestoreCreateRequestWithBody(server string, id openapi_types.UUID, params *InfraVolumeBackupsRestoreCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/volume-backups/%s/restore/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraVolumeTypeListRequest generates requests for InfraVolumeTypeList
func NewInfraVolumeTypeListRequest(server string, params *InfraVolumeTypeListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/volume-type/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.DiskType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disk_type", runtime.ParamLocationQuery, *params.DiskType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EncryptionKeySize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "encryption_key_size", runtime.ParamLocationQuery, *params.EncryptionKeySize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Id != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Speed != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "speed", runtime.ParamLocationQuery, *params.Speed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Zone != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone", runtime.ParamLocationQuery, *params.Zone); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInfraVolumeTypeCreateRequest calls the generic InfraVolumeTypeCreate builder with application/json body
func NewInfraVolumeTypeCreateRequest(server string, body InfraVolumeTypeCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraVolumeTypeCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewInfraVolumeTypeCreateRequestWithFormdataBody calls the generic InfraVolumeTypeCreate builder with application/x-www-form-urlencoded body
func NewInfraVolumeTypeCreateRequestWithFormdataBody(server string, body InfraVolumeTypeCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraVolumeTypeCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraVolumeTypeCreateRequestWithBody generates requests for InfraVolumeTypeCreate with any type of body
func NewInfraVolumeTypeCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/volume-type/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInfraVolumeTypeDestroyRequest generates requests for InfraVolumeTypeDestroy
func NewInfraVolumeTypeDestroyRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/volume-type/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInfraVolumeTypeRetrieveRequest generates requests for InfraVolumeTypeRetrieve
func NewInfraVolumeTypeRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/volume-type/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInfraVolumeTypePartialUpdateRequest calls the generic InfraVolumeTypePartialUpdate builder with application/json body
func NewInfraVolumeTypePartialUpdateRequest(server string, id openapi_types.UUID, body InfraVolumeTypePartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraVolumeTypePartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewInfraVolumeTypePartialUpdateRequestWithFormdataBody calls the generic InfraVolumeTypePartialUpdate builder with application/x-www-form-urlencoded body
func NewInfraVolumeTypePartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, body InfraVolumeTypePartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraVolumeTypePartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraVolumeTypePartialUpdateRequestWithBody generates requests for InfraVolumeTypePartialUpdate with any type of body
func NewInfraVolumeTypePartialUpdateRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/volume-type/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInfraVolumeTypeUpdateRequest calls the generic InfraVolumeTypeUpdate builder with application/json body
func NewInfraVolumeTypeUpdateRequest(server string, id openapi_types.UUID, body InfraVolumeTypeUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraVolumeTypeUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewInfraVolumeTypeUpdateRequestWithFormdataBody calls the generic InfraVolumeTypeUpdate builder with application/x-www-form-urlencoded body
func NewInfraVolumeTypeUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, body InfraVolumeTypeUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraVolumeTypeUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraVolumeTypeUpdateRequestWithBody generates requests for InfraVolumeTypeUpdate with any type of body
func NewInfraVolumeTypeUpdateRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/volume-type/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInfraVolumesListRequest generates requests for InfraVolumesList
func NewInfraVolumesListRequest(server string, params *InfraVolumesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/volumes/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.BackupOrigin != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "backup_origin", runtime.ParamLocationQuery, *params.BackupOrigin); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.BackupPolicy != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "backup_policy", runtime.ParamLocationQuery, *params.BackupPolicy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.BackupPolicyNull != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "backup_policy__null", runtime.ParamLocationQuery, *params.BackupPolicyNull); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DiskType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disk_type", runtime.ParamLocationQuery, *params.DiskType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegionId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region_id", runtime.ParamLocationQuery, *params.RegionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Server != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "server", runtime.ParamLocationQuery, *params.Server); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Size != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SnapshotOrigin != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "snapshot_origin", runtime.ParamLocationQuery, *params.SnapshotOrigin); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SnapshotPolicy != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "snapshot_policy", runtime.ParamLocationQuery, *params.SnapshotPolicy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SnapshotPolicyNull != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "snapshot_policy__null", runtime.ParamLocationQuery, *params.SnapshotPolicyNull); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.VolumeType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "volume_type", runtime.ParamLocationQuery, *params.VolumeType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Zone != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone", runtime.ParamLocationQuery, *params.Zone); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ZoneId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone_id", runtime.ParamLocationQuery, *params.ZoneId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraVolumesCreateRequest calls the generic InfraVolumesCreate builder with application/json body
func NewInfraVolumesCreateRequest(server string, params *InfraVolumesCreateParams, body InfraVolumesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraVolumesCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewInfraVolumesCreateRequestWithFormdataBody calls the generic InfraVolumesCreate builder with application/x-www-form-urlencoded body
func NewInfraVolumesCreateRequestWithFormdataBody(server string, params *InfraVolumesCreateParams, body InfraVolumesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraVolumesCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraVolumesCreateRequestWithBody generates requests for InfraVolumesCreate with any type of body
func NewInfraVolumesCreateRequestWithBody(server string, params *InfraVolumesCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/volumes/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraVolumesDestroyRequest generates requests for InfraVolumesDestroy
func NewInfraVolumesDestroyRequest(server string, id openapi_types.UUID, params *InfraVolumesDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/volumes/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraVolumesRetrieveRequest generates requests for InfraVolumesRetrieve
func NewInfraVolumesRetrieveRequest(server string, id openapi_types.UUID, params *InfraVolumesRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/volumes/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraVolumesPartialUpdateRequest calls the generic InfraVolumesPartialUpdate builder with application/json body
func NewInfraVolumesPartialUpdateRequest(server string, id openapi_types.UUID, params *InfraVolumesPartialUpdateParams, body InfraVolumesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraVolumesPartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraVolumesPartialUpdateRequestWithFormdataBody calls the generic InfraVolumesPartialUpdate builder with application/x-www-form-urlencoded body
func NewInfraVolumesPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraVolumesPartialUpdateParams, body InfraVolumesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraVolumesPartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraVolumesPartialUpdateRequestWithBody generates requests for InfraVolumesPartialUpdate with any type of body
func NewInfraVolumesPartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraVolumesPartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/volumes/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraVolumesUpdateRequest calls the generic InfraVolumesUpdate builder with application/json body
func NewInfraVolumesUpdateRequest(server string, id openapi_types.UUID, params *InfraVolumesUpdateParams, body InfraVolumesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraVolumesUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraVolumesUpdateRequestWithFormdataBody calls the generic InfraVolumesUpdate builder with application/x-www-form-urlencoded body
func NewInfraVolumesUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraVolumesUpdateParams, body InfraVolumesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraVolumesUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraVolumesUpdateRequestWithBody generates requests for InfraVolumesUpdate with any type of body
func NewInfraVolumesUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraVolumesUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/volumes/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraVolumesApplyBackupPolicyCreateRequest calls the generic InfraVolumesApplyBackupPolicyCreate builder with application/json body
func NewInfraVolumesApplyBackupPolicyCreateRequest(server string, id openapi_types.UUID, params *InfraVolumesApplyBackupPolicyCreateParams, body InfraVolumesApplyBackupPolicyCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraVolumesApplyBackupPolicyCreateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraVolumesApplyBackupPolicyCreateRequestWithFormdataBody calls the generic InfraVolumesApplyBackupPolicyCreate builder with application/x-www-form-urlencoded body
func NewInfraVolumesApplyBackupPolicyCreateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraVolumesApplyBackupPolicyCreateParams, body InfraVolumesApplyBackupPolicyCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraVolumesApplyBackupPolicyCreateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraVolumesApplyBackupPolicyCreateRequestWithBody generates requests for InfraVolumesApplyBackupPolicyCreate with any type of body
func NewInfraVolumesApplyBackupPolicyCreateRequestWithBody(server string, id openapi_types.UUID, params *InfraVolumesApplyBackupPolicyCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/volumes/%s/apply-backup-policy/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraVolumesApplySnapshotPolicyCreateRequest calls the generic InfraVolumesApplySnapshotPolicyCreate builder with application/json body
func NewInfraVolumesApplySnapshotPolicyCreateRequest(server string, id openapi_types.UUID, params *InfraVolumesApplySnapshotPolicyCreateParams, body InfraVolumesApplySnapshotPolicyCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraVolumesApplySnapshotPolicyCreateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraVolumesApplySnapshotPolicyCreateRequestWithFormdataBody calls the generic InfraVolumesApplySnapshotPolicyCreate builder with application/x-www-form-urlencoded body
func NewInfraVolumesApplySnapshotPolicyCreateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraVolumesApplySnapshotPolicyCreateParams, body InfraVolumesApplySnapshotPolicyCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraVolumesApplySnapshotPolicyCreateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraVolumesApplySnapshotPolicyCreateRequestWithBody generates requests for InfraVolumesApplySnapshotPolicyCreate with any type of body
func NewInfraVolumesApplySnapshotPolicyCreateRequestWithBody(server string, id openapi_types.UUID, params *InfraVolumesApplySnapshotPolicyCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/volumes/%s/apply-snapshot-policy/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraVolumesExtendCreateRequest calls the generic InfraVolumesExtendCreate builder with application/json body
func NewInfraVolumesExtendCreateRequest(server string, id openapi_types.UUID, params *InfraVolumesExtendCreateParams, body InfraVolumesExtendCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraVolumesExtendCreateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraVolumesExtendCreateRequestWithFormdataBody calls the generic InfraVolumesExtendCreate builder with application/x-www-form-urlencoded body
func NewInfraVolumesExtendCreateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraVolumesExtendCreateParams, body InfraVolumesExtendCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraVolumesExtendCreateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraVolumesExtendCreateRequestWithBody generates requests for InfraVolumesExtendCreate with any type of body
func NewInfraVolumesExtendCreateRequestWithBody(server string, id openapi_types.UUID, params *InfraVolumesExtendCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/volumes/%s/extend/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraVolumesUnapplyBackupPolicyCreateRequest generates requests for InfraVolumesUnapplyBackupPolicyCreate
func NewInfraVolumesUnapplyBackupPolicyCreateRequest(server string, id openapi_types.UUID, params *InfraVolumesUnapplyBackupPolicyCreateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/volumes/%s/unapply-backup-policy/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraVolumesUnapplySnapshotPolicyCreateRequest generates requests for InfraVolumesUnapplySnapshotPolicyCreate
func NewInfraVolumesUnapplySnapshotPolicyCreateRequest(server string, id openapi_types.UUID, params *InfraVolumesUnapplySnapshotPolicyCreateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/volumes/%s/unapply-snapshot-policy/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraVpcsListRequest generates requests for InfraVpcsList
func NewInfraVpcsListRequest(server string, params *InfraVpcsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/vpcs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.InternetAccess != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "internet_access", runtime.ParamLocationQuery, *params.InternetAccess); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegionId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region_id", runtime.ParamLocationQuery, *params.RegionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SubnetNull != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subnet__null", runtime.ParamLocationQuery, *params.SubnetNull); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraVpcsCreateRequest calls the generic InfraVpcsCreate builder with application/json body
func NewInfraVpcsCreateRequest(server string, params *InfraVpcsCreateParams, body InfraVpcsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraVpcsCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewInfraVpcsCreateRequestWithFormdataBody calls the generic InfraVpcsCreate builder with application/x-www-form-urlencoded body
func NewInfraVpcsCreateRequestWithFormdataBody(server string, params *InfraVpcsCreateParams, body InfraVpcsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraVpcsCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraVpcsCreateRequestWithBody generates requests for InfraVpcsCreate with any type of body
func NewInfraVpcsCreateRequestWithBody(server string, params *InfraVpcsCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/vpcs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraVpcsDestroyRequest generates requests for InfraVpcsDestroy
func NewInfraVpcsDestroyRequest(server string, id openapi_types.UUID, params *InfraVpcsDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/vpcs/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraVpcsRetrieveRequest generates requests for InfraVpcsRetrieve
func NewInfraVpcsRetrieveRequest(server string, id openapi_types.UUID, params *InfraVpcsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/vpcs/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraVpcsPartialUpdateRequest calls the generic InfraVpcsPartialUpdate builder with application/json body
func NewInfraVpcsPartialUpdateRequest(server string, id openapi_types.UUID, params *InfraVpcsPartialUpdateParams, body InfraVpcsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraVpcsPartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraVpcsPartialUpdateRequestWithFormdataBody calls the generic InfraVpcsPartialUpdate builder with application/x-www-form-urlencoded body
func NewInfraVpcsPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraVpcsPartialUpdateParams, body InfraVpcsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraVpcsPartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraVpcsPartialUpdateRequestWithBody generates requests for InfraVpcsPartialUpdate with any type of body
func NewInfraVpcsPartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraVpcsPartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/vpcs/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewInfraVpcsUpdateRequest calls the generic InfraVpcsUpdate builder with application/json body
func NewInfraVpcsUpdateRequest(server string, id openapi_types.UUID, params *InfraVpcsUpdateParams, body InfraVpcsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInfraVpcsUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewInfraVpcsUpdateRequestWithFormdataBody calls the generic InfraVpcsUpdate builder with application/x-www-form-urlencoded body
func NewInfraVpcsUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *InfraVpcsUpdateParams, body InfraVpcsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewInfraVpcsUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewInfraVpcsUpdateRequestWithBody generates requests for InfraVpcsUpdate with any type of body
func NewInfraVpcsUpdateRequestWithBody(server string, id openapi_types.UUID, params *InfraVpcsUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infra/vpcs/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewProjectUserAcceptRequest calls the generic ProjectUserAccept builder with application/json body
func NewProjectUserAcceptRequest(server string, body ProjectUserAcceptJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProjectUserAcceptRequestWithBody(server, "application/json", bodyReader)
}

// NewProjectUserAcceptRequestWithFormdataBody calls the generic ProjectUserAccept builder with application/x-www-form-urlencoded body
func NewProjectUserAcceptRequestWithFormdataBody(server string, body ProjectUserAcceptFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProjectUserAcceptRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewProjectUserAcceptRequestWithBody generates requests for ProjectUserAccept with any type of body
func NewProjectUserAcceptRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invitation/project-user/accept/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProjectUserInviteRequest calls the generic ProjectUserInvite builder with application/json body
func NewProjectUserInviteRequest(server string, params *ProjectUserInviteParams, body ProjectUserInviteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProjectUserInviteRequestWithBody(server, params, "application/json", bodyReader)
}

// NewProjectUserInviteRequestWithFormdataBody calls the generic ProjectUserInvite builder with application/x-www-form-urlencoded body
func NewProjectUserInviteRequestWithFormdataBody(server string, params *ProjectUserInviteParams, body ProjectUserInviteFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProjectUserInviteRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewProjectUserInviteRequestWithBody generates requests for ProjectUserInvite with any type of body
func NewProjectUserInviteRequestWithBody(server string, params *ProjectUserInviteParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invitation/project-user/invite/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewKaasBackupPlansListRequest generates requests for KaasBackupPlansList
func NewKaasBackupPlansListRequest(server string, params *KaasBackupPlansListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/backup-plans/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Cluster != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cluster", runtime.ParamLocationQuery, *params.Cluster); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ClusterName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cluster_name", runtime.ParamLocationQuery, *params.ClusterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewKaasBackupPlansCreateRequest calls the generic KaasBackupPlansCreate builder with application/json body
func NewKaasBackupPlansCreateRequest(server string, params *KaasBackupPlansCreateParams, body KaasBackupPlansCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewKaasBackupPlansCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewKaasBackupPlansCreateRequestWithFormdataBody calls the generic KaasBackupPlansCreate builder with application/x-www-form-urlencoded body
func NewKaasBackupPlansCreateRequestWithFormdataBody(server string, params *KaasBackupPlansCreateParams, body KaasBackupPlansCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewKaasBackupPlansCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewKaasBackupPlansCreateRequestWithBody generates requests for KaasBackupPlansCreate with any type of body
func NewKaasBackupPlansCreateRequestWithBody(server string, params *KaasBackupPlansCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/backup-plans/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewKaasBackupPlansDestroyRequest generates requests for KaasBackupPlansDestroy
func NewKaasBackupPlansDestroyRequest(server string, id openapi_types.UUID, params *KaasBackupPlansDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/backup-plans/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewKaasBackupPlansRetrieveRequest generates requests for KaasBackupPlansRetrieve
func NewKaasBackupPlansRetrieveRequest(server string, id openapi_types.UUID, params *KaasBackupPlansRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/backup-plans/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewKaasBackupPlansPartialUpdateRequest calls the generic KaasBackupPlansPartialUpdate builder with application/json body
func NewKaasBackupPlansPartialUpdateRequest(server string, id openapi_types.UUID, params *KaasBackupPlansPartialUpdateParams, body KaasBackupPlansPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewKaasBackupPlansPartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewKaasBackupPlansPartialUpdateRequestWithFormdataBody calls the generic KaasBackupPlansPartialUpdate builder with application/x-www-form-urlencoded body
func NewKaasBackupPlansPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *KaasBackupPlansPartialUpdateParams, body KaasBackupPlansPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewKaasBackupPlansPartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewKaasBackupPlansPartialUpdateRequestWithBody generates requests for KaasBackupPlansPartialUpdate with any type of body
func NewKaasBackupPlansPartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *KaasBackupPlansPartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/backup-plans/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewKaasBackupPlansUpdateRequest calls the generic KaasBackupPlansUpdate builder with application/json body
func NewKaasBackupPlansUpdateRequest(server string, id openapi_types.UUID, params *KaasBackupPlansUpdateParams, body KaasBackupPlansUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewKaasBackupPlansUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewKaasBackupPlansUpdateRequestWithFormdataBody calls the generic KaasBackupPlansUpdate builder with application/x-www-form-urlencoded body
func NewKaasBackupPlansUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *KaasBackupPlansUpdateParams, body KaasBackupPlansUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewKaasBackupPlansUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewKaasBackupPlansUpdateRequestWithBody generates requests for KaasBackupPlansUpdate with any type of body
func NewKaasBackupPlansUpdateRequestWithBody(server string, id openapi_types.UUID, params *KaasBackupPlansUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/backup-plans/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewKaasBackupsListRequest generates requests for KaasBackupsList
func NewKaasBackupsListRequest(server string, params *KaasBackupsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/backups/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.BackupPlan != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "backup_plan", runtime.ParamLocationQuery, *params.BackupPlan); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.BackupPlanName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "backup_plan_name", runtime.ParamLocationQuery, *params.BackupPlanName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ClusterName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cluster_name", runtime.ParamLocationQuery, *params.ClusterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewKaasBackupsCreateRequest calls the generic KaasBackupsCreate builder with application/json body
func NewKaasBackupsCreateRequest(server string, params *KaasBackupsCreateParams, body KaasBackupsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewKaasBackupsCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewKaasBackupsCreateRequestWithFormdataBody calls the generic KaasBackupsCreate builder with application/x-www-form-urlencoded body
func NewKaasBackupsCreateRequestWithFormdataBody(server string, params *KaasBackupsCreateParams, body KaasBackupsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewKaasBackupsCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewKaasBackupsCreateRequestWithBody generates requests for KaasBackupsCreate with any type of body
func NewKaasBackupsCreateRequestWithBody(server string, params *KaasBackupsCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/backups/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewKaasBackupsDestroyRequest generates requests for KaasBackupsDestroy
func NewKaasBackupsDestroyRequest(server string, id openapi_types.UUID, params *KaasBackupsDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/backups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewKaasBackupsRetrieveRequest generates requests for KaasBackupsRetrieve
func NewKaasBackupsRetrieveRequest(server string, id openapi_types.UUID, params *KaasBackupsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/backups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewKaasBackupsPartialUpdateRequest calls the generic KaasBackupsPartialUpdate builder with application/json body
func NewKaasBackupsPartialUpdateRequest(server string, id openapi_types.UUID, params *KaasBackupsPartialUpdateParams, body KaasBackupsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewKaasBackupsPartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewKaasBackupsPartialUpdateRequestWithFormdataBody calls the generic KaasBackupsPartialUpdate builder with application/x-www-form-urlencoded body
func NewKaasBackupsPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *KaasBackupsPartialUpdateParams, body KaasBackupsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewKaasBackupsPartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewKaasBackupsPartialUpdateRequestWithBody generates requests for KaasBackupsPartialUpdate with any type of body
func NewKaasBackupsPartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *KaasBackupsPartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/backups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewKaasBackupsUpdateRequest calls the generic KaasBackupsUpdate builder with application/json body
func NewKaasBackupsUpdateRequest(server string, id openapi_types.UUID, params *KaasBackupsUpdateParams, body KaasBackupsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewKaasBackupsUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewKaasBackupsUpdateRequestWithFormdataBody calls the generic KaasBackupsUpdate builder with application/x-www-form-urlencoded body
func NewKaasBackupsUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *KaasBackupsUpdateParams, body KaasBackupsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewKaasBackupsUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewKaasBackupsUpdateRequestWithBody generates requests for KaasBackupsUpdate with any type of body
func NewKaasBackupsUpdateRequestWithBody(server string, id openapi_types.UUID, params *KaasBackupsUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/backups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewKaasCniVersionsListRequest generates requests for KaasCniVersionsList
func NewKaasCniVersionsListRequest(server string, params *KaasCniVersionsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/cni-versions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Version != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewKaasCniVersionsRetrieveRequest generates requests for KaasCniVersionsRetrieve
func NewKaasCniVersionsRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/cni-versions/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewKaasCsiVersionsListRequest generates requests for KaasCsiVersionsList
func NewKaasCsiVersionsListRequest(server string, params *KaasCsiVersionsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/csi-versions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Version != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewKaasCsiVersionsRetrieveRequest generates requests for KaasCsiVersionsRetrieve
func NewKaasCsiVersionsRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/csi-versions/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewKaasDashboardVersionsListRequest generates requests for KaasDashboardVersionsList
func NewKaasDashboardVersionsListRequest(server string, params *KaasDashboardVersionsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/dashboard-versions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Version != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewKaasDashboardVersionsRetrieveRequest generates requests for KaasDashboardVersionsRetrieve
func NewKaasDashboardVersionsRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/dashboard-versions/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewKaasK8sVersionsListRequest generates requests for KaasK8sVersionsList
func NewKaasK8sVersionsListRequest(server string, params *KaasK8sVersionsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/k8s-versions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Image != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "image", runtime.ParamLocationQuery, *params.Image); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewKaasK8sVersionsRetrieveRequest generates requests for KaasK8sVersionsRetrieve
func NewKaasK8sVersionsRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/k8s-versions/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewKaasRestoresListRequest generates requests for KaasRestoresList
func NewKaasRestoresListRequest(server string, params *KaasRestoresListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/restores/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Backup != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "backup", runtime.ParamLocationQuery, *params.Backup); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.BackupName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "backup_name", runtime.ParamLocationQuery, *params.BackupName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cluster != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cluster", runtime.ParamLocationQuery, *params.Cluster); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ClusterName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cluster_name", runtime.ParamLocationQuery, *params.ClusterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewKaasRestoresCreateRequest calls the generic KaasRestoresCreate builder with application/json body
func NewKaasRestoresCreateRequest(server string, params *KaasRestoresCreateParams, body KaasRestoresCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewKaasRestoresCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewKaasRestoresCreateRequestWithFormdataBody calls the generic KaasRestoresCreate builder with application/x-www-form-urlencoded body
func NewKaasRestoresCreateRequestWithFormdataBody(server string, params *KaasRestoresCreateParams, body KaasRestoresCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewKaasRestoresCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewKaasRestoresCreateRequestWithBody generates requests for KaasRestoresCreate with any type of body
func NewKaasRestoresCreateRequestWithBody(server string, params *KaasRestoresCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/restores/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewKaasRestoresDestroyRequest generates requests for KaasRestoresDestroy
func NewKaasRestoresDestroyRequest(server string, id openapi_types.UUID, params *KaasRestoresDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/restores/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewKaasRestoresRetrieveRequest generates requests for KaasRestoresRetrieve
func NewKaasRestoresRetrieveRequest(server string, id openapi_types.UUID, params *KaasRestoresRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/restores/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewKaasRestoresPartialUpdateRequest calls the generic KaasRestoresPartialUpdate builder with application/json body
func NewKaasRestoresPartialUpdateRequest(server string, id openapi_types.UUID, params *KaasRestoresPartialUpdateParams, body KaasRestoresPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewKaasRestoresPartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewKaasRestoresPartialUpdateRequestWithFormdataBody calls the generic KaasRestoresPartialUpdate builder with application/x-www-form-urlencoded body
func NewKaasRestoresPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *KaasRestoresPartialUpdateParams, body KaasRestoresPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewKaasRestoresPartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewKaasRestoresPartialUpdateRequestWithBody generates requests for KaasRestoresPartialUpdate with any type of body
func NewKaasRestoresPartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *KaasRestoresPartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/restores/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewKaasRestoresUpdateRequest calls the generic KaasRestoresUpdate builder with application/json body
func NewKaasRestoresUpdateRequest(server string, id openapi_types.UUID, params *KaasRestoresUpdateParams, body KaasRestoresUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewKaasRestoresUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewKaasRestoresUpdateRequestWithFormdataBody calls the generic KaasRestoresUpdate builder with application/x-www-form-urlencoded body
func NewKaasRestoresUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *KaasRestoresUpdateParams, body KaasRestoresUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewKaasRestoresUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewKaasRestoresUpdateRequestWithBody generates requests for KaasRestoresUpdate with any type of body
func NewKaasRestoresUpdateRequestWithBody(server string, id openapi_types.UUID, params *KaasRestoresUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/restores/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewKaasVkeClustersListRequest generates requests for KaasVkeClustersList
func NewKaasVkeClustersListRequest(server string, params *KaasVkeClustersListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/vke-clusters/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.EnableBackup != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enable_backup", runtime.ParamLocationQuery, *params.EnableBackup); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewKaasVkeClustersCreateRequest calls the generic KaasVkeClustersCreate builder with application/json body
func NewKaasVkeClustersCreateRequest(server string, params *KaasVkeClustersCreateParams, body KaasVkeClustersCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewKaasVkeClustersCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewKaasVkeClustersCreateRequestWithFormdataBody calls the generic KaasVkeClustersCreate builder with application/x-www-form-urlencoded body
func NewKaasVkeClustersCreateRequestWithFormdataBody(server string, params *KaasVkeClustersCreateParams, body KaasVkeClustersCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewKaasVkeClustersCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewKaasVkeClustersCreateRequestWithBody generates requests for KaasVkeClustersCreate with any type of body
func NewKaasVkeClustersCreateRequestWithBody(server string, params *KaasVkeClustersCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/vke-clusters/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewKaasVkeClustersDestroyRequest generates requests for KaasVkeClustersDestroy
func NewKaasVkeClustersDestroyRequest(server string, id openapi_types.UUID, params *KaasVkeClustersDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/vke-clusters/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewKaasVkeClustersRetrieveRequest generates requests for KaasVkeClustersRetrieve
func NewKaasVkeClustersRetrieveRequest(server string, id openapi_types.UUID, params *KaasVkeClustersRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/vke-clusters/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewKaasVkeClustersPartialUpdateRequest calls the generic KaasVkeClustersPartialUpdate builder with application/json body
func NewKaasVkeClustersPartialUpdateRequest(server string, id openapi_types.UUID, params *KaasVkeClustersPartialUpdateParams, body KaasVkeClustersPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewKaasVkeClustersPartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewKaasVkeClustersPartialUpdateRequestWithFormdataBody calls the generic KaasVkeClustersPartialUpdate builder with application/x-www-form-urlencoded body
func NewKaasVkeClustersPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *KaasVkeClustersPartialUpdateParams, body KaasVkeClustersPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewKaasVkeClustersPartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewKaasVkeClustersPartialUpdateRequestWithBody generates requests for KaasVkeClustersPartialUpdate with any type of body
func NewKaasVkeClustersPartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *KaasVkeClustersPartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/vke-clusters/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewKaasVkeClustersUpdateRequest calls the generic KaasVkeClustersUpdate builder with application/json body
func NewKaasVkeClustersUpdateRequest(server string, id openapi_types.UUID, params *KaasVkeClustersUpdateParams, body KaasVkeClustersUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewKaasVkeClustersUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewKaasVkeClustersUpdateRequestWithFormdataBody calls the generic KaasVkeClustersUpdate builder with application/x-www-form-urlencoded body
func NewKaasVkeClustersUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *KaasVkeClustersUpdateParams, body KaasVkeClustersUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewKaasVkeClustersUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewKaasVkeClustersUpdateRequestWithBody generates requests for KaasVkeClustersUpdate with any type of body
func NewKaasVkeClustersUpdateRequestWithBody(server string, id openapi_types.UUID, params *KaasVkeClustersUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/vke-clusters/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewKaasVkeKubeconfigsRetrieveRequest generates requests for KaasVkeKubeconfigsRetrieve
func NewKaasVkeKubeconfigsRetrieveRequest(server string, id openapi_types.UUID, params *KaasVkeKubeconfigsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/vke-kubeconfigs/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewKaasVkeKubedashboardsRetrieveRequest generates requests for KaasVkeKubedashboardsRetrieve
func NewKaasVkeKubedashboardsRetrieveRequest(server string, id openapi_types.UUID, params *KaasVkeKubedashboardsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/vke-kubedashboards/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewKaasVkeMachinesListRequest generates requests for KaasVkeMachinesList
func NewKaasVkeMachinesListRequest(server string, params *KaasVkeMachinesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/vke-machines/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Cluster != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cluster", runtime.ParamLocationQuery, *params.Cluster); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NodePool != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "node_pool", runtime.ParamLocationQuery, *params.NodePool); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewKaasVkeNodePoolsListRequest generates requests for KaasVkeNodePoolsList
func NewKaasVkeNodePoolsListRequest(server string, params *KaasVkeNodePoolsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/vke-node-pools/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Cluster != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cluster", runtime.ParamLocationQuery, *params.Cluster); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Zone != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone", runtime.ParamLocationQuery, *params.Zone); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewKaasVkeNodePoolsCreateRequest calls the generic KaasVkeNodePoolsCreate builder with application/json body
func NewKaasVkeNodePoolsCreateRequest(server string, params *KaasVkeNodePoolsCreateParams, body KaasVkeNodePoolsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewKaasVkeNodePoolsCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewKaasVkeNodePoolsCreateRequestWithFormdataBody calls the generic KaasVkeNodePoolsCreate builder with application/x-www-form-urlencoded body
func NewKaasVkeNodePoolsCreateRequestWithFormdataBody(server string, params *KaasVkeNodePoolsCreateParams, body KaasVkeNodePoolsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewKaasVkeNodePoolsCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewKaasVkeNodePoolsCreateRequestWithBody generates requests for KaasVkeNodePoolsCreate with any type of body
func NewKaasVkeNodePoolsCreateRequestWithBody(server string, params *KaasVkeNodePoolsCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/vke-node-pools/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewKaasVkeNodePoolsDestroyRequest generates requests for KaasVkeNodePoolsDestroy
func NewKaasVkeNodePoolsDestroyRequest(server string, id openapi_types.UUID, params *KaasVkeNodePoolsDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/vke-node-pools/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewKaasVkeNodePoolsRetrieveRequest generates requests for KaasVkeNodePoolsRetrieve
func NewKaasVkeNodePoolsRetrieveRequest(server string, id openapi_types.UUID, params *KaasVkeNodePoolsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/vke-node-pools/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewKaasVkeNodePoolsPartialUpdateRequest calls the generic KaasVkeNodePoolsPartialUpdate builder with application/json body
func NewKaasVkeNodePoolsPartialUpdateRequest(server string, id openapi_types.UUID, params *KaasVkeNodePoolsPartialUpdateParams, body KaasVkeNodePoolsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewKaasVkeNodePoolsPartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewKaasVkeNodePoolsPartialUpdateRequestWithFormdataBody calls the generic KaasVkeNodePoolsPartialUpdate builder with application/x-www-form-urlencoded body
func NewKaasVkeNodePoolsPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *KaasVkeNodePoolsPartialUpdateParams, body KaasVkeNodePoolsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewKaasVkeNodePoolsPartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewKaasVkeNodePoolsPartialUpdateRequestWithBody generates requests for KaasVkeNodePoolsPartialUpdate with any type of body
func NewKaasVkeNodePoolsPartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *KaasVkeNodePoolsPartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/vke-node-pools/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewKaasVkeNodePoolsUpdateRequest calls the generic KaasVkeNodePoolsUpdate builder with application/json body
func NewKaasVkeNodePoolsUpdateRequest(server string, id openapi_types.UUID, params *KaasVkeNodePoolsUpdateParams, body KaasVkeNodePoolsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewKaasVkeNodePoolsUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewKaasVkeNodePoolsUpdateRequestWithFormdataBody calls the generic KaasVkeNodePoolsUpdate builder with application/x-www-form-urlencoded body
func NewKaasVkeNodePoolsUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *KaasVkeNodePoolsUpdateParams, body KaasVkeNodePoolsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewKaasVkeNodePoolsUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewKaasVkeNodePoolsUpdateRequestWithBody generates requests for KaasVkeNodePoolsUpdate with any type of body
func NewKaasVkeNodePoolsUpdateRequestWithBody(server string, id openapi_types.UUID, params *KaasVkeNodePoolsUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/vke-node-pools/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewKaasVkeWebcliRetrieveRequest generates requests for KaasVkeWebcliRetrieve
func NewKaasVkeWebcliRetrieveRequest(server string, id openapi_types.UUID, params *KaasVkeWebcliRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kaas/vke-webcli/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewMarketplaceCategoriesListRequest generates requests for MarketplaceCategoriesList
func NewMarketplaceCategoriesListRequest(server string, params *MarketplaceCategoriesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketplace/categories/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMarketplaceCategoriesCreateRequest calls the generic MarketplaceCategoriesCreate builder with application/json body
func NewMarketplaceCategoriesCreateRequest(server string, body MarketplaceCategoriesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMarketplaceCategoriesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewMarketplaceCategoriesCreateRequestWithFormdataBody calls the generic MarketplaceCategoriesCreate builder with application/x-www-form-urlencoded body
func NewMarketplaceCategoriesCreateRequestWithFormdataBody(server string, body MarketplaceCategoriesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewMarketplaceCategoriesCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewMarketplaceCategoriesCreateRequestWithBody generates requests for MarketplaceCategoriesCreate with any type of body
func NewMarketplaceCategoriesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketplace/categories/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMarketplaceCategoriesRetrieveRequest generates requests for MarketplaceCategoriesRetrieve
func NewMarketplaceCategoriesRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketplace/categories/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMarketplaceCategoriesPartialUpdateRequest calls the generic MarketplaceCategoriesPartialUpdate builder with application/json body
func NewMarketplaceCategoriesPartialUpdateRequest(server string, id openapi_types.UUID, body MarketplaceCategoriesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMarketplaceCategoriesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewMarketplaceCategoriesPartialUpdateRequestWithFormdataBody calls the generic MarketplaceCategoriesPartialUpdate builder with application/x-www-form-urlencoded body
func NewMarketplaceCategoriesPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, body MarketplaceCategoriesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewMarketplaceCategoriesPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewMarketplaceCategoriesPartialUpdateRequestWithBody generates requests for MarketplaceCategoriesPartialUpdate with any type of body
func NewMarketplaceCategoriesPartialUpdateRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketplace/categories/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMarketplacePricingPlansListRequest generates requests for MarketplacePricingPlansList
func NewMarketplacePricingPlansListRequest(server string, params *MarketplacePricingPlansListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketplace/pricing-plans/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PricingModel != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pricing_model", runtime.ParamLocationQuery, *params.PricingModel); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMarketplacePricingPlansCreateRequest calls the generic MarketplacePricingPlansCreate builder with application/json body
func NewMarketplacePricingPlansCreateRequest(server string, body MarketplacePricingPlansCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMarketplacePricingPlansCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewMarketplacePricingPlansCreateRequestWithFormdataBody calls the generic MarketplacePricingPlansCreate builder with application/x-www-form-urlencoded body
func NewMarketplacePricingPlansCreateRequestWithFormdataBody(server string, body MarketplacePricingPlansCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewMarketplacePricingPlansCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewMarketplacePricingPlansCreateRequestWithBody generates requests for MarketplacePricingPlansCreate with any type of body
func NewMarketplacePricingPlansCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketplace/pricing-plans/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMarketplacePricingPlansRetrieveRequest generates requests for MarketplacePricingPlansRetrieve
func NewMarketplacePricingPlansRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketplace/pricing-plans/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMarketplacePricingPlansPartialUpdateRequest calls the generic MarketplacePricingPlansPartialUpdate builder with application/json body
func NewMarketplacePricingPlansPartialUpdateRequest(server string, id openapi_types.UUID, body MarketplacePricingPlansPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMarketplacePricingPlansPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewMarketplacePricingPlansPartialUpdateRequestWithFormdataBody calls the generic MarketplacePricingPlansPartialUpdate builder with application/x-www-form-urlencoded body
func NewMarketplacePricingPlansPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, body MarketplacePricingPlansPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewMarketplacePricingPlansPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewMarketplacePricingPlansPartialUpdateRequestWithBody generates requests for MarketplacePricingPlansPartialUpdate with any type of body
func NewMarketplacePricingPlansPartialUpdateRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketplace/pricing-plans/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMarketplaceProductsListRequest generates requests for MarketplaceProductsList
func NewMarketplaceProductsListRequest(server string, params *MarketplaceProductsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketplace/products/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Category != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, *params.Category); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Description != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Overview != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "overview", runtime.ParamLocationQuery, *params.Overview); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PricingModel != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pricing_model", runtime.ParamLocationQuery, *params.PricingModel); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PricingPlanId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pricing_plan_id", runtime.ParamLocationQuery, *params.PricingPlanId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Vendor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vendor", runtime.ParamLocationQuery, *params.Vendor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.VendorId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vendor_id", runtime.ParamLocationQuery, *params.VendorId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMarketplaceProductsCreateRequest calls the generic MarketplaceProductsCreate builder with application/json body
func NewMarketplaceProductsCreateRequest(server string, body MarketplaceProductsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMarketplaceProductsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewMarketplaceProductsCreateRequestWithFormdataBody calls the generic MarketplaceProductsCreate builder with application/x-www-form-urlencoded body
func NewMarketplaceProductsCreateRequestWithFormdataBody(server string, body MarketplaceProductsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewMarketplaceProductsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewMarketplaceProductsCreateRequestWithBody generates requests for MarketplaceProductsCreate with any type of body
func NewMarketplaceProductsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketplace/products/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMarketplaceProductsRetrieveRequest generates requests for MarketplaceProductsRetrieve
func NewMarketplaceProductsRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketplace/products/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMarketplaceProductsPartialUpdateRequest calls the generic MarketplaceProductsPartialUpdate builder with application/json body
func NewMarketplaceProductsPartialUpdateRequest(server string, id openapi_types.UUID, body MarketplaceProductsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMarketplaceProductsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewMarketplaceProductsPartialUpdateRequestWithFormdataBody calls the generic MarketplaceProductsPartialUpdate builder with application/x-www-form-urlencoded body
func NewMarketplaceProductsPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, body MarketplaceProductsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewMarketplaceProductsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewMarketplaceProductsPartialUpdateRequestWithBody generates requests for MarketplaceProductsPartialUpdate with any type of body
func NewMarketplaceProductsPartialUpdateRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketplace/products/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMarketplaceSubscriptionsListRequest generates requests for MarketplaceSubscriptionsList
func NewMarketplaceSubscriptionsListRequest(server string, params *MarketplaceSubscriptionsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketplace/subscriptions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Product != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product", runtime.ParamLocationQuery, *params.Product); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMarketplaceSubscriptionsCreateRequest calls the generic MarketplaceSubscriptionsCreate builder with application/json body
func NewMarketplaceSubscriptionsCreateRequest(server string, body MarketplaceSubscriptionsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMarketplaceSubscriptionsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewMarketplaceSubscriptionsCreateRequestWithFormdataBody calls the generic MarketplaceSubscriptionsCreate builder with application/x-www-form-urlencoded body
func NewMarketplaceSubscriptionsCreateRequestWithFormdataBody(server string, body MarketplaceSubscriptionsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewMarketplaceSubscriptionsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewMarketplaceSubscriptionsCreateRequestWithBody generates requests for MarketplaceSubscriptionsCreate with any type of body
func NewMarketplaceSubscriptionsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketplace/subscriptions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMarketplaceSubscriptionsDestroyRequest generates requests for MarketplaceSubscriptionsDestroy
func NewMarketplaceSubscriptionsDestroyRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketplace/subscriptions/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMarketplaceSubscriptionsRetrieveRequest generates requests for MarketplaceSubscriptionsRetrieve
func NewMarketplaceSubscriptionsRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketplace/subscriptions/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMarketplaceVendorsListRequest generates requests for MarketplaceVendorsList
func NewMarketplaceVendorsListRequest(server string, params *MarketplaceVendorsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketplace/vendors/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMarketplaceVendorsCreateRequest calls the generic MarketplaceVendorsCreate builder with application/json body
func NewMarketplaceVendorsCreateRequest(server string, body MarketplaceVendorsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMarketplaceVendorsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewMarketplaceVendorsCreateRequestWithFormdataBody calls the generic MarketplaceVendorsCreate builder with application/x-www-form-urlencoded body
func NewMarketplaceVendorsCreateRequestWithFormdataBody(server string, body MarketplaceVendorsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewMarketplaceVendorsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewMarketplaceVendorsCreateRequestWithBody generates requests for MarketplaceVendorsCreate with any type of body
func NewMarketplaceVendorsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketplace/vendors/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMarketplaceVendorsRetrieveRequest generates requests for MarketplaceVendorsRetrieve
func NewMarketplaceVendorsRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketplace/vendors/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMarketplaceVendorsPartialUpdateRequest calls the generic MarketplaceVendorsPartialUpdate builder with application/json body
func NewMarketplaceVendorsPartialUpdateRequest(server string, id openapi_types.UUID, body MarketplaceVendorsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMarketplaceVendorsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewMarketplaceVendorsPartialUpdateRequestWithFormdataBody calls the generic MarketplaceVendorsPartialUpdate builder with application/x-www-form-urlencoded body
func NewMarketplaceVendorsPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, body MarketplaceVendorsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewMarketplaceVendorsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewMarketplaceVendorsPartialUpdateRequestWithBody generates requests for MarketplaceVendorsPartialUpdate with any type of body
func NewMarketplaceVendorsPartialUpdateRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketplace/vendors/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewObjectStorageActivateServiceCreateRequest generates requests for ObjectStorageActivateServiceCreate
func NewObjectStorageActivateServiceCreateRequest(server string, params *ObjectStorageActivateServiceCreateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/activate-service/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewObjectStorageBucketsListRequest generates requests for ObjectStorageBucketsList
func NewObjectStorageBucketsListRequest(server string, params *ObjectStorageBucketsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegionId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region_id", runtime.ParamLocationQuery, *params.RegionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewObjectStorageBucketsCreateRequest calls the generic ObjectStorageBucketsCreate builder with application/json body
func NewObjectStorageBucketsCreateRequest(server string, params *ObjectStorageBucketsCreateParams, body ObjectStorageBucketsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewObjectStorageBucketsCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewObjectStorageBucketsCreateRequestWithFormdataBody calls the generic ObjectStorageBucketsCreate builder with application/x-www-form-urlencoded body
func NewObjectStorageBucketsCreateRequestWithFormdataBody(server string, params *ObjectStorageBucketsCreateParams, body ObjectStorageBucketsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewObjectStorageBucketsCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewObjectStorageBucketsCreateRequestWithBody generates requests for ObjectStorageBucketsCreate with any type of body
func NewObjectStorageBucketsCreateRequestWithBody(server string, params *ObjectStorageBucketsCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewBucketAclShowRequest generates requests for BucketAclShow
func NewBucketAclShowRequest(server string, bucketName string, params *BucketAclShowParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/acl/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewBucketAclPatchRequest calls the generic BucketAclPatch builder with application/json body
func NewBucketAclPatchRequest(server string, bucketName string, params *BucketAclPatchParams, body BucketAclPatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBucketAclPatchRequestWithBody(server, bucketName, params, "application/json", bodyReader)
}

// NewBucketAclPatchRequestWithFormdataBody calls the generic BucketAclPatch builder with application/x-www-form-urlencoded body
func NewBucketAclPatchRequestWithFormdataBody(server string, bucketName string, params *BucketAclPatchParams, body BucketAclPatchFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewBucketAclPatchRequestWithBody(server, bucketName, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewBucketAclPatchRequestWithBody generates requests for BucketAclPatch with any type of body
func NewBucketAclPatchRequestWithBody(server string, bucketName string, params *BucketAclPatchParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/acl/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewBucketCorsDeleteRequest generates requests for BucketCorsDelete
func NewBucketCorsDeleteRequest(server string, bucketName string, params *BucketCorsDeleteParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/cors/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewBucketCorsShowRequest generates requests for BucketCorsShow
func NewBucketCorsShowRequest(server string, bucketName string, params *BucketCorsShowParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/cors/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewBucketCorsEditRequest calls the generic BucketCorsEdit builder with application/json body
func NewBucketCorsEditRequest(server string, bucketName string, params *BucketCorsEditParams, body BucketCorsEditJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBucketCorsEditRequestWithBody(server, bucketName, params, "application/json", bodyReader)
}

// NewBucketCorsEditRequestWithFormdataBody calls the generic BucketCorsEdit builder with application/x-www-form-urlencoded body
func NewBucketCorsEditRequestWithFormdataBody(server string, bucketName string, params *BucketCorsEditParams, body BucketCorsEditFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewBucketCorsEditRequestWithBody(server, bucketName, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewBucketCorsEditRequestWithBody generates requests for BucketCorsEdit with any type of body
func NewBucketCorsEditRequestWithBody(server string, bucketName string, params *BucketCorsEditParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/cors/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewBucketLifecycleDeleteRequest generates requests for BucketLifecycleDelete
func NewBucketLifecycleDeleteRequest(server string, bucketName string, params *BucketLifecycleDeleteParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/lifecycle/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewBucketLifecycleListRequest generates requests for BucketLifecycleList
func NewBucketLifecycleListRequest(server string, bucketName string, params *BucketLifecycleListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/lifecycle/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewBucketLifecyclePutRequest calls the generic BucketLifecyclePut builder with application/json body
func NewBucketLifecyclePutRequest(server string, bucketName string, params *BucketLifecyclePutParams, body BucketLifecyclePutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBucketLifecyclePutRequestWithBody(server, bucketName, params, "application/json", bodyReader)
}

// NewBucketLifecyclePutRequestWithFormdataBody calls the generic BucketLifecyclePut builder with application/x-www-form-urlencoded body
func NewBucketLifecyclePutRequestWithFormdataBody(server string, bucketName string, params *BucketLifecyclePutParams, body BucketLifecyclePutFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewBucketLifecyclePutRequestWithBody(server, bucketName, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewBucketLifecyclePutRequestWithBody generates requests for BucketLifecyclePut with any type of body
func NewBucketLifecyclePutRequestWithBody(server string, bucketName string, params *BucketLifecyclePutParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/lifecycle/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewBucketObjectListRequest generates requests for BucketObjectList
func NewBucketObjectListRequest(server string, bucketName string, params *BucketObjectListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/objects/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Marker != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marker", runtime.ParamLocationQuery, *params.Marker); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Prefix != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefix", runtime.ParamLocationQuery, *params.Prefix); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewCreateFolderGetAwsTokenUploadFileRequest calls the generic CreateFolderGetAwsTokenUploadFile builder with application/json body
func NewCreateFolderGetAwsTokenUploadFileRequest(server string, bucketName string, params *CreateFolderGetAwsTokenUploadFileParams, body CreateFolderGetAwsTokenUploadFileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFolderGetAwsTokenUploadFileRequestWithBody(server, bucketName, params, "application/json", bodyReader)
}

// NewCreateFolderGetAwsTokenUploadFileRequestWithFormdataBody calls the generic CreateFolderGetAwsTokenUploadFile builder with application/x-www-form-urlencoded body
func NewCreateFolderGetAwsTokenUploadFileRequestWithFormdataBody(server string, bucketName string, params *CreateFolderGetAwsTokenUploadFileParams, body CreateFolderGetAwsTokenUploadFileFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCreateFolderGetAwsTokenUploadFileRequestWithBody(server, bucketName, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewCreateFolderGetAwsTokenUploadFileRequestWithBody generates requests for CreateFolderGetAwsTokenUploadFile with any type of body
func NewCreateFolderGetAwsTokenUploadFileRequestWithBody(server string, bucketName string, params *CreateFolderGetAwsTokenUploadFileParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/objects/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewGetObjectAclRequest generates requests for GetObjectAcl
func NewGetObjectAclRequest(server string, bucketName string, objectName string, params *GetObjectAclParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "object_name", runtime.ParamLocationPath, objectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/objects/acl/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewPatchObjectAclRequest calls the generic PatchObjectAcl builder with application/json body
func NewPatchObjectAclRequest(server string, bucketName string, objectName string, params *PatchObjectAclParams, body PatchObjectAclJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchObjectAclRequestWithBody(server, bucketName, objectName, params, "application/json", bodyReader)
}

// NewPatchObjectAclRequestWithFormdataBody calls the generic PatchObjectAcl builder with application/x-www-form-urlencoded body
func NewPatchObjectAclRequestWithFormdataBody(server string, bucketName string, objectName string, params *PatchObjectAclParams, body PatchObjectAclFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPatchObjectAclRequestWithBody(server, bucketName, objectName, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewPatchObjectAclRequestWithBody generates requests for PatchObjectAcl with any type of body
func NewPatchObjectAclRequestWithBody(server string, bucketName string, objectName string, params *PatchObjectAclParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "object_name", runtime.ParamLocationPath, objectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/objects/acl/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewObjectBatchDeleteRequest calls the generic ObjectBatchDelete builder with application/json body
func NewObjectBatchDeleteRequest(server string, bucketName string, params *ObjectBatchDeleteParams, body ObjectBatchDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewObjectBatchDeleteRequestWithBody(server, bucketName, params, "application/json", bodyReader)
}

// NewObjectBatchDeleteRequestWithFormdataBody calls the generic ObjectBatchDelete builder with application/x-www-form-urlencoded body
func NewObjectBatchDeleteRequestWithFormdataBody(server string, bucketName string, params *ObjectBatchDeleteParams, body ObjectBatchDeleteFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewObjectBatchDeleteRequestWithBody(server, bucketName, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewObjectBatchDeleteRequestWithBody generates requests for ObjectBatchDelete with any type of body
func NewObjectBatchDeleteRequestWithBody(server string, bucketName string, params *ObjectBatchDeleteParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/objects/batch_delete/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewDeleteObjectRequest generates requests for DeleteObject
func NewDeleteObjectRequest(server string, bucketName string, objectName string, params *DeleteObjectParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "object_name", runtime.ParamLocationPath, objectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/objects/details/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewObjectDetailsRequest generates requests for ObjectDetails
func NewObjectDetailsRequest(server string, bucketName string, objectName string, params *ObjectDetailsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "object_name", runtime.ParamLocationPath, objectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/objects/details/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewGetObjectShareUrlRequest generates requests for GetObjectShareUrl
func NewGetObjectShareUrlRequest(server string, bucketName string, objectName string, params *GetObjectShareUrlParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "object_name", runtime.ParamLocationPath, objectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/objects/share/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TimeDuration != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time_duration", runtime.ParamLocationQuery, *params.TimeDuration); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewDeleteAllObjectTagsRequest generates requests for DeleteAllObjectTags
func NewDeleteAllObjectTagsRequest(server string, bucketName string, objectName string, params *DeleteAllObjectTagsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "object_name", runtime.ParamLocationPath, objectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/objects/tags/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewGetObjectTagsRequest generates requests for GetObjectTags
func NewGetObjectTagsRequest(server string, bucketName string, objectName string, params *GetObjectTagsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "object_name", runtime.ParamLocationPath, objectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/objects/tags/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewPutObjectTagsRequest calls the generic PutObjectTags builder with application/json body
func NewPutObjectTagsRequest(server string, bucketName string, objectName string, params *PutObjectTagsParams, body PutObjectTagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutObjectTagsRequestWithBody(server, bucketName, objectName, params, "application/json", bodyReader)
}

// NewPutObjectTagsRequestWithFormdataBody calls the generic PutObjectTags builder with application/x-www-form-urlencoded body
func NewPutObjectTagsRequestWithFormdataBody(server string, bucketName string, objectName string, params *PutObjectTagsParams, body PutObjectTagsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPutObjectTagsRequestWithBody(server, bucketName, objectName, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewPutObjectTagsRequestWithBody generates requests for PutObjectTags with any type of body
func NewPutObjectTagsRequestWithBody(server string, bucketName string, objectName string, params *PutObjectTagsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "object_name", runtime.ParamLocationPath, objectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/objects/tags/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewBucketPolicyDeleteRequest generates requests for BucketPolicyDelete
func NewBucketPolicyDeleteRequest(server string, bucketName string, params *BucketPolicyDeleteParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/policy/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewBucketPolicyGetRequest generates requests for BucketPolicyGet
func NewBucketPolicyGetRequest(server string, bucketName string, params *BucketPolicyGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/policy/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewBucketPolicyPutRequest calls the generic BucketPolicyPut builder with application/json body
func NewBucketPolicyPutRequest(server string, bucketName string, params *BucketPolicyPutParams, body BucketPolicyPutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBucketPolicyPutRequestWithBody(server, bucketName, params, "application/json", bodyReader)
}

// NewBucketPolicyPutRequestWithFormdataBody calls the generic BucketPolicyPut builder with application/x-www-form-urlencoded body
func NewBucketPolicyPutRequestWithFormdataBody(server string, bucketName string, params *BucketPolicyPutParams, body BucketPolicyPutFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewBucketPolicyPutRequestWithBody(server, bucketName, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewBucketPolicyPutRequestWithBody generates requests for BucketPolicyPut with any type of body
func NewBucketPolicyPutRequestWithBody(server string, bucketName string, params *BucketPolicyPutParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/policy/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewBucketStaticWebDeleteRequest generates requests for BucketStaticWebDelete
func NewBucketStaticWebDeleteRequest(server string, bucketName string, params *BucketStaticWebDeleteParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/staticweb/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewBucketStaticWebCreateRequest generates requests for BucketStaticWebCreate
func NewBucketStaticWebCreateRequest(server string, bucketName string, params *BucketStaticWebCreateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/staticweb/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewBucketStaticWebShowRequest calls the generic BucketStaticWebShow builder with application/json body
func NewBucketStaticWebShowRequest(server string, bucketName string, params *BucketStaticWebShowParams, body BucketStaticWebShowJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBucketStaticWebShowRequestWithBody(server, bucketName, params, "application/json", bodyReader)
}

// NewBucketStaticWebShowRequestWithFormdataBody calls the generic BucketStaticWebShow builder with application/x-www-form-urlencoded body
func NewBucketStaticWebShowRequestWithFormdataBody(server string, bucketName string, params *BucketStaticWebShowParams, body BucketStaticWebShowFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewBucketStaticWebShowRequestWithBody(server, bucketName, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewBucketStaticWebShowRequestWithBody generates requests for BucketStaticWebShow with any type of body
func NewBucketStaticWebShowRequestWithBody(server string, bucketName string, params *BucketStaticWebShowParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/staticweb/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewDeleteBucketTagsRequest generates requests for DeleteBucketTags
func NewDeleteBucketTagsRequest(server string, bucketName string, params *DeleteBucketTagsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/tags/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewGetBucketTagsRequest generates requests for GetBucketTags
func NewGetBucketTagsRequest(server string, bucketName string, params *GetBucketTagsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/tags/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewPutBucketTagsRequest calls the generic PutBucketTags builder with application/json body
func NewPutBucketTagsRequest(server string, bucketName string, params *PutBucketTagsParams, body PutBucketTagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBucketTagsRequestWithBody(server, bucketName, params, "application/json", bodyReader)
}

// NewPutBucketTagsRequestWithFormdataBody calls the generic PutBucketTags builder with application/x-www-form-urlencoded body
func NewPutBucketTagsRequestWithFormdataBody(server string, bucketName string, params *PutBucketTagsParams, body PutBucketTagsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPutBucketTagsRequestWithBody(server, bucketName, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewPutBucketTagsRequestWithBody generates requests for PutBucketTags with any type of body
func NewPutBucketTagsRequestWithBody(server string, bucketName string, params *PutBucketTagsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/tags/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewBucketVersioningShowRequest generates requests for BucketVersioningShow
func NewBucketVersioningShowRequest(server string, bucketName string, params *BucketVersioningShowParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/versioning/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewBucketVersioningActionRequest calls the generic BucketVersioningAction builder with application/json body
func NewBucketVersioningActionRequest(server string, bucketName string, params *BucketVersioningActionParams, body BucketVersioningActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBucketVersioningActionRequestWithBody(server, bucketName, params, "application/json", bodyReader)
}

// NewBucketVersioningActionRequestWithFormdataBody calls the generic BucketVersioningAction builder with application/x-www-form-urlencoded body
func NewBucketVersioningActionRequestWithFormdataBody(server string, bucketName string, params *BucketVersioningActionParams, body BucketVersioningActionFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewBucketVersioningActionRequestWithBody(server, bucketName, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewBucketVersioningActionRequestWithBody generates requests for BucketVersioningAction with any type of body
func NewBucketVersioningActionRequestWithBody(server string, bucketName string, params *BucketVersioningActionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/versioning/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewBucketObjectVersionListRequest generates requests for BucketObjectVersionList
func NewBucketObjectVersionListRequest(server string, bucketName string, params *BucketObjectVersionListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/versions/objects/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Marker != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marker", runtime.ParamLocationQuery, *params.Marker); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Prefix != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefix", runtime.ParamLocationQuery, *params.Prefix); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.VersionIdMarker != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version_id_marker", runtime.ParamLocationQuery, *params.VersionIdMarker); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewGetObjectVersionAclRequest generates requests for GetObjectVersionAcl
func NewGetObjectVersionAclRequest(server string, bucketName string, objectName string, params *GetObjectVersionAclParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "object_name", runtime.ParamLocationPath, objectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/versions/objects/acl/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version_id", runtime.ParamLocationQuery, params.VersionId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewPatchObjectVersionAclRequest calls the generic PatchObjectVersionAcl builder with application/json body
func NewPatchObjectVersionAclRequest(server string, bucketName string, objectName string, params *PatchObjectVersionAclParams, body PatchObjectVersionAclJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchObjectVersionAclRequestWithBody(server, bucketName, objectName, params, "application/json", bodyReader)
}

// NewPatchObjectVersionAclRequestWithFormdataBody calls the generic PatchObjectVersionAcl builder with application/x-www-form-urlencoded body
func NewPatchObjectVersionAclRequestWithFormdataBody(server string, bucketName string, objectName string, params *PatchObjectVersionAclParams, body PatchObjectVersionAclFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPatchObjectVersionAclRequestWithBody(server, bucketName, objectName, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewPatchObjectVersionAclRequestWithBody generates requests for PatchObjectVersionAcl with any type of body
func NewPatchObjectVersionAclRequestWithBody(server string, bucketName string, objectName string, params *PatchObjectVersionAclParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "object_name", runtime.ParamLocationPath, objectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/versions/objects/acl/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version_id", runtime.ParamLocationQuery, params.VersionId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewObjectVersionBatchDeleteRequest calls the generic ObjectVersionBatchDelete builder with application/json body
func NewObjectVersionBatchDeleteRequest(server string, bucketName string, params *ObjectVersionBatchDeleteParams, body ObjectVersionBatchDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewObjectVersionBatchDeleteRequestWithBody(server, bucketName, params, "application/json", bodyReader)
}

// NewObjectVersionBatchDeleteRequestWithFormdataBody calls the generic ObjectVersionBatchDelete builder with application/x-www-form-urlencoded body
func NewObjectVersionBatchDeleteRequestWithFormdataBody(server string, bucketName string, params *ObjectVersionBatchDeleteParams, body ObjectVersionBatchDeleteFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewObjectVersionBatchDeleteRequestWithBody(server, bucketName, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewObjectVersionBatchDeleteRequestWithBody generates requests for ObjectVersionBatchDelete with any type of body
func NewObjectVersionBatchDeleteRequestWithBody(server string, bucketName string, params *ObjectVersionBatchDeleteParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/versions/objects/batch_delete/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewDeleteObjectVersionRequest generates requests for DeleteObjectVersion
func NewDeleteObjectVersionRequest(server string, bucketName string, objectName string, params *DeleteObjectVersionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "object_name", runtime.ParamLocationPath, objectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/versions/objects/details/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version_id", runtime.ParamLocationQuery, params.VersionId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewObjectVersionDetailsRequest generates requests for ObjectVersionDetails
func NewObjectVersionDetailsRequest(server string, bucketName string, objectName string, params *ObjectVersionDetailsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "object_name", runtime.ParamLocationPath, objectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/versions/objects/details/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version_id", runtime.ParamLocationQuery, params.VersionId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewObjectVersionRestoreRequest generates requests for ObjectVersionRestore
func NewObjectVersionRestoreRequest(server string, bucketName string, objectName string, params *ObjectVersionRestoreParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "object_name", runtime.ParamLocationPath, objectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/versions/objects/restore/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version_id", runtime.ParamLocationQuery, params.VersionId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewGetObjectVersionShareUrlRequest generates requests for GetObjectVersionShareUrl
func NewGetObjectVersionShareUrlRequest(server string, bucketName string, objectName string, params *GetObjectVersionShareUrlParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "object_name", runtime.ParamLocationPath, objectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/versions/objects/share/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TimeDuration != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time_duration", runtime.ParamLocationQuery, *params.TimeDuration); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version_id", runtime.ParamLocationQuery, params.VersionId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewDeleteAllObjectVersionTagsRequest generates requests for DeleteAllObjectVersionTags
func NewDeleteAllObjectVersionTagsRequest(server string, bucketName string, objectName string, params *DeleteAllObjectVersionTagsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "object_name", runtime.ParamLocationPath, objectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/versions/objects/tags/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version_id", runtime.ParamLocationQuery, params.VersionId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewGetObjectVersionTagsRequest generates requests for GetObjectVersionTags
func NewGetObjectVersionTagsRequest(server string, bucketName string, objectName string, params *GetObjectVersionTagsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "object_name", runtime.ParamLocationPath, objectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/versions/objects/tags/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version_id", runtime.ParamLocationQuery, params.VersionId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewPutObjectVersionTagsRequest calls the generic PutObjectVersionTags builder with application/json body
func NewPutObjectVersionTagsRequest(server string, bucketName string, objectName string, params *PutObjectVersionTagsParams, body PutObjectVersionTagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutObjectVersionTagsRequestWithBody(server, bucketName, objectName, params, "application/json", bodyReader)
}

// NewPutObjectVersionTagsRequestWithFormdataBody calls the generic PutObjectVersionTags builder with application/x-www-form-urlencoded body
func NewPutObjectVersionTagsRequestWithFormdataBody(server string, bucketName string, objectName string, params *PutObjectVersionTagsParams, body PutObjectVersionTagsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPutObjectVersionTagsRequestWithBody(server, bucketName, objectName, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewPutObjectVersionTagsRequestWithBody generates requests for PutObjectVersionTags with any type of body
func NewPutObjectVersionTagsRequestWithBody(server string, bucketName string, objectName string, params *PutObjectVersionTagsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "object_name", runtime.ParamLocationPath, objectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/versions/objects/tags/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version_id", runtime.ParamLocationQuery, params.VersionId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewObjectStorageBucketsDestroyRequest generates requests for ObjectStorageBucketsDestroy
func NewObjectStorageBucketsDestroyRequest(server string, id openapi_types.UUID, params *ObjectStorageBucketsDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewObjectStorageBucketsRetrieveRequest generates requests for ObjectStorageBucketsRetrieve
func NewObjectStorageBucketsRetrieveRequest(server string, id openapi_types.UUID, params *ObjectStorageBucketsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/buckets/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewS3KeyListRequest generates requests for S3KeyList
func NewS3KeyListRequest(server string, params *S3KeyListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/s3-key/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewS3KeyCreateRequest generates requests for S3KeyCreate
func NewS3KeyCreateRequest(server string, params *S3KeyCreateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/s3-key/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewS3KeyDeleteRequest generates requests for S3KeyDelete
func NewS3KeyDeleteRequest(server string, accessKey string, params *S3KeyDeleteParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "access_key", runtime.ParamLocationPath, accessKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/s3-key/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewStorageClassListRequest generates requests for StorageClassList
func NewStorageClassListRequest(server string, params *StorageClassListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object-storage/storage-classes/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, params.Region); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationRegionsListRequest generates requests for OrganizationRegionsList
func NewOrganizationRegionsListRequest(server string, params *OrganizationRegionsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/regions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationRegionsRetrieveRequest generates requests for OrganizationRegionsRetrieve
func NewOrganizationRegionsRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/regions/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationZonesListRequest generates requests for OrganizationZonesList
func NewOrganizationZonesListRequest(server string, params *OrganizationZonesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/zones/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegionId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region_id", runtime.ParamLocationQuery, *params.RegionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationZonesRetrieveRequest generates requests for OrganizationZonesRetrieve
func NewOrganizationZonesRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/zones/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlanTemplateObjectStoragesListRequest generates requests for PlanTemplateObjectStoragesList
func NewPlanTemplateObjectStoragesListRequest(server string, params *PlanTemplateObjectStoragesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plan-template/object-storages/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlanTemplateObjectStoragesRetrieveRequest generates requests for PlanTemplateObjectStoragesRetrieve
func NewPlanTemplateObjectStoragesRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plan-template/object-storages/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlanTemplateServersListRequest generates requests for PlanTemplateServersList
func NewPlanTemplateServersListRequest(server string, params *PlanTemplateServersListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plan-template/servers/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlanTemplateServersRetrieveRequest generates requests for PlanTemplateServersRetrieve
func NewPlanTemplateServersRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plan-template/servers/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlanTemplateVolumesListRequest generates requests for PlanTemplateVolumesList
func NewPlanTemplateVolumesListRequest(server string, params *PlanTemplateVolumesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plan-template/volumes/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlanTemplateVolumesRetrieveRequest generates requests for PlanTemplateVolumesRetrieve
func NewPlanTemplateVolumesRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plan-template/volumes/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlanCustomersCacheInfoCreateRequest calls the generic PlanCustomersCacheInfoCreate builder with application/json body
func NewPlanCustomersCacheInfoCreateRequest(server string, body PlanCustomersCacheInfoCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPlanCustomersCacheInfoCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPlanCustomersCacheInfoCreateRequestWithFormdataBody calls the generic PlanCustomersCacheInfoCreate builder with application/x-www-form-urlencoded body
func NewPlanCustomersCacheInfoCreateRequestWithFormdataBody(server string, body PlanCustomersCacheInfoCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPlanCustomersCacheInfoCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPlanCustomersCacheInfoCreateRequestWithBody generates requests for PlanCustomersCacheInfoCreate with any type of body
func NewPlanCustomersCacheInfoCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plan/customers/cache-info/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPlanCustomersCustomerTypesListRequest generates requests for PlanCustomersCustomerTypesList
func NewPlanCustomersCustomerTypesListRequest(server string, params *PlanCustomersCustomerTypesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plan/customers/customer-types/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.GroupType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "group_type", runtime.ParamLocationQuery, *params.GroupType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlanCustomersDistrictsListRequest generates requests for PlanCustomersDistrictsList
func NewPlanCustomersDistrictsListRequest(server string, params *PlanCustomersDistrictsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plan/customers/districts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "province_code", runtime.ParamLocationQuery, params.ProvinceCode); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlanCustomersGetInfoRetrieveRequest generates requests for PlanCustomersGetInfoRetrieve
func NewPlanCustomersGetInfoRetrieveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plan/customers/get-info/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlanCustomersGroupTypesListRequest generates requests for PlanCustomersGroupTypesList
func NewPlanCustomersGroupTypesListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plan/customers/group-types/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlanCustomersPrecinctsListRequest generates requests for PlanCustomersPrecinctsList
func NewPlanCustomersPrecinctsListRequest(server string, params *PlanCustomersPrecinctsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plan/customers/precincts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "district_code", runtime.ParamLocationQuery, params.DistrictCode); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "province_code", runtime.ParamLocationQuery, params.ProvinceCode); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlanCustomersProvincesListRequest generates requests for PlanCustomersProvincesList
func NewPlanCustomersProvincesListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plan/customers/provinces/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlanCustomersUploadIdCreateRequest calls the generic PlanCustomersUploadIdCreate builder with application/json body
func NewPlanCustomersUploadIdCreateRequest(server string, body PlanCustomersUploadIdCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPlanCustomersUploadIdCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPlanCustomersUploadIdCreateRequestWithFormdataBody calls the generic PlanCustomersUploadIdCreate builder with application/x-www-form-urlencoded body
func NewPlanCustomersUploadIdCreateRequestWithFormdataBody(server string, body PlanCustomersUploadIdCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPlanCustomersUploadIdCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPlanCustomersUploadIdCreateRequestWithBody generates requests for PlanCustomersUploadIdCreate with any type of body
func NewPlanCustomersUploadIdCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plan/customers/upload-id/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPlanObjectStoragesListRequest generates requests for PlanObjectStoragesList
func NewPlanObjectStoragesListRequest(server string, params *PlanObjectStoragesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plan/object-storages/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewPlanObjectStoragesRetrieveRequest generates requests for PlanObjectStoragesRetrieve
func NewPlanObjectStoragesRetrieveRequest(server string, id openapi_types.UUID, params *PlanObjectStoragesRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plan/object-storages/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewPlanOrdersListRequest generates requests for PlanOrdersList
func NewPlanOrdersListRequest(server string, params *PlanOrdersListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plan/orders/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.CreatedAfter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_after", runtime.ParamLocationQuery, *params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreatedBefore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_before", runtime.ParamLocationQuery, *params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewPlanOrdersCreateRequest calls the generic PlanOrdersCreate builder with application/json body
func NewPlanOrdersCreateRequest(server string, params *PlanOrdersCreateParams, body PlanOrdersCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPlanOrdersCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPlanOrdersCreateRequestWithFormdataBody calls the generic PlanOrdersCreate builder with application/x-www-form-urlencoded body
func NewPlanOrdersCreateRequestWithFormdataBody(server string, params *PlanOrdersCreateParams, body PlanOrdersCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPlanOrdersCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewPlanOrdersCreateRequestWithBody generates requests for PlanOrdersCreate with any type of body
func NewPlanOrdersCreateRequestWithBody(server string, params *PlanOrdersCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plan/orders/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewPlanOrdersCalculatePriceCreateRequest calls the generic PlanOrdersCalculatePriceCreate builder with application/json body
func NewPlanOrdersCalculatePriceCreateRequest(server string, params *PlanOrdersCalculatePriceCreateParams, body PlanOrdersCalculatePriceCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPlanOrdersCalculatePriceCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPlanOrdersCalculatePriceCreateRequestWithFormdataBody calls the generic PlanOrdersCalculatePriceCreate builder with application/x-www-form-urlencoded body
func NewPlanOrdersCalculatePriceCreateRequestWithFormdataBody(server string, params *PlanOrdersCalculatePriceCreateParams, body PlanOrdersCalculatePriceCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPlanOrdersCalculatePriceCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewPlanOrdersCalculatePriceCreateRequestWithBody generates requests for PlanOrdersCalculatePriceCreate with any type of body
func NewPlanOrdersCalculatePriceCreateRequestWithBody(server string, params *PlanOrdersCalculatePriceCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plan/orders/calculate-price/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewPlanOrdersPreviewContractCreateRequest calls the generic PlanOrdersPreviewContractCreate builder with application/json body
func NewPlanOrdersPreviewContractCreateRequest(server string, params *PlanOrdersPreviewContractCreateParams, body PlanOrdersPreviewContractCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPlanOrdersPreviewContractCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPlanOrdersPreviewContractCreateRequestWithFormdataBody calls the generic PlanOrdersPreviewContractCreate builder with application/x-www-form-urlencoded body
func NewPlanOrdersPreviewContractCreateRequestWithFormdataBody(server string, params *PlanOrdersPreviewContractCreateParams, body PlanOrdersPreviewContractCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPlanOrdersPreviewContractCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewPlanOrdersPreviewContractCreateRequestWithBody generates requests for PlanOrdersPreviewContractCreate with any type of body
func NewPlanOrdersPreviewContractCreateRequestWithBody(server string, params *PlanOrdersPreviewContractCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plan/orders/preview-contract/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewPlanOrdersRetrieveRequest generates requests for PlanOrdersRetrieve
func NewPlanOrdersRetrieveRequest(server string, id openapi_types.UUID, params *PlanOrdersRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plan/orders/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewPlanOrdersCancelCreateRequest generates requests for PlanOrdersCancelCreate
func NewPlanOrdersCancelCreateRequest(server string, id openapi_types.UUID, params *PlanOrdersCancelCreateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plan/orders/%s/cancel/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewPlanOrdersInvoiceRetrieveRequest generates requests for PlanOrdersInvoiceRetrieve
func NewPlanOrdersInvoiceRetrieveRequest(server string, id openapi_types.UUID, params *PlanOrdersInvoiceRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plan/orders/%s/invoice/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewPlanServersListRequest generates requests for PlanServersList
func NewPlanServersListRequest(server string, params *PlanServersListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plan/servers/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewPlanServersRetrieveRequest generates requests for PlanServersRetrieve
func NewPlanServersRetrieveRequest(server string, id openapi_types.UUID, params *PlanServersRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plan/servers/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewPlanVolumesListRequest generates requests for PlanVolumesList
func NewPlanVolumesListRequest(server string, params *PlanVolumesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plan/volumes/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewPlanVolumesRetrieveRequest generates requests for PlanVolumesRetrieve
func NewPlanVolumesRetrieveRequest(server string, id openapi_types.UUID, params *PlanVolumesRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plan/volumes/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewSecretManagerSecretsListRequest generates requests for SecretManagerSecretsList
func NewSecretManagerSecretsListRequest(server string, params *SecretManagerSecretsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secret-manager/secrets/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewSecretManagerSecretsCreateRequest calls the generic SecretManagerSecretsCreate builder with application/json body
func NewSecretManagerSecretsCreateRequest(server string, params *SecretManagerSecretsCreateParams, body SecretManagerSecretsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSecretManagerSecretsCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSecretManagerSecretsCreateRequestWithFormdataBody calls the generic SecretManagerSecretsCreate builder with application/x-www-form-urlencoded body
func NewSecretManagerSecretsCreateRequestWithFormdataBody(server string, params *SecretManagerSecretsCreateParams, body SecretManagerSecretsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSecretManagerSecretsCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewSecretManagerSecretsCreateRequestWithBody generates requests for SecretManagerSecretsCreate with any type of body
func NewSecretManagerSecretsCreateRequestWithBody(server string, params *SecretManagerSecretsCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secret-manager/secrets/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewSecretManagerSecretsDestroyRequest generates requests for SecretManagerSecretsDestroy
func NewSecretManagerSecretsDestroyRequest(server string, id openapi_types.UUID, params *SecretManagerSecretsDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secret-manager/secrets/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewSecretManagerSecretsRetrieveRequest generates requests for SecretManagerSecretsRetrieve
func NewSecretManagerSecretsRetrieveRequest(server string, id openapi_types.UUID, params *SecretManagerSecretsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secret-manager/secrets/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewSecretManagerSecretsPartialUpdateRequest calls the generic SecretManagerSecretsPartialUpdate builder with application/json body
func NewSecretManagerSecretsPartialUpdateRequest(server string, id openapi_types.UUID, params *SecretManagerSecretsPartialUpdateParams, body SecretManagerSecretsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSecretManagerSecretsPartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewSecretManagerSecretsPartialUpdateRequestWithFormdataBody calls the generic SecretManagerSecretsPartialUpdate builder with application/x-www-form-urlencoded body
func NewSecretManagerSecretsPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *SecretManagerSecretsPartialUpdateParams, body SecretManagerSecretsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSecretManagerSecretsPartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewSecretManagerSecretsPartialUpdateRequestWithBody generates requests for SecretManagerSecretsPartialUpdate with any type of body
func NewSecretManagerSecretsPartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *SecretManagerSecretsPartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secret-manager/secrets/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewSecretManagerSecretsUpdateRequest calls the generic SecretManagerSecretsUpdate builder with application/json body
func NewSecretManagerSecretsUpdateRequest(server string, id openapi_types.UUID, params *SecretManagerSecretsUpdateParams, body SecretManagerSecretsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSecretManagerSecretsUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewSecretManagerSecretsUpdateRequestWithFormdataBody calls the generic SecretManagerSecretsUpdate builder with application/x-www-form-urlencoded body
func NewSecretManagerSecretsUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *SecretManagerSecretsUpdateParams, body SecretManagerSecretsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSecretManagerSecretsUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewSecretManagerSecretsUpdateRequestWithBody generates requests for SecretManagerSecretsUpdate with any type of body
func NewSecretManagerSecretsUpdateRequestWithBody(server string, id openapi_types.UUID, params *SecretManagerSecretsUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secret-manager/secrets/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewSecretManagerSecretsMetadataRetrieveRequest generates requests for SecretManagerSecretsMetadataRetrieve
func NewSecretManagerSecretsMetadataRetrieveRequest(server string, id openapi_types.UUID, params *SecretManagerSecretsMetadataRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secret-manager/secrets/%s/metadata/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewSecretManagerSecretsMetadataCreateRequest calls the generic SecretManagerSecretsMetadataCreate builder with application/json body
func NewSecretManagerSecretsMetadataCreateRequest(server string, id openapi_types.UUID, params *SecretManagerSecretsMetadataCreateParams, body SecretManagerSecretsMetadataCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSecretManagerSecretsMetadataCreateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewSecretManagerSecretsMetadataCreateRequestWithFormdataBody calls the generic SecretManagerSecretsMetadataCreate builder with application/x-www-form-urlencoded body
func NewSecretManagerSecretsMetadataCreateRequestWithFormdataBody(server string, id openapi_types.UUID, params *SecretManagerSecretsMetadataCreateParams, body SecretManagerSecretsMetadataCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSecretManagerSecretsMetadataCreateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewSecretManagerSecretsMetadataCreateRequestWithBody generates requests for SecretManagerSecretsMetadataCreate with any type of body
func NewSecretManagerSecretsMetadataCreateRequestWithBody(server string, id openapi_types.UUID, params *SecretManagerSecretsMetadataCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secret-manager/secrets/%s/metadata/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewServiceCatalogFavoriteServicesListRequest generates requests for ServiceCatalogFavoriteServicesList
func NewServiceCatalogFavoriteServicesListRequest(server string, params *ServiceCatalogFavoriteServicesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service-catalog/favorite-services/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewServiceCatalogFavoriteServicesCreateRequest calls the generic ServiceCatalogFavoriteServicesCreate builder with application/json body
func NewServiceCatalogFavoriteServicesCreateRequest(server string, body ServiceCatalogFavoriteServicesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewServiceCatalogFavoriteServicesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewServiceCatalogFavoriteServicesCreateRequestWithFormdataBody calls the generic ServiceCatalogFavoriteServicesCreate builder with application/x-www-form-urlencoded body
func NewServiceCatalogFavoriteServicesCreateRequestWithFormdataBody(server string, body ServiceCatalogFavoriteServicesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewServiceCatalogFavoriteServicesCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewServiceCatalogFavoriteServicesCreateRequestWithBody generates requests for ServiceCatalogFavoriteServicesCreate with any type of body
func NewServiceCatalogFavoriteServicesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service-catalog/favorite-services/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewServiceCatalogFavoriteServicesDestroyRequest generates requests for ServiceCatalogFavoriteServicesDestroy
func NewServiceCatalogFavoriteServicesDestroyRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service-catalog/favorite-services/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewServiceCatalogFavoriteServicesRetrieveRequest generates requests for ServiceCatalogFavoriteServicesRetrieve
func NewServiceCatalogFavoriteServicesRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service-catalog/favorite-services/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewServiceCatalogServicesListRequest generates requests for ServiceCatalogServicesList
func NewServiceCatalogServicesListRequest(server string, params *ServiceCatalogServicesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service-catalog/services/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.CategoryId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category_id", runtime.ParamLocationQuery, *params.CategoryId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Description != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewServiceCatalogServicesCreateRequest calls the generic ServiceCatalogServicesCreate builder with application/json body
func NewServiceCatalogServicesCreateRequest(server string, body ServiceCatalogServicesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewServiceCatalogServicesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewServiceCatalogServicesCreateRequestWithFormdataBody calls the generic ServiceCatalogServicesCreate builder with application/x-www-form-urlencoded body
func NewServiceCatalogServicesCreateRequestWithFormdataBody(server string, body ServiceCatalogServicesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewServiceCatalogServicesCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewServiceCatalogServicesCreateRequestWithBody generates requests for ServiceCatalogServicesCreate with any type of body
func NewServiceCatalogServicesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service-catalog/services/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewServiceCatalogServicesUsingServicesRetrieveRequest generates requests for ServiceCatalogServicesUsingServicesRetrieve
func NewServiceCatalogServicesUsingServicesRetrieveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service-catalog/services/using-services/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewServiceCatalogServicesDestroyRequest generates requests for ServiceCatalogServicesDestroy
func NewServiceCatalogServicesDestroyRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service-catalog/services/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewServiceCatalogServicesRetrieveRequest generates requests for ServiceCatalogServicesRetrieve
func NewServiceCatalogServicesRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service-catalog/services/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewServiceCatalogServicesPartialUpdateRequest calls the generic ServiceCatalogServicesPartialUpdate builder with application/json body
func NewServiceCatalogServicesPartialUpdateRequest(server string, id openapi_types.UUID, body ServiceCatalogServicesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewServiceCatalogServicesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewServiceCatalogServicesPartialUpdateRequestWithFormdataBody calls the generic ServiceCatalogServicesPartialUpdate builder with application/x-www-form-urlencoded body
func NewServiceCatalogServicesPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, body ServiceCatalogServicesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewServiceCatalogServicesPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewServiceCatalogServicesPartialUpdateRequestWithBody generates requests for ServiceCatalogServicesPartialUpdate with any type of body
func NewServiceCatalogServicesPartialUpdateRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service-catalog/services/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewServiceCatalogServicesUpdateRequest calls the generic ServiceCatalogServicesUpdate builder with application/json body
func NewServiceCatalogServicesUpdateRequest(server string, id openapi_types.UUID, body ServiceCatalogServicesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewServiceCatalogServicesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewServiceCatalogServicesUpdateRequestWithFormdataBody calls the generic ServiceCatalogServicesUpdate builder with application/x-www-form-urlencoded body
func NewServiceCatalogServicesUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, body ServiceCatalogServicesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewServiceCatalogServicesUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewServiceCatalogServicesUpdateRequestWithBody generates requests for ServiceCatalogServicesUpdate with any type of body
func NewServiceCatalogServicesUpdateRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service-catalog/services/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSupportQuestionsListRequest generates requests for SupportQuestionsList
func NewSupportQuestionsListRequest(server string, params *SupportQuestionsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/support/questions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.CustomerName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "customer_name", runtime.ParamLocationQuery, *params.CustomerName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Email != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Question != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "question", runtime.ParamLocationQuery, *params.Question); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.User != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, *params.User); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UserId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_id", runtime.ParamLocationQuery, *params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSupportQuestionsCreateRequest calls the generic SupportQuestionsCreate builder with application/json body
func NewSupportQuestionsCreateRequest(server string, body SupportQuestionsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSupportQuestionsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewSupportQuestionsCreateRequestWithFormdataBody calls the generic SupportQuestionsCreate builder with application/x-www-form-urlencoded body
func NewSupportQuestionsCreateRequestWithFormdataBody(server string, body SupportQuestionsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSupportQuestionsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewSupportQuestionsCreateRequestWithBody generates requests for SupportQuestionsCreate with any type of body
func NewSupportQuestionsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/support/questions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSupportQuestionsRetrieveRequest generates requests for SupportQuestionsRetrieve
func NewSupportQuestionsRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/support/questions/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSupportQuestionsPartialUpdateRequest calls the generic SupportQuestionsPartialUpdate builder with application/json body
func NewSupportQuestionsPartialUpdateRequest(server string, id openapi_types.UUID, body SupportQuestionsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSupportQuestionsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewSupportQuestionsPartialUpdateRequestWithFormdataBody calls the generic SupportQuestionsPartialUpdate builder with application/x-www-form-urlencoded body
func NewSupportQuestionsPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, body SupportQuestionsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSupportQuestionsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewSupportQuestionsPartialUpdateRequestWithBody generates requests for SupportQuestionsPartialUpdate with any type of body
func NewSupportQuestionsPartialUpdateRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/support/questions/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTenantProjectUsersListRequest generates requests for TenantProjectUsersList
func NewTenantProjectUsersListRequest(server string, params *TenantProjectUsersListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenant/project-users/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.User != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, *params.User); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UserId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_id", runtime.ParamLocationQuery, *params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewTenantProjectUsersDestroyRequest generates requests for TenantProjectUsersDestroy
func NewTenantProjectUsersDestroyRequest(server string, id openapi_types.UUID, params *TenantProjectUsersDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenant/project-users/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewTenantProjectUsersRetrieveRequest generates requests for TenantProjectUsersRetrieve
func NewTenantProjectUsersRetrieveRequest(server string, id openapi_types.UUID, params *TenantProjectUsersRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenant/project-users/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewTenantProjectUsersPartialUpdateRequest calls the generic TenantProjectUsersPartialUpdate builder with application/json body
func NewTenantProjectUsersPartialUpdateRequest(server string, id openapi_types.UUID, params *TenantProjectUsersPartialUpdateParams, body TenantProjectUsersPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTenantProjectUsersPartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewTenantProjectUsersPartialUpdateRequestWithFormdataBody calls the generic TenantProjectUsersPartialUpdate builder with application/x-www-form-urlencoded body
func NewTenantProjectUsersPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *TenantProjectUsersPartialUpdateParams, body TenantProjectUsersPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTenantProjectUsersPartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewTenantProjectUsersPartialUpdateRequestWithBody generates requests for TenantProjectUsersPartialUpdate with any type of body
func NewTenantProjectUsersPartialUpdateRequestWithBody(server string, id openapi_types.UUID, params *TenantProjectUsersPartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenant/project-users/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewTenantProjectUsersUpdateRequest calls the generic TenantProjectUsersUpdate builder with application/json body
func NewTenantProjectUsersUpdateRequest(server string, id openapi_types.UUID, params *TenantProjectUsersUpdateParams, body TenantProjectUsersUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTenantProjectUsersUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewTenantProjectUsersUpdateRequestWithFormdataBody calls the generic TenantProjectUsersUpdate builder with application/x-www-form-urlencoded body
func NewTenantProjectUsersUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, params *TenantProjectUsersUpdateParams, body TenantProjectUsersUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTenantProjectUsersUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewTenantProjectUsersUpdateRequestWithBody generates requests for TenantProjectUsersUpdate with any type of body
func NewTenantProjectUsersUpdateRequestWithBody(server string, id openapi_types.UUID, params *TenantProjectUsersUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenant/project-users/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationHeader, params.ProjectId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("project-id", headerParam0)

	return req, nil
}

// NewTenantProjectsListRequest generates requests for TenantProjectsList
func NewTenantProjectsListRequest(server string, params *TenantProjectsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenant/projects/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Slug != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "slug", runtime.ParamLocationQuery, *params.Slug); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTenantProjectsCreateRequest calls the generic TenantProjectsCreate builder with application/json body
func NewTenantProjectsCreateRequest(server string, body TenantProjectsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTenantProjectsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewTenantProjectsCreateRequestWithFormdataBody calls the generic TenantProjectsCreate builder with application/x-www-form-urlencoded body
func NewTenantProjectsCreateRequestWithFormdataBody(server string, body TenantProjectsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTenantProjectsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewTenantProjectsCreateRequestWithBody generates requests for TenantProjectsCreate with any type of body
func NewTenantProjectsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenant/projects/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTenantProjectsDestroyRequest generates requests for TenantProjectsDestroy
func NewTenantProjectsDestroyRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenant/projects/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTenantProjectsRetrieveRequest generates requests for TenantProjectsRetrieve
func NewTenantProjectsRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenant/projects/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTenantProjectsPartialUpdateRequest calls the generic TenantProjectsPartialUpdate builder with application/json body
func NewTenantProjectsPartialUpdateRequest(server string, id openapi_types.UUID, body TenantProjectsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTenantProjectsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewTenantProjectsPartialUpdateRequestWithFormdataBody calls the generic TenantProjectsPartialUpdate builder with application/x-www-form-urlencoded body
func NewTenantProjectsPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, body TenantProjectsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTenantProjectsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewTenantProjectsPartialUpdateRequestWithBody generates requests for TenantProjectsPartialUpdate with any type of body
func NewTenantProjectsPartialUpdateRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenant/projects/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTenantProjectsUpdateRequest calls the generic TenantProjectsUpdate builder with application/json body
func NewTenantProjectsUpdateRequest(server string, id openapi_types.UUID, body TenantProjectsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTenantProjectsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewTenantProjectsUpdateRequestWithFormdataBody calls the generic TenantProjectsUpdate builder with application/x-www-form-urlencoded body
func NewTenantProjectsUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, body TenantProjectsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTenantProjectsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewTenantProjectsUpdateRequestWithBody generates requests for TenantProjectsUpdate with any type of body
func NewTenantProjectsUpdateRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenant/projects/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTenantProjectsServicesRetrieveRequest generates requests for TenantProjectsServicesRetrieve
func NewTenantProjectsServicesRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenant/projects/%s/services/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTenantUsersListRequest generates requests for TenantUsersList
func NewTenantUsersListRequest(server string, params *TenantUsersListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenant/users/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Email != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Username != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, *params.Username); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTenantUsersCurrentUserRetrieveRequest generates requests for TenantUsersCurrentUserRetrieve
func NewTenantUsersCurrentUserRetrieveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenant/users/current-user/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTenantUsersRetrieveRequest generates requests for TenantUsersRetrieve
func NewTenantUsersRetrieveRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenant/users/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTenantUsersPartialUpdateRequest calls the generic TenantUsersPartialUpdate builder with application/json body
func NewTenantUsersPartialUpdateRequest(server string, id openapi_types.UUID, body TenantUsersPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTenantUsersPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewTenantUsersPartialUpdateRequestWithFormdataBody calls the generic TenantUsersPartialUpdate builder with application/x-www-form-urlencoded body
func NewTenantUsersPartialUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, body TenantUsersPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTenantUsersPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewTenantUsersPartialUpdateRequestWithBody generates requests for TenantUsersPartialUpdate with any type of body
func NewTenantUsersPartialUpdateRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenant/users/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTenantUsersUpdateRequest calls the generic TenantUsersUpdate builder with application/json body
func NewTenantUsersUpdateRequest(server string, id openapi_types.UUID, body TenantUsersUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTenantUsersUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewTenantUsersUpdateRequestWithFormdataBody calls the generic TenantUsersUpdate builder with application/x-www-form-urlencoded body
func NewTenantUsersUpdateRequestWithFormdataBody(server string, id openapi_types.UUID, body TenantUsersUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTenantUsersUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewTenantUsersUpdateRequestWithBody generates requests for TenantUsersUpdate with any type of body
func NewTenantUsersUpdateRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenant/users/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AlarmAlarmsList request
	AlarmAlarmsListWithResponse(ctx context.Context, params *AlarmAlarmsListParams, reqEditors ...RequestEditorFn) (*AlarmAlarmsListResponse, error)

	// AlarmAlarmsCreate request with any body
	AlarmAlarmsCreateWithBodyWithResponse(ctx context.Context, params *AlarmAlarmsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AlarmAlarmsCreateResponse, error)

	AlarmAlarmsCreateWithResponse(ctx context.Context, params *AlarmAlarmsCreateParams, body AlarmAlarmsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AlarmAlarmsCreateResponse, error)

	AlarmAlarmsCreateWithFormdataBodyWithResponse(ctx context.Context, params *AlarmAlarmsCreateParams, body AlarmAlarmsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AlarmAlarmsCreateResponse, error)

	// AlarmAlarmsDestroy request
	AlarmAlarmsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *AlarmAlarmsDestroyParams, reqEditors ...RequestEditorFn) (*AlarmAlarmsDestroyResponse, error)

	// AlarmAlarmsRetrieve request
	AlarmAlarmsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *AlarmAlarmsRetrieveParams, reqEditors ...RequestEditorFn) (*AlarmAlarmsRetrieveResponse, error)

	// AlarmAlarmsPartialUpdate request with any body
	AlarmAlarmsPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *AlarmAlarmsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AlarmAlarmsPartialUpdateResponse, error)

	AlarmAlarmsPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *AlarmAlarmsPartialUpdateParams, body AlarmAlarmsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AlarmAlarmsPartialUpdateResponse, error)

	AlarmAlarmsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *AlarmAlarmsPartialUpdateParams, body AlarmAlarmsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AlarmAlarmsPartialUpdateResponse, error)

	// AlarmAlarmsUpdate request with any body
	AlarmAlarmsUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *AlarmAlarmsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AlarmAlarmsUpdateResponse, error)

	AlarmAlarmsUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *AlarmAlarmsUpdateParams, body AlarmAlarmsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AlarmAlarmsUpdateResponse, error)

	AlarmAlarmsUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *AlarmAlarmsUpdateParams, body AlarmAlarmsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AlarmAlarmsUpdateResponse, error)

	// BccsOrdersPurchaseCallbackCreate request with any body
	BccsOrdersPurchaseCallbackCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BccsOrdersPurchaseCallbackCreateResponse, error)

	BccsOrdersPurchaseCallbackCreateWithResponse(ctx context.Context, body BccsOrdersPurchaseCallbackCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*BccsOrdersPurchaseCallbackCreateResponse, error)

	BccsOrdersPurchaseCallbackCreateWithFormdataBodyWithResponse(ctx context.Context, body BccsOrdersPurchaseCallbackCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*BccsOrdersPurchaseCallbackCreateResponse, error)

	// BccsPlansBackupList request
	BccsPlansBackupListWithResponse(ctx context.Context, params *BccsPlansBackupListParams, reqEditors ...RequestEditorFn) (*BccsPlansBackupListResponse, error)

	// BccsPlansBackupCreate request with any body
	BccsPlansBackupCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BccsPlansBackupCreateResponse, error)

	BccsPlansBackupCreateWithResponse(ctx context.Context, body BccsPlansBackupCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*BccsPlansBackupCreateResponse, error)

	BccsPlansBackupCreateWithFormdataBodyWithResponse(ctx context.Context, body BccsPlansBackupCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*BccsPlansBackupCreateResponse, error)

	// BccsPlansBackupRetrieve request
	BccsPlansBackupRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*BccsPlansBackupRetrieveResponse, error)

	// BccsPlansContainerRegistryList request
	BccsPlansContainerRegistryListWithResponse(ctx context.Context, params *BccsPlansContainerRegistryListParams, reqEditors ...RequestEditorFn) (*BccsPlansContainerRegistryListResponse, error)

	// BccsPlansContainerRegistryCreate request with any body
	BccsPlansContainerRegistryCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BccsPlansContainerRegistryCreateResponse, error)

	BccsPlansContainerRegistryCreateWithResponse(ctx context.Context, body BccsPlansContainerRegistryCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*BccsPlansContainerRegistryCreateResponse, error)

	BccsPlansContainerRegistryCreateWithFormdataBodyWithResponse(ctx context.Context, body BccsPlansContainerRegistryCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*BccsPlansContainerRegistryCreateResponse, error)

	// BccsPlansContainerRegistryRetrieve request
	BccsPlansContainerRegistryRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*BccsPlansContainerRegistryRetrieveResponse, error)

	// BccsPlansFileStorageList request
	BccsPlansFileStorageListWithResponse(ctx context.Context, params *BccsPlansFileStorageListParams, reqEditors ...RequestEditorFn) (*BccsPlansFileStorageListResponse, error)

	// BccsPlansFileStorageCreate request with any body
	BccsPlansFileStorageCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BccsPlansFileStorageCreateResponse, error)

	BccsPlansFileStorageCreateWithResponse(ctx context.Context, body BccsPlansFileStorageCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*BccsPlansFileStorageCreateResponse, error)

	BccsPlansFileStorageCreateWithFormdataBodyWithResponse(ctx context.Context, body BccsPlansFileStorageCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*BccsPlansFileStorageCreateResponse, error)

	// BccsPlansFileStorageRetrieve request
	BccsPlansFileStorageRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*BccsPlansFileStorageRetrieveResponse, error)

	// BccsPlansK8sClusterList request
	BccsPlansK8sClusterListWithResponse(ctx context.Context, params *BccsPlansK8sClusterListParams, reqEditors ...RequestEditorFn) (*BccsPlansK8sClusterListResponse, error)

	// BccsPlansK8sClusterCreate request with any body
	BccsPlansK8sClusterCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BccsPlansK8sClusterCreateResponse, error)

	BccsPlansK8sClusterCreateWithResponse(ctx context.Context, body BccsPlansK8sClusterCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*BccsPlansK8sClusterCreateResponse, error)

	BccsPlansK8sClusterCreateWithFormdataBodyWithResponse(ctx context.Context, body BccsPlansK8sClusterCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*BccsPlansK8sClusterCreateResponse, error)

	// BccsPlansK8sClusterRetrieve request
	BccsPlansK8sClusterRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*BccsPlansK8sClusterRetrieveResponse, error)

	// BccsPlansLoadBalancingList request
	BccsPlansLoadBalancingListWithResponse(ctx context.Context, params *BccsPlansLoadBalancingListParams, reqEditors ...RequestEditorFn) (*BccsPlansLoadBalancingListResponse, error)

	// BccsPlansLoadBalancingCreate request with any body
	BccsPlansLoadBalancingCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BccsPlansLoadBalancingCreateResponse, error)

	BccsPlansLoadBalancingCreateWithResponse(ctx context.Context, body BccsPlansLoadBalancingCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*BccsPlansLoadBalancingCreateResponse, error)

	BccsPlansLoadBalancingCreateWithFormdataBodyWithResponse(ctx context.Context, body BccsPlansLoadBalancingCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*BccsPlansLoadBalancingCreateResponse, error)

	// BccsPlansLoadBalancingRetrieve request
	BccsPlansLoadBalancingRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*BccsPlansLoadBalancingRetrieveResponse, error)

	// BccsPlansObjectStorageList request
	BccsPlansObjectStorageListWithResponse(ctx context.Context, params *BccsPlansObjectStorageListParams, reqEditors ...RequestEditorFn) (*BccsPlansObjectStorageListResponse, error)

	// BccsPlansObjectStorageCreate request with any body
	BccsPlansObjectStorageCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BccsPlansObjectStorageCreateResponse, error)

	BccsPlansObjectStorageCreateWithResponse(ctx context.Context, body BccsPlansObjectStorageCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*BccsPlansObjectStorageCreateResponse, error)

	BccsPlansObjectStorageCreateWithFormdataBodyWithResponse(ctx context.Context, body BccsPlansObjectStorageCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*BccsPlansObjectStorageCreateResponse, error)

	// BccsPlansObjectStorageRetrieve request
	BccsPlansObjectStorageRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*BccsPlansObjectStorageRetrieveResponse, error)

	// BccsPlansServerList request
	BccsPlansServerListWithResponse(ctx context.Context, params *BccsPlansServerListParams, reqEditors ...RequestEditorFn) (*BccsPlansServerListResponse, error)

	// BccsPlansServerCreate request with any body
	BccsPlansServerCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BccsPlansServerCreateResponse, error)

	BccsPlansServerCreateWithResponse(ctx context.Context, body BccsPlansServerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*BccsPlansServerCreateResponse, error)

	BccsPlansServerCreateWithFormdataBodyWithResponse(ctx context.Context, body BccsPlansServerCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*BccsPlansServerCreateResponse, error)

	// BccsPlansServerRetrieve request
	BccsPlansServerRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*BccsPlansServerRetrieveResponse, error)

	// BccsPlansVolumeList request
	BccsPlansVolumeListWithResponse(ctx context.Context, params *BccsPlansVolumeListParams, reqEditors ...RequestEditorFn) (*BccsPlansVolumeListResponse, error)

	// BccsPlansVolumeCreate request with any body
	BccsPlansVolumeCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BccsPlansVolumeCreateResponse, error)

	BccsPlansVolumeCreateWithResponse(ctx context.Context, body BccsPlansVolumeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*BccsPlansVolumeCreateResponse, error)

	BccsPlansVolumeCreateWithFormdataBodyWithResponse(ctx context.Context, body BccsPlansVolumeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*BccsPlansVolumeCreateResponse, error)

	// BccsPlansVolumeRetrieve request
	BccsPlansVolumeRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*BccsPlansVolumeRetrieveResponse, error)

	// BccsUsersList request
	BccsUsersListWithResponse(ctx context.Context, params *BccsUsersListParams, reqEditors ...RequestEditorFn) (*BccsUsersListResponse, error)

	// BccsUsersCreate request with any body
	BccsUsersCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BccsUsersCreateResponse, error)

	BccsUsersCreateWithResponse(ctx context.Context, body BccsUsersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*BccsUsersCreateResponse, error)

	BccsUsersCreateWithFormdataBodyWithResponse(ctx context.Context, body BccsUsersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*BccsUsersCreateResponse, error)

	// BccsUsersRetrieve request
	BccsUsersRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*BccsUsersRetrieveResponse, error)

	// BccsUsersProjectsRetrieve request
	BccsUsersProjectsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*BccsUsersProjectsRetrieveResponse, error)

	// BccsVolumesList request
	BccsVolumesListWithResponse(ctx context.Context, params *BccsVolumesListParams, reqEditors ...RequestEditorFn) (*BccsVolumesListResponse, error)

	// ContainerRegistryCliSecretRetrieve request
	ContainerRegistryCliSecretRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ContainerRegistryCliSecretRetrieveResponse, error)

	// ContainerRegistryImagesList request
	ContainerRegistryImagesListWithResponse(ctx context.Context, params *ContainerRegistryImagesListParams, reqEditors ...RequestEditorFn) (*ContainerRegistryImagesListResponse, error)

	// ContainerRegistryImagesDestroy request
	ContainerRegistryImagesDestroyWithResponse(ctx context.Context, imageName string, params *ContainerRegistryImagesDestroyParams, reqEditors ...RequestEditorFn) (*ContainerRegistryImagesDestroyResponse, error)

	// ContainerRegistryImagesRetrieve request
	ContainerRegistryImagesRetrieveWithResponse(ctx context.Context, imageName string, params *ContainerRegistryImagesRetrieveParams, reqEditors ...RequestEditorFn) (*ContainerRegistryImagesRetrieveResponse, error)

	// ContainerRegistryImagesArtifactsList request
	ContainerRegistryImagesArtifactsListWithResponse(ctx context.Context, imageName string, params *ContainerRegistryImagesArtifactsListParams, reqEditors ...RequestEditorFn) (*ContainerRegistryImagesArtifactsListResponse, error)

	// ContainerRegistryImagesArtifactsDestroy request
	ContainerRegistryImagesArtifactsDestroyWithResponse(ctx context.Context, imageName string, reference string, params *ContainerRegistryImagesArtifactsDestroyParams, reqEditors ...RequestEditorFn) (*ContainerRegistryImagesArtifactsDestroyResponse, error)

	// ContainerRegistryImagesArtifactsRetrieve request
	ContainerRegistryImagesArtifactsRetrieveWithResponse(ctx context.Context, imageName string, reference string, params *ContainerRegistryImagesArtifactsRetrieveParams, reqEditors ...RequestEditorFn) (*ContainerRegistryImagesArtifactsRetrieveResponse, error)

	// ContainerRegistryImagesArtifactsBuildHistoryRetrieve request
	ContainerRegistryImagesArtifactsBuildHistoryRetrieveWithResponse(ctx context.Context, imageName string, reference string, params *ContainerRegistryImagesArtifactsBuildHistoryRetrieveParams, reqEditors ...RequestEditorFn) (*ContainerRegistryImagesArtifactsBuildHistoryRetrieveResponse, error)

	// ContainerRegistryImagesArtifactsScanCreate request
	ContainerRegistryImagesArtifactsScanCreateWithResponse(ctx context.Context, imageName string, reference string, params *ContainerRegistryImagesArtifactsScanCreateParams, reqEditors ...RequestEditorFn) (*ContainerRegistryImagesArtifactsScanCreateResponse, error)

	// ContainerRegistryImagesArtifactsTagsRetrieve request
	ContainerRegistryImagesArtifactsTagsRetrieveWithResponse(ctx context.Context, imageName string, reference string, params *ContainerRegistryImagesArtifactsTagsRetrieveParams, reqEditors ...RequestEditorFn) (*ContainerRegistryImagesArtifactsTagsRetrieveResponse, error)

	// ContainerRegistryImagesArtifactsTagsDestroy request
	ContainerRegistryImagesArtifactsTagsDestroyWithResponse(ctx context.Context, imageName string, reference string, tagName string, params *ContainerRegistryImagesArtifactsTagsDestroyParams, reqEditors ...RequestEditorFn) (*ContainerRegistryImagesArtifactsTagsDestroyResponse, error)

	// ContainerRegistryImagesArtifactsVulnerabilitiesRetrieve request
	ContainerRegistryImagesArtifactsVulnerabilitiesRetrieveWithResponse(ctx context.Context, imageName string, reference string, params *ContainerRegistryImagesArtifactsVulnerabilitiesRetrieveParams, reqEditors ...RequestEditorFn) (*ContainerRegistryImagesArtifactsVulnerabilitiesRetrieveResponse, error)

	// ContainerRegistryLogsRetrieve request
	ContainerRegistryLogsRetrieveWithResponse(ctx context.Context, params *ContainerRegistryLogsRetrieveParams, reqEditors ...RequestEditorFn) (*ContainerRegistryLogsRetrieveResponse, error)

	// ContainerRegistryQuotaRetrieve request
	ContainerRegistryQuotaRetrieveWithResponse(ctx context.Context, params *ContainerRegistryQuotaRetrieveParams, reqEditors ...RequestEditorFn) (*ContainerRegistryQuotaRetrieveResponse, error)

	// DbaasDbInstanceBackupsList request
	DbaasDbInstanceBackupsListWithResponse(ctx context.Context, params *DbaasDbInstanceBackupsListParams, reqEditors ...RequestEditorFn) (*DbaasDbInstanceBackupsListResponse, error)

	// DbaasDbInstanceBackupsCreate request with any body
	DbaasDbInstanceBackupsCreateWithBodyWithResponse(ctx context.Context, params *DbaasDbInstanceBackupsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DbaasDbInstanceBackupsCreateResponse, error)

	DbaasDbInstanceBackupsCreateWithResponse(ctx context.Context, params *DbaasDbInstanceBackupsCreateParams, body DbaasDbInstanceBackupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DbaasDbInstanceBackupsCreateResponse, error)

	DbaasDbInstanceBackupsCreateWithFormdataBodyWithResponse(ctx context.Context, params *DbaasDbInstanceBackupsCreateParams, body DbaasDbInstanceBackupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DbaasDbInstanceBackupsCreateResponse, error)

	// DbaasDbInstanceBackupsDestroy request
	DbaasDbInstanceBackupsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DbaasDbInstanceBackupsDestroyResponse, error)

	// DbaasDbInstanceBackupsRetrieve request
	DbaasDbInstanceBackupsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstanceBackupsRetrieveParams, reqEditors ...RequestEditorFn) (*DbaasDbInstanceBackupsRetrieveResponse, error)

	// DbaasDbInstancesList request
	DbaasDbInstancesListWithResponse(ctx context.Context, params *DbaasDbInstancesListParams, reqEditors ...RequestEditorFn) (*DbaasDbInstancesListResponse, error)

	// DbaasDbInstancesCreate request with any body
	DbaasDbInstancesCreateWithBodyWithResponse(ctx context.Context, params *DbaasDbInstancesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DbaasDbInstancesCreateResponse, error)

	DbaasDbInstancesCreateWithResponse(ctx context.Context, params *DbaasDbInstancesCreateParams, body DbaasDbInstancesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DbaasDbInstancesCreateResponse, error)

	DbaasDbInstancesCreateWithFormdataBodyWithResponse(ctx context.Context, params *DbaasDbInstancesCreateParams, body DbaasDbInstancesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DbaasDbInstancesCreateResponse, error)

	// DbaasDbInstancesDestroy request
	DbaasDbInstancesDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesDestroyParams, reqEditors ...RequestEditorFn) (*DbaasDbInstancesDestroyResponse, error)

	// DbaasDbInstancesRetrieve request
	DbaasDbInstancesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesRetrieveParams, reqEditors ...RequestEditorFn) (*DbaasDbInstancesRetrieveResponse, error)

	// DbaasDbInstancesExtendVolumeSizePartialUpdate request with any body
	DbaasDbInstancesExtendVolumeSizePartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesExtendVolumeSizePartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DbaasDbInstancesExtendVolumeSizePartialUpdateResponse, error)

	DbaasDbInstancesExtendVolumeSizePartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesExtendVolumeSizePartialUpdateParams, body DbaasDbInstancesExtendVolumeSizePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DbaasDbInstancesExtendVolumeSizePartialUpdateResponse, error)

	DbaasDbInstancesExtendVolumeSizePartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesExtendVolumeSizePartialUpdateParams, body DbaasDbInstancesExtendVolumeSizePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DbaasDbInstancesExtendVolumeSizePartialUpdateResponse, error)

	// DbaasDbInstancesUpdateBackupPolicyPartialUpdate request with any body
	DbaasDbInstancesUpdateBackupPolicyPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateBackupPolicyPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DbaasDbInstancesUpdateBackupPolicyPartialUpdateResponse, error)

	DbaasDbInstancesUpdateBackupPolicyPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateBackupPolicyPartialUpdateParams, body DbaasDbInstancesUpdateBackupPolicyPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DbaasDbInstancesUpdateBackupPolicyPartialUpdateResponse, error)

	DbaasDbInstancesUpdateBackupPolicyPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateBackupPolicyPartialUpdateParams, body DbaasDbInstancesUpdateBackupPolicyPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DbaasDbInstancesUpdateBackupPolicyPartialUpdateResponse, error)

	// DbaasDbInstancesUpdateFlavorPartialUpdate request with any body
	DbaasDbInstancesUpdateFlavorPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateFlavorPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DbaasDbInstancesUpdateFlavorPartialUpdateResponse, error)

	DbaasDbInstancesUpdateFlavorPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateFlavorPartialUpdateParams, body DbaasDbInstancesUpdateFlavorPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DbaasDbInstancesUpdateFlavorPartialUpdateResponse, error)

	DbaasDbInstancesUpdateFlavorPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateFlavorPartialUpdateParams, body DbaasDbInstancesUpdateFlavorPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DbaasDbInstancesUpdateFlavorPartialUpdateResponse, error)

	// DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdate request with any body
	DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateResponse, error)

	DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateParams, body DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateResponse, error)

	DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateParams, body DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateResponse, error)

	// DbaasDbInstancesUpdateRootPasswordPartialUpdate request with any body
	DbaasDbInstancesUpdateRootPasswordPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateRootPasswordPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DbaasDbInstancesUpdateRootPasswordPartialUpdateResponse, error)

	DbaasDbInstancesUpdateRootPasswordPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateRootPasswordPartialUpdateParams, body DbaasDbInstancesUpdateRootPasswordPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DbaasDbInstancesUpdateRootPasswordPartialUpdateResponse, error)

	DbaasDbInstancesUpdateRootPasswordPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateRootPasswordPartialUpdateParams, body DbaasDbInstancesUpdateRootPasswordPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DbaasDbInstancesUpdateRootPasswordPartialUpdateResponse, error)

	// DbaasDbVersionsList request
	DbaasDbVersionsListWithResponse(ctx context.Context, params *DbaasDbVersionsListParams, reqEditors ...RequestEditorFn) (*DbaasDbVersionsListResponse, error)

	// DbaasDbVersionsRetrieve request
	DbaasDbVersionsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DbaasDbVersionsRetrieveResponse, error)

	// DbaasDbaasFlavorsList request
	DbaasDbaasFlavorsListWithResponse(ctx context.Context, params *DbaasDbaasFlavorsListParams, reqEditors ...RequestEditorFn) (*DbaasDbaasFlavorsListResponse, error)

	// DbaasDbaasFlavorsRetrieve request
	DbaasDbaasFlavorsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DbaasDbaasFlavorsRetrieveResponse, error)

	// DbaasDbaasRegionsList request
	DbaasDbaasRegionsListWithResponse(ctx context.Context, params *DbaasDbaasRegionsListParams, reqEditors ...RequestEditorFn) (*DbaasDbaasRegionsListResponse, error)

	// DbaasDbaasRegionsRetrieve request
	DbaasDbaasRegionsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DbaasDbaasRegionsRetrieveResponse, error)

	// DbaasDbaasVolumeTypesList request
	DbaasDbaasVolumeTypesListWithResponse(ctx context.Context, params *DbaasDbaasVolumeTypesListParams, reqEditors ...RequestEditorFn) (*DbaasDbaasVolumeTypesListResponse, error)

	// DbaasDbaasVolumeTypesRetrieve request
	DbaasDbaasVolumeTypesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DbaasDbaasVolumeTypesRetrieveResponse, error)

	// DbaasDbaasZonesList request
	DbaasDbaasZonesListWithResponse(ctx context.Context, params *DbaasDbaasZonesListParams, reqEditors ...RequestEditorFn) (*DbaasDbaasZonesListResponse, error)

	// DbaasDbaasZonesRetrieve request
	DbaasDbaasZonesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DbaasDbaasZonesRetrieveResponse, error)

	// DbaasFlavorMappingsList request
	DbaasFlavorMappingsListWithResponse(ctx context.Context, params *DbaasFlavorMappingsListParams, reqEditors ...RequestEditorFn) (*DbaasFlavorMappingsListResponse, error)

	// DbaasFlavorMappingsRetrieve request
	DbaasFlavorMappingsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DbaasFlavorMappingsRetrieveResponse, error)

	// DbaasVolumeTypeMappingsList request
	DbaasVolumeTypeMappingsListWithResponse(ctx context.Context, params *DbaasVolumeTypeMappingsListParams, reqEditors ...RequestEditorFn) (*DbaasVolumeTypeMappingsListResponse, error)

	// DbaasVolumeTypeMappingsRetrieve request
	DbaasVolumeTypeMappingsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DbaasVolumeTypeMappingsRetrieveResponse, error)

	// InfraAutoScalingScalingActionList request
	InfraAutoScalingScalingActionListWithResponse(ctx context.Context, params *InfraAutoScalingScalingActionListParams, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingActionListResponse, error)

	// InfraAutoScalingScalingGroupList request
	InfraAutoScalingScalingGroupListWithResponse(ctx context.Context, params *InfraAutoScalingScalingGroupListParams, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingGroupListResponse, error)

	// InfraAutoScalingScalingGroupCreate request with any body
	InfraAutoScalingScalingGroupCreateWithBodyWithResponse(ctx context.Context, params *InfraAutoScalingScalingGroupCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingGroupCreateResponse, error)

	InfraAutoScalingScalingGroupCreateWithResponse(ctx context.Context, params *InfraAutoScalingScalingGroupCreateParams, body InfraAutoScalingScalingGroupCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingGroupCreateResponse, error)

	InfraAutoScalingScalingGroupCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraAutoScalingScalingGroupCreateParams, body InfraAutoScalingScalingGroupCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingGroupCreateResponse, error)

	// InfraAutoScalingScalingGroupMetricsSchemaRetrieve request
	InfraAutoScalingScalingGroupMetricsSchemaRetrieveWithResponse(ctx context.Context, params *InfraAutoScalingScalingGroupMetricsSchemaRetrieveParams, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingGroupMetricsSchemaRetrieveResponse, error)

	// InfraAutoScalingScalingGroupDestroy request
	InfraAutoScalingScalingGroupDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingGroupDestroyParams, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingGroupDestroyResponse, error)

	// InfraAutoScalingScalingGroupRetrieve request
	InfraAutoScalingScalingGroupRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingGroupRetrieveParams, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingGroupRetrieveResponse, error)

	// InfraAutoScalingScalingGroupPartialUpdate request with any body
	InfraAutoScalingScalingGroupPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingGroupPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingGroupPartialUpdateResponse, error)

	InfraAutoScalingScalingGroupPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingGroupPartialUpdateParams, body InfraAutoScalingScalingGroupPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingGroupPartialUpdateResponse, error)

	InfraAutoScalingScalingGroupPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingGroupPartialUpdateParams, body InfraAutoScalingScalingGroupPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingGroupPartialUpdateResponse, error)

	// InfraAutoScalingScalingGroupUpdate request with any body
	InfraAutoScalingScalingGroupUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingGroupUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingGroupUpdateResponse, error)

	InfraAutoScalingScalingGroupUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingGroupUpdateParams, body InfraAutoScalingScalingGroupUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingGroupUpdateResponse, error)

	InfraAutoScalingScalingGroupUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingGroupUpdateParams, body InfraAutoScalingScalingGroupUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingGroupUpdateResponse, error)

	// InfraAutoScalingScalingGroupMetricsRetrieve request
	InfraAutoScalingScalingGroupMetricsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingGroupMetricsRetrieveParams, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingGroupMetricsRetrieveResponse, error)

	// InfraAutoScalingScalingPolicyList request
	InfraAutoScalingScalingPolicyListWithResponse(ctx context.Context, params *InfraAutoScalingScalingPolicyListParams, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingPolicyListResponse, error)

	// InfraAutoScalingScalingPolicyCreate request with any body
	InfraAutoScalingScalingPolicyCreateWithBodyWithResponse(ctx context.Context, params *InfraAutoScalingScalingPolicyCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingPolicyCreateResponse, error)

	InfraAutoScalingScalingPolicyCreateWithResponse(ctx context.Context, params *InfraAutoScalingScalingPolicyCreateParams, body InfraAutoScalingScalingPolicyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingPolicyCreateResponse, error)

	InfraAutoScalingScalingPolicyCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraAutoScalingScalingPolicyCreateParams, body InfraAutoScalingScalingPolicyCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingPolicyCreateResponse, error)

	// InfraAutoScalingScalingPolicyDestroy request
	InfraAutoScalingScalingPolicyDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyDestroyParams, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingPolicyDestroyResponse, error)

	// InfraAutoScalingScalingPolicyRetrieve request
	InfraAutoScalingScalingPolicyRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyRetrieveParams, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingPolicyRetrieveResponse, error)

	// InfraAutoScalingScalingPolicyPartialUpdate request with any body
	InfraAutoScalingScalingPolicyPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingPolicyPartialUpdateResponse, error)

	InfraAutoScalingScalingPolicyPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyPartialUpdateParams, body InfraAutoScalingScalingPolicyPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingPolicyPartialUpdateResponse, error)

	InfraAutoScalingScalingPolicyPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyPartialUpdateParams, body InfraAutoScalingScalingPolicyPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingPolicyPartialUpdateResponse, error)

	// InfraAutoScalingScalingPolicyUpdate request with any body
	InfraAutoScalingScalingPolicyUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingPolicyUpdateResponse, error)

	InfraAutoScalingScalingPolicyUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyUpdateParams, body InfraAutoScalingScalingPolicyUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingPolicyUpdateResponse, error)

	InfraAutoScalingScalingPolicyUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyUpdateParams, body InfraAutoScalingScalingPolicyUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingPolicyUpdateResponse, error)

	// InfraAutoScalingScalingQueryList request
	InfraAutoScalingScalingQueryListWithResponse(ctx context.Context, params *InfraAutoScalingScalingQueryListParams, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingQueryListResponse, error)

	// InfraAutoScalingScalingQueryCreate request with any body
	InfraAutoScalingScalingQueryCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingQueryCreateResponse, error)

	InfraAutoScalingScalingQueryCreateWithResponse(ctx context.Context, body InfraAutoScalingScalingQueryCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingQueryCreateResponse, error)

	InfraAutoScalingScalingQueryCreateWithFormdataBodyWithResponse(ctx context.Context, body InfraAutoScalingScalingQueryCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingQueryCreateResponse, error)

	// InfraAutoScalingScalingQueryDestroy request
	InfraAutoScalingScalingQueryDestroyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingQueryDestroyResponse, error)

	// InfraAutoScalingScalingScheduleList request
	InfraAutoScalingScalingScheduleListWithResponse(ctx context.Context, params *InfraAutoScalingScalingScheduleListParams, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingScheduleListResponse, error)

	// InfraAutoScalingScalingScheduleCreate request with any body
	InfraAutoScalingScalingScheduleCreateWithBodyWithResponse(ctx context.Context, params *InfraAutoScalingScalingScheduleCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingScheduleCreateResponse, error)

	InfraAutoScalingScalingScheduleCreateWithResponse(ctx context.Context, params *InfraAutoScalingScalingScheduleCreateParams, body InfraAutoScalingScalingScheduleCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingScheduleCreateResponse, error)

	InfraAutoScalingScalingScheduleCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraAutoScalingScalingScheduleCreateParams, body InfraAutoScalingScalingScheduleCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingScheduleCreateResponse, error)

	// InfraAutoScalingScalingScheduleDestroy request
	InfraAutoScalingScalingScheduleDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingScheduleDestroyParams, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingScheduleDestroyResponse, error)

	// InfraAutoScalingScalingScheduleRetrieve request
	InfraAutoScalingScalingScheduleRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingScheduleRetrieveParams, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingScheduleRetrieveResponse, error)

	// InfraAutoScalingScalingSchedulePartialUpdate request with any body
	InfraAutoScalingScalingSchedulePartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingSchedulePartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingSchedulePartialUpdateResponse, error)

	InfraAutoScalingScalingSchedulePartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingSchedulePartialUpdateParams, body InfraAutoScalingScalingSchedulePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingSchedulePartialUpdateResponse, error)

	InfraAutoScalingScalingSchedulePartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingSchedulePartialUpdateParams, body InfraAutoScalingScalingSchedulePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingSchedulePartialUpdateResponse, error)

	// InfraAutoScalingScalingScheduleUpdate request with any body
	InfraAutoScalingScalingScheduleUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingScheduleUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingScheduleUpdateResponse, error)

	InfraAutoScalingScalingScheduleUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingScheduleUpdateParams, body InfraAutoScalingScalingScheduleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingScheduleUpdateResponse, error)

	InfraAutoScalingScalingScheduleUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingScheduleUpdateParams, body InfraAutoScalingScalingScheduleUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingScheduleUpdateResponse, error)

	// InfraAutoScalingScalingServerList request
	InfraAutoScalingScalingServerListWithResponse(ctx context.Context, params *InfraAutoScalingScalingServerListParams, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingServerListResponse, error)

	// InfraCertificateList request
	InfraCertificateListWithResponse(ctx context.Context, params *InfraCertificateListParams, reqEditors ...RequestEditorFn) (*InfraCertificateListResponse, error)

	// InfraCertificateCreate request with any body
	InfraCertificateCreateWithBodyWithResponse(ctx context.Context, params *InfraCertificateCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraCertificateCreateResponse, error)

	InfraCertificateCreateWithResponse(ctx context.Context, params *InfraCertificateCreateParams, body InfraCertificateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraCertificateCreateResponse, error)

	InfraCertificateCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraCertificateCreateParams, body InfraCertificateCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraCertificateCreateResponse, error)

	// InfraCertificateDestroy request
	InfraCertificateDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraCertificateDestroyParams, reqEditors ...RequestEditorFn) (*InfraCertificateDestroyResponse, error)

	// InfraCertificateRetrieve request
	InfraCertificateRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraCertificateRetrieveParams, reqEditors ...RequestEditorFn) (*InfraCertificateRetrieveResponse, error)

	// InfraCertificatePartialUpdate request with any body
	InfraCertificatePartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraCertificatePartialUpdateResponse, error)

	InfraCertificatePartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body InfraCertificatePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraCertificatePartialUpdateResponse, error)

	InfraCertificatePartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body InfraCertificatePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraCertificatePartialUpdateResponse, error)

	// InfraCertificateUpdate request with any body
	InfraCertificateUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraCertificateUpdateResponse, error)

	InfraCertificateUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body InfraCertificateUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraCertificateUpdateResponse, error)

	InfraCertificateUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body InfraCertificateUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraCertificateUpdateResponse, error)

	// InfraElasticIpsList request
	InfraElasticIpsListWithResponse(ctx context.Context, params *InfraElasticIpsListParams, reqEditors ...RequestEditorFn) (*InfraElasticIpsListResponse, error)

	// InfraElasticIpsCreate request with any body
	InfraElasticIpsCreateWithBodyWithResponse(ctx context.Context, params *InfraElasticIpsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraElasticIpsCreateResponse, error)

	InfraElasticIpsCreateWithResponse(ctx context.Context, params *InfraElasticIpsCreateParams, body InfraElasticIpsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraElasticIpsCreateResponse, error)

	InfraElasticIpsCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraElasticIpsCreateParams, body InfraElasticIpsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraElasticIpsCreateResponse, error)

	// InfraElasticIpsDestroy request
	InfraElasticIpsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraElasticIpsDestroyParams, reqEditors ...RequestEditorFn) (*InfraElasticIpsDestroyResponse, error)

	// InfraElasticIpsRetrieve request
	InfraElasticIpsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraElasticIpsRetrieveParams, reqEditors ...RequestEditorFn) (*InfraElasticIpsRetrieveResponse, error)

	// InfraFilesystemAccessRulesList request
	InfraFilesystemAccessRulesListWithResponse(ctx context.Context, params *InfraFilesystemAccessRulesListParams, reqEditors ...RequestEditorFn) (*InfraFilesystemAccessRulesListResponse, error)

	// InfraFilesystemAccessRulesCreate request with any body
	InfraFilesystemAccessRulesCreateWithBodyWithResponse(ctx context.Context, params *InfraFilesystemAccessRulesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraFilesystemAccessRulesCreateResponse, error)

	InfraFilesystemAccessRulesCreateWithResponse(ctx context.Context, params *InfraFilesystemAccessRulesCreateParams, body InfraFilesystemAccessRulesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemAccessRulesCreateResponse, error)

	InfraFilesystemAccessRulesCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraFilesystemAccessRulesCreateParams, body InfraFilesystemAccessRulesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemAccessRulesCreateResponse, error)

	// InfraFilesystemAccessRulesDestroy request
	InfraFilesystemAccessRulesDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemAccessRulesDestroyParams, reqEditors ...RequestEditorFn) (*InfraFilesystemAccessRulesDestroyResponse, error)

	// InfraFilesystemAccessRulesRetrieve request
	InfraFilesystemAccessRulesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemAccessRulesRetrieveParams, reqEditors ...RequestEditorFn) (*InfraFilesystemAccessRulesRetrieveResponse, error)

	// InfraFilesystemAccessRulesPartialUpdate request with any body
	InfraFilesystemAccessRulesPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraFilesystemAccessRulesPartialUpdateResponse, error)

	InfraFilesystemAccessRulesPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body InfraFilesystemAccessRulesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemAccessRulesPartialUpdateResponse, error)

	InfraFilesystemAccessRulesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body InfraFilesystemAccessRulesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemAccessRulesPartialUpdateResponse, error)

	// InfraFilesystemAccessRulesUpdate request with any body
	InfraFilesystemAccessRulesUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraFilesystemAccessRulesUpdateResponse, error)

	InfraFilesystemAccessRulesUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body InfraFilesystemAccessRulesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemAccessRulesUpdateResponse, error)

	InfraFilesystemAccessRulesUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body InfraFilesystemAccessRulesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemAccessRulesUpdateResponse, error)

	// InfraFilesystemSnapshotPoliciesList request
	InfraFilesystemSnapshotPoliciesListWithResponse(ctx context.Context, params *InfraFilesystemSnapshotPoliciesListParams, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotPoliciesListResponse, error)

	// InfraFilesystemSnapshotPoliciesCreate request with any body
	InfraFilesystemSnapshotPoliciesCreateWithBodyWithResponse(ctx context.Context, params *InfraFilesystemSnapshotPoliciesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotPoliciesCreateResponse, error)

	InfraFilesystemSnapshotPoliciesCreateWithResponse(ctx context.Context, params *InfraFilesystemSnapshotPoliciesCreateParams, body InfraFilesystemSnapshotPoliciesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotPoliciesCreateResponse, error)

	InfraFilesystemSnapshotPoliciesCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraFilesystemSnapshotPoliciesCreateParams, body InfraFilesystemSnapshotPoliciesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotPoliciesCreateResponse, error)

	// InfraFilesystemSnapshotPoliciesDestroy request
	InfraFilesystemSnapshotPoliciesDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesDestroyParams, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotPoliciesDestroyResponse, error)

	// InfraFilesystemSnapshotPoliciesRetrieve request
	InfraFilesystemSnapshotPoliciesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesRetrieveParams, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotPoliciesRetrieveResponse, error)

	// InfraFilesystemSnapshotPoliciesPartialUpdate request with any body
	InfraFilesystemSnapshotPoliciesPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotPoliciesPartialUpdateResponse, error)

	InfraFilesystemSnapshotPoliciesPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesPartialUpdateParams, body InfraFilesystemSnapshotPoliciesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotPoliciesPartialUpdateResponse, error)

	InfraFilesystemSnapshotPoliciesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesPartialUpdateParams, body InfraFilesystemSnapshotPoliciesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotPoliciesPartialUpdateResponse, error)

	// InfraFilesystemSnapshotPoliciesUpdate request with any body
	InfraFilesystemSnapshotPoliciesUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotPoliciesUpdateResponse, error)

	InfraFilesystemSnapshotPoliciesUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesUpdateParams, body InfraFilesystemSnapshotPoliciesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotPoliciesUpdateResponse, error)

	InfraFilesystemSnapshotPoliciesUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesUpdateParams, body InfraFilesystemSnapshotPoliciesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotPoliciesUpdateResponse, error)

	// InfraFilesystemSnapshotsList request
	InfraFilesystemSnapshotsListWithResponse(ctx context.Context, params *InfraFilesystemSnapshotsListParams, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotsListResponse, error)

	// InfraFilesystemSnapshotsCreate request with any body
	InfraFilesystemSnapshotsCreateWithBodyWithResponse(ctx context.Context, params *InfraFilesystemSnapshotsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotsCreateResponse, error)

	InfraFilesystemSnapshotsCreateWithResponse(ctx context.Context, params *InfraFilesystemSnapshotsCreateParams, body InfraFilesystemSnapshotsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotsCreateResponse, error)

	InfraFilesystemSnapshotsCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraFilesystemSnapshotsCreateParams, body InfraFilesystemSnapshotsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotsCreateResponse, error)

	// InfraFilesystemSnapshotsDestroy request
	InfraFilesystemSnapshotsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotsDestroyParams, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotsDestroyResponse, error)

	// InfraFilesystemSnapshotsRetrieve request
	InfraFilesystemSnapshotsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotsRetrieveParams, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotsRetrieveResponse, error)

	// InfraFilesystemSnapshotsPartialUpdate request with any body
	InfraFilesystemSnapshotsPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotsPartialUpdateResponse, error)

	InfraFilesystemSnapshotsPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotsPartialUpdateParams, body InfraFilesystemSnapshotsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotsPartialUpdateResponse, error)

	InfraFilesystemSnapshotsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotsPartialUpdateParams, body InfraFilesystemSnapshotsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotsPartialUpdateResponse, error)

	// InfraFilesystemSnapshotsUpdate request with any body
	InfraFilesystemSnapshotsUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotsUpdateResponse, error)

	InfraFilesystemSnapshotsUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotsUpdateParams, body InfraFilesystemSnapshotsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotsUpdateResponse, error)

	InfraFilesystemSnapshotsUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotsUpdateParams, body InfraFilesystemSnapshotsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotsUpdateResponse, error)

	// InfraFilesystemTypesList request
	InfraFilesystemTypesListWithResponse(ctx context.Context, params *InfraFilesystemTypesListParams, reqEditors ...RequestEditorFn) (*InfraFilesystemTypesListResponse, error)

	// InfraFilesystemTypesRetrieve request
	InfraFilesystemTypesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemTypesRetrieveParams, reqEditors ...RequestEditorFn) (*InfraFilesystemTypesRetrieveResponse, error)

	// InfraFilesystemsList request
	InfraFilesystemsListWithResponse(ctx context.Context, params *InfraFilesystemsListParams, reqEditors ...RequestEditorFn) (*InfraFilesystemsListResponse, error)

	// InfraFilesystemsCreate request with any body
	InfraFilesystemsCreateWithBodyWithResponse(ctx context.Context, params *InfraFilesystemsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraFilesystemsCreateResponse, error)

	InfraFilesystemsCreateWithResponse(ctx context.Context, params *InfraFilesystemsCreateParams, body InfraFilesystemsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemsCreateResponse, error)

	InfraFilesystemsCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraFilesystemsCreateParams, body InfraFilesystemsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemsCreateResponse, error)

	// InfraFilesystemsDestroy request
	InfraFilesystemsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsDestroyParams, reqEditors ...RequestEditorFn) (*InfraFilesystemsDestroyResponse, error)

	// InfraFilesystemsRetrieve request
	InfraFilesystemsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsRetrieveParams, reqEditors ...RequestEditorFn) (*InfraFilesystemsRetrieveResponse, error)

	// InfraFilesystemsPartialUpdate request with any body
	InfraFilesystemsPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraFilesystemsPartialUpdateResponse, error)

	InfraFilesystemsPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsPartialUpdateParams, body InfraFilesystemsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemsPartialUpdateResponse, error)

	InfraFilesystemsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsPartialUpdateParams, body InfraFilesystemsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemsPartialUpdateResponse, error)

	// InfraFilesystemsUpdate request with any body
	InfraFilesystemsUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraFilesystemsUpdateResponse, error)

	InfraFilesystemsUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsUpdateParams, body InfraFilesystemsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemsUpdateResponse, error)

	InfraFilesystemsUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsUpdateParams, body InfraFilesystemsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemsUpdateResponse, error)

	// InfraFilesystemsApplyPolicyCreate request with any body
	InfraFilesystemsApplyPolicyCreateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsApplyPolicyCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraFilesystemsApplyPolicyCreateResponse, error)

	InfraFilesystemsApplyPolicyCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsApplyPolicyCreateParams, body InfraFilesystemsApplyPolicyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemsApplyPolicyCreateResponse, error)

	InfraFilesystemsApplyPolicyCreateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsApplyPolicyCreateParams, body InfraFilesystemsApplyPolicyCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemsApplyPolicyCreateResponse, error)

	// InfraFilesystemsResizeCreate request with any body
	InfraFilesystemsResizeCreateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsResizeCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraFilesystemsResizeCreateResponse, error)

	InfraFilesystemsResizeCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsResizeCreateParams, body InfraFilesystemsResizeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemsResizeCreateResponse, error)

	InfraFilesystemsResizeCreateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsResizeCreateParams, body InfraFilesystemsResizeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemsResizeCreateResponse, error)

	// InfraFilesystemsStartMigrationCreate request with any body
	InfraFilesystemsStartMigrationCreateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsStartMigrationCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraFilesystemsStartMigrationCreateResponse, error)

	InfraFilesystemsStartMigrationCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsStartMigrationCreateParams, body InfraFilesystemsStartMigrationCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemsStartMigrationCreateResponse, error)

	InfraFilesystemsStartMigrationCreateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsStartMigrationCreateParams, body InfraFilesystemsStartMigrationCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemsStartMigrationCreateResponse, error)

	// InfraFilesystemsUnapplyPolicyCreate request
	InfraFilesystemsUnapplyPolicyCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsUnapplyPolicyCreateParams, reqEditors ...RequestEditorFn) (*InfraFilesystemsUnapplyPolicyCreateResponse, error)

	// InfraFlavorsList request
	InfraFlavorsListWithResponse(ctx context.Context, params *InfraFlavorsListParams, reqEditors ...RequestEditorFn) (*InfraFlavorsListResponse, error)

	// InfraFlavorsCreate request with any body
	InfraFlavorsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraFlavorsCreateResponse, error)

	InfraFlavorsCreateWithResponse(ctx context.Context, body InfraFlavorsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraFlavorsCreateResponse, error)

	InfraFlavorsCreateWithFormdataBodyWithResponse(ctx context.Context, body InfraFlavorsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraFlavorsCreateResponse, error)

	// InfraFlavorsDestroy request
	InfraFlavorsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*InfraFlavorsDestroyResponse, error)

	// InfraFlavorsRetrieve request
	InfraFlavorsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*InfraFlavorsRetrieveResponse, error)

	// InfraFlavorsPartialUpdate request with any body
	InfraFlavorsPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraFlavorsPartialUpdateResponse, error)

	InfraFlavorsPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body InfraFlavorsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraFlavorsPartialUpdateResponse, error)

	InfraFlavorsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body InfraFlavorsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraFlavorsPartialUpdateResponse, error)

	// InfraFlavorsUpdate request with any body
	InfraFlavorsUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraFlavorsUpdateResponse, error)

	InfraFlavorsUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body InfraFlavorsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraFlavorsUpdateResponse, error)

	InfraFlavorsUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body InfraFlavorsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraFlavorsUpdateResponse, error)

	// InfraImagesList request
	InfraImagesListWithResponse(ctx context.Context, params *InfraImagesListParams, reqEditors ...RequestEditorFn) (*InfraImagesListResponse, error)

	// InfraImagesCreate request with any body
	InfraImagesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraImagesCreateResponse, error)

	InfraImagesCreateWithResponse(ctx context.Context, body InfraImagesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraImagesCreateResponse, error)

	InfraImagesCreateWithFormdataBodyWithResponse(ctx context.Context, body InfraImagesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraImagesCreateResponse, error)

	// InfraImagesDestroy request
	InfraImagesDestroyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*InfraImagesDestroyResponse, error)

	// InfraImagesRetrieve request
	InfraImagesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*InfraImagesRetrieveResponse, error)

	// InfraImagesPartialUpdate request with any body
	InfraImagesPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraImagesPartialUpdateResponse, error)

	InfraImagesPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body InfraImagesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraImagesPartialUpdateResponse, error)

	InfraImagesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body InfraImagesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraImagesPartialUpdateResponse, error)

	// InfraImagesUpdate request with any body
	InfraImagesUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraImagesUpdateResponse, error)

	InfraImagesUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body InfraImagesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraImagesUpdateResponse, error)

	InfraImagesUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body InfraImagesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraImagesUpdateResponse, error)

	// InfraKeypairsList request
	InfraKeypairsListWithResponse(ctx context.Context, params *InfraKeypairsListParams, reqEditors ...RequestEditorFn) (*InfraKeypairsListResponse, error)

	// InfraKeypairsCreate request with any body
	InfraKeypairsCreateWithBodyWithResponse(ctx context.Context, params *InfraKeypairsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraKeypairsCreateResponse, error)

	InfraKeypairsCreateWithResponse(ctx context.Context, params *InfraKeypairsCreateParams, body InfraKeypairsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraKeypairsCreateResponse, error)

	InfraKeypairsCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraKeypairsCreateParams, body InfraKeypairsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraKeypairsCreateResponse, error)

	// InfraKeypairsDestroy request
	InfraKeypairsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraKeypairsDestroyParams, reqEditors ...RequestEditorFn) (*InfraKeypairsDestroyResponse, error)

	// InfraKeypairsRetrieve request
	InfraKeypairsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraKeypairsRetrieveParams, reqEditors ...RequestEditorFn) (*InfraKeypairsRetrieveResponse, error)

	// InfraKeypairsPartialUpdate request with any body
	InfraKeypairsPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraKeypairsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraKeypairsPartialUpdateResponse, error)

	InfraKeypairsPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraKeypairsPartialUpdateParams, body InfraKeypairsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraKeypairsPartialUpdateResponse, error)

	InfraKeypairsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraKeypairsPartialUpdateParams, body InfraKeypairsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraKeypairsPartialUpdateResponse, error)

	// InfraKeypairsUpdate request with any body
	InfraKeypairsUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraKeypairsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraKeypairsUpdateResponse, error)

	InfraKeypairsUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraKeypairsUpdateParams, body InfraKeypairsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraKeypairsUpdateResponse, error)

	InfraKeypairsUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraKeypairsUpdateParams, body InfraKeypairsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraKeypairsUpdateResponse, error)

	// InfraLaunchTemplateList request
	InfraLaunchTemplateListWithResponse(ctx context.Context, params *InfraLaunchTemplateListParams, reqEditors ...RequestEditorFn) (*InfraLaunchTemplateListResponse, error)

	// InfraLaunchTemplateCreate request with any body
	InfraLaunchTemplateCreateWithBodyWithResponse(ctx context.Context, params *InfraLaunchTemplateCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLaunchTemplateCreateResponse, error)

	InfraLaunchTemplateCreateWithResponse(ctx context.Context, params *InfraLaunchTemplateCreateParams, body InfraLaunchTemplateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLaunchTemplateCreateResponse, error)

	InfraLaunchTemplateCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraLaunchTemplateCreateParams, body InfraLaunchTemplateCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLaunchTemplateCreateResponse, error)

	// InfraLaunchTemplateDestroy request
	InfraLaunchTemplateDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLaunchTemplateDestroyParams, reqEditors ...RequestEditorFn) (*InfraLaunchTemplateDestroyResponse, error)

	// InfraLaunchTemplateRetrieve request
	InfraLaunchTemplateRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLaunchTemplateRetrieveParams, reqEditors ...RequestEditorFn) (*InfraLaunchTemplateRetrieveResponse, error)

	// InfraLaunchTemplatePartialUpdate request with any body
	InfraLaunchTemplatePartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLaunchTemplatePartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLaunchTemplatePartialUpdateResponse, error)

	InfraLaunchTemplatePartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLaunchTemplatePartialUpdateParams, body InfraLaunchTemplatePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLaunchTemplatePartialUpdateResponse, error)

	InfraLaunchTemplatePartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLaunchTemplatePartialUpdateParams, body InfraLaunchTemplatePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLaunchTemplatePartialUpdateResponse, error)

	// InfraLaunchTemplateUpdate request with any body
	InfraLaunchTemplateUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLaunchTemplateUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLaunchTemplateUpdateResponse, error)

	InfraLaunchTemplateUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLaunchTemplateUpdateParams, body InfraLaunchTemplateUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLaunchTemplateUpdateResponse, error)

	InfraLaunchTemplateUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLaunchTemplateUpdateParams, body InfraLaunchTemplateUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLaunchTemplateUpdateResponse, error)

	// InfraLoadBalancingL7policyList request
	InfraLoadBalancingL7policyListWithResponse(ctx context.Context, params *InfraLoadBalancingL7policyListParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7policyListResponse, error)

	// InfraLoadBalancingL7policyCreate request with any body
	InfraLoadBalancingL7policyCreateWithBodyWithResponse(ctx context.Context, params *InfraLoadBalancingL7policyCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7policyCreateResponse, error)

	InfraLoadBalancingL7policyCreateWithResponse(ctx context.Context, params *InfraLoadBalancingL7policyCreateParams, body InfraLoadBalancingL7policyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7policyCreateResponse, error)

	InfraLoadBalancingL7policyCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraLoadBalancingL7policyCreateParams, body InfraLoadBalancingL7policyCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7policyCreateResponse, error)

	// InfraLoadBalancingL7policyDestroy request
	InfraLoadBalancingL7policyDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7policyDestroyParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7policyDestroyResponse, error)

	// InfraLoadBalancingL7policyRetrieve request
	InfraLoadBalancingL7policyRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7policyRetrieveParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7policyRetrieveResponse, error)

	// InfraLoadBalancingL7policyPartialUpdate request with any body
	InfraLoadBalancingL7policyPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7policyPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7policyPartialUpdateResponse, error)

	InfraLoadBalancingL7policyPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7policyPartialUpdateParams, body InfraLoadBalancingL7policyPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7policyPartialUpdateResponse, error)

	InfraLoadBalancingL7policyPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7policyPartialUpdateParams, body InfraLoadBalancingL7policyPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7policyPartialUpdateResponse, error)

	// InfraLoadBalancingL7policyUpdate request with any body
	InfraLoadBalancingL7policyUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7policyUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7policyUpdateResponse, error)

	InfraLoadBalancingL7policyUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7policyUpdateParams, body InfraLoadBalancingL7policyUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7policyUpdateResponse, error)

	InfraLoadBalancingL7policyUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7policyUpdateParams, body InfraLoadBalancingL7policyUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7policyUpdateResponse, error)

	// InfraLoadBalancingL7ruleList request
	InfraLoadBalancingL7ruleListWithResponse(ctx context.Context, params *InfraLoadBalancingL7ruleListParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7ruleListResponse, error)

	// InfraLoadBalancingL7ruleCreate request with any body
	InfraLoadBalancingL7ruleCreateWithBodyWithResponse(ctx context.Context, params *InfraLoadBalancingL7ruleCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7ruleCreateResponse, error)

	InfraLoadBalancingL7ruleCreateWithResponse(ctx context.Context, params *InfraLoadBalancingL7ruleCreateParams, body InfraLoadBalancingL7ruleCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7ruleCreateResponse, error)

	InfraLoadBalancingL7ruleCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraLoadBalancingL7ruleCreateParams, body InfraLoadBalancingL7ruleCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7ruleCreateResponse, error)

	// InfraLoadBalancingL7ruleDestroy request
	InfraLoadBalancingL7ruleDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7ruleDestroyParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7ruleDestroyResponse, error)

	// InfraLoadBalancingL7ruleRetrieve request
	InfraLoadBalancingL7ruleRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7ruleRetrieveParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7ruleRetrieveResponse, error)

	// InfraLoadBalancingL7rulePartialUpdate request with any body
	InfraLoadBalancingL7rulePartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7rulePartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7rulePartialUpdateResponse, error)

	InfraLoadBalancingL7rulePartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7rulePartialUpdateParams, body InfraLoadBalancingL7rulePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7rulePartialUpdateResponse, error)

	InfraLoadBalancingL7rulePartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7rulePartialUpdateParams, body InfraLoadBalancingL7rulePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7rulePartialUpdateResponse, error)

	// InfraLoadBalancingL7ruleUpdate request with any body
	InfraLoadBalancingL7ruleUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7ruleUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7ruleUpdateResponse, error)

	InfraLoadBalancingL7ruleUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7ruleUpdateParams, body InfraLoadBalancingL7ruleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7ruleUpdateResponse, error)

	InfraLoadBalancingL7ruleUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7ruleUpdateParams, body InfraLoadBalancingL7ruleUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7ruleUpdateResponse, error)

	// InfraLoadBalancingListenerList request
	InfraLoadBalancingListenerListWithResponse(ctx context.Context, params *InfraLoadBalancingListenerListParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingListenerListResponse, error)

	// InfraLoadBalancingListenerCreate request with any body
	InfraLoadBalancingListenerCreateWithBodyWithResponse(ctx context.Context, params *InfraLoadBalancingListenerCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLoadBalancingListenerCreateResponse, error)

	InfraLoadBalancingListenerCreateWithResponse(ctx context.Context, params *InfraLoadBalancingListenerCreateParams, body InfraLoadBalancingListenerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingListenerCreateResponse, error)

	InfraLoadBalancingListenerCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraLoadBalancingListenerCreateParams, body InfraLoadBalancingListenerCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingListenerCreateResponse, error)

	// InfraLoadBalancingListenerMetricsSchemaRetrieve request
	InfraLoadBalancingListenerMetricsSchemaRetrieveWithResponse(ctx context.Context, params *InfraLoadBalancingListenerMetricsSchemaRetrieveParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingListenerMetricsSchemaRetrieveResponse, error)

	// InfraLoadBalancingListenerDestroy request
	InfraLoadBalancingListenerDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingListenerDestroyParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingListenerDestroyResponse, error)

	// InfraLoadBalancingListenerRetrieve request
	InfraLoadBalancingListenerRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingListenerRetrieveParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingListenerRetrieveResponse, error)

	// InfraLoadBalancingListenerPartialUpdate request with any body
	InfraLoadBalancingListenerPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingListenerPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLoadBalancingListenerPartialUpdateResponse, error)

	InfraLoadBalancingListenerPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingListenerPartialUpdateParams, body InfraLoadBalancingListenerPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingListenerPartialUpdateResponse, error)

	InfraLoadBalancingListenerPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingListenerPartialUpdateParams, body InfraLoadBalancingListenerPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingListenerPartialUpdateResponse, error)

	// InfraLoadBalancingListenerUpdate request with any body
	InfraLoadBalancingListenerUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingListenerUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLoadBalancingListenerUpdateResponse, error)

	InfraLoadBalancingListenerUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingListenerUpdateParams, body InfraLoadBalancingListenerUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingListenerUpdateResponse, error)

	InfraLoadBalancingListenerUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingListenerUpdateParams, body InfraLoadBalancingListenerUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingListenerUpdateResponse, error)

	// InfraLoadBalancingListenerMetricsRetrieve request
	InfraLoadBalancingListenerMetricsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingListenerMetricsRetrieveParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingListenerMetricsRetrieveResponse, error)

	// InfraLoadBalancingLoadBalancerList request
	InfraLoadBalancingLoadBalancerListWithResponse(ctx context.Context, params *InfraLoadBalancingLoadBalancerListParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingLoadBalancerListResponse, error)

	// InfraLoadBalancingLoadBalancerCreate request with any body
	InfraLoadBalancingLoadBalancerCreateWithBodyWithResponse(ctx context.Context, params *InfraLoadBalancingLoadBalancerCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLoadBalancingLoadBalancerCreateResponse, error)

	InfraLoadBalancingLoadBalancerCreateWithResponse(ctx context.Context, params *InfraLoadBalancingLoadBalancerCreateParams, body InfraLoadBalancingLoadBalancerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingLoadBalancerCreateResponse, error)

	InfraLoadBalancingLoadBalancerCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraLoadBalancingLoadBalancerCreateParams, body InfraLoadBalancingLoadBalancerCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingLoadBalancerCreateResponse, error)

	// InfraLoadBalancingLoadBalancerMetricsSchemaRetrieve request
	InfraLoadBalancingLoadBalancerMetricsSchemaRetrieveWithResponse(ctx context.Context, params *InfraLoadBalancingLoadBalancerMetricsSchemaRetrieveParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingLoadBalancerMetricsSchemaRetrieveResponse, error)

	// InfraLoadBalancingLoadBalancerDestroy request
	InfraLoadBalancingLoadBalancerDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerDestroyParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingLoadBalancerDestroyResponse, error)

	// InfraLoadBalancingLoadBalancerRetrieve request
	InfraLoadBalancingLoadBalancerRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerRetrieveParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingLoadBalancerRetrieveResponse, error)

	// InfraLoadBalancingLoadBalancerPartialUpdate request with any body
	InfraLoadBalancingLoadBalancerPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLoadBalancingLoadBalancerPartialUpdateResponse, error)

	InfraLoadBalancingLoadBalancerPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerPartialUpdateParams, body InfraLoadBalancingLoadBalancerPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingLoadBalancerPartialUpdateResponse, error)

	InfraLoadBalancingLoadBalancerPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerPartialUpdateParams, body InfraLoadBalancingLoadBalancerPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingLoadBalancerPartialUpdateResponse, error)

	// InfraLoadBalancingLoadBalancerUpdate request with any body
	InfraLoadBalancingLoadBalancerUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLoadBalancingLoadBalancerUpdateResponse, error)

	InfraLoadBalancingLoadBalancerUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerUpdateParams, body InfraLoadBalancingLoadBalancerUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingLoadBalancerUpdateResponse, error)

	InfraLoadBalancingLoadBalancerUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerUpdateParams, body InfraLoadBalancingLoadBalancerUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingLoadBalancerUpdateResponse, error)

	// InfraLoadBalancingLoadBalancerMetricsRetrieve request
	InfraLoadBalancingLoadBalancerMetricsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerMetricsRetrieveParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingLoadBalancerMetricsRetrieveResponse, error)

	// InfraLoadBalancingServerGroupMemberList request
	InfraLoadBalancingServerGroupMemberListWithResponse(ctx context.Context, params *InfraLoadBalancingServerGroupMemberListParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupMemberListResponse, error)

	// InfraLoadBalancingServerGroupMemberCreate request with any body
	InfraLoadBalancingServerGroupMemberCreateWithBodyWithResponse(ctx context.Context, params *InfraLoadBalancingServerGroupMemberCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupMemberCreateResponse, error)

	InfraLoadBalancingServerGroupMemberCreateWithResponse(ctx context.Context, params *InfraLoadBalancingServerGroupMemberCreateParams, body InfraLoadBalancingServerGroupMemberCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupMemberCreateResponse, error)

	InfraLoadBalancingServerGroupMemberCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraLoadBalancingServerGroupMemberCreateParams, body InfraLoadBalancingServerGroupMemberCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupMemberCreateResponse, error)

	// InfraLoadBalancingServerGroupMemberDestroy request
	InfraLoadBalancingServerGroupMemberDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberDestroyParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupMemberDestroyResponse, error)

	// InfraLoadBalancingServerGroupMemberRetrieve request
	InfraLoadBalancingServerGroupMemberRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberRetrieveParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupMemberRetrieveResponse, error)

	// InfraLoadBalancingServerGroupMemberPartialUpdate request with any body
	InfraLoadBalancingServerGroupMemberPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupMemberPartialUpdateResponse, error)

	InfraLoadBalancingServerGroupMemberPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberPartialUpdateParams, body InfraLoadBalancingServerGroupMemberPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupMemberPartialUpdateResponse, error)

	InfraLoadBalancingServerGroupMemberPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberPartialUpdateParams, body InfraLoadBalancingServerGroupMemberPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupMemberPartialUpdateResponse, error)

	// InfraLoadBalancingServerGroupMemberUpdate request with any body
	InfraLoadBalancingServerGroupMemberUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupMemberUpdateResponse, error)

	InfraLoadBalancingServerGroupMemberUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberUpdateParams, body InfraLoadBalancingServerGroupMemberUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupMemberUpdateResponse, error)

	InfraLoadBalancingServerGroupMemberUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberUpdateParams, body InfraLoadBalancingServerGroupMemberUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupMemberUpdateResponse, error)

	// InfraLoadBalancingServerGroupList request
	InfraLoadBalancingServerGroupListWithResponse(ctx context.Context, params *InfraLoadBalancingServerGroupListParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupListResponse, error)

	// InfraLoadBalancingServerGroupCreate request with any body
	InfraLoadBalancingServerGroupCreateWithBodyWithResponse(ctx context.Context, params *InfraLoadBalancingServerGroupCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupCreateResponse, error)

	InfraLoadBalancingServerGroupCreateWithResponse(ctx context.Context, params *InfraLoadBalancingServerGroupCreateParams, body InfraLoadBalancingServerGroupCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupCreateResponse, error)

	InfraLoadBalancingServerGroupCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraLoadBalancingServerGroupCreateParams, body InfraLoadBalancingServerGroupCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupCreateResponse, error)

	// InfraLoadBalancingServerGroupDestroy request
	InfraLoadBalancingServerGroupDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupDestroyParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupDestroyResponse, error)

	// InfraLoadBalancingServerGroupRetrieve request
	InfraLoadBalancingServerGroupRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupRetrieveParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupRetrieveResponse, error)

	// InfraLoadBalancingServerGroupPartialUpdate request with any body
	InfraLoadBalancingServerGroupPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupPartialUpdateResponse, error)

	InfraLoadBalancingServerGroupPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupPartialUpdateParams, body InfraLoadBalancingServerGroupPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupPartialUpdateResponse, error)

	InfraLoadBalancingServerGroupPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupPartialUpdateParams, body InfraLoadBalancingServerGroupPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupPartialUpdateResponse, error)

	// InfraLoadBalancingServerGroupUpdate request with any body
	InfraLoadBalancingServerGroupUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupUpdateResponse, error)

	InfraLoadBalancingServerGroupUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupUpdateParams, body InfraLoadBalancingServerGroupUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupUpdateResponse, error)

	InfraLoadBalancingServerGroupUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupUpdateParams, body InfraLoadBalancingServerGroupUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupUpdateResponse, error)

	// InfraPlacementgroupsList request
	InfraPlacementgroupsListWithResponse(ctx context.Context, params *InfraPlacementgroupsListParams, reqEditors ...RequestEditorFn) (*InfraPlacementgroupsListResponse, error)

	// InfraPlacementgroupsCreate request with any body
	InfraPlacementgroupsCreateWithBodyWithResponse(ctx context.Context, params *InfraPlacementgroupsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraPlacementgroupsCreateResponse, error)

	InfraPlacementgroupsCreateWithResponse(ctx context.Context, params *InfraPlacementgroupsCreateParams, body InfraPlacementgroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraPlacementgroupsCreateResponse, error)

	InfraPlacementgroupsCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraPlacementgroupsCreateParams, body InfraPlacementgroupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraPlacementgroupsCreateResponse, error)

	// InfraPlacementgroupsDestroy request
	InfraPlacementgroupsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraPlacementgroupsDestroyParams, reqEditors ...RequestEditorFn) (*InfraPlacementgroupsDestroyResponse, error)

	// InfraPlacementgroupsRetrieve request
	InfraPlacementgroupsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraPlacementgroupsRetrieveParams, reqEditors ...RequestEditorFn) (*InfraPlacementgroupsRetrieveResponse, error)

	// InfraPlacementgroupsPartialUpdate request with any body
	InfraPlacementgroupsPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraPlacementgroupsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraPlacementgroupsPartialUpdateResponse, error)

	InfraPlacementgroupsPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraPlacementgroupsPartialUpdateParams, body InfraPlacementgroupsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraPlacementgroupsPartialUpdateResponse, error)

	InfraPlacementgroupsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraPlacementgroupsPartialUpdateParams, body InfraPlacementgroupsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraPlacementgroupsPartialUpdateResponse, error)

	// InfraPlacementgroupsUpdate request with any body
	InfraPlacementgroupsUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraPlacementgroupsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraPlacementgroupsUpdateResponse, error)

	InfraPlacementgroupsUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraPlacementgroupsUpdateParams, body InfraPlacementgroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraPlacementgroupsUpdateResponse, error)

	InfraPlacementgroupsUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraPlacementgroupsUpdateParams, body InfraPlacementgroupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraPlacementgroupsUpdateResponse, error)

	// InfraPrivateIpsList request
	InfraPrivateIpsListWithResponse(ctx context.Context, params *InfraPrivateIpsListParams, reqEditors ...RequestEditorFn) (*InfraPrivateIpsListResponse, error)

	// InfraPrivateIpsCreate request with any body
	InfraPrivateIpsCreateWithBodyWithResponse(ctx context.Context, params *InfraPrivateIpsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraPrivateIpsCreateResponse, error)

	InfraPrivateIpsCreateWithResponse(ctx context.Context, params *InfraPrivateIpsCreateParams, body InfraPrivateIpsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraPrivateIpsCreateResponse, error)

	InfraPrivateIpsCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraPrivateIpsCreateParams, body InfraPrivateIpsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraPrivateIpsCreateResponse, error)

	// InfraPrivateIpsDestroy request
	InfraPrivateIpsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraPrivateIpsDestroyParams, reqEditors ...RequestEditorFn) (*InfraPrivateIpsDestroyResponse, error)

	// InfraPrivateIpsRetrieve request
	InfraPrivateIpsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraPrivateIpsRetrieveParams, reqEditors ...RequestEditorFn) (*InfraPrivateIpsRetrieveResponse, error)

	// InfraPrivateIpsPartialUpdate request with any body
	InfraPrivateIpsPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraPrivateIpsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraPrivateIpsPartialUpdateResponse, error)

	InfraPrivateIpsPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraPrivateIpsPartialUpdateParams, body InfraPrivateIpsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraPrivateIpsPartialUpdateResponse, error)

	InfraPrivateIpsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraPrivateIpsPartialUpdateParams, body InfraPrivateIpsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraPrivateIpsPartialUpdateResponse, error)

	// InfraPrivateIpsUpdate request with any body
	InfraPrivateIpsUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraPrivateIpsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraPrivateIpsUpdateResponse, error)

	InfraPrivateIpsUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraPrivateIpsUpdateParams, body InfraPrivateIpsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraPrivateIpsUpdateResponse, error)

	InfraPrivateIpsUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraPrivateIpsUpdateParams, body InfraPrivateIpsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraPrivateIpsUpdateResponse, error)

	// InfraRouteTablesList request
	InfraRouteTablesListWithResponse(ctx context.Context, params *InfraRouteTablesListParams, reqEditors ...RequestEditorFn) (*InfraRouteTablesListResponse, error)

	// InfraRouteTablesCreate request with any body
	InfraRouteTablesCreateWithBodyWithResponse(ctx context.Context, params *InfraRouteTablesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraRouteTablesCreateResponse, error)

	InfraRouteTablesCreateWithResponse(ctx context.Context, params *InfraRouteTablesCreateParams, body InfraRouteTablesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraRouteTablesCreateResponse, error)

	InfraRouteTablesCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraRouteTablesCreateParams, body InfraRouteTablesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraRouteTablesCreateResponse, error)

	// InfraRouteTablesDestroy request
	InfraRouteTablesDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesDestroyParams, reqEditors ...RequestEditorFn) (*InfraRouteTablesDestroyResponse, error)

	// InfraRouteTablesRetrieve request
	InfraRouteTablesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesRetrieveParams, reqEditors ...RequestEditorFn) (*InfraRouteTablesRetrieveResponse, error)

	// InfraRouteTablesPartialUpdate request with any body
	InfraRouteTablesPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraRouteTablesPartialUpdateResponse, error)

	InfraRouteTablesPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesPartialUpdateParams, body InfraRouteTablesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraRouteTablesPartialUpdateResponse, error)

	InfraRouteTablesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesPartialUpdateParams, body InfraRouteTablesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraRouteTablesPartialUpdateResponse, error)

	// InfraRouteTablesUpdate request with any body
	InfraRouteTablesUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraRouteTablesUpdateResponse, error)

	InfraRouteTablesUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesUpdateParams, body InfraRouteTablesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraRouteTablesUpdateResponse, error)

	InfraRouteTablesUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesUpdateParams, body InfraRouteTablesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraRouteTablesUpdateResponse, error)

	// InfraRouteTablesDisableInternetAccessUpdate request
	InfraRouteTablesDisableInternetAccessUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesDisableInternetAccessUpdateParams, reqEditors ...RequestEditorFn) (*InfraRouteTablesDisableInternetAccessUpdateResponse, error)

	// InfraRouteTablesEnableInternetAccessUpdate request
	InfraRouteTablesEnableInternetAccessUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesEnableInternetAccessUpdateParams, reqEditors ...RequestEditorFn) (*InfraRouteTablesEnableInternetAccessUpdateResponse, error)

	// InfraRouteTablesSubnetsRetrieve request
	InfraRouteTablesSubnetsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesSubnetsRetrieveParams, reqEditors ...RequestEditorFn) (*InfraRouteTablesSubnetsRetrieveResponse, error)

	// InfraSecurityGroupRulesList request
	InfraSecurityGroupRulesListWithResponse(ctx context.Context, params *InfraSecurityGroupRulesListParams, reqEditors ...RequestEditorFn) (*InfraSecurityGroupRulesListResponse, error)

	// InfraSecurityGroupRulesCreate request with any body
	InfraSecurityGroupRulesCreateWithBodyWithResponse(ctx context.Context, params *InfraSecurityGroupRulesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraSecurityGroupRulesCreateResponse, error)

	InfraSecurityGroupRulesCreateWithResponse(ctx context.Context, params *InfraSecurityGroupRulesCreateParams, body InfraSecurityGroupRulesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraSecurityGroupRulesCreateResponse, error)

	InfraSecurityGroupRulesCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraSecurityGroupRulesCreateParams, body InfraSecurityGroupRulesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraSecurityGroupRulesCreateResponse, error)

	// InfraSecurityGroupRulesDestroy request
	InfraSecurityGroupRulesDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupRulesDestroyParams, reqEditors ...RequestEditorFn) (*InfraSecurityGroupRulesDestroyResponse, error)

	// InfraSecurityGroupRulesRetrieve request
	InfraSecurityGroupRulesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupRulesRetrieveParams, reqEditors ...RequestEditorFn) (*InfraSecurityGroupRulesRetrieveResponse, error)

	// InfraSecurityGroupRulesPartialUpdate request with any body
	InfraSecurityGroupRulesPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupRulesPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraSecurityGroupRulesPartialUpdateResponse, error)

	InfraSecurityGroupRulesPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupRulesPartialUpdateParams, body InfraSecurityGroupRulesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraSecurityGroupRulesPartialUpdateResponse, error)

	InfraSecurityGroupRulesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupRulesPartialUpdateParams, body InfraSecurityGroupRulesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraSecurityGroupRulesPartialUpdateResponse, error)

	// InfraSecurityGroupRulesUpdate request with any body
	InfraSecurityGroupRulesUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupRulesUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraSecurityGroupRulesUpdateResponse, error)

	InfraSecurityGroupRulesUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupRulesUpdateParams, body InfraSecurityGroupRulesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraSecurityGroupRulesUpdateResponse, error)

	InfraSecurityGroupRulesUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupRulesUpdateParams, body InfraSecurityGroupRulesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraSecurityGroupRulesUpdateResponse, error)

	// InfraSecurityGroupsList request
	InfraSecurityGroupsListWithResponse(ctx context.Context, params *InfraSecurityGroupsListParams, reqEditors ...RequestEditorFn) (*InfraSecurityGroupsListResponse, error)

	// InfraSecurityGroupsCreate request with any body
	InfraSecurityGroupsCreateWithBodyWithResponse(ctx context.Context, params *InfraSecurityGroupsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraSecurityGroupsCreateResponse, error)

	InfraSecurityGroupsCreateWithResponse(ctx context.Context, params *InfraSecurityGroupsCreateParams, body InfraSecurityGroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraSecurityGroupsCreateResponse, error)

	InfraSecurityGroupsCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraSecurityGroupsCreateParams, body InfraSecurityGroupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraSecurityGroupsCreateResponse, error)

	// InfraSecurityGroupsDestroy request
	InfraSecurityGroupsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupsDestroyParams, reqEditors ...RequestEditorFn) (*InfraSecurityGroupsDestroyResponse, error)

	// InfraSecurityGroupsRetrieve request
	InfraSecurityGroupsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupsRetrieveParams, reqEditors ...RequestEditorFn) (*InfraSecurityGroupsRetrieveResponse, error)

	// InfraSecurityGroupsPartialUpdate request with any body
	InfraSecurityGroupsPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraSecurityGroupsPartialUpdateResponse, error)

	InfraSecurityGroupsPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupsPartialUpdateParams, body InfraSecurityGroupsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraSecurityGroupsPartialUpdateResponse, error)

	InfraSecurityGroupsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupsPartialUpdateParams, body InfraSecurityGroupsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraSecurityGroupsPartialUpdateResponse, error)

	// InfraSecurityGroupsUpdate request with any body
	InfraSecurityGroupsUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraSecurityGroupsUpdateResponse, error)

	InfraSecurityGroupsUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupsUpdateParams, body InfraSecurityGroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraSecurityGroupsUpdateResponse, error)

	InfraSecurityGroupsUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupsUpdateParams, body InfraSecurityGroupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraSecurityGroupsUpdateResponse, error)

	// InfraServersList request
	InfraServersListWithResponse(ctx context.Context, params *InfraServersListParams, reqEditors ...RequestEditorFn) (*InfraServersListResponse, error)

	// InfraServersCreate request with any body
	InfraServersCreateWithBodyWithResponse(ctx context.Context, params *InfraServersCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraServersCreateResponse, error)

	InfraServersCreateWithResponse(ctx context.Context, params *InfraServersCreateParams, body InfraServersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraServersCreateResponse, error)

	InfraServersCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraServersCreateParams, body InfraServersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraServersCreateResponse, error)

	// InfraServersMetricsSchemaRetrieve request
	InfraServersMetricsSchemaRetrieveWithResponse(ctx context.Context, params *InfraServersMetricsSchemaRetrieveParams, reqEditors ...RequestEditorFn) (*InfraServersMetricsSchemaRetrieveResponse, error)

	// InfraServersDestroy request
	InfraServersDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersDestroyParams, reqEditors ...RequestEditorFn) (*InfraServersDestroyResponse, error)

	// InfraServersRetrieve request
	InfraServersRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersRetrieveParams, reqEditors ...RequestEditorFn) (*InfraServersRetrieveResponse, error)

	// InfraServersPartialUpdate request with any body
	InfraServersPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraServersPartialUpdateResponse, error)

	InfraServersPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersPartialUpdateParams, body InfraServersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraServersPartialUpdateResponse, error)

	InfraServersPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersPartialUpdateParams, body InfraServersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraServersPartialUpdateResponse, error)

	// InfraServersUpdate request with any body
	InfraServersUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraServersUpdateResponse, error)

	InfraServersUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body InfraServersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraServersUpdateResponse, error)

	InfraServersUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body InfraServersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraServersUpdateResponse, error)

	// InfraServersActionLogRetrieve request
	InfraServersActionLogRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersActionLogRetrieveParams, reqEditors ...RequestEditorFn) (*InfraServersActionLogRetrieveResponse, error)

	// InfraServersAttachEipCreate request with any body
	InfraServersAttachEipCreateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachEipCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraServersAttachEipCreateResponse, error)

	InfraServersAttachEipCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachEipCreateParams, body InfraServersAttachEipCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraServersAttachEipCreateResponse, error)

	InfraServersAttachEipCreateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachEipCreateParams, body InfraServersAttachEipCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraServersAttachEipCreateResponse, error)

	// InfraServersAttachPrivateipCreate request with any body
	InfraServersAttachPrivateipCreateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachPrivateipCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraServersAttachPrivateipCreateResponse, error)

	InfraServersAttachPrivateipCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachPrivateipCreateParams, body InfraServersAttachPrivateipCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraServersAttachPrivateipCreateResponse, error)

	InfraServersAttachPrivateipCreateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachPrivateipCreateParams, body InfraServersAttachPrivateipCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraServersAttachPrivateipCreateResponse, error)

	// InfraServersAttachSubnetCreate request with any body
	InfraServersAttachSubnetCreateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachSubnetCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraServersAttachSubnetCreateResponse, error)

	InfraServersAttachSubnetCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachSubnetCreateParams, body InfraServersAttachSubnetCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraServersAttachSubnetCreateResponse, error)

	InfraServersAttachSubnetCreateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachSubnetCreateParams, body InfraServersAttachSubnetCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraServersAttachSubnetCreateResponse, error)

	// InfraServersAttachVolumeCreate request with any body
	InfraServersAttachVolumeCreateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachVolumeCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraServersAttachVolumeCreateResponse, error)

	InfraServersAttachVolumeCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachVolumeCreateParams, body InfraServersAttachVolumeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraServersAttachVolumeCreateResponse, error)

	InfraServersAttachVolumeCreateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachVolumeCreateParams, body InfraServersAttachVolumeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraServersAttachVolumeCreateResponse, error)

	// InfraServersChangePasswordCreate request with any body
	InfraServersChangePasswordCreateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersChangePasswordCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraServersChangePasswordCreateResponse, error)

	InfraServersChangePasswordCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersChangePasswordCreateParams, body InfraServersChangePasswordCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraServersChangePasswordCreateResponse, error)

	InfraServersChangePasswordCreateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersChangePasswordCreateParams, body InfraServersChangePasswordCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraServersChangePasswordCreateResponse, error)

	// InfraServersConsoleLogRetrieve request
	InfraServersConsoleLogRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersConsoleLogRetrieveParams, reqEditors ...RequestEditorFn) (*InfraServersConsoleLogRetrieveResponse, error)

	// InfraServersConsoleCreate request
	InfraServersConsoleCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersConsoleCreateParams, reqEditors ...RequestEditorFn) (*InfraServersConsoleCreateResponse, error)

	// InfraServersDeleteCreate request with any body
	InfraServersDeleteCreateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersDeleteCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraServersDeleteCreateResponse, error)

	InfraServersDeleteCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersDeleteCreateParams, body InfraServersDeleteCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraServersDeleteCreateResponse, error)

	InfraServersDeleteCreateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersDeleteCreateParams, body InfraServersDeleteCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraServersDeleteCreateResponse, error)

	// InfraServersDetachEipCreate request with any body
	InfraServersDetachEipCreateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersDetachEipCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraServersDetachEipCreateResponse, error)

	InfraServersDetachEipCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersDetachEipCreateParams, body InfraServersDetachEipCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraServersDetachEipCreateResponse, error)

	InfraServersDetachEipCreateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersDetachEipCreateParams, body InfraServersDetachEipCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraServersDetachEipCreateResponse, error)

	// InfraServersDetachPrivateIpCreate request with any body
	InfraServersDetachPrivateIpCreateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersDetachPrivateIpCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraServersDetachPrivateIpCreateResponse, error)

	InfraServersDetachPrivateIpCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersDetachPrivateIpCreateParams, body InfraServersDetachPrivateIpCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraServersDetachPrivateIpCreateResponse, error)

	InfraServersDetachPrivateIpCreateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersDetachPrivateIpCreateParams, body InfraServersDetachPrivateIpCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraServersDetachPrivateIpCreateResponse, error)

	// InfraServersDetachVolumeCreate request with any body
	InfraServersDetachVolumeCreateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersDetachVolumeCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraServersDetachVolumeCreateResponse, error)

	InfraServersDetachVolumeCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersDetachVolumeCreateParams, body InfraServersDetachVolumeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraServersDetachVolumeCreateResponse, error)

	InfraServersDetachVolumeCreateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersDetachVolumeCreateParams, body InfraServersDetachVolumeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraServersDetachVolumeCreateResponse, error)

	// InfraServersMetricsRetrieve request
	InfraServersMetricsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersMetricsRetrieveParams, reqEditors ...RequestEditorFn) (*InfraServersMetricsRetrieveResponse, error)

	// InfraServersResizeCreate request with any body
	InfraServersResizeCreateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersResizeCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraServersResizeCreateResponse, error)

	InfraServersResizeCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersResizeCreateParams, body InfraServersResizeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraServersResizeCreateResponse, error)

	InfraServersResizeCreateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersResizeCreateParams, body InfraServersResizeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraServersResizeCreateResponse, error)

	// InfraServersStartCreate request
	InfraServersStartCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersStartCreateParams, reqEditors ...RequestEditorFn) (*InfraServersStartCreateResponse, error)

	// InfraServersStopCreate request
	InfraServersStopCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersStopCreateParams, reqEditors ...RequestEditorFn) (*InfraServersStopCreateResponse, error)

	// InfraSnapshotpolicyList request
	InfraSnapshotpolicyListWithResponse(ctx context.Context, params *InfraSnapshotpolicyListParams, reqEditors ...RequestEditorFn) (*InfraSnapshotpolicyListResponse, error)

	// InfraSnapshotpolicyCreate request with any body
	InfraSnapshotpolicyCreateWithBodyWithResponse(ctx context.Context, params *InfraSnapshotpolicyCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraSnapshotpolicyCreateResponse, error)

	InfraSnapshotpolicyCreateWithResponse(ctx context.Context, params *InfraSnapshotpolicyCreateParams, body InfraSnapshotpolicyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraSnapshotpolicyCreateResponse, error)

	InfraSnapshotpolicyCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraSnapshotpolicyCreateParams, body InfraSnapshotpolicyCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraSnapshotpolicyCreateResponse, error)

	// InfraSnapshotpolicyDestroy request
	InfraSnapshotpolicyDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotpolicyDestroyParams, reqEditors ...RequestEditorFn) (*InfraSnapshotpolicyDestroyResponse, error)

	// InfraSnapshotpolicyRetrieve request
	InfraSnapshotpolicyRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotpolicyRetrieveParams, reqEditors ...RequestEditorFn) (*InfraSnapshotpolicyRetrieveResponse, error)

	// InfraSnapshotpolicyPartialUpdate request with any body
	InfraSnapshotpolicyPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotpolicyPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraSnapshotpolicyPartialUpdateResponse, error)

	InfraSnapshotpolicyPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotpolicyPartialUpdateParams, body InfraSnapshotpolicyPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraSnapshotpolicyPartialUpdateResponse, error)

	InfraSnapshotpolicyPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotpolicyPartialUpdateParams, body InfraSnapshotpolicyPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraSnapshotpolicyPartialUpdateResponse, error)

	// InfraSnapshotpolicyUpdate request with any body
	InfraSnapshotpolicyUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotpolicyUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraSnapshotpolicyUpdateResponse, error)

	InfraSnapshotpolicyUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotpolicyUpdateParams, body InfraSnapshotpolicyUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraSnapshotpolicyUpdateResponse, error)

	InfraSnapshotpolicyUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotpolicyUpdateParams, body InfraSnapshotpolicyUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraSnapshotpolicyUpdateResponse, error)

	// InfraSnapshotsList request
	InfraSnapshotsListWithResponse(ctx context.Context, params *InfraSnapshotsListParams, reqEditors ...RequestEditorFn) (*InfraSnapshotsListResponse, error)

	// InfraSnapshotsCreate request with any body
	InfraSnapshotsCreateWithBodyWithResponse(ctx context.Context, params *InfraSnapshotsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraSnapshotsCreateResponse, error)

	InfraSnapshotsCreateWithResponse(ctx context.Context, params *InfraSnapshotsCreateParams, body InfraSnapshotsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraSnapshotsCreateResponse, error)

	InfraSnapshotsCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraSnapshotsCreateParams, body InfraSnapshotsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraSnapshotsCreateResponse, error)

	// InfraSnapshotsDestroy request
	InfraSnapshotsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotsDestroyParams, reqEditors ...RequestEditorFn) (*InfraSnapshotsDestroyResponse, error)

	// InfraSnapshotsRetrieve request
	InfraSnapshotsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotsRetrieveParams, reqEditors ...RequestEditorFn) (*InfraSnapshotsRetrieveResponse, error)

	// InfraSnapshotsPartialUpdate request with any body
	InfraSnapshotsPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraSnapshotsPartialUpdateResponse, error)

	InfraSnapshotsPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotsPartialUpdateParams, body InfraSnapshotsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraSnapshotsPartialUpdateResponse, error)

	InfraSnapshotsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotsPartialUpdateParams, body InfraSnapshotsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraSnapshotsPartialUpdateResponse, error)

	// InfraSnapshotsUpdate request with any body
	InfraSnapshotsUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraSnapshotsUpdateResponse, error)

	InfraSnapshotsUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotsUpdateParams, body InfraSnapshotsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraSnapshotsUpdateResponse, error)

	InfraSnapshotsUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotsUpdateParams, body InfraSnapshotsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraSnapshotsUpdateResponse, error)

	// InfraSubnetsList request
	InfraSubnetsListWithResponse(ctx context.Context, params *InfraSubnetsListParams, reqEditors ...RequestEditorFn) (*InfraSubnetsListResponse, error)

	// InfraSubnetsCreate request with any body
	InfraSubnetsCreateWithBodyWithResponse(ctx context.Context, params *InfraSubnetsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraSubnetsCreateResponse, error)

	InfraSubnetsCreateWithResponse(ctx context.Context, params *InfraSubnetsCreateParams, body InfraSubnetsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraSubnetsCreateResponse, error)

	InfraSubnetsCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraSubnetsCreateParams, body InfraSubnetsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraSubnetsCreateResponse, error)

	// InfraSubnetsDestroy request
	InfraSubnetsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSubnetsDestroyParams, reqEditors ...RequestEditorFn) (*InfraSubnetsDestroyResponse, error)

	// InfraSubnetsRetrieve request
	InfraSubnetsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSubnetsRetrieveParams, reqEditors ...RequestEditorFn) (*InfraSubnetsRetrieveResponse, error)

	// InfraSubnetsPartialUpdate request with any body
	InfraSubnetsPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSubnetsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraSubnetsPartialUpdateResponse, error)

	InfraSubnetsPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSubnetsPartialUpdateParams, body InfraSubnetsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraSubnetsPartialUpdateResponse, error)

	InfraSubnetsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSubnetsPartialUpdateParams, body InfraSubnetsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraSubnetsPartialUpdateResponse, error)

	// InfraSubnetsUpdate request with any body
	InfraSubnetsUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSubnetsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraSubnetsUpdateResponse, error)

	InfraSubnetsUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSubnetsUpdateParams, body InfraSubnetsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraSubnetsUpdateResponse, error)

	InfraSubnetsUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSubnetsUpdateParams, body InfraSubnetsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraSubnetsUpdateResponse, error)

	// InfraVolumeBackupPoliciesList request
	InfraVolumeBackupPoliciesListWithResponse(ctx context.Context, params *InfraVolumeBackupPoliciesListParams, reqEditors ...RequestEditorFn) (*InfraVolumeBackupPoliciesListResponse, error)

	// InfraVolumeBackupPoliciesCreate request with any body
	InfraVolumeBackupPoliciesCreateWithBodyWithResponse(ctx context.Context, params *InfraVolumeBackupPoliciesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraVolumeBackupPoliciesCreateResponse, error)

	InfraVolumeBackupPoliciesCreateWithResponse(ctx context.Context, params *InfraVolumeBackupPoliciesCreateParams, body InfraVolumeBackupPoliciesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeBackupPoliciesCreateResponse, error)

	InfraVolumeBackupPoliciesCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraVolumeBackupPoliciesCreateParams, body InfraVolumeBackupPoliciesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeBackupPoliciesCreateResponse, error)

	// InfraVolumeBackupPoliciesDestroy request
	InfraVolumeBackupPoliciesDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupPoliciesDestroyParams, reqEditors ...RequestEditorFn) (*InfraVolumeBackupPoliciesDestroyResponse, error)

	// InfraVolumeBackupPoliciesRetrieve request
	InfraVolumeBackupPoliciesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupPoliciesRetrieveParams, reqEditors ...RequestEditorFn) (*InfraVolumeBackupPoliciesRetrieveResponse, error)

	// InfraVolumeBackupPoliciesPartialUpdate request with any body
	InfraVolumeBackupPoliciesPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupPoliciesPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraVolumeBackupPoliciesPartialUpdateResponse, error)

	InfraVolumeBackupPoliciesPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupPoliciesPartialUpdateParams, body InfraVolumeBackupPoliciesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeBackupPoliciesPartialUpdateResponse, error)

	InfraVolumeBackupPoliciesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupPoliciesPartialUpdateParams, body InfraVolumeBackupPoliciesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeBackupPoliciesPartialUpdateResponse, error)

	// InfraVolumeBackupPoliciesUpdate request with any body
	InfraVolumeBackupPoliciesUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupPoliciesUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraVolumeBackupPoliciesUpdateResponse, error)

	InfraVolumeBackupPoliciesUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupPoliciesUpdateParams, body InfraVolumeBackupPoliciesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeBackupPoliciesUpdateResponse, error)

	InfraVolumeBackupPoliciesUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupPoliciesUpdateParams, body InfraVolumeBackupPoliciesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeBackupPoliciesUpdateResponse, error)

	// InfraVolumeBackupsList request
	InfraVolumeBackupsListWithResponse(ctx context.Context, params *InfraVolumeBackupsListParams, reqEditors ...RequestEditorFn) (*InfraVolumeBackupsListResponse, error)

	// InfraVolumeBackupsCreate request with any body
	InfraVolumeBackupsCreateWithBodyWithResponse(ctx context.Context, params *InfraVolumeBackupsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraVolumeBackupsCreateResponse, error)

	InfraVolumeBackupsCreateWithResponse(ctx context.Context, params *InfraVolumeBackupsCreateParams, body InfraVolumeBackupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeBackupsCreateResponse, error)

	InfraVolumeBackupsCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraVolumeBackupsCreateParams, body InfraVolumeBackupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeBackupsCreateResponse, error)

	// InfraVolumeBackupsDestroy request
	InfraVolumeBackupsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsDestroyParams, reqEditors ...RequestEditorFn) (*InfraVolumeBackupsDestroyResponse, error)

	// InfraVolumeBackupsRetrieve request
	InfraVolumeBackupsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsRetrieveParams, reqEditors ...RequestEditorFn) (*InfraVolumeBackupsRetrieveResponse, error)

	// InfraVolumeBackupsPartialUpdate request with any body
	InfraVolumeBackupsPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraVolumeBackupsPartialUpdateResponse, error)

	InfraVolumeBackupsPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsPartialUpdateParams, body InfraVolumeBackupsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeBackupsPartialUpdateResponse, error)

	InfraVolumeBackupsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsPartialUpdateParams, body InfraVolumeBackupsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeBackupsPartialUpdateResponse, error)

	// InfraVolumeBackupsUpdate request with any body
	InfraVolumeBackupsUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraVolumeBackupsUpdateResponse, error)

	InfraVolumeBackupsUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsUpdateParams, body InfraVolumeBackupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeBackupsUpdateResponse, error)

	InfraVolumeBackupsUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsUpdateParams, body InfraVolumeBackupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeBackupsUpdateResponse, error)

	// InfraVolumeBackupsRestoreCreate request with any body
	InfraVolumeBackupsRestoreCreateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsRestoreCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraVolumeBackupsRestoreCreateResponse, error)

	InfraVolumeBackupsRestoreCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsRestoreCreateParams, body InfraVolumeBackupsRestoreCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeBackupsRestoreCreateResponse, error)

	InfraVolumeBackupsRestoreCreateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsRestoreCreateParams, body InfraVolumeBackupsRestoreCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeBackupsRestoreCreateResponse, error)

	// InfraVolumeTypeList request
	InfraVolumeTypeListWithResponse(ctx context.Context, params *InfraVolumeTypeListParams, reqEditors ...RequestEditorFn) (*InfraVolumeTypeListResponse, error)

	// InfraVolumeTypeCreate request with any body
	InfraVolumeTypeCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraVolumeTypeCreateResponse, error)

	InfraVolumeTypeCreateWithResponse(ctx context.Context, body InfraVolumeTypeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeTypeCreateResponse, error)

	InfraVolumeTypeCreateWithFormdataBodyWithResponse(ctx context.Context, body InfraVolumeTypeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeTypeCreateResponse, error)

	// InfraVolumeTypeDestroy request
	InfraVolumeTypeDestroyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*InfraVolumeTypeDestroyResponse, error)

	// InfraVolumeTypeRetrieve request
	InfraVolumeTypeRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*InfraVolumeTypeRetrieveResponse, error)

	// InfraVolumeTypePartialUpdate request with any body
	InfraVolumeTypePartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraVolumeTypePartialUpdateResponse, error)

	InfraVolumeTypePartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body InfraVolumeTypePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeTypePartialUpdateResponse, error)

	InfraVolumeTypePartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body InfraVolumeTypePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeTypePartialUpdateResponse, error)

	// InfraVolumeTypeUpdate request with any body
	InfraVolumeTypeUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraVolumeTypeUpdateResponse, error)

	InfraVolumeTypeUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body InfraVolumeTypeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeTypeUpdateResponse, error)

	InfraVolumeTypeUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body InfraVolumeTypeUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeTypeUpdateResponse, error)

	// InfraVolumesList request
	InfraVolumesListWithResponse(ctx context.Context, params *InfraVolumesListParams, reqEditors ...RequestEditorFn) (*InfraVolumesListResponse, error)

	// InfraVolumesCreate request with any body
	InfraVolumesCreateWithBodyWithResponse(ctx context.Context, params *InfraVolumesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraVolumesCreateResponse, error)

	InfraVolumesCreateWithResponse(ctx context.Context, params *InfraVolumesCreateParams, body InfraVolumesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumesCreateResponse, error)

	InfraVolumesCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraVolumesCreateParams, body InfraVolumesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumesCreateResponse, error)

	// InfraVolumesDestroy request
	InfraVolumesDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumesDestroyParams, reqEditors ...RequestEditorFn) (*InfraVolumesDestroyResponse, error)

	// InfraVolumesRetrieve request
	InfraVolumesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumesRetrieveParams, reqEditors ...RequestEditorFn) (*InfraVolumesRetrieveResponse, error)

	// InfraVolumesPartialUpdate request with any body
	InfraVolumesPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumesPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraVolumesPartialUpdateResponse, error)

	InfraVolumesPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumesPartialUpdateParams, body InfraVolumesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumesPartialUpdateResponse, error)

	InfraVolumesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumesPartialUpdateParams, body InfraVolumesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumesPartialUpdateResponse, error)

	// InfraVolumesUpdate request with any body
	InfraVolumesUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumesUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraVolumesUpdateResponse, error)

	InfraVolumesUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumesUpdateParams, body InfraVolumesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumesUpdateResponse, error)

	InfraVolumesUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumesUpdateParams, body InfraVolumesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumesUpdateResponse, error)

	// InfraVolumesApplyBackupPolicyCreate request with any body
	InfraVolumesApplyBackupPolicyCreateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumesApplyBackupPolicyCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraVolumesApplyBackupPolicyCreateResponse, error)

	InfraVolumesApplyBackupPolicyCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumesApplyBackupPolicyCreateParams, body InfraVolumesApplyBackupPolicyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumesApplyBackupPolicyCreateResponse, error)

	InfraVolumesApplyBackupPolicyCreateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumesApplyBackupPolicyCreateParams, body InfraVolumesApplyBackupPolicyCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumesApplyBackupPolicyCreateResponse, error)

	// InfraVolumesApplySnapshotPolicyCreate request with any body
	InfraVolumesApplySnapshotPolicyCreateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumesApplySnapshotPolicyCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraVolumesApplySnapshotPolicyCreateResponse, error)

	InfraVolumesApplySnapshotPolicyCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumesApplySnapshotPolicyCreateParams, body InfraVolumesApplySnapshotPolicyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumesApplySnapshotPolicyCreateResponse, error)

	InfraVolumesApplySnapshotPolicyCreateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumesApplySnapshotPolicyCreateParams, body InfraVolumesApplySnapshotPolicyCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumesApplySnapshotPolicyCreateResponse, error)

	// InfraVolumesExtendCreate request with any body
	InfraVolumesExtendCreateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumesExtendCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraVolumesExtendCreateResponse, error)

	InfraVolumesExtendCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumesExtendCreateParams, body InfraVolumesExtendCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumesExtendCreateResponse, error)

	InfraVolumesExtendCreateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumesExtendCreateParams, body InfraVolumesExtendCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumesExtendCreateResponse, error)

	// InfraVolumesUnapplyBackupPolicyCreate request
	InfraVolumesUnapplyBackupPolicyCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumesUnapplyBackupPolicyCreateParams, reqEditors ...RequestEditorFn) (*InfraVolumesUnapplyBackupPolicyCreateResponse, error)

	// InfraVolumesUnapplySnapshotPolicyCreate request
	InfraVolumesUnapplySnapshotPolicyCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumesUnapplySnapshotPolicyCreateParams, reqEditors ...RequestEditorFn) (*InfraVolumesUnapplySnapshotPolicyCreateResponse, error)

	// InfraVpcsList request
	InfraVpcsListWithResponse(ctx context.Context, params *InfraVpcsListParams, reqEditors ...RequestEditorFn) (*InfraVpcsListResponse, error)

	// InfraVpcsCreate request with any body
	InfraVpcsCreateWithBodyWithResponse(ctx context.Context, params *InfraVpcsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraVpcsCreateResponse, error)

	InfraVpcsCreateWithResponse(ctx context.Context, params *InfraVpcsCreateParams, body InfraVpcsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraVpcsCreateResponse, error)

	InfraVpcsCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraVpcsCreateParams, body InfraVpcsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraVpcsCreateResponse, error)

	// InfraVpcsDestroy request
	InfraVpcsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVpcsDestroyParams, reqEditors ...RequestEditorFn) (*InfraVpcsDestroyResponse, error)

	// InfraVpcsRetrieve request
	InfraVpcsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVpcsRetrieveParams, reqEditors ...RequestEditorFn) (*InfraVpcsRetrieveResponse, error)

	// InfraVpcsPartialUpdate request with any body
	InfraVpcsPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVpcsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraVpcsPartialUpdateResponse, error)

	InfraVpcsPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVpcsPartialUpdateParams, body InfraVpcsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraVpcsPartialUpdateResponse, error)

	InfraVpcsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVpcsPartialUpdateParams, body InfraVpcsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraVpcsPartialUpdateResponse, error)

	// InfraVpcsUpdate request with any body
	InfraVpcsUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVpcsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraVpcsUpdateResponse, error)

	InfraVpcsUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVpcsUpdateParams, body InfraVpcsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraVpcsUpdateResponse, error)

	InfraVpcsUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVpcsUpdateParams, body InfraVpcsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraVpcsUpdateResponse, error)

	// ProjectUserAccept request with any body
	ProjectUserAcceptWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProjectUserAcceptResponse, error)

	ProjectUserAcceptWithResponse(ctx context.Context, body ProjectUserAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*ProjectUserAcceptResponse, error)

	ProjectUserAcceptWithFormdataBodyWithResponse(ctx context.Context, body ProjectUserAcceptFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProjectUserAcceptResponse, error)

	// ProjectUserInvite request with any body
	ProjectUserInviteWithBodyWithResponse(ctx context.Context, params *ProjectUserInviteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProjectUserInviteResponse, error)

	ProjectUserInviteWithResponse(ctx context.Context, params *ProjectUserInviteParams, body ProjectUserInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*ProjectUserInviteResponse, error)

	ProjectUserInviteWithFormdataBodyWithResponse(ctx context.Context, params *ProjectUserInviteParams, body ProjectUserInviteFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProjectUserInviteResponse, error)

	// KaasBackupPlansList request
	KaasBackupPlansListWithResponse(ctx context.Context, params *KaasBackupPlansListParams, reqEditors ...RequestEditorFn) (*KaasBackupPlansListResponse, error)

	// KaasBackupPlansCreate request with any body
	KaasBackupPlansCreateWithBodyWithResponse(ctx context.Context, params *KaasBackupPlansCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KaasBackupPlansCreateResponse, error)

	KaasBackupPlansCreateWithResponse(ctx context.Context, params *KaasBackupPlansCreateParams, body KaasBackupPlansCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*KaasBackupPlansCreateResponse, error)

	KaasBackupPlansCreateWithFormdataBodyWithResponse(ctx context.Context, params *KaasBackupPlansCreateParams, body KaasBackupPlansCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*KaasBackupPlansCreateResponse, error)

	// KaasBackupPlansDestroy request
	KaasBackupPlansDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasBackupPlansDestroyParams, reqEditors ...RequestEditorFn) (*KaasBackupPlansDestroyResponse, error)

	// KaasBackupPlansRetrieve request
	KaasBackupPlansRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasBackupPlansRetrieveParams, reqEditors ...RequestEditorFn) (*KaasBackupPlansRetrieveResponse, error)

	// KaasBackupPlansPartialUpdate request with any body
	KaasBackupPlansPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasBackupPlansPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KaasBackupPlansPartialUpdateResponse, error)

	KaasBackupPlansPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasBackupPlansPartialUpdateParams, body KaasBackupPlansPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*KaasBackupPlansPartialUpdateResponse, error)

	KaasBackupPlansPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasBackupPlansPartialUpdateParams, body KaasBackupPlansPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*KaasBackupPlansPartialUpdateResponse, error)

	// KaasBackupPlansUpdate request with any body
	KaasBackupPlansUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasBackupPlansUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KaasBackupPlansUpdateResponse, error)

	KaasBackupPlansUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasBackupPlansUpdateParams, body KaasBackupPlansUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*KaasBackupPlansUpdateResponse, error)

	KaasBackupPlansUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasBackupPlansUpdateParams, body KaasBackupPlansUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*KaasBackupPlansUpdateResponse, error)

	// KaasBackupsList request
	KaasBackupsListWithResponse(ctx context.Context, params *KaasBackupsListParams, reqEditors ...RequestEditorFn) (*KaasBackupsListResponse, error)

	// KaasBackupsCreate request with any body
	KaasBackupsCreateWithBodyWithResponse(ctx context.Context, params *KaasBackupsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KaasBackupsCreateResponse, error)

	KaasBackupsCreateWithResponse(ctx context.Context, params *KaasBackupsCreateParams, body KaasBackupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*KaasBackupsCreateResponse, error)

	KaasBackupsCreateWithFormdataBodyWithResponse(ctx context.Context, params *KaasBackupsCreateParams, body KaasBackupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*KaasBackupsCreateResponse, error)

	// KaasBackupsDestroy request
	KaasBackupsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasBackupsDestroyParams, reqEditors ...RequestEditorFn) (*KaasBackupsDestroyResponse, error)

	// KaasBackupsRetrieve request
	KaasBackupsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasBackupsRetrieveParams, reqEditors ...RequestEditorFn) (*KaasBackupsRetrieveResponse, error)

	// KaasBackupsPartialUpdate request with any body
	KaasBackupsPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasBackupsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KaasBackupsPartialUpdateResponse, error)

	KaasBackupsPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasBackupsPartialUpdateParams, body KaasBackupsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*KaasBackupsPartialUpdateResponse, error)

	KaasBackupsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasBackupsPartialUpdateParams, body KaasBackupsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*KaasBackupsPartialUpdateResponse, error)

	// KaasBackupsUpdate request with any body
	KaasBackupsUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasBackupsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KaasBackupsUpdateResponse, error)

	KaasBackupsUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasBackupsUpdateParams, body KaasBackupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*KaasBackupsUpdateResponse, error)

	KaasBackupsUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasBackupsUpdateParams, body KaasBackupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*KaasBackupsUpdateResponse, error)

	// KaasCniVersionsList request
	KaasCniVersionsListWithResponse(ctx context.Context, params *KaasCniVersionsListParams, reqEditors ...RequestEditorFn) (*KaasCniVersionsListResponse, error)

	// KaasCniVersionsRetrieve request
	KaasCniVersionsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*KaasCniVersionsRetrieveResponse, error)

	// KaasCsiVersionsList request
	KaasCsiVersionsListWithResponse(ctx context.Context, params *KaasCsiVersionsListParams, reqEditors ...RequestEditorFn) (*KaasCsiVersionsListResponse, error)

	// KaasCsiVersionsRetrieve request
	KaasCsiVersionsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*KaasCsiVersionsRetrieveResponse, error)

	// KaasDashboardVersionsList request
	KaasDashboardVersionsListWithResponse(ctx context.Context, params *KaasDashboardVersionsListParams, reqEditors ...RequestEditorFn) (*KaasDashboardVersionsListResponse, error)

	// KaasDashboardVersionsRetrieve request
	KaasDashboardVersionsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*KaasDashboardVersionsRetrieveResponse, error)

	// KaasK8sVersionsList request
	KaasK8sVersionsListWithResponse(ctx context.Context, params *KaasK8sVersionsListParams, reqEditors ...RequestEditorFn) (*KaasK8sVersionsListResponse, error)

	// KaasK8sVersionsRetrieve request
	KaasK8sVersionsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*KaasK8sVersionsRetrieveResponse, error)

	// KaasRestoresList request
	KaasRestoresListWithResponse(ctx context.Context, params *KaasRestoresListParams, reqEditors ...RequestEditorFn) (*KaasRestoresListResponse, error)

	// KaasRestoresCreate request with any body
	KaasRestoresCreateWithBodyWithResponse(ctx context.Context, params *KaasRestoresCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KaasRestoresCreateResponse, error)

	KaasRestoresCreateWithResponse(ctx context.Context, params *KaasRestoresCreateParams, body KaasRestoresCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*KaasRestoresCreateResponse, error)

	KaasRestoresCreateWithFormdataBodyWithResponse(ctx context.Context, params *KaasRestoresCreateParams, body KaasRestoresCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*KaasRestoresCreateResponse, error)

	// KaasRestoresDestroy request
	KaasRestoresDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasRestoresDestroyParams, reqEditors ...RequestEditorFn) (*KaasRestoresDestroyResponse, error)

	// KaasRestoresRetrieve request
	KaasRestoresRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasRestoresRetrieveParams, reqEditors ...RequestEditorFn) (*KaasRestoresRetrieveResponse, error)

	// KaasRestoresPartialUpdate request with any body
	KaasRestoresPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasRestoresPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KaasRestoresPartialUpdateResponse, error)

	KaasRestoresPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasRestoresPartialUpdateParams, body KaasRestoresPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*KaasRestoresPartialUpdateResponse, error)

	KaasRestoresPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasRestoresPartialUpdateParams, body KaasRestoresPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*KaasRestoresPartialUpdateResponse, error)

	// KaasRestoresUpdate request with any body
	KaasRestoresUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasRestoresUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KaasRestoresUpdateResponse, error)

	KaasRestoresUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasRestoresUpdateParams, body KaasRestoresUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*KaasRestoresUpdateResponse, error)

	KaasRestoresUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasRestoresUpdateParams, body KaasRestoresUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*KaasRestoresUpdateResponse, error)

	// KaasVkeClustersList request
	KaasVkeClustersListWithResponse(ctx context.Context, params *KaasVkeClustersListParams, reqEditors ...RequestEditorFn) (*KaasVkeClustersListResponse, error)

	// KaasVkeClustersCreate request with any body
	KaasVkeClustersCreateWithBodyWithResponse(ctx context.Context, params *KaasVkeClustersCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KaasVkeClustersCreateResponse, error)

	KaasVkeClustersCreateWithResponse(ctx context.Context, params *KaasVkeClustersCreateParams, body KaasVkeClustersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*KaasVkeClustersCreateResponse, error)

	KaasVkeClustersCreateWithFormdataBodyWithResponse(ctx context.Context, params *KaasVkeClustersCreateParams, body KaasVkeClustersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*KaasVkeClustersCreateResponse, error)

	// KaasVkeClustersDestroy request
	KaasVkeClustersDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasVkeClustersDestroyParams, reqEditors ...RequestEditorFn) (*KaasVkeClustersDestroyResponse, error)

	// KaasVkeClustersRetrieve request
	KaasVkeClustersRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasVkeClustersRetrieveParams, reqEditors ...RequestEditorFn) (*KaasVkeClustersRetrieveResponse, error)

	// KaasVkeClustersPartialUpdate request with any body
	KaasVkeClustersPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasVkeClustersPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KaasVkeClustersPartialUpdateResponse, error)

	KaasVkeClustersPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasVkeClustersPartialUpdateParams, body KaasVkeClustersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*KaasVkeClustersPartialUpdateResponse, error)

	KaasVkeClustersPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasVkeClustersPartialUpdateParams, body KaasVkeClustersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*KaasVkeClustersPartialUpdateResponse, error)

	// KaasVkeClustersUpdate request with any body
	KaasVkeClustersUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasVkeClustersUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KaasVkeClustersUpdateResponse, error)

	KaasVkeClustersUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasVkeClustersUpdateParams, body KaasVkeClustersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*KaasVkeClustersUpdateResponse, error)

	KaasVkeClustersUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasVkeClustersUpdateParams, body KaasVkeClustersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*KaasVkeClustersUpdateResponse, error)

	// KaasVkeKubeconfigsRetrieve request
	KaasVkeKubeconfigsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasVkeKubeconfigsRetrieveParams, reqEditors ...RequestEditorFn) (*KaasVkeKubeconfigsRetrieveResponse, error)

	// KaasVkeKubedashboardsRetrieve request
	KaasVkeKubedashboardsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasVkeKubedashboardsRetrieveParams, reqEditors ...RequestEditorFn) (*KaasVkeKubedashboardsRetrieveResponse, error)

	// KaasVkeMachinesList request
	KaasVkeMachinesListWithResponse(ctx context.Context, params *KaasVkeMachinesListParams, reqEditors ...RequestEditorFn) (*KaasVkeMachinesListResponse, error)

	// KaasVkeNodePoolsList request
	KaasVkeNodePoolsListWithResponse(ctx context.Context, params *KaasVkeNodePoolsListParams, reqEditors ...RequestEditorFn) (*KaasVkeNodePoolsListResponse, error)

	// KaasVkeNodePoolsCreate request with any body
	KaasVkeNodePoolsCreateWithBodyWithResponse(ctx context.Context, params *KaasVkeNodePoolsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KaasVkeNodePoolsCreateResponse, error)

	KaasVkeNodePoolsCreateWithResponse(ctx context.Context, params *KaasVkeNodePoolsCreateParams, body KaasVkeNodePoolsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*KaasVkeNodePoolsCreateResponse, error)

	KaasVkeNodePoolsCreateWithFormdataBodyWithResponse(ctx context.Context, params *KaasVkeNodePoolsCreateParams, body KaasVkeNodePoolsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*KaasVkeNodePoolsCreateResponse, error)

	// KaasVkeNodePoolsDestroy request
	KaasVkeNodePoolsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasVkeNodePoolsDestroyParams, reqEditors ...RequestEditorFn) (*KaasVkeNodePoolsDestroyResponse, error)

	// KaasVkeNodePoolsRetrieve request
	KaasVkeNodePoolsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasVkeNodePoolsRetrieveParams, reqEditors ...RequestEditorFn) (*KaasVkeNodePoolsRetrieveResponse, error)

	// KaasVkeNodePoolsPartialUpdate request with any body
	KaasVkeNodePoolsPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasVkeNodePoolsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KaasVkeNodePoolsPartialUpdateResponse, error)

	KaasVkeNodePoolsPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasVkeNodePoolsPartialUpdateParams, body KaasVkeNodePoolsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*KaasVkeNodePoolsPartialUpdateResponse, error)

	KaasVkeNodePoolsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasVkeNodePoolsPartialUpdateParams, body KaasVkeNodePoolsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*KaasVkeNodePoolsPartialUpdateResponse, error)

	// KaasVkeNodePoolsUpdate request with any body
	KaasVkeNodePoolsUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasVkeNodePoolsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KaasVkeNodePoolsUpdateResponse, error)

	KaasVkeNodePoolsUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasVkeNodePoolsUpdateParams, body KaasVkeNodePoolsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*KaasVkeNodePoolsUpdateResponse, error)

	KaasVkeNodePoolsUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasVkeNodePoolsUpdateParams, body KaasVkeNodePoolsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*KaasVkeNodePoolsUpdateResponse, error)

	// KaasVkeWebcliRetrieve request
	KaasVkeWebcliRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasVkeWebcliRetrieveParams, reqEditors ...RequestEditorFn) (*KaasVkeWebcliRetrieveResponse, error)

	// MarketplaceCategoriesList request
	MarketplaceCategoriesListWithResponse(ctx context.Context, params *MarketplaceCategoriesListParams, reqEditors ...RequestEditorFn) (*MarketplaceCategoriesListResponse, error)

	// MarketplaceCategoriesCreate request with any body
	MarketplaceCategoriesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MarketplaceCategoriesCreateResponse, error)

	MarketplaceCategoriesCreateWithResponse(ctx context.Context, body MarketplaceCategoriesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*MarketplaceCategoriesCreateResponse, error)

	MarketplaceCategoriesCreateWithFormdataBodyWithResponse(ctx context.Context, body MarketplaceCategoriesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MarketplaceCategoriesCreateResponse, error)

	// MarketplaceCategoriesRetrieve request
	MarketplaceCategoriesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*MarketplaceCategoriesRetrieveResponse, error)

	// MarketplaceCategoriesPartialUpdate request with any body
	MarketplaceCategoriesPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MarketplaceCategoriesPartialUpdateResponse, error)

	MarketplaceCategoriesPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body MarketplaceCategoriesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*MarketplaceCategoriesPartialUpdateResponse, error)

	MarketplaceCategoriesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body MarketplaceCategoriesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MarketplaceCategoriesPartialUpdateResponse, error)

	// MarketplacePricingPlansList request
	MarketplacePricingPlansListWithResponse(ctx context.Context, params *MarketplacePricingPlansListParams, reqEditors ...RequestEditorFn) (*MarketplacePricingPlansListResponse, error)

	// MarketplacePricingPlansCreate request with any body
	MarketplacePricingPlansCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MarketplacePricingPlansCreateResponse, error)

	MarketplacePricingPlansCreateWithResponse(ctx context.Context, body MarketplacePricingPlansCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*MarketplacePricingPlansCreateResponse, error)

	MarketplacePricingPlansCreateWithFormdataBodyWithResponse(ctx context.Context, body MarketplacePricingPlansCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MarketplacePricingPlansCreateResponse, error)

	// MarketplacePricingPlansRetrieve request
	MarketplacePricingPlansRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*MarketplacePricingPlansRetrieveResponse, error)

	// MarketplacePricingPlansPartialUpdate request with any body
	MarketplacePricingPlansPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MarketplacePricingPlansPartialUpdateResponse, error)

	MarketplacePricingPlansPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body MarketplacePricingPlansPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*MarketplacePricingPlansPartialUpdateResponse, error)

	MarketplacePricingPlansPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body MarketplacePricingPlansPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MarketplacePricingPlansPartialUpdateResponse, error)

	// MarketplaceProductsList request
	MarketplaceProductsListWithResponse(ctx context.Context, params *MarketplaceProductsListParams, reqEditors ...RequestEditorFn) (*MarketplaceProductsListResponse, error)

	// MarketplaceProductsCreate request with any body
	MarketplaceProductsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MarketplaceProductsCreateResponse, error)

	MarketplaceProductsCreateWithResponse(ctx context.Context, body MarketplaceProductsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*MarketplaceProductsCreateResponse, error)

	MarketplaceProductsCreateWithFormdataBodyWithResponse(ctx context.Context, body MarketplaceProductsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MarketplaceProductsCreateResponse, error)

	// MarketplaceProductsRetrieve request
	MarketplaceProductsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*MarketplaceProductsRetrieveResponse, error)

	// MarketplaceProductsPartialUpdate request with any body
	MarketplaceProductsPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MarketplaceProductsPartialUpdateResponse, error)

	MarketplaceProductsPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body MarketplaceProductsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*MarketplaceProductsPartialUpdateResponse, error)

	MarketplaceProductsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body MarketplaceProductsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MarketplaceProductsPartialUpdateResponse, error)

	// MarketplaceSubscriptionsList request
	MarketplaceSubscriptionsListWithResponse(ctx context.Context, params *MarketplaceSubscriptionsListParams, reqEditors ...RequestEditorFn) (*MarketplaceSubscriptionsListResponse, error)

	// MarketplaceSubscriptionsCreate request with any body
	MarketplaceSubscriptionsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MarketplaceSubscriptionsCreateResponse, error)

	MarketplaceSubscriptionsCreateWithResponse(ctx context.Context, body MarketplaceSubscriptionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*MarketplaceSubscriptionsCreateResponse, error)

	MarketplaceSubscriptionsCreateWithFormdataBodyWithResponse(ctx context.Context, body MarketplaceSubscriptionsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MarketplaceSubscriptionsCreateResponse, error)

	// MarketplaceSubscriptionsDestroy request
	MarketplaceSubscriptionsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*MarketplaceSubscriptionsDestroyResponse, error)

	// MarketplaceSubscriptionsRetrieve request
	MarketplaceSubscriptionsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*MarketplaceSubscriptionsRetrieveResponse, error)

	// MarketplaceVendorsList request
	MarketplaceVendorsListWithResponse(ctx context.Context, params *MarketplaceVendorsListParams, reqEditors ...RequestEditorFn) (*MarketplaceVendorsListResponse, error)

	// MarketplaceVendorsCreate request with any body
	MarketplaceVendorsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MarketplaceVendorsCreateResponse, error)

	MarketplaceVendorsCreateWithResponse(ctx context.Context, body MarketplaceVendorsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*MarketplaceVendorsCreateResponse, error)

	MarketplaceVendorsCreateWithFormdataBodyWithResponse(ctx context.Context, body MarketplaceVendorsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MarketplaceVendorsCreateResponse, error)

	// MarketplaceVendorsRetrieve request
	MarketplaceVendorsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*MarketplaceVendorsRetrieveResponse, error)

	// MarketplaceVendorsPartialUpdate request with any body
	MarketplaceVendorsPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MarketplaceVendorsPartialUpdateResponse, error)

	MarketplaceVendorsPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body MarketplaceVendorsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*MarketplaceVendorsPartialUpdateResponse, error)

	MarketplaceVendorsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body MarketplaceVendorsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MarketplaceVendorsPartialUpdateResponse, error)

	// ObjectStorageActivateServiceCreate request
	ObjectStorageActivateServiceCreateWithResponse(ctx context.Context, params *ObjectStorageActivateServiceCreateParams, reqEditors ...RequestEditorFn) (*ObjectStorageActivateServiceCreateResponse, error)

	// ObjectStorageBucketsList request
	ObjectStorageBucketsListWithResponse(ctx context.Context, params *ObjectStorageBucketsListParams, reqEditors ...RequestEditorFn) (*ObjectStorageBucketsListResponse, error)

	// ObjectStorageBucketsCreate request with any body
	ObjectStorageBucketsCreateWithBodyWithResponse(ctx context.Context, params *ObjectStorageBucketsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ObjectStorageBucketsCreateResponse, error)

	ObjectStorageBucketsCreateWithResponse(ctx context.Context, params *ObjectStorageBucketsCreateParams, body ObjectStorageBucketsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ObjectStorageBucketsCreateResponse, error)

	ObjectStorageBucketsCreateWithFormdataBodyWithResponse(ctx context.Context, params *ObjectStorageBucketsCreateParams, body ObjectStorageBucketsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ObjectStorageBucketsCreateResponse, error)

	// BucketAclShow request
	BucketAclShowWithResponse(ctx context.Context, bucketName string, params *BucketAclShowParams, reqEditors ...RequestEditorFn) (*BucketAclShowResponse, error)

	// BucketAclPatch request with any body
	BucketAclPatchWithBodyWithResponse(ctx context.Context, bucketName string, params *BucketAclPatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BucketAclPatchResponse, error)

	BucketAclPatchWithResponse(ctx context.Context, bucketName string, params *BucketAclPatchParams, body BucketAclPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*BucketAclPatchResponse, error)

	BucketAclPatchWithFormdataBodyWithResponse(ctx context.Context, bucketName string, params *BucketAclPatchParams, body BucketAclPatchFormdataRequestBody, reqEditors ...RequestEditorFn) (*BucketAclPatchResponse, error)

	// BucketCorsDelete request
	BucketCorsDeleteWithResponse(ctx context.Context, bucketName string, params *BucketCorsDeleteParams, reqEditors ...RequestEditorFn) (*BucketCorsDeleteResponse, error)

	// BucketCorsShow request
	BucketCorsShowWithResponse(ctx context.Context, bucketName string, params *BucketCorsShowParams, reqEditors ...RequestEditorFn) (*BucketCorsShowResponse, error)

	// BucketCorsEdit request with any body
	BucketCorsEditWithBodyWithResponse(ctx context.Context, bucketName string, params *BucketCorsEditParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BucketCorsEditResponse, error)

	BucketCorsEditWithResponse(ctx context.Context, bucketName string, params *BucketCorsEditParams, body BucketCorsEditJSONRequestBody, reqEditors ...RequestEditorFn) (*BucketCorsEditResponse, error)

	BucketCorsEditWithFormdataBodyWithResponse(ctx context.Context, bucketName string, params *BucketCorsEditParams, body BucketCorsEditFormdataRequestBody, reqEditors ...RequestEditorFn) (*BucketCorsEditResponse, error)

	// BucketLifecycleDelete request
	BucketLifecycleDeleteWithResponse(ctx context.Context, bucketName string, params *BucketLifecycleDeleteParams, reqEditors ...RequestEditorFn) (*BucketLifecycleDeleteResponse, error)

	// BucketLifecycleList request
	BucketLifecycleListWithResponse(ctx context.Context, bucketName string, params *BucketLifecycleListParams, reqEditors ...RequestEditorFn) (*BucketLifecycleListResponse, error)

	// BucketLifecyclePut request with any body
	BucketLifecyclePutWithBodyWithResponse(ctx context.Context, bucketName string, params *BucketLifecyclePutParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BucketLifecyclePutResponse, error)

	BucketLifecyclePutWithResponse(ctx context.Context, bucketName string, params *BucketLifecyclePutParams, body BucketLifecyclePutJSONRequestBody, reqEditors ...RequestEditorFn) (*BucketLifecyclePutResponse, error)

	BucketLifecyclePutWithFormdataBodyWithResponse(ctx context.Context, bucketName string, params *BucketLifecyclePutParams, body BucketLifecyclePutFormdataRequestBody, reqEditors ...RequestEditorFn) (*BucketLifecyclePutResponse, error)

	// BucketObjectList request
	BucketObjectListWithResponse(ctx context.Context, bucketName string, params *BucketObjectListParams, reqEditors ...RequestEditorFn) (*BucketObjectListResponse, error)

	// CreateFolderGetAwsTokenUploadFile request with any body
	CreateFolderGetAwsTokenUploadFileWithBodyWithResponse(ctx context.Context, bucketName string, params *CreateFolderGetAwsTokenUploadFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFolderGetAwsTokenUploadFileResponse, error)

	CreateFolderGetAwsTokenUploadFileWithResponse(ctx context.Context, bucketName string, params *CreateFolderGetAwsTokenUploadFileParams, body CreateFolderGetAwsTokenUploadFileJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFolderGetAwsTokenUploadFileResponse, error)

	CreateFolderGetAwsTokenUploadFileWithFormdataBodyWithResponse(ctx context.Context, bucketName string, params *CreateFolderGetAwsTokenUploadFileParams, body CreateFolderGetAwsTokenUploadFileFormdataRequestBody, reqEditors ...RequestEditorFn) (*CreateFolderGetAwsTokenUploadFileResponse, error)

	// GetObjectAcl request
	GetObjectAclWithResponse(ctx context.Context, bucketName string, objectName string, params *GetObjectAclParams, reqEditors ...RequestEditorFn) (*GetObjectAclResponse, error)

	// PatchObjectAcl request with any body
	PatchObjectAclWithBodyWithResponse(ctx context.Context, bucketName string, objectName string, params *PatchObjectAclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchObjectAclResponse, error)

	PatchObjectAclWithResponse(ctx context.Context, bucketName string, objectName string, params *PatchObjectAclParams, body PatchObjectAclJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchObjectAclResponse, error)

	PatchObjectAclWithFormdataBodyWithResponse(ctx context.Context, bucketName string, objectName string, params *PatchObjectAclParams, body PatchObjectAclFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchObjectAclResponse, error)

	// ObjectBatchDelete request with any body
	ObjectBatchDeleteWithBodyWithResponse(ctx context.Context, bucketName string, params *ObjectBatchDeleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ObjectBatchDeleteResponse, error)

	ObjectBatchDeleteWithResponse(ctx context.Context, bucketName string, params *ObjectBatchDeleteParams, body ObjectBatchDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*ObjectBatchDeleteResponse, error)

	ObjectBatchDeleteWithFormdataBodyWithResponse(ctx context.Context, bucketName string, params *ObjectBatchDeleteParams, body ObjectBatchDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*ObjectBatchDeleteResponse, error)

	// DeleteObject request
	DeleteObjectWithResponse(ctx context.Context, bucketName string, objectName string, params *DeleteObjectParams, reqEditors ...RequestEditorFn) (*DeleteObjectResponse, error)

	// ObjectDetails request
	ObjectDetailsWithResponse(ctx context.Context, bucketName string, objectName string, params *ObjectDetailsParams, reqEditors ...RequestEditorFn) (*ObjectDetailsResponse, error)

	// GetObjectShareUrl request
	GetObjectShareUrlWithResponse(ctx context.Context, bucketName string, objectName string, params *GetObjectShareUrlParams, reqEditors ...RequestEditorFn) (*GetObjectShareUrlResponse, error)

	// DeleteAllObjectTags request
	DeleteAllObjectTagsWithResponse(ctx context.Context, bucketName string, objectName string, params *DeleteAllObjectTagsParams, reqEditors ...RequestEditorFn) (*DeleteAllObjectTagsResponse, error)

	// GetObjectTags request
	GetObjectTagsWithResponse(ctx context.Context, bucketName string, objectName string, params *GetObjectTagsParams, reqEditors ...RequestEditorFn) (*GetObjectTagsResponse, error)

	// PutObjectTags request with any body
	PutObjectTagsWithBodyWithResponse(ctx context.Context, bucketName string, objectName string, params *PutObjectTagsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutObjectTagsResponse, error)

	PutObjectTagsWithResponse(ctx context.Context, bucketName string, objectName string, params *PutObjectTagsParams, body PutObjectTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutObjectTagsResponse, error)

	PutObjectTagsWithFormdataBodyWithResponse(ctx context.Context, bucketName string, objectName string, params *PutObjectTagsParams, body PutObjectTagsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutObjectTagsResponse, error)

	// BucketPolicyDelete request
	BucketPolicyDeleteWithResponse(ctx context.Context, bucketName string, params *BucketPolicyDeleteParams, reqEditors ...RequestEditorFn) (*BucketPolicyDeleteResponse, error)

	// BucketPolicyGet request
	BucketPolicyGetWithResponse(ctx context.Context, bucketName string, params *BucketPolicyGetParams, reqEditors ...RequestEditorFn) (*BucketPolicyGetResponse, error)

	// BucketPolicyPut request with any body
	BucketPolicyPutWithBodyWithResponse(ctx context.Context, bucketName string, params *BucketPolicyPutParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BucketPolicyPutResponse, error)

	BucketPolicyPutWithResponse(ctx context.Context, bucketName string, params *BucketPolicyPutParams, body BucketPolicyPutJSONRequestBody, reqEditors ...RequestEditorFn) (*BucketPolicyPutResponse, error)

	BucketPolicyPutWithFormdataBodyWithResponse(ctx context.Context, bucketName string, params *BucketPolicyPutParams, body BucketPolicyPutFormdataRequestBody, reqEditors ...RequestEditorFn) (*BucketPolicyPutResponse, error)

	// BucketStaticWebDelete request
	BucketStaticWebDeleteWithResponse(ctx context.Context, bucketName string, params *BucketStaticWebDeleteParams, reqEditors ...RequestEditorFn) (*BucketStaticWebDeleteResponse, error)

	// BucketStaticWebCreate request
	BucketStaticWebCreateWithResponse(ctx context.Context, bucketName string, params *BucketStaticWebCreateParams, reqEditors ...RequestEditorFn) (*BucketStaticWebCreateResponse, error)

	// BucketStaticWebShow request with any body
	BucketStaticWebShowWithBodyWithResponse(ctx context.Context, bucketName string, params *BucketStaticWebShowParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BucketStaticWebShowResponse, error)

	BucketStaticWebShowWithResponse(ctx context.Context, bucketName string, params *BucketStaticWebShowParams, body BucketStaticWebShowJSONRequestBody, reqEditors ...RequestEditorFn) (*BucketStaticWebShowResponse, error)

	BucketStaticWebShowWithFormdataBodyWithResponse(ctx context.Context, bucketName string, params *BucketStaticWebShowParams, body BucketStaticWebShowFormdataRequestBody, reqEditors ...RequestEditorFn) (*BucketStaticWebShowResponse, error)

	// DeleteBucketTags request
	DeleteBucketTagsWithResponse(ctx context.Context, bucketName string, params *DeleteBucketTagsParams, reqEditors ...RequestEditorFn) (*DeleteBucketTagsResponse, error)

	// GetBucketTags request
	GetBucketTagsWithResponse(ctx context.Context, bucketName string, params *GetBucketTagsParams, reqEditors ...RequestEditorFn) (*GetBucketTagsResponse, error)

	// PutBucketTags request with any body
	PutBucketTagsWithBodyWithResponse(ctx context.Context, bucketName string, params *PutBucketTagsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBucketTagsResponse, error)

	PutBucketTagsWithResponse(ctx context.Context, bucketName string, params *PutBucketTagsParams, body PutBucketTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBucketTagsResponse, error)

	PutBucketTagsWithFormdataBodyWithResponse(ctx context.Context, bucketName string, params *PutBucketTagsParams, body PutBucketTagsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutBucketTagsResponse, error)

	// BucketVersioningShow request
	BucketVersioningShowWithResponse(ctx context.Context, bucketName string, params *BucketVersioningShowParams, reqEditors ...RequestEditorFn) (*BucketVersioningShowResponse, error)

	// BucketVersioningAction request with any body
	BucketVersioningActionWithBodyWithResponse(ctx context.Context, bucketName string, params *BucketVersioningActionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BucketVersioningActionResponse, error)

	BucketVersioningActionWithResponse(ctx context.Context, bucketName string, params *BucketVersioningActionParams, body BucketVersioningActionJSONRequestBody, reqEditors ...RequestEditorFn) (*BucketVersioningActionResponse, error)

	BucketVersioningActionWithFormdataBodyWithResponse(ctx context.Context, bucketName string, params *BucketVersioningActionParams, body BucketVersioningActionFormdataRequestBody, reqEditors ...RequestEditorFn) (*BucketVersioningActionResponse, error)

	// BucketObjectVersionList request
	BucketObjectVersionListWithResponse(ctx context.Context, bucketName string, params *BucketObjectVersionListParams, reqEditors ...RequestEditorFn) (*BucketObjectVersionListResponse, error)

	// GetObjectVersionAcl request
	GetObjectVersionAclWithResponse(ctx context.Context, bucketName string, objectName string, params *GetObjectVersionAclParams, reqEditors ...RequestEditorFn) (*GetObjectVersionAclResponse, error)

	// PatchObjectVersionAcl request with any body
	PatchObjectVersionAclWithBodyWithResponse(ctx context.Context, bucketName string, objectName string, params *PatchObjectVersionAclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchObjectVersionAclResponse, error)

	PatchObjectVersionAclWithResponse(ctx context.Context, bucketName string, objectName string, params *PatchObjectVersionAclParams, body PatchObjectVersionAclJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchObjectVersionAclResponse, error)

	PatchObjectVersionAclWithFormdataBodyWithResponse(ctx context.Context, bucketName string, objectName string, params *PatchObjectVersionAclParams, body PatchObjectVersionAclFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchObjectVersionAclResponse, error)

	// ObjectVersionBatchDelete request with any body
	ObjectVersionBatchDeleteWithBodyWithResponse(ctx context.Context, bucketName string, params *ObjectVersionBatchDeleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ObjectVersionBatchDeleteResponse, error)

	ObjectVersionBatchDeleteWithResponse(ctx context.Context, bucketName string, params *ObjectVersionBatchDeleteParams, body ObjectVersionBatchDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*ObjectVersionBatchDeleteResponse, error)

	ObjectVersionBatchDeleteWithFormdataBodyWithResponse(ctx context.Context, bucketName string, params *ObjectVersionBatchDeleteParams, body ObjectVersionBatchDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*ObjectVersionBatchDeleteResponse, error)

	// DeleteObjectVersion request
	DeleteObjectVersionWithResponse(ctx context.Context, bucketName string, objectName string, params *DeleteObjectVersionParams, reqEditors ...RequestEditorFn) (*DeleteObjectVersionResponse, error)

	// ObjectVersionDetails request
	ObjectVersionDetailsWithResponse(ctx context.Context, bucketName string, objectName string, params *ObjectVersionDetailsParams, reqEditors ...RequestEditorFn) (*ObjectVersionDetailsResponse, error)

	// ObjectVersionRestore request
	ObjectVersionRestoreWithResponse(ctx context.Context, bucketName string, objectName string, params *ObjectVersionRestoreParams, reqEditors ...RequestEditorFn) (*ObjectVersionRestoreResponse, error)

	// GetObjectVersionShareUrl request
	GetObjectVersionShareUrlWithResponse(ctx context.Context, bucketName string, objectName string, params *GetObjectVersionShareUrlParams, reqEditors ...RequestEditorFn) (*GetObjectVersionShareUrlResponse, error)

	// DeleteAllObjectVersionTags request
	DeleteAllObjectVersionTagsWithResponse(ctx context.Context, bucketName string, objectName string, params *DeleteAllObjectVersionTagsParams, reqEditors ...RequestEditorFn) (*DeleteAllObjectVersionTagsResponse, error)

	// GetObjectVersionTags request
	GetObjectVersionTagsWithResponse(ctx context.Context, bucketName string, objectName string, params *GetObjectVersionTagsParams, reqEditors ...RequestEditorFn) (*GetObjectVersionTagsResponse, error)

	// PutObjectVersionTags request with any body
	PutObjectVersionTagsWithBodyWithResponse(ctx context.Context, bucketName string, objectName string, params *PutObjectVersionTagsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutObjectVersionTagsResponse, error)

	PutObjectVersionTagsWithResponse(ctx context.Context, bucketName string, objectName string, params *PutObjectVersionTagsParams, body PutObjectVersionTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutObjectVersionTagsResponse, error)

	PutObjectVersionTagsWithFormdataBodyWithResponse(ctx context.Context, bucketName string, objectName string, params *PutObjectVersionTagsParams, body PutObjectVersionTagsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutObjectVersionTagsResponse, error)

	// ObjectStorageBucketsDestroy request
	ObjectStorageBucketsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *ObjectStorageBucketsDestroyParams, reqEditors ...RequestEditorFn) (*ObjectStorageBucketsDestroyResponse, error)

	// ObjectStorageBucketsRetrieve request
	ObjectStorageBucketsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *ObjectStorageBucketsRetrieveParams, reqEditors ...RequestEditorFn) (*ObjectStorageBucketsRetrieveResponse, error)

	// S3KeyList request
	S3KeyListWithResponse(ctx context.Context, params *S3KeyListParams, reqEditors ...RequestEditorFn) (*S3KeyListResponse, error)

	// S3KeyCreate request
	S3KeyCreateWithResponse(ctx context.Context, params *S3KeyCreateParams, reqEditors ...RequestEditorFn) (*S3KeyCreateResponse, error)

	// S3KeyDelete request
	S3KeyDeleteWithResponse(ctx context.Context, accessKey string, params *S3KeyDeleteParams, reqEditors ...RequestEditorFn) (*S3KeyDeleteResponse, error)

	// StorageClassList request
	StorageClassListWithResponse(ctx context.Context, params *StorageClassListParams, reqEditors ...RequestEditorFn) (*StorageClassListResponse, error)

	// OrganizationRegionsList request
	OrganizationRegionsListWithResponse(ctx context.Context, params *OrganizationRegionsListParams, reqEditors ...RequestEditorFn) (*OrganizationRegionsListResponse, error)

	// OrganizationRegionsRetrieve request
	OrganizationRegionsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*OrganizationRegionsRetrieveResponse, error)

	// OrganizationZonesList request
	OrganizationZonesListWithResponse(ctx context.Context, params *OrganizationZonesListParams, reqEditors ...RequestEditorFn) (*OrganizationZonesListResponse, error)

	// OrganizationZonesRetrieve request
	OrganizationZonesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*OrganizationZonesRetrieveResponse, error)

	// PlanTemplateObjectStoragesList request
	PlanTemplateObjectStoragesListWithResponse(ctx context.Context, params *PlanTemplateObjectStoragesListParams, reqEditors ...RequestEditorFn) (*PlanTemplateObjectStoragesListResponse, error)

	// PlanTemplateObjectStoragesRetrieve request
	PlanTemplateObjectStoragesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PlanTemplateObjectStoragesRetrieveResponse, error)

	// PlanTemplateServersList request
	PlanTemplateServersListWithResponse(ctx context.Context, params *PlanTemplateServersListParams, reqEditors ...RequestEditorFn) (*PlanTemplateServersListResponse, error)

	// PlanTemplateServersRetrieve request
	PlanTemplateServersRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PlanTemplateServersRetrieveResponse, error)

	// PlanTemplateVolumesList request
	PlanTemplateVolumesListWithResponse(ctx context.Context, params *PlanTemplateVolumesListParams, reqEditors ...RequestEditorFn) (*PlanTemplateVolumesListResponse, error)

	// PlanTemplateVolumesRetrieve request
	PlanTemplateVolumesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PlanTemplateVolumesRetrieveResponse, error)

	// PlanCustomersCacheInfoCreate request with any body
	PlanCustomersCacheInfoCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PlanCustomersCacheInfoCreateResponse, error)

	PlanCustomersCacheInfoCreateWithResponse(ctx context.Context, body PlanCustomersCacheInfoCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PlanCustomersCacheInfoCreateResponse, error)

	PlanCustomersCacheInfoCreateWithFormdataBodyWithResponse(ctx context.Context, body PlanCustomersCacheInfoCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PlanCustomersCacheInfoCreateResponse, error)

	// PlanCustomersCustomerTypesList request
	PlanCustomersCustomerTypesListWithResponse(ctx context.Context, params *PlanCustomersCustomerTypesListParams, reqEditors ...RequestEditorFn) (*PlanCustomersCustomerTypesListResponse, error)

	// PlanCustomersDistrictsList request
	PlanCustomersDistrictsListWithResponse(ctx context.Context, params *PlanCustomersDistrictsListParams, reqEditors ...RequestEditorFn) (*PlanCustomersDistrictsListResponse, error)

	// PlanCustomersGetInfoRetrieve request
	PlanCustomersGetInfoRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PlanCustomersGetInfoRetrieveResponse, error)

	// PlanCustomersGroupTypesList request
	PlanCustomersGroupTypesListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PlanCustomersGroupTypesListResponse, error)

	// PlanCustomersPrecinctsList request
	PlanCustomersPrecinctsListWithResponse(ctx context.Context, params *PlanCustomersPrecinctsListParams, reqEditors ...RequestEditorFn) (*PlanCustomersPrecinctsListResponse, error)

	// PlanCustomersProvincesList request
	PlanCustomersProvincesListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PlanCustomersProvincesListResponse, error)

	// PlanCustomersUploadIdCreate request with any body
	PlanCustomersUploadIdCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PlanCustomersUploadIdCreateResponse, error)

	PlanCustomersUploadIdCreateWithResponse(ctx context.Context, body PlanCustomersUploadIdCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PlanCustomersUploadIdCreateResponse, error)

	PlanCustomersUploadIdCreateWithFormdataBodyWithResponse(ctx context.Context, body PlanCustomersUploadIdCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PlanCustomersUploadIdCreateResponse, error)

	// PlanObjectStoragesList request
	PlanObjectStoragesListWithResponse(ctx context.Context, params *PlanObjectStoragesListParams, reqEditors ...RequestEditorFn) (*PlanObjectStoragesListResponse, error)

	// PlanObjectStoragesRetrieve request
	PlanObjectStoragesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *PlanObjectStoragesRetrieveParams, reqEditors ...RequestEditorFn) (*PlanObjectStoragesRetrieveResponse, error)

	// PlanOrdersList request
	PlanOrdersListWithResponse(ctx context.Context, params *PlanOrdersListParams, reqEditors ...RequestEditorFn) (*PlanOrdersListResponse, error)

	// PlanOrdersCreate request with any body
	PlanOrdersCreateWithBodyWithResponse(ctx context.Context, params *PlanOrdersCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PlanOrdersCreateResponse, error)

	PlanOrdersCreateWithResponse(ctx context.Context, params *PlanOrdersCreateParams, body PlanOrdersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PlanOrdersCreateResponse, error)

	PlanOrdersCreateWithFormdataBodyWithResponse(ctx context.Context, params *PlanOrdersCreateParams, body PlanOrdersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PlanOrdersCreateResponse, error)

	// PlanOrdersCalculatePriceCreate request with any body
	PlanOrdersCalculatePriceCreateWithBodyWithResponse(ctx context.Context, params *PlanOrdersCalculatePriceCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PlanOrdersCalculatePriceCreateResponse, error)

	PlanOrdersCalculatePriceCreateWithResponse(ctx context.Context, params *PlanOrdersCalculatePriceCreateParams, body PlanOrdersCalculatePriceCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PlanOrdersCalculatePriceCreateResponse, error)

	PlanOrdersCalculatePriceCreateWithFormdataBodyWithResponse(ctx context.Context, params *PlanOrdersCalculatePriceCreateParams, body PlanOrdersCalculatePriceCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PlanOrdersCalculatePriceCreateResponse, error)

	// PlanOrdersPreviewContractCreate request with any body
	PlanOrdersPreviewContractCreateWithBodyWithResponse(ctx context.Context, params *PlanOrdersPreviewContractCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PlanOrdersPreviewContractCreateResponse, error)

	PlanOrdersPreviewContractCreateWithResponse(ctx context.Context, params *PlanOrdersPreviewContractCreateParams, body PlanOrdersPreviewContractCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PlanOrdersPreviewContractCreateResponse, error)

	PlanOrdersPreviewContractCreateWithFormdataBodyWithResponse(ctx context.Context, params *PlanOrdersPreviewContractCreateParams, body PlanOrdersPreviewContractCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PlanOrdersPreviewContractCreateResponse, error)

	// PlanOrdersRetrieve request
	PlanOrdersRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *PlanOrdersRetrieveParams, reqEditors ...RequestEditorFn) (*PlanOrdersRetrieveResponse, error)

	// PlanOrdersCancelCreate request
	PlanOrdersCancelCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *PlanOrdersCancelCreateParams, reqEditors ...RequestEditorFn) (*PlanOrdersCancelCreateResponse, error)

	// PlanOrdersInvoiceRetrieve request
	PlanOrdersInvoiceRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *PlanOrdersInvoiceRetrieveParams, reqEditors ...RequestEditorFn) (*PlanOrdersInvoiceRetrieveResponse, error)

	// PlanServersList request
	PlanServersListWithResponse(ctx context.Context, params *PlanServersListParams, reqEditors ...RequestEditorFn) (*PlanServersListResponse, error)

	// PlanServersRetrieve request
	PlanServersRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *PlanServersRetrieveParams, reqEditors ...RequestEditorFn) (*PlanServersRetrieveResponse, error)

	// PlanVolumesList request
	PlanVolumesListWithResponse(ctx context.Context, params *PlanVolumesListParams, reqEditors ...RequestEditorFn) (*PlanVolumesListResponse, error)

	// PlanVolumesRetrieve request
	PlanVolumesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *PlanVolumesRetrieveParams, reqEditors ...RequestEditorFn) (*PlanVolumesRetrieveResponse, error)

	// SecretManagerSecretsList request
	SecretManagerSecretsListWithResponse(ctx context.Context, params *SecretManagerSecretsListParams, reqEditors ...RequestEditorFn) (*SecretManagerSecretsListResponse, error)

	// SecretManagerSecretsCreate request with any body
	SecretManagerSecretsCreateWithBodyWithResponse(ctx context.Context, params *SecretManagerSecretsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SecretManagerSecretsCreateResponse, error)

	SecretManagerSecretsCreateWithResponse(ctx context.Context, params *SecretManagerSecretsCreateParams, body SecretManagerSecretsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SecretManagerSecretsCreateResponse, error)

	SecretManagerSecretsCreateWithFormdataBodyWithResponse(ctx context.Context, params *SecretManagerSecretsCreateParams, body SecretManagerSecretsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SecretManagerSecretsCreateResponse, error)

	// SecretManagerSecretsDestroy request
	SecretManagerSecretsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsDestroyParams, reqEditors ...RequestEditorFn) (*SecretManagerSecretsDestroyResponse, error)

	// SecretManagerSecretsRetrieve request
	SecretManagerSecretsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsRetrieveParams, reqEditors ...RequestEditorFn) (*SecretManagerSecretsRetrieveResponse, error)

	// SecretManagerSecretsPartialUpdate request with any body
	SecretManagerSecretsPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SecretManagerSecretsPartialUpdateResponse, error)

	SecretManagerSecretsPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsPartialUpdateParams, body SecretManagerSecretsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SecretManagerSecretsPartialUpdateResponse, error)

	SecretManagerSecretsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsPartialUpdateParams, body SecretManagerSecretsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SecretManagerSecretsPartialUpdateResponse, error)

	// SecretManagerSecretsUpdate request with any body
	SecretManagerSecretsUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SecretManagerSecretsUpdateResponse, error)

	SecretManagerSecretsUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsUpdateParams, body SecretManagerSecretsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SecretManagerSecretsUpdateResponse, error)

	SecretManagerSecretsUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsUpdateParams, body SecretManagerSecretsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SecretManagerSecretsUpdateResponse, error)

	// SecretManagerSecretsMetadataRetrieve request
	SecretManagerSecretsMetadataRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsMetadataRetrieveParams, reqEditors ...RequestEditorFn) (*SecretManagerSecretsMetadataRetrieveResponse, error)

	// SecretManagerSecretsMetadataCreate request with any body
	SecretManagerSecretsMetadataCreateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsMetadataCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SecretManagerSecretsMetadataCreateResponse, error)

	SecretManagerSecretsMetadataCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsMetadataCreateParams, body SecretManagerSecretsMetadataCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SecretManagerSecretsMetadataCreateResponse, error)

	SecretManagerSecretsMetadataCreateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsMetadataCreateParams, body SecretManagerSecretsMetadataCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SecretManagerSecretsMetadataCreateResponse, error)

	// ServiceCatalogFavoriteServicesList request
	ServiceCatalogFavoriteServicesListWithResponse(ctx context.Context, params *ServiceCatalogFavoriteServicesListParams, reqEditors ...RequestEditorFn) (*ServiceCatalogFavoriteServicesListResponse, error)

	// ServiceCatalogFavoriteServicesCreate request with any body
	ServiceCatalogFavoriteServicesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ServiceCatalogFavoriteServicesCreateResponse, error)

	ServiceCatalogFavoriteServicesCreateWithResponse(ctx context.Context, body ServiceCatalogFavoriteServicesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ServiceCatalogFavoriteServicesCreateResponse, error)

	ServiceCatalogFavoriteServicesCreateWithFormdataBodyWithResponse(ctx context.Context, body ServiceCatalogFavoriteServicesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ServiceCatalogFavoriteServicesCreateResponse, error)

	// ServiceCatalogFavoriteServicesDestroy request
	ServiceCatalogFavoriteServicesDestroyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*ServiceCatalogFavoriteServicesDestroyResponse, error)

	// ServiceCatalogFavoriteServicesRetrieve request
	ServiceCatalogFavoriteServicesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*ServiceCatalogFavoriteServicesRetrieveResponse, error)

	// ServiceCatalogServicesList request
	ServiceCatalogServicesListWithResponse(ctx context.Context, params *ServiceCatalogServicesListParams, reqEditors ...RequestEditorFn) (*ServiceCatalogServicesListResponse, error)

	// ServiceCatalogServicesCreate request with any body
	ServiceCatalogServicesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ServiceCatalogServicesCreateResponse, error)

	ServiceCatalogServicesCreateWithResponse(ctx context.Context, body ServiceCatalogServicesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ServiceCatalogServicesCreateResponse, error)

	ServiceCatalogServicesCreateWithFormdataBodyWithResponse(ctx context.Context, body ServiceCatalogServicesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ServiceCatalogServicesCreateResponse, error)

	// ServiceCatalogServicesUsingServicesRetrieve request
	ServiceCatalogServicesUsingServicesRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ServiceCatalogServicesUsingServicesRetrieveResponse, error)

	// ServiceCatalogServicesDestroy request
	ServiceCatalogServicesDestroyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*ServiceCatalogServicesDestroyResponse, error)

	// ServiceCatalogServicesRetrieve request
	ServiceCatalogServicesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*ServiceCatalogServicesRetrieveResponse, error)

	// ServiceCatalogServicesPartialUpdate request with any body
	ServiceCatalogServicesPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ServiceCatalogServicesPartialUpdateResponse, error)

	ServiceCatalogServicesPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body ServiceCatalogServicesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ServiceCatalogServicesPartialUpdateResponse, error)

	ServiceCatalogServicesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body ServiceCatalogServicesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ServiceCatalogServicesPartialUpdateResponse, error)

	// ServiceCatalogServicesUpdate request with any body
	ServiceCatalogServicesUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ServiceCatalogServicesUpdateResponse, error)

	ServiceCatalogServicesUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body ServiceCatalogServicesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ServiceCatalogServicesUpdateResponse, error)

	ServiceCatalogServicesUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body ServiceCatalogServicesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ServiceCatalogServicesUpdateResponse, error)

	// SupportQuestionsList request
	SupportQuestionsListWithResponse(ctx context.Context, params *SupportQuestionsListParams, reqEditors ...RequestEditorFn) (*SupportQuestionsListResponse, error)

	// SupportQuestionsCreate request with any body
	SupportQuestionsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SupportQuestionsCreateResponse, error)

	SupportQuestionsCreateWithResponse(ctx context.Context, body SupportQuestionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SupportQuestionsCreateResponse, error)

	SupportQuestionsCreateWithFormdataBodyWithResponse(ctx context.Context, body SupportQuestionsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SupportQuestionsCreateResponse, error)

	// SupportQuestionsRetrieve request
	SupportQuestionsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*SupportQuestionsRetrieveResponse, error)

	// SupportQuestionsPartialUpdate request with any body
	SupportQuestionsPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SupportQuestionsPartialUpdateResponse, error)

	SupportQuestionsPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body SupportQuestionsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SupportQuestionsPartialUpdateResponse, error)

	SupportQuestionsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body SupportQuestionsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SupportQuestionsPartialUpdateResponse, error)

	// TenantProjectUsersList request
	TenantProjectUsersListWithResponse(ctx context.Context, params *TenantProjectUsersListParams, reqEditors ...RequestEditorFn) (*TenantProjectUsersListResponse, error)

	// TenantProjectUsersDestroy request
	TenantProjectUsersDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *TenantProjectUsersDestroyParams, reqEditors ...RequestEditorFn) (*TenantProjectUsersDestroyResponse, error)

	// TenantProjectUsersRetrieve request
	TenantProjectUsersRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *TenantProjectUsersRetrieveParams, reqEditors ...RequestEditorFn) (*TenantProjectUsersRetrieveResponse, error)

	// TenantProjectUsersPartialUpdate request with any body
	TenantProjectUsersPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *TenantProjectUsersPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TenantProjectUsersPartialUpdateResponse, error)

	TenantProjectUsersPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *TenantProjectUsersPartialUpdateParams, body TenantProjectUsersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TenantProjectUsersPartialUpdateResponse, error)

	TenantProjectUsersPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *TenantProjectUsersPartialUpdateParams, body TenantProjectUsersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TenantProjectUsersPartialUpdateResponse, error)

	// TenantProjectUsersUpdate request with any body
	TenantProjectUsersUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *TenantProjectUsersUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TenantProjectUsersUpdateResponse, error)

	TenantProjectUsersUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *TenantProjectUsersUpdateParams, body TenantProjectUsersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TenantProjectUsersUpdateResponse, error)

	TenantProjectUsersUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *TenantProjectUsersUpdateParams, body TenantProjectUsersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TenantProjectUsersUpdateResponse, error)

	// TenantProjectsList request
	TenantProjectsListWithResponse(ctx context.Context, params *TenantProjectsListParams, reqEditors ...RequestEditorFn) (*TenantProjectsListResponse, error)

	// TenantProjectsCreate request with any body
	TenantProjectsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TenantProjectsCreateResponse, error)

	TenantProjectsCreateWithResponse(ctx context.Context, body TenantProjectsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TenantProjectsCreateResponse, error)

	TenantProjectsCreateWithFormdataBodyWithResponse(ctx context.Context, body TenantProjectsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TenantProjectsCreateResponse, error)

	// TenantProjectsDestroy request
	TenantProjectsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*TenantProjectsDestroyResponse, error)

	// TenantProjectsRetrieve request
	TenantProjectsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*TenantProjectsRetrieveResponse, error)

	// TenantProjectsPartialUpdate request with any body
	TenantProjectsPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TenantProjectsPartialUpdateResponse, error)

	TenantProjectsPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body TenantProjectsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TenantProjectsPartialUpdateResponse, error)

	TenantProjectsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body TenantProjectsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TenantProjectsPartialUpdateResponse, error)

	// TenantProjectsUpdate request with any body
	TenantProjectsUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TenantProjectsUpdateResponse, error)

	TenantProjectsUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body TenantProjectsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TenantProjectsUpdateResponse, error)

	TenantProjectsUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body TenantProjectsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TenantProjectsUpdateResponse, error)

	// TenantProjectsServicesRetrieve request
	TenantProjectsServicesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*TenantProjectsServicesRetrieveResponse, error)

	// TenantUsersList request
	TenantUsersListWithResponse(ctx context.Context, params *TenantUsersListParams, reqEditors ...RequestEditorFn) (*TenantUsersListResponse, error)

	// TenantUsersCurrentUserRetrieve request
	TenantUsersCurrentUserRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TenantUsersCurrentUserRetrieveResponse, error)

	// TenantUsersRetrieve request
	TenantUsersRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*TenantUsersRetrieveResponse, error)

	// TenantUsersPartialUpdate request with any body
	TenantUsersPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TenantUsersPartialUpdateResponse, error)

	TenantUsersPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body TenantUsersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TenantUsersPartialUpdateResponse, error)

	TenantUsersPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body TenantUsersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TenantUsersPartialUpdateResponse, error)

	// TenantUsersUpdate request with any body
	TenantUsersUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TenantUsersUpdateResponse, error)

	TenantUsersUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body TenantUsersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TenantUsersUpdateResponse, error)

	TenantUsersUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body TenantUsersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TenantUsersUpdateResponse, error)
}

type AlarmAlarmsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedAlarmList
}

// Status returns HTTPResponse.Status
func (r AlarmAlarmsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlarmAlarmsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlarmAlarmsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Alarm
}

// Status returns HTTPResponse.Status
func (r AlarmAlarmsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlarmAlarmsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlarmAlarmsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AlarmAlarmsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlarmAlarmsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlarmAlarmsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Alarm
}

// Status returns HTTPResponse.Status
func (r AlarmAlarmsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlarmAlarmsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlarmAlarmsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AlarmUpdate
}

// Status returns HTTPResponse.Status
func (r AlarmAlarmsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlarmAlarmsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlarmAlarmsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Alarm
}

// Status returns HTTPResponse.Status
func (r AlarmAlarmsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlarmAlarmsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BccsOrdersPurchaseCallbackCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BccsOrdersPurchaseCallbackCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BccsOrdersPurchaseCallbackCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BccsPlansBackupListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedBCCSVolumeBackupPlanList
}

// Status returns HTTPResponse.Status
func (r BccsPlansBackupListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BccsPlansBackupListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BccsPlansBackupCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BCCSVolumeBackupPlan
}

// Status returns HTTPResponse.Status
func (r BccsPlansBackupCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BccsPlansBackupCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BccsPlansBackupRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BCCSVolumeBackupPlan
}

// Status returns HTTPResponse.Status
func (r BccsPlansBackupRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BccsPlansBackupRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BccsPlansContainerRegistryListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedBCCSCRPlanList
}

// Status returns HTTPResponse.Status
func (r BccsPlansContainerRegistryListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BccsPlansContainerRegistryListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BccsPlansContainerRegistryCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BCCSCRPlan
}

// Status returns HTTPResponse.Status
func (r BccsPlansContainerRegistryCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BccsPlansContainerRegistryCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BccsPlansContainerRegistryRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BCCSCRPlan
}

// Status returns HTTPResponse.Status
func (r BccsPlansContainerRegistryRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BccsPlansContainerRegistryRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BccsPlansFileStorageListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedBCCSFilesystemPlanList
}

// Status returns HTTPResponse.Status
func (r BccsPlansFileStorageListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BccsPlansFileStorageListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BccsPlansFileStorageCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BCCSFilesystemPlan
}

// Status returns HTTPResponse.Status
func (r BccsPlansFileStorageCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BccsPlansFileStorageCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BccsPlansFileStorageRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BCCSFilesystemPlan
}

// Status returns HTTPResponse.Status
func (r BccsPlansFileStorageRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BccsPlansFileStorageRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BccsPlansK8sClusterListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedBCCSK8SClusterPlanList
}

// Status returns HTTPResponse.Status
func (r BccsPlansK8sClusterListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BccsPlansK8sClusterListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BccsPlansK8sClusterCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BCCSK8SClusterPlan
}

// Status returns HTTPResponse.Status
func (r BccsPlansK8sClusterCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BccsPlansK8sClusterCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BccsPlansK8sClusterRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BCCSK8SClusterPlan
}

// Status returns HTTPResponse.Status
func (r BccsPlansK8sClusterRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BccsPlansK8sClusterRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BccsPlansLoadBalancingListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedBCCSLoadBalancerPlanList
}

// Status returns HTTPResponse.Status
func (r BccsPlansLoadBalancingListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BccsPlansLoadBalancingListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BccsPlansLoadBalancingCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BCCSLoadBalancerPlan
}

// Status returns HTTPResponse.Status
func (r BccsPlansLoadBalancingCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BccsPlansLoadBalancingCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BccsPlansLoadBalancingRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BCCSLoadBalancerPlan
}

// Status returns HTTPResponse.Status
func (r BccsPlansLoadBalancingRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BccsPlansLoadBalancingRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BccsPlansObjectStorageListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedBCCSObjectStoragePlanList
}

// Status returns HTTPResponse.Status
func (r BccsPlansObjectStorageListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BccsPlansObjectStorageListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BccsPlansObjectStorageCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BCCSObjectStoragePlan
}

// Status returns HTTPResponse.Status
func (r BccsPlansObjectStorageCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BccsPlansObjectStorageCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BccsPlansObjectStorageRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BCCSObjectStoragePlan
}

// Status returns HTTPResponse.Status
func (r BccsPlansObjectStorageRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BccsPlansObjectStorageRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BccsPlansServerListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedBCCSServerPlanList
}

// Status returns HTTPResponse.Status
func (r BccsPlansServerListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BccsPlansServerListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BccsPlansServerCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BCCSServerPlan
}

// Status returns HTTPResponse.Status
func (r BccsPlansServerCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BccsPlansServerCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BccsPlansServerRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BCCSServerPlan
}

// Status returns HTTPResponse.Status
func (r BccsPlansServerRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BccsPlansServerRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BccsPlansVolumeListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedBCCSVolumePlanList
}

// Status returns HTTPResponse.Status
func (r BccsPlansVolumeListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BccsPlansVolumeListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BccsPlansVolumeCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BCCSVolumePlan
}

// Status returns HTTPResponse.Status
func (r BccsPlansVolumeCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BccsPlansVolumeCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BccsPlansVolumeRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BCCSVolumePlan
}

// Status returns HTTPResponse.Status
func (r BccsPlansVolumeRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BccsPlansVolumeRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BccsUsersListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedBCCSUserList
}

// Status returns HTTPResponse.Status
func (r BccsUsersListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BccsUsersListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BccsUsersCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BCCSUser
}

// Status returns HTTPResponse.Status
func (r BccsUsersCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BccsUsersCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BccsUsersRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BCCSUser
}

// Status returns HTTPResponse.Status
func (r BccsUsersRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BccsUsersRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BccsUsersProjectsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedProjectList
}

// Status returns HTTPResponse.Status
func (r BccsUsersProjectsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BccsUsersProjectsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BccsVolumesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedVolumeList
}

// Status returns HTTPResponse.Status
func (r BccsVolumesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BccsVolumesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContainerRegistryCliSecretRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CLISecret
}

// Status returns HTTPResponse.Status
func (r ContainerRegistryCliSecretRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContainerRegistryCliSecretRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContainerRegistryImagesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedContainerImageList
}

// Status returns HTTPResponse.Status
func (r ContainerRegistryImagesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContainerRegistryImagesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContainerRegistryImagesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ContainerRegistryImagesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContainerRegistryImagesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContainerRegistryImagesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainerImage
}

// Status returns HTTPResponse.Status
func (r ContainerRegistryImagesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContainerRegistryImagesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContainerRegistryImagesArtifactsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedContainerImageArtifactList
}

// Status returns HTTPResponse.Status
func (r ContainerRegistryImagesArtifactsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContainerRegistryImagesArtifactsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContainerRegistryImagesArtifactsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ContainerRegistryImagesArtifactsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContainerRegistryImagesArtifactsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContainerRegistryImagesArtifactsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainerImageArtifact
}

// Status returns HTTPResponse.Status
func (r ContainerRegistryImagesArtifactsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContainerRegistryImagesArtifactsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContainerRegistryImagesArtifactsBuildHistoryRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArtifactBuildHistory
}

// Status returns HTTPResponse.Status
func (r ContainerRegistryImagesArtifactsBuildHistoryRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContainerRegistryImagesArtifactsBuildHistoryRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContainerRegistryImagesArtifactsScanCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ContainerRegistryImagesArtifactsScanCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContainerRegistryImagesArtifactsScanCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContainerRegistryImagesArtifactsTagsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedContainerArtifactTagList
}

// Status returns HTTPResponse.Status
func (r ContainerRegistryImagesArtifactsTagsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContainerRegistryImagesArtifactsTagsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContainerRegistryImagesArtifactsTagsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ContainerRegistryImagesArtifactsTagsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContainerRegistryImagesArtifactsTagsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContainerRegistryImagesArtifactsVulnerabilitiesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArtifactVulnerability
}

// Status returns HTTPResponse.Status
func (r ContainerRegistryImagesArtifactsVulnerabilitiesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContainerRegistryImagesArtifactsVulnerabilitiesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContainerRegistryLogsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedProjectLogList
}

// Status returns HTTPResponse.Status
func (r ContainerRegistryLogsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContainerRegistryLogsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContainerRegistryQuotaRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectQuota
}

// Status returns HTTPResponse.Status
func (r ContainerRegistryQuotaRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContainerRegistryQuotaRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DbaasDbInstanceBackupsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDBInstanceBackupList
}

// Status returns HTTPResponse.Status
func (r DbaasDbInstanceBackupsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DbaasDbInstanceBackupsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DbaasDbInstanceBackupsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DBInstanceBackup
}

// Status returns HTTPResponse.Status
func (r DbaasDbInstanceBackupsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DbaasDbInstanceBackupsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DbaasDbInstanceBackupsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DbaasDbInstanceBackupsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DbaasDbInstanceBackupsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DbaasDbInstanceBackupsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DBInstanceBackup
}

// Status returns HTTPResponse.Status
func (r DbaasDbInstanceBackupsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DbaasDbInstanceBackupsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DbaasDbInstancesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDBInstanceList
}

// Status returns HTTPResponse.Status
func (r DbaasDbInstancesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DbaasDbInstancesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DbaasDbInstancesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DBInstance
}

// Status returns HTTPResponse.Status
func (r DbaasDbInstancesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DbaasDbInstancesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DbaasDbInstancesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DbaasDbInstancesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DbaasDbInstancesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DbaasDbInstancesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DBInstance
}

// Status returns HTTPResponse.Status
func (r DbaasDbInstancesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DbaasDbInstancesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DbaasDbInstancesExtendVolumeSizePartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DbaasDbInstancesExtendVolumeSizePartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DbaasDbInstancesExtendVolumeSizePartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DbaasDbInstancesUpdateBackupPolicyPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DbaasDbInstancesUpdateBackupPolicyPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DbaasDbInstancesUpdateBackupPolicyPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DbaasDbInstancesUpdateFlavorPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DbaasDbInstancesUpdateFlavorPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DbaasDbInstancesUpdateFlavorPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DbaasDbInstancesUpdateRootPasswordPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DbaasDbInstancesUpdateRootPasswordPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DbaasDbInstancesUpdateRootPasswordPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DbaasDbVersionsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDBVersionList
}

// Status returns HTTPResponse.Status
func (r DbaasDbVersionsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DbaasDbVersionsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DbaasDbVersionsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DBVersion
}

// Status returns HTTPResponse.Status
func (r DbaasDbVersionsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DbaasDbVersionsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DbaasDbaasFlavorsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDBaaSRegionFlavorList
}

// Status returns HTTPResponse.Status
func (r DbaasDbaasFlavorsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DbaasDbaasFlavorsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DbaasDbaasFlavorsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DBaaSRegionFlavor
}

// Status returns HTTPResponse.Status
func (r DbaasDbaasFlavorsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DbaasDbaasFlavorsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DbaasDbaasRegionsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDBaaSRegionList
}

// Status returns HTTPResponse.Status
func (r DbaasDbaasRegionsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DbaasDbaasRegionsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DbaasDbaasRegionsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DBaaSRegion
}

// Status returns HTTPResponse.Status
func (r DbaasDbaasRegionsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DbaasDbaasRegionsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DbaasDbaasVolumeTypesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDBaaSRegionVolumeTypeList
}

// Status returns HTTPResponse.Status
func (r DbaasDbaasVolumeTypesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DbaasDbaasVolumeTypesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DbaasDbaasVolumeTypesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DBaaSRegionVolumeType
}

// Status returns HTTPResponse.Status
func (r DbaasDbaasVolumeTypesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DbaasDbaasVolumeTypesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DbaasDbaasZonesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDBaaSZoneList
}

// Status returns HTTPResponse.Status
func (r DbaasDbaasZonesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DbaasDbaasZonesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DbaasDbaasZonesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DBaaSZone
}

// Status returns HTTPResponse.Status
func (r DbaasDbaasZonesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DbaasDbaasZonesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DbaasFlavorMappingsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedFlavorMappingList
}

// Status returns HTTPResponse.Status
func (r DbaasFlavorMappingsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DbaasFlavorMappingsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DbaasFlavorMappingsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FlavorMapping
}

// Status returns HTTPResponse.Status
func (r DbaasFlavorMappingsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DbaasFlavorMappingsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DbaasVolumeTypeMappingsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedVolumeTypeMappingList
}

// Status returns HTTPResponse.Status
func (r DbaasVolumeTypeMappingsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DbaasVolumeTypeMappingsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DbaasVolumeTypeMappingsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VolumeTypeMapping
}

// Status returns HTTPResponse.Status
func (r DbaasVolumeTypeMappingsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DbaasVolumeTypeMappingsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraAutoScalingScalingActionListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedScalingActionList
}

// Status returns HTTPResponse.Status
func (r InfraAutoScalingScalingActionListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraAutoScalingScalingActionListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraAutoScalingScalingGroupListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedScalingGroupListList
}

// Status returns HTTPResponse.Status
func (r InfraAutoScalingScalingGroupListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraAutoScalingScalingGroupListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraAutoScalingScalingGroupCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ScalingGroup
}

// Status returns HTTPResponse.Status
func (r InfraAutoScalingScalingGroupCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraAutoScalingScalingGroupCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraAutoScalingScalingGroupMetricsSchemaRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalingGroup
}

// Status returns HTTPResponse.Status
func (r InfraAutoScalingScalingGroupMetricsSchemaRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraAutoScalingScalingGroupMetricsSchemaRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraAutoScalingScalingGroupDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraAutoScalingScalingGroupDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraAutoScalingScalingGroupDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraAutoScalingScalingGroupRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalingGroupDetail
}

// Status returns HTTPResponse.Status
func (r InfraAutoScalingScalingGroupRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraAutoScalingScalingGroupRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraAutoScalingScalingGroupPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalingGroupUpdate
}

// Status returns HTTPResponse.Status
func (r InfraAutoScalingScalingGroupPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraAutoScalingScalingGroupPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraAutoScalingScalingGroupUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalingGroupUpdate
}

// Status returns HTTPResponse.Status
func (r InfraAutoScalingScalingGroupUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraAutoScalingScalingGroupUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraAutoScalingScalingGroupMetricsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedMonitorResponseList
}

// Status returns HTTPResponse.Status
func (r InfraAutoScalingScalingGroupMetricsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraAutoScalingScalingGroupMetricsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraAutoScalingScalingPolicyListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedScalingPolicyListList
}

// Status returns HTTPResponse.Status
func (r InfraAutoScalingScalingPolicyListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraAutoScalingScalingPolicyListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraAutoScalingScalingPolicyCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ScalingPolicy
}

// Status returns HTTPResponse.Status
func (r InfraAutoScalingScalingPolicyCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraAutoScalingScalingPolicyCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraAutoScalingScalingPolicyDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraAutoScalingScalingPolicyDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraAutoScalingScalingPolicyDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraAutoScalingScalingPolicyRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalingPolicyDetail
}

// Status returns HTTPResponse.Status
func (r InfraAutoScalingScalingPolicyRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraAutoScalingScalingPolicyRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraAutoScalingScalingPolicyPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalingPolicyUpdate
}

// Status returns HTTPResponse.Status
func (r InfraAutoScalingScalingPolicyPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraAutoScalingScalingPolicyPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraAutoScalingScalingPolicyUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalingPolicyUpdate
}

// Status returns HTTPResponse.Status
func (r InfraAutoScalingScalingPolicyUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraAutoScalingScalingPolicyUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraAutoScalingScalingQueryListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedScalingQueryList
}

// Status returns HTTPResponse.Status
func (r InfraAutoScalingScalingQueryListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraAutoScalingScalingQueryListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraAutoScalingScalingQueryCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ScalingQuery
}

// Status returns HTTPResponse.Status
func (r InfraAutoScalingScalingQueryCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraAutoScalingScalingQueryCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraAutoScalingScalingQueryDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraAutoScalingScalingQueryDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraAutoScalingScalingQueryDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraAutoScalingScalingScheduleListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedScalingScheduleListList
}

// Status returns HTTPResponse.Status
func (r InfraAutoScalingScalingScheduleListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraAutoScalingScalingScheduleListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraAutoScalingScalingScheduleCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ScalingSchedule
}

// Status returns HTTPResponse.Status
func (r InfraAutoScalingScalingScheduleCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraAutoScalingScalingScheduleCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraAutoScalingScalingScheduleDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraAutoScalingScalingScheduleDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraAutoScalingScalingScheduleDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraAutoScalingScalingScheduleRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalingSchedule
}

// Status returns HTTPResponse.Status
func (r InfraAutoScalingScalingScheduleRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraAutoScalingScalingScheduleRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraAutoScalingScalingSchedulePartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalingScheduleUpdate
}

// Status returns HTTPResponse.Status
func (r InfraAutoScalingScalingSchedulePartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraAutoScalingScalingSchedulePartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraAutoScalingScalingScheduleUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalingScheduleUpdate
}

// Status returns HTTPResponse.Status
func (r InfraAutoScalingScalingScheduleUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraAutoScalingScalingScheduleUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraAutoScalingScalingServerListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedScalingServerList
}

// Status returns HTTPResponse.Status
func (r InfraAutoScalingScalingServerListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraAutoScalingScalingServerListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraCertificateListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedCertificateList
}

// Status returns HTTPResponse.Status
func (r InfraCertificateListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraCertificateListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraCertificateCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Certificate
}

// Status returns HTTPResponse.Status
func (r InfraCertificateCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraCertificateCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraCertificateDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraCertificateDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraCertificateDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraCertificateRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Certificate
}

// Status returns HTTPResponse.Status
func (r InfraCertificateRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraCertificateRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraCertificatePartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Certificate
}

// Status returns HTTPResponse.Status
func (r InfraCertificatePartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraCertificatePartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraCertificateUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Certificate
}

// Status returns HTTPResponse.Status
func (r InfraCertificateUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraCertificateUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraElasticIpsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedElasticIPList
}

// Status returns HTTPResponse.Status
func (r InfraElasticIpsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraElasticIpsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraElasticIpsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ElasticIP
}

// Status returns HTTPResponse.Status
func (r InfraElasticIpsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraElasticIpsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraElasticIpsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraElasticIpsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraElasticIpsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraElasticIpsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ElasticIP
}

// Status returns HTTPResponse.Status
func (r InfraElasticIpsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraElasticIpsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraFilesystemAccessRulesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedFilesystemAccessRuleList
}

// Status returns HTTPResponse.Status
func (r InfraFilesystemAccessRulesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraFilesystemAccessRulesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraFilesystemAccessRulesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *FilesystemAccessRule
}

// Status returns HTTPResponse.Status
func (r InfraFilesystemAccessRulesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraFilesystemAccessRulesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraFilesystemAccessRulesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraFilesystemAccessRulesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraFilesystemAccessRulesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraFilesystemAccessRulesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FilesystemAccessRule
}

// Status returns HTTPResponse.Status
func (r InfraFilesystemAccessRulesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraFilesystemAccessRulesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraFilesystemAccessRulesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FilesystemAccessRule
}

// Status returns HTTPResponse.Status
func (r InfraFilesystemAccessRulesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraFilesystemAccessRulesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraFilesystemAccessRulesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FilesystemAccessRule
}

// Status returns HTTPResponse.Status
func (r InfraFilesystemAccessRulesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraFilesystemAccessRulesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraFilesystemSnapshotPoliciesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedFilesystemSnapshotPolicyList
}

// Status returns HTTPResponse.Status
func (r InfraFilesystemSnapshotPoliciesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraFilesystemSnapshotPoliciesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraFilesystemSnapshotPoliciesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *FilesystemSnapshotPolicy
}

// Status returns HTTPResponse.Status
func (r InfraFilesystemSnapshotPoliciesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraFilesystemSnapshotPoliciesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraFilesystemSnapshotPoliciesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraFilesystemSnapshotPoliciesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraFilesystemSnapshotPoliciesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraFilesystemSnapshotPoliciesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FilesystemSnapshotPolicy
}

// Status returns HTTPResponse.Status
func (r InfraFilesystemSnapshotPoliciesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraFilesystemSnapshotPoliciesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraFilesystemSnapshotPoliciesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FilesystemSnapshotPolicyUpdate
}

// Status returns HTTPResponse.Status
func (r InfraFilesystemSnapshotPoliciesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraFilesystemSnapshotPoliciesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraFilesystemSnapshotPoliciesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FilesystemSnapshotPolicyUpdate
}

// Status returns HTTPResponse.Status
func (r InfraFilesystemSnapshotPoliciesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraFilesystemSnapshotPoliciesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraFilesystemSnapshotsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedFilesystemSnapshotList
}

// Status returns HTTPResponse.Status
func (r InfraFilesystemSnapshotsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraFilesystemSnapshotsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraFilesystemSnapshotsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *FilesystemSnapshot
}

// Status returns HTTPResponse.Status
func (r InfraFilesystemSnapshotsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraFilesystemSnapshotsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraFilesystemSnapshotsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraFilesystemSnapshotsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraFilesystemSnapshotsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraFilesystemSnapshotsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FilesystemSnapshot
}

// Status returns HTTPResponse.Status
func (r InfraFilesystemSnapshotsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraFilesystemSnapshotsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraFilesystemSnapshotsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FilesystemSnapshotUpdate
}

// Status returns HTTPResponse.Status
func (r InfraFilesystemSnapshotsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraFilesystemSnapshotsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraFilesystemSnapshotsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FilesystemSnapshotUpdate
}

// Status returns HTTPResponse.Status
func (r InfraFilesystemSnapshotsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraFilesystemSnapshotsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraFilesystemTypesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedFilesystemTypeList
}

// Status returns HTTPResponse.Status
func (r InfraFilesystemTypesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraFilesystemTypesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraFilesystemTypesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FilesystemType
}

// Status returns HTTPResponse.Status
func (r InfraFilesystemTypesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraFilesystemTypesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraFilesystemsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedFilesystemList
}

// Status returns HTTPResponse.Status
func (r InfraFilesystemsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraFilesystemsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraFilesystemsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Filesystem
}

// Status returns HTTPResponse.Status
func (r InfraFilesystemsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraFilesystemsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraFilesystemsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraFilesystemsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraFilesystemsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraFilesystemsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Filesystem
}

// Status returns HTTPResponse.Status
func (r InfraFilesystemsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraFilesystemsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraFilesystemsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FilesystemUpdate
}

// Status returns HTTPResponse.Status
func (r InfraFilesystemsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraFilesystemsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraFilesystemsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FilesystemUpdate
}

// Status returns HTTPResponse.Status
func (r InfraFilesystemsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraFilesystemsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraFilesystemsApplyPolicyCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraFilesystemsApplyPolicyCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraFilesystemsApplyPolicyCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraFilesystemsResizeCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Filesystem
}

// Status returns HTTPResponse.Status
func (r InfraFilesystemsResizeCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraFilesystemsResizeCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraFilesystemsStartMigrationCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Filesystem
}

// Status returns HTTPResponse.Status
func (r InfraFilesystemsStartMigrationCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraFilesystemsStartMigrationCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraFilesystemsUnapplyPolicyCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraFilesystemsUnapplyPolicyCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraFilesystemsUnapplyPolicyCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraFlavorsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedFlavorList
}

// Status returns HTTPResponse.Status
func (r InfraFlavorsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraFlavorsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraFlavorsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Flavor
}

// Status returns HTTPResponse.Status
func (r InfraFlavorsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraFlavorsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraFlavorsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraFlavorsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraFlavorsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraFlavorsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Flavor
}

// Status returns HTTPResponse.Status
func (r InfraFlavorsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraFlavorsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraFlavorsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FlavorUpdate
}

// Status returns HTTPResponse.Status
func (r InfraFlavorsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraFlavorsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraFlavorsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FlavorUpdate
}

// Status returns HTTPResponse.Status
func (r InfraFlavorsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraFlavorsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraImagesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedImageList
}

// Status returns HTTPResponse.Status
func (r InfraImagesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraImagesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraImagesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Image
}

// Status returns HTTPResponse.Status
func (r InfraImagesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraImagesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraImagesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraImagesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraImagesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraImagesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Image
}

// Status returns HTTPResponse.Status
func (r InfraImagesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraImagesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraImagesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImageUpdate
}

// Status returns HTTPResponse.Status
func (r InfraImagesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraImagesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraImagesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImageUpdate
}

// Status returns HTTPResponse.Status
func (r InfraImagesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraImagesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraKeypairsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedKeypairList
}

// Status returns HTTPResponse.Status
func (r InfraKeypairsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraKeypairsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraKeypairsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Keypair
}

// Status returns HTTPResponse.Status
func (r InfraKeypairsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraKeypairsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraKeypairsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraKeypairsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraKeypairsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraKeypairsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Keypair
}

// Status returns HTTPResponse.Status
func (r InfraKeypairsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraKeypairsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraKeypairsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KeypairUpdate
}

// Status returns HTTPResponse.Status
func (r InfraKeypairsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraKeypairsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraKeypairsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KeypairUpdate
}

// Status returns HTTPResponse.Status
func (r InfraKeypairsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraKeypairsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLaunchTemplateListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedLaunchTemplateDetailList
}

// Status returns HTTPResponse.Status
func (r InfraLaunchTemplateListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLaunchTemplateListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLaunchTemplateCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *LaunchTemplate
}

// Status returns HTTPResponse.Status
func (r InfraLaunchTemplateCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLaunchTemplateCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLaunchTemplateDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraLaunchTemplateDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLaunchTemplateDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLaunchTemplateRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LaunchTemplateDetail
}

// Status returns HTTPResponse.Status
func (r InfraLaunchTemplateRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLaunchTemplateRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLaunchTemplatePartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LaunchTemplate
}

// Status returns HTTPResponse.Status
func (r InfraLaunchTemplatePartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLaunchTemplatePartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLaunchTemplateUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LaunchTemplate
}

// Status returns HTTPResponse.Status
func (r InfraLaunchTemplateUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLaunchTemplateUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingL7policyListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedL7PolicyListList
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingL7policyListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingL7policyListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingL7policyCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *L7Policy
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingL7policyCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingL7policyCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingL7policyDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingL7policyDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingL7policyDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingL7policyRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *L7PolicyDetail
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingL7policyRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingL7policyRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingL7policyPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *L7PolicyUpdate
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingL7policyPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingL7policyPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingL7policyUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *L7PolicyUpdate
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingL7policyUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingL7policyUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingL7ruleListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedL7RuleListList
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingL7ruleListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingL7ruleListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingL7ruleCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *L7Rule
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingL7ruleCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingL7ruleCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingL7ruleDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingL7ruleDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingL7ruleDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingL7ruleRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *L7Rule
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingL7ruleRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingL7ruleRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingL7rulePartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *L7RuleUpdate
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingL7rulePartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingL7rulePartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingL7ruleUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *L7RuleUpdate
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingL7ruleUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingL7ruleUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingListenerListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedListenerListList
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingListenerListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingListenerListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingListenerCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Listener
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingListenerCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingListenerCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingListenerMetricsSchemaRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Listener
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingListenerMetricsSchemaRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingListenerMetricsSchemaRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingListenerDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingListenerDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingListenerDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingListenerRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListenerDetail
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingListenerRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingListenerRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingListenerPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListenerUpdate
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingListenerPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingListenerPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingListenerUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListenerUpdate
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingListenerUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingListenerUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingListenerMetricsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedMonitorResponseList
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingListenerMetricsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingListenerMetricsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingLoadBalancerListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedLoadBalancerListList
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingLoadBalancerListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingLoadBalancerListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingLoadBalancerCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *LoadBalancer
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingLoadBalancerCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingLoadBalancerCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingLoadBalancerMetricsSchemaRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LoadBalancer
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingLoadBalancerMetricsSchemaRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingLoadBalancerMetricsSchemaRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingLoadBalancerDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingLoadBalancerDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingLoadBalancerDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingLoadBalancerRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LoadBalancerDetail
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingLoadBalancerRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingLoadBalancerRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingLoadBalancerPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LoadBalancerUpdate
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingLoadBalancerPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingLoadBalancerPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingLoadBalancerUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LoadBalancerUpdate
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingLoadBalancerUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingLoadBalancerUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingLoadBalancerMetricsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedMonitorResponseList
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingLoadBalancerMetricsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingLoadBalancerMetricsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingServerGroupMemberListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedServerGroupMemberListList
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingServerGroupMemberListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingServerGroupMemberListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingServerGroupMemberCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ServerGroup
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingServerGroupMemberCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingServerGroupMemberCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingServerGroupMemberDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingServerGroupMemberDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingServerGroupMemberDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingServerGroupMemberRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerGroupMember
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingServerGroupMemberRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingServerGroupMemberRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingServerGroupMemberPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerGroupMemberUpdate
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingServerGroupMemberPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingServerGroupMemberPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingServerGroupMemberUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerGroupMemberUpdate
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingServerGroupMemberUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingServerGroupMemberUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingServerGroupListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedServerGroupListList
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingServerGroupListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingServerGroupListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingServerGroupCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ServerGroup
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingServerGroupCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingServerGroupCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingServerGroupDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingServerGroupDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingServerGroupDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingServerGroupRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerGroupDetail
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingServerGroupRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingServerGroupRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingServerGroupPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerGroupUpdate
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingServerGroupPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingServerGroupPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraLoadBalancingServerGroupUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerGroupUpdate
}

// Status returns HTTPResponse.Status
func (r InfraLoadBalancingServerGroupUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraLoadBalancingServerGroupUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraPlacementgroupsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedPlacementGroupList
}

// Status returns HTTPResponse.Status
func (r InfraPlacementgroupsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraPlacementgroupsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraPlacementgroupsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PlacementGroup
}

// Status returns HTTPResponse.Status
func (r InfraPlacementgroupsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraPlacementgroupsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraPlacementgroupsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraPlacementgroupsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraPlacementgroupsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraPlacementgroupsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlacementGroup
}

// Status returns HTTPResponse.Status
func (r InfraPlacementgroupsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraPlacementgroupsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraPlacementgroupsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlacementGroupUpdate
}

// Status returns HTTPResponse.Status
func (r InfraPlacementgroupsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraPlacementgroupsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraPlacementgroupsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlacementGroupUpdate
}

// Status returns HTTPResponse.Status
func (r InfraPlacementgroupsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraPlacementgroupsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraPrivateIpsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedPrivateIPList
}

// Status returns HTTPResponse.Status
func (r InfraPrivateIpsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraPrivateIpsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraPrivateIpsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PrivateIPCreate
}

// Status returns HTTPResponse.Status
func (r InfraPrivateIpsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraPrivateIpsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraPrivateIpsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraPrivateIpsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraPrivateIpsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraPrivateIpsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrivateIP
}

// Status returns HTTPResponse.Status
func (r InfraPrivateIpsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraPrivateIpsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraPrivateIpsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrivateIPUpdate
}

// Status returns HTTPResponse.Status
func (r InfraPrivateIpsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraPrivateIpsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraPrivateIpsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrivateIPUpdate
}

// Status returns HTTPResponse.Status
func (r InfraPrivateIpsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraPrivateIpsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraRouteTablesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedRouteTableList
}

// Status returns HTTPResponse.Status
func (r InfraRouteTablesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraRouteTablesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraRouteTablesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RouteTable
}

// Status returns HTTPResponse.Status
func (r InfraRouteTablesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraRouteTablesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraRouteTablesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraRouteTablesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraRouteTablesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraRouteTablesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RouteTable
}

// Status returns HTTPResponse.Status
func (r InfraRouteTablesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraRouteTablesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraRouteTablesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RouteTableUpdate
}

// Status returns HTTPResponse.Status
func (r InfraRouteTablesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraRouteTablesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraRouteTablesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RouteTableUpdate
}

// Status returns HTTPResponse.Status
func (r InfraRouteTablesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraRouteTablesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraRouteTablesDisableInternetAccessUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraRouteTablesDisableInternetAccessUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraRouteTablesDisableInternetAccessUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraRouteTablesEnableInternetAccessUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraRouteTablesEnableInternetAccessUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraRouteTablesEnableInternetAccessUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraRouteTablesSubnetsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedSubnetAssociateList
}

// Status returns HTTPResponse.Status
func (r InfraRouteTablesSubnetsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraRouteTablesSubnetsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraSecurityGroupRulesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedSecurityGroupRuleList
}

// Status returns HTTPResponse.Status
func (r InfraSecurityGroupRulesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraSecurityGroupRulesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraSecurityGroupRulesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SecurityGroupRule
}

// Status returns HTTPResponse.Status
func (r InfraSecurityGroupRulesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraSecurityGroupRulesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraSecurityGroupRulesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraSecurityGroupRulesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraSecurityGroupRulesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraSecurityGroupRulesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecurityGroupRule
}

// Status returns HTTPResponse.Status
func (r InfraSecurityGroupRulesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraSecurityGroupRulesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraSecurityGroupRulesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecurityGroupRuleUpdate
}

// Status returns HTTPResponse.Status
func (r InfraSecurityGroupRulesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraSecurityGroupRulesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraSecurityGroupRulesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecurityGroupRuleUpdate
}

// Status returns HTTPResponse.Status
func (r InfraSecurityGroupRulesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraSecurityGroupRulesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraSecurityGroupsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedSecurityGroupList
}

// Status returns HTTPResponse.Status
func (r InfraSecurityGroupsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraSecurityGroupsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraSecurityGroupsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SecurityGroup
}

// Status returns HTTPResponse.Status
func (r InfraSecurityGroupsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraSecurityGroupsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraSecurityGroupsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraSecurityGroupsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraSecurityGroupsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraSecurityGroupsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecurityGroup
}

// Status returns HTTPResponse.Status
func (r InfraSecurityGroupsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraSecurityGroupsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraSecurityGroupsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecurityGroupUpdate
}

// Status returns HTTPResponse.Status
func (r InfraSecurityGroupsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraSecurityGroupsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraSecurityGroupsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecurityGroupUpdate
}

// Status returns HTTPResponse.Status
func (r InfraSecurityGroupsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraSecurityGroupsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraServersListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedServerListList
}

// Status returns HTTPResponse.Status
func (r InfraServersListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraServersListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraServersCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Server
}

// Status returns HTTPResponse.Status
func (r InfraServersCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraServersCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraServersMetricsSchemaRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Server
}

// Status returns HTTPResponse.Status
func (r InfraServersMetricsSchemaRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraServersMetricsSchemaRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraServersDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraServersDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraServersDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraServersRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerDetail
}

// Status returns HTTPResponse.Status
func (r InfraServersRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraServersRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraServersPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerDetail
}

// Status returns HTTPResponse.Status
func (r InfraServersPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraServersPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraServersUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Server
}

// Status returns HTTPResponse.Status
func (r InfraServersUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraServersUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraServersActionLogRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Password
}

// Status returns HTTPResponse.Status
func (r InfraServersActionLogRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraServersActionLogRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraServersAttachEipCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraServersAttachEipCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraServersAttachEipCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraServersAttachPrivateipCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraServersAttachPrivateipCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraServersAttachPrivateipCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraServersAttachSubnetCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraServersAttachSubnetCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraServersAttachSubnetCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraServersAttachVolumeCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerVolumeAttachment
}

// Status returns HTTPResponse.Status
func (r InfraServersAttachVolumeCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraServersAttachVolumeCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraServersChangePasswordCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraServersChangePasswordCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraServersChangePasswordCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraServersConsoleLogRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Password
}

// Status returns HTTPResponse.Status
func (r InfraServersConsoleLogRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraServersConsoleLogRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraServersConsoleCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Password
}

// Status returns HTTPResponse.Status
func (r InfraServersConsoleCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraServersConsoleCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraServersDeleteCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraServersDeleteCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraServersDeleteCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraServersDetachEipCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraServersDetachEipCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraServersDetachEipCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraServersDetachPrivateIpCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraServersDetachPrivateIpCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraServersDetachPrivateIpCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraServersDetachVolumeCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraServersDetachVolumeCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraServersDetachVolumeCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraServersMetricsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Server
}

// Status returns HTTPResponse.Status
func (r InfraServersMetricsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraServersMetricsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraServersResizeCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraServersResizeCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraServersResizeCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraServersStartCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraServersStartCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraServersStartCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraServersStopCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraServersStopCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraServersStopCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraSnapshotpolicyListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedSnapshotPolicyList
}

// Status returns HTTPResponse.Status
func (r InfraSnapshotpolicyListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraSnapshotpolicyListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraSnapshotpolicyCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SnapshotPolicy
}

// Status returns HTTPResponse.Status
func (r InfraSnapshotpolicyCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraSnapshotpolicyCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraSnapshotpolicyDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraSnapshotpolicyDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraSnapshotpolicyDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraSnapshotpolicyRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SnapshotPolicy
}

// Status returns HTTPResponse.Status
func (r InfraSnapshotpolicyRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraSnapshotpolicyRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraSnapshotpolicyPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SnapshotPolicyUpdate
}

// Status returns HTTPResponse.Status
func (r InfraSnapshotpolicyPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraSnapshotpolicyPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraSnapshotpolicyUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SnapshotPolicyUpdate
}

// Status returns HTTPResponse.Status
func (r InfraSnapshotpolicyUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraSnapshotpolicyUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraSnapshotsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedSnapshotList
}

// Status returns HTTPResponse.Status
func (r InfraSnapshotsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraSnapshotsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraSnapshotsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Snapshot
}

// Status returns HTTPResponse.Status
func (r InfraSnapshotsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraSnapshotsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraSnapshotsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraSnapshotsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraSnapshotsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraSnapshotsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Snapshot
}

// Status returns HTTPResponse.Status
func (r InfraSnapshotsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraSnapshotsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraSnapshotsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SnapshotUpdate
}

// Status returns HTTPResponse.Status
func (r InfraSnapshotsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraSnapshotsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraSnapshotsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SnapshotUpdate
}

// Status returns HTTPResponse.Status
func (r InfraSnapshotsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraSnapshotsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraSubnetsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedSubnetList
}

// Status returns HTTPResponse.Status
func (r InfraSubnetsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraSubnetsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraSubnetsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SubnetCreate
}

// Status returns HTTPResponse.Status
func (r InfraSubnetsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraSubnetsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraSubnetsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraSubnetsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraSubnetsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraSubnetsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Subnet
}

// Status returns HTTPResponse.Status
func (r InfraSubnetsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraSubnetsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraSubnetsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubnetUpdate
}

// Status returns HTTPResponse.Status
func (r InfraSubnetsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraSubnetsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraSubnetsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubnetUpdate
}

// Status returns HTTPResponse.Status
func (r InfraSubnetsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraSubnetsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraVolumeBackupPoliciesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedVolumeBackupPolicyList
}

// Status returns HTTPResponse.Status
func (r InfraVolumeBackupPoliciesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraVolumeBackupPoliciesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraVolumeBackupPoliciesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *VolumeBackupPolicy
}

// Status returns HTTPResponse.Status
func (r InfraVolumeBackupPoliciesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraVolumeBackupPoliciesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraVolumeBackupPoliciesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraVolumeBackupPoliciesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraVolumeBackupPoliciesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraVolumeBackupPoliciesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VolumeBackupPolicy
}

// Status returns HTTPResponse.Status
func (r InfraVolumeBackupPoliciesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraVolumeBackupPoliciesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraVolumeBackupPoliciesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VolumeBackupPolicyUpdate
}

// Status returns HTTPResponse.Status
func (r InfraVolumeBackupPoliciesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraVolumeBackupPoliciesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraVolumeBackupPoliciesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VolumeBackupPolicyUpdate
}

// Status returns HTTPResponse.Status
func (r InfraVolumeBackupPoliciesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraVolumeBackupPoliciesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraVolumeBackupsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedVolumeBackupList
}

// Status returns HTTPResponse.Status
func (r InfraVolumeBackupsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraVolumeBackupsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraVolumeBackupsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *VolumeBackup
}

// Status returns HTTPResponse.Status
func (r InfraVolumeBackupsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraVolumeBackupsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraVolumeBackupsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraVolumeBackupsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraVolumeBackupsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraVolumeBackupsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VolumeBackup
}

// Status returns HTTPResponse.Status
func (r InfraVolumeBackupsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraVolumeBackupsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraVolumeBackupsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VolumeBackupUpdate
}

// Status returns HTTPResponse.Status
func (r InfraVolumeBackupsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraVolumeBackupsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraVolumeBackupsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VolumeBackupUpdate
}

// Status returns HTTPResponse.Status
func (r InfraVolumeBackupsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraVolumeBackupsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraVolumeBackupsRestoreCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraVolumeBackupsRestoreCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraVolumeBackupsRestoreCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraVolumeTypeListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedVolumeTypeList
}

// Status returns HTTPResponse.Status
func (r InfraVolumeTypeListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraVolumeTypeListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraVolumeTypeCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *VolumeType
}

// Status returns HTTPResponse.Status
func (r InfraVolumeTypeCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraVolumeTypeCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraVolumeTypeDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraVolumeTypeDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraVolumeTypeDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraVolumeTypeRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VolumeType
}

// Status returns HTTPResponse.Status
func (r InfraVolumeTypeRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraVolumeTypeRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraVolumeTypePartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VolumeTypeUpdate
}

// Status returns HTTPResponse.Status
func (r InfraVolumeTypePartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraVolumeTypePartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraVolumeTypeUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VolumeTypeUpdate
}

// Status returns HTTPResponse.Status
func (r InfraVolumeTypeUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraVolumeTypeUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraVolumesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedVolumeList
}

// Status returns HTTPResponse.Status
func (r InfraVolumesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraVolumesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraVolumesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Volume
}

// Status returns HTTPResponse.Status
func (r InfraVolumesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraVolumesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraVolumesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraVolumesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraVolumesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraVolumesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Volume
}

// Status returns HTTPResponse.Status
func (r InfraVolumesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraVolumesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraVolumesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VolumeUpdate
}

// Status returns HTTPResponse.Status
func (r InfraVolumesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraVolumesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraVolumesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VolumeUpdate
}

// Status returns HTTPResponse.Status
func (r InfraVolumesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraVolumesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraVolumesApplyBackupPolicyCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraVolumesApplyBackupPolicyCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraVolumesApplyBackupPolicyCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraVolumesApplySnapshotPolicyCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraVolumesApplySnapshotPolicyCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraVolumesApplySnapshotPolicyCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraVolumesExtendCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Volume
}

// Status returns HTTPResponse.Status
func (r InfraVolumesExtendCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraVolumesExtendCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraVolumesUnapplyBackupPolicyCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraVolumesUnapplyBackupPolicyCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraVolumesUnapplyBackupPolicyCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraVolumesUnapplySnapshotPolicyCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraVolumesUnapplySnapshotPolicyCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraVolumesUnapplySnapshotPolicyCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraVpcsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedVPCList
}

// Status returns HTTPResponse.Status
func (r InfraVpcsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraVpcsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraVpcsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *VPC
}

// Status returns HTTPResponse.Status
func (r InfraVpcsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraVpcsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraVpcsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InfraVpcsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraVpcsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraVpcsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPC
}

// Status returns HTTPResponse.Status
func (r InfraVpcsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraVpcsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraVpcsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPCUpdate
}

// Status returns HTTPResponse.Status
func (r InfraVpcsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraVpcsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfraVpcsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPCUpdate
}

// Status returns HTTPResponse.Status
func (r InfraVpcsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfraVpcsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProjectUserAcceptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectAcceptResponse
}

// Status returns HTTPResponse.Status
func (r ProjectUserAcceptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProjectUserAcceptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProjectUserInviteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ProjectUserInviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProjectUserInviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasBackupPlansListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedBackupPlanDetailList
}

// Status returns HTTPResponse.Status
func (r KaasBackupPlansListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasBackupPlansListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasBackupPlansCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BackupPlan
}

// Status returns HTTPResponse.Status
func (r KaasBackupPlansCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasBackupPlansCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasBackupPlansDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r KaasBackupPlansDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasBackupPlansDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasBackupPlansRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BackupPlanDetail
}

// Status returns HTTPResponse.Status
func (r KaasBackupPlansRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasBackupPlansRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasBackupPlansPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BackupPlan
}

// Status returns HTTPResponse.Status
func (r KaasBackupPlansPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasBackupPlansPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasBackupPlansUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BackupPlan
}

// Status returns HTTPResponse.Status
func (r KaasBackupPlansUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasBackupPlansUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasBackupsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedBackupDetailList
}

// Status returns HTTPResponse.Status
func (r KaasBackupsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasBackupsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasBackupsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Backup
}

// Status returns HTTPResponse.Status
func (r KaasBackupsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasBackupsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasBackupsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r KaasBackupsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasBackupsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasBackupsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BackupDetail
}

// Status returns HTTPResponse.Status
func (r KaasBackupsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasBackupsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasBackupsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Backup
}

// Status returns HTTPResponse.Status
func (r KaasBackupsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasBackupsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasBackupsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Backup
}

// Status returns HTTPResponse.Status
func (r KaasBackupsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasBackupsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasCniVersionsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedCNIVersionList
}

// Status returns HTTPResponse.Status
func (r KaasCniVersionsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasCniVersionsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasCniVersionsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CNIVersion
}

// Status returns HTTPResponse.Status
func (r KaasCniVersionsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasCniVersionsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasCsiVersionsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedCSIVersionList
}

// Status returns HTTPResponse.Status
func (r KaasCsiVersionsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasCsiVersionsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasCsiVersionsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CSIVersion
}

// Status returns HTTPResponse.Status
func (r KaasCsiVersionsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasCsiVersionsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasDashboardVersionsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDashboardVersionList
}

// Status returns HTTPResponse.Status
func (r KaasDashboardVersionsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasDashboardVersionsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasDashboardVersionsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DashboardVersion
}

// Status returns HTTPResponse.Status
func (r KaasDashboardVersionsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasDashboardVersionsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasK8sVersionsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedK8SVersionList
}

// Status returns HTTPResponse.Status
func (r KaasK8sVersionsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasK8sVersionsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasK8sVersionsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *K8SVersion
}

// Status returns HTTPResponse.Status
func (r KaasK8sVersionsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasK8sVersionsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasRestoresListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedRestoreDetailList
}

// Status returns HTTPResponse.Status
func (r KaasRestoresListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasRestoresListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasRestoresCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Restore
}

// Status returns HTTPResponse.Status
func (r KaasRestoresCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasRestoresCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasRestoresDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r KaasRestoresDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasRestoresDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasRestoresRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RestoreDetail
}

// Status returns HTTPResponse.Status
func (r KaasRestoresRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasRestoresRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasRestoresPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Restore
}

// Status returns HTTPResponse.Status
func (r KaasRestoresPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasRestoresPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasRestoresUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Restore
}

// Status returns HTTPResponse.Status
func (r KaasRestoresUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasRestoresUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasVkeClustersListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedVKEClusterDetailList
}

// Status returns HTTPResponse.Status
func (r KaasVkeClustersListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasVkeClustersListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasVkeClustersCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *VKECluster
}

// Status returns HTTPResponse.Status
func (r KaasVkeClustersCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasVkeClustersCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasVkeClustersDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r KaasVkeClustersDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasVkeClustersDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasVkeClustersRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VKEClusterDetail
}

// Status returns HTTPResponse.Status
func (r KaasVkeClustersRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasVkeClustersRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasVkeClustersPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VKEClusterUpdate
}

// Status returns HTTPResponse.Status
func (r KaasVkeClustersPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasVkeClustersPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasVkeClustersUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VKEClusterUpdate
}

// Status returns HTTPResponse.Status
func (r KaasVkeClustersUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasVkeClustersUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasVkeKubeconfigsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VKEKubeConfig
}

// Status returns HTTPResponse.Status
func (r KaasVkeKubeconfigsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasVkeKubeconfigsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasVkeKubedashboardsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VKEDashboardEndpoint
}

// Status returns HTTPResponse.Status
func (r KaasVkeKubedashboardsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasVkeKubedashboardsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasVkeMachinesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedVKEMachineList
}

// Status returns HTTPResponse.Status
func (r KaasVkeMachinesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasVkeMachinesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasVkeNodePoolsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedVKENodePoolDetailList
}

// Status returns HTTPResponse.Status
func (r KaasVkeNodePoolsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasVkeNodePoolsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasVkeNodePoolsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *VKENodePool
}

// Status returns HTTPResponse.Status
func (r KaasVkeNodePoolsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasVkeNodePoolsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasVkeNodePoolsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r KaasVkeNodePoolsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasVkeNodePoolsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasVkeNodePoolsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VKENodePoolDetail
}

// Status returns HTTPResponse.Status
func (r KaasVkeNodePoolsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasVkeNodePoolsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasVkeNodePoolsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VkeNodePoolUpdate
}

// Status returns HTTPResponse.Status
func (r KaasVkeNodePoolsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasVkeNodePoolsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasVkeNodePoolsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VkeNodePoolUpdate
}

// Status returns HTTPResponse.Status
func (r KaasVkeNodePoolsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasVkeNodePoolsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KaasVkeWebcliRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VKEWebCliEndpoint
}

// Status returns HTTPResponse.Status
func (r KaasVkeWebcliRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KaasVkeWebcliRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarketplaceCategoriesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedCategoryList
}

// Status returns HTTPResponse.Status
func (r MarketplaceCategoriesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarketplaceCategoriesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarketplaceCategoriesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Category
}

// Status returns HTTPResponse.Status
func (r MarketplaceCategoriesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarketplaceCategoriesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarketplaceCategoriesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Category
}

// Status returns HTTPResponse.Status
func (r MarketplaceCategoriesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarketplaceCategoriesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarketplaceCategoriesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Category
}

// Status returns HTTPResponse.Status
func (r MarketplaceCategoriesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarketplaceCategoriesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarketplacePricingPlansListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedPricingPlanList
}

// Status returns HTTPResponse.Status
func (r MarketplacePricingPlansListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarketplacePricingPlansListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarketplacePricingPlansCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PricingPlan
}

// Status returns HTTPResponse.Status
func (r MarketplacePricingPlansCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarketplacePricingPlansCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarketplacePricingPlansRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PricingPlan
}

// Status returns HTTPResponse.Status
func (r MarketplacePricingPlansRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarketplacePricingPlansRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarketplacePricingPlansPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PricingPlan
}

// Status returns HTTPResponse.Status
func (r MarketplacePricingPlansPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarketplacePricingPlansPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarketplaceProductsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedProductList
}

// Status returns HTTPResponse.Status
func (r MarketplaceProductsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarketplaceProductsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarketplaceProductsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Product
}

// Status returns HTTPResponse.Status
func (r MarketplaceProductsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarketplaceProductsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarketplaceProductsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductDetail
}

// Status returns HTTPResponse.Status
func (r MarketplaceProductsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarketplaceProductsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarketplaceProductsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Product
}

// Status returns HTTPResponse.Status
func (r MarketplaceProductsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarketplaceProductsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarketplaceSubscriptionsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedSubscriptionList
}

// Status returns HTTPResponse.Status
func (r MarketplaceSubscriptionsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarketplaceSubscriptionsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarketplaceSubscriptionsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SubscriptionCreate
}

// Status returns HTTPResponse.Status
func (r MarketplaceSubscriptionsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarketplaceSubscriptionsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarketplaceSubscriptionsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r MarketplaceSubscriptionsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarketplaceSubscriptionsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarketplaceSubscriptionsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Subscription
}

// Status returns HTTPResponse.Status
func (r MarketplaceSubscriptionsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarketplaceSubscriptionsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarketplaceVendorsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedVendorList
}

// Status returns HTTPResponse.Status
func (r MarketplaceVendorsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarketplaceVendorsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarketplaceVendorsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Vendor
}

// Status returns HTTPResponse.Status
func (r MarketplaceVendorsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarketplaceVendorsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarketplaceVendorsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Vendor
}

// Status returns HTTPResponse.Status
func (r MarketplaceVendorsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarketplaceVendorsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarketplaceVendorsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Vendor
}

// Status returns HTTPResponse.Status
func (r MarketplaceVendorsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarketplaceVendorsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ObjectStorageActivateServiceCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ObjectStorageActivateServiceCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ObjectStorageActivateServiceCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ObjectStorageBucketsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedBucketList
}

// Status returns HTTPResponse.Status
func (r ObjectStorageBucketsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ObjectStorageBucketsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ObjectStorageBucketsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Bucket
}

// Status returns HTTPResponse.Status
func (r ObjectStorageBucketsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ObjectStorageBucketsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BucketAclShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BucketACL
}

// Status returns HTTPResponse.Status
func (r BucketAclShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BucketAclShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BucketAclPatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BucketAclPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BucketAclPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BucketCorsDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BucketCorsDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BucketCorsDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BucketCorsShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BucketCORS
}

// Status returns HTTPResponse.Status
func (r BucketCorsShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BucketCorsShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BucketCorsEditResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BucketCORS
}

// Status returns HTTPResponse.Status
func (r BucketCorsEditResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BucketCorsEditResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BucketLifecycleDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BucketLifecycleDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BucketLifecycleDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BucketLifecycleListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Lifecycle
}

// Status returns HTTPResponse.Status
func (r BucketLifecycleListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BucketLifecycleListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BucketLifecyclePutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Lifecycle
}

// Status returns HTTPResponse.Status
func (r BucketLifecyclePutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BucketLifecyclePutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BucketObjectListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListObject
}

// Status returns HTTPResponse.Status
func (r BucketObjectListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BucketObjectListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFolderGetAwsTokenUploadFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ObjectPostResponse
}

// Status returns HTTPResponse.Status
func (r CreateFolderGetAwsTokenUploadFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFolderGetAwsTokenUploadFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObjectAclResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ObjectAcl
}

// Status returns HTTPResponse.Status
func (r GetObjectAclResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObjectAclResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchObjectAclResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ObjectAcl
}

// Status returns HTTPResponse.Status
func (r PatchObjectAclResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchObjectAclResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ObjectBatchDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ObjectBatchDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ObjectBatchDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteObjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteObjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteObjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ObjectDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ObjectDetails
}

// Status returns HTTPResponse.Status
func (r ObjectDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ObjectDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObjectShareUrlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ObjectPublicUrl
}

// Status returns HTTPResponse.Status
func (r GetObjectShareUrlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObjectShareUrlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAllObjectTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAllObjectTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAllObjectTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObjectTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tag
}

// Status returns HTTPResponse.Status
func (r GetObjectTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObjectTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutObjectTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tag
}

// Status returns HTTPResponse.Status
func (r PutObjectTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutObjectTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BucketPolicyDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BucketPolicyDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BucketPolicyDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BucketPolicyGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r BucketPolicyGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BucketPolicyGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BucketPolicyPutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BucketPolicyPutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BucketPolicyPutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BucketStaticWebDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BucketStaticWebDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BucketStaticWebDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BucketStaticWebCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BucketStaticWebShow
}

// Status returns HTTPResponse.Status
func (r BucketStaticWebCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BucketStaticWebCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BucketStaticWebShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BucketStaticWebCreate
}

// Status returns HTTPResponse.Status
func (r BucketStaticWebShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BucketStaticWebShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBucketTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteBucketTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBucketTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBucketTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tag
}

// Status returns HTTPResponse.Status
func (r GetBucketTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBucketTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBucketTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tag
}

// Status returns HTTPResponse.Status
func (r PutBucketTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBucketTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BucketVersioningShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BucketVersioning
}

// Status returns HTTPResponse.Status
func (r BucketVersioningShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BucketVersioningShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BucketVersioningActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BucketVersioningActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BucketVersioningActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BucketObjectVersionListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListObjectVersion
}

// Status returns HTTPResponse.Status
func (r BucketObjectVersionListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BucketObjectVersionListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObjectVersionAclResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ObjectAcl
}

// Status returns HTTPResponse.Status
func (r GetObjectVersionAclResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObjectVersionAclResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchObjectVersionAclResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ObjectAcl
}

// Status returns HTTPResponse.Status
func (r PatchObjectVersionAclResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchObjectVersionAclResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ObjectVersionBatchDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ObjectVersionBatchDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ObjectVersionBatchDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteObjectVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteObjectVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteObjectVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ObjectVersionDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ObjectDetails
}

// Status returns HTTPResponse.Status
func (r ObjectVersionDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ObjectVersionDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ObjectVersionRestoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ObjectVersionRestoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ObjectVersionRestoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObjectVersionShareUrlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ObjectPublicUrl
}

// Status returns HTTPResponse.Status
func (r GetObjectVersionShareUrlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObjectVersionShareUrlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAllObjectVersionTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAllObjectVersionTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAllObjectVersionTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObjectVersionTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tag
}

// Status returns HTTPResponse.Status
func (r GetObjectVersionTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObjectVersionTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutObjectVersionTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tag
}

// Status returns HTTPResponse.Status
func (r PutObjectVersionTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutObjectVersionTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ObjectStorageBucketsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ObjectStorageBucketsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ObjectStorageBucketsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ObjectStorageBucketsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowBucket
}

// Status returns HTTPResponse.Status
func (r ObjectStorageBucketsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ObjectStorageBucketsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type S3KeyListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *S3Key
}

// Status returns HTTPResponse.Status
func (r S3KeyListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r S3KeyListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type S3KeyCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *S3Key
}

// Status returns HTTPResponse.Status
func (r S3KeyCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r S3KeyCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type S3KeyDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r S3KeyDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r S3KeyDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StorageClassListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r StorageClassListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StorageClassListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationRegionsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedRegionList
}

// Status returns HTTPResponse.Status
func (r OrganizationRegionsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationRegionsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationRegionsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Region
}

// Status returns HTTPResponse.Status
func (r OrganizationRegionsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationRegionsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationZonesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedZoneList
}

// Status returns HTTPResponse.Status
func (r OrganizationZonesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationZonesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationZonesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Zone
}

// Status returns HTTPResponse.Status
func (r OrganizationZonesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationZonesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlanTemplateObjectStoragesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedObjectStoragePlanTemplateList
}

// Status returns HTTPResponse.Status
func (r PlanTemplateObjectStoragesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlanTemplateObjectStoragesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlanTemplateObjectStoragesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ObjectStoragePlanTemplate
}

// Status returns HTTPResponse.Status
func (r PlanTemplateObjectStoragesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlanTemplateObjectStoragesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlanTemplateServersListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedServerPlanTemplateList
}

// Status returns HTTPResponse.Status
func (r PlanTemplateServersListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlanTemplateServersListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlanTemplateServersRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerPlanTemplate
}

// Status returns HTTPResponse.Status
func (r PlanTemplateServersRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlanTemplateServersRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlanTemplateVolumesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedVolumePlanTemplateList
}

// Status returns HTTPResponse.Status
func (r PlanTemplateVolumesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlanTemplateVolumesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlanTemplateVolumesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VolumePlanTemplate
}

// Status returns HTTPResponse.Status
func (r PlanTemplateVolumesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlanTemplateVolumesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlanCustomersCacheInfoCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlanCustomersCacheInfoCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlanCustomersCacheInfoCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlanCustomersCustomerTypesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CustomerType
}

// Status returns HTTPResponse.Status
func (r PlanCustomersCustomerTypesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlanCustomersCustomerTypesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlanCustomersDistrictsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AdministrativeDivision
}

// Status returns HTTPResponse.Status
func (r PlanCustomersDistrictsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlanCustomersDistrictsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlanCustomersGetInfoRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomerResponse
}

// Status returns HTTPResponse.Status
func (r PlanCustomersGetInfoRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlanCustomersGetInfoRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlanCustomersGroupTypesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]GroupType
}

// Status returns HTTPResponse.Status
func (r PlanCustomersGroupTypesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlanCustomersGroupTypesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlanCustomersPrecinctsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AdministrativeDivision
}

// Status returns HTTPResponse.Status
func (r PlanCustomersPrecinctsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlanCustomersPrecinctsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlanCustomersProvincesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AdministrativeDivision
}

// Status returns HTTPResponse.Status
func (r PlanCustomersProvincesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlanCustomersProvincesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlanCustomersUploadIdCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IdentityDocumentsResponse
}

// Status returns HTTPResponse.Status
func (r PlanCustomersUploadIdCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlanCustomersUploadIdCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlanObjectStoragesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedObjectStoragePlanList
}

// Status returns HTTPResponse.Status
func (r PlanObjectStoragesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlanObjectStoragesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlanObjectStoragesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ObjectStoragePlan
}

// Status returns HTTPResponse.Status
func (r PlanObjectStoragesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlanObjectStoragesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlanOrdersListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedOrderList
}

// Status returns HTTPResponse.Status
func (r PlanOrdersListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlanOrdersListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlanOrdersCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Order
}

// Status returns HTTPResponse.Status
func (r PlanOrdersCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlanOrdersCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlanOrdersCalculatePriceCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Order
}

// Status returns HTTPResponse.Status
func (r PlanOrdersCalculatePriceCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlanOrdersCalculatePriceCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlanOrdersPreviewContractCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContractPreview
}

// Status returns HTTPResponse.Status
func (r PlanOrdersPreviewContractCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlanOrdersPreviewContractCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlanOrdersRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Order
}

// Status returns HTTPResponse.Status
func (r PlanOrdersRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlanOrdersRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlanOrdersCancelCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlanOrdersCancelCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlanOrdersCancelCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlanOrdersInvoiceRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrderInvoice
}

// Status returns HTTPResponse.Status
func (r PlanOrdersInvoiceRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlanOrdersInvoiceRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlanServersListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedServerPlanList
}

// Status returns HTTPResponse.Status
func (r PlanServersListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlanServersListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlanServersRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerPlan
}

// Status returns HTTPResponse.Status
func (r PlanServersRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlanServersRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlanVolumesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedVolumePlanList
}

// Status returns HTTPResponse.Status
func (r PlanVolumesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlanVolumesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlanVolumesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VolumePlan
}

// Status returns HTTPResponse.Status
func (r PlanVolumesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlanVolumesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecretManagerSecretsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedSecretListList
}

// Status returns HTTPResponse.Status
func (r SecretManagerSecretsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecretManagerSecretsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecretManagerSecretsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Secret
}

// Status returns HTTPResponse.Status
func (r SecretManagerSecretsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecretManagerSecretsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecretManagerSecretsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SecretManagerSecretsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecretManagerSecretsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecretManagerSecretsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecretRetrieve
}

// Status returns HTTPResponse.Status
func (r SecretManagerSecretsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecretManagerSecretsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecretManagerSecretsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecretUpdate
}

// Status returns HTTPResponse.Status
func (r SecretManagerSecretsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecretManagerSecretsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecretManagerSecretsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecretUpdate
}

// Status returns HTTPResponse.Status
func (r SecretManagerSecretsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecretManagerSecretsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecretManagerSecretsMetadataRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Secret
}

// Status returns HTTPResponse.Status
func (r SecretManagerSecretsMetadataRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecretManagerSecretsMetadataRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecretManagerSecretsMetadataCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Secret
}

// Status returns HTTPResponse.Status
func (r SecretManagerSecretsMetadataCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecretManagerSecretsMetadataCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ServiceCatalogFavoriteServicesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedFavoriteServiceList
}

// Status returns HTTPResponse.Status
func (r ServiceCatalogFavoriteServicesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ServiceCatalogFavoriteServicesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ServiceCatalogFavoriteServicesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *FavoriteService
}

// Status returns HTTPResponse.Status
func (r ServiceCatalogFavoriteServicesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ServiceCatalogFavoriteServicesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ServiceCatalogFavoriteServicesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ServiceCatalogFavoriteServicesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ServiceCatalogFavoriteServicesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ServiceCatalogFavoriteServicesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FavoriteService
}

// Status returns HTTPResponse.Status
func (r ServiceCatalogFavoriteServicesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ServiceCatalogFavoriteServicesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ServiceCatalogServicesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedServiceList
}

// Status returns HTTPResponse.Status
func (r ServiceCatalogServicesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ServiceCatalogServicesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ServiceCatalogServicesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Service
}

// Status returns HTTPResponse.Status
func (r ServiceCatalogServicesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ServiceCatalogServicesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ServiceCatalogServicesUsingServicesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Service
}

// Status returns HTTPResponse.Status
func (r ServiceCatalogServicesUsingServicesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ServiceCatalogServicesUsingServicesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ServiceCatalogServicesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ServiceCatalogServicesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ServiceCatalogServicesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ServiceCatalogServicesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServiceDetail
}

// Status returns HTTPResponse.Status
func (r ServiceCatalogServicesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ServiceCatalogServicesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ServiceCatalogServicesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Service
}

// Status returns HTTPResponse.Status
func (r ServiceCatalogServicesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ServiceCatalogServicesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ServiceCatalogServicesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Service
}

// Status returns HTTPResponse.Status
func (r ServiceCatalogServicesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ServiceCatalogServicesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SupportQuestionsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedQuestionList
}

// Status returns HTTPResponse.Status
func (r SupportQuestionsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SupportQuestionsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SupportQuestionsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Question
}

// Status returns HTTPResponse.Status
func (r SupportQuestionsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SupportQuestionsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SupportQuestionsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Question
}

// Status returns HTTPResponse.Status
func (r SupportQuestionsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SupportQuestionsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SupportQuestionsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QuestionUpdate
}

// Status returns HTTPResponse.Status
func (r SupportQuestionsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SupportQuestionsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TenantProjectUsersListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedProjectUserList
}

// Status returns HTTPResponse.Status
func (r TenantProjectUsersListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TenantProjectUsersListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TenantProjectUsersDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TenantProjectUsersDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TenantProjectUsersDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TenantProjectUsersRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectUser
}

// Status returns HTTPResponse.Status
func (r TenantProjectUsersRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TenantProjectUsersRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TenantProjectUsersPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectUser
}

// Status returns HTTPResponse.Status
func (r TenantProjectUsersPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TenantProjectUsersPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TenantProjectUsersUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectUser
}

// Status returns HTTPResponse.Status
func (r TenantProjectUsersUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TenantProjectUsersUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TenantProjectsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedProjectList
}

// Status returns HTTPResponse.Status
func (r TenantProjectsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TenantProjectsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TenantProjectsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Project
}

// Status returns HTTPResponse.Status
func (r TenantProjectsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TenantProjectsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TenantProjectsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TenantProjectsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TenantProjectsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TenantProjectsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Project
}

// Status returns HTTPResponse.Status
func (r TenantProjectsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TenantProjectsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TenantProjectsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Project
}

// Status returns HTTPResponse.Status
func (r TenantProjectsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TenantProjectsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TenantProjectsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Project
}

// Status returns HTTPResponse.Status
func (r TenantProjectsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TenantProjectsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TenantProjectsServicesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Project
}

// Status returns HTTPResponse.Status
func (r TenantProjectsServicesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TenantProjectsServicesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TenantUsersListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedUserList
}

// Status returns HTTPResponse.Status
func (r TenantUsersListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TenantUsersListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TenantUsersCurrentUserRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r TenantUsersCurrentUserRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TenantUsersCurrentUserRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TenantUsersRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r TenantUsersRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TenantUsersRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TenantUsersPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserUpdate
}

// Status returns HTTPResponse.Status
func (r TenantUsersPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TenantUsersPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TenantUsersUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserUpdate
}

// Status returns HTTPResponse.Status
func (r TenantUsersUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TenantUsersUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AlarmAlarmsListWithResponse request returning *AlarmAlarmsListResponse
func (c *ClientWithResponses) AlarmAlarmsListWithResponse(ctx context.Context, params *AlarmAlarmsListParams, reqEditors ...RequestEditorFn) (*AlarmAlarmsListResponse, error) {
	rsp, err := c.AlarmAlarmsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlarmAlarmsListResponse(rsp)
}

// AlarmAlarmsCreateWithBodyWithResponse request with arbitrary body returning *AlarmAlarmsCreateResponse
func (c *ClientWithResponses) AlarmAlarmsCreateWithBodyWithResponse(ctx context.Context, params *AlarmAlarmsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AlarmAlarmsCreateResponse, error) {
	rsp, err := c.AlarmAlarmsCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlarmAlarmsCreateResponse(rsp)
}

func (c *ClientWithResponses) AlarmAlarmsCreateWithResponse(ctx context.Context, params *AlarmAlarmsCreateParams, body AlarmAlarmsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AlarmAlarmsCreateResponse, error) {
	rsp, err := c.AlarmAlarmsCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlarmAlarmsCreateResponse(rsp)
}

func (c *ClientWithResponses) AlarmAlarmsCreateWithFormdataBodyWithResponse(ctx context.Context, params *AlarmAlarmsCreateParams, body AlarmAlarmsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AlarmAlarmsCreateResponse, error) {
	rsp, err := c.AlarmAlarmsCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlarmAlarmsCreateResponse(rsp)
}

// AlarmAlarmsDestroyWithResponse request returning *AlarmAlarmsDestroyResponse
func (c *ClientWithResponses) AlarmAlarmsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *AlarmAlarmsDestroyParams, reqEditors ...RequestEditorFn) (*AlarmAlarmsDestroyResponse, error) {
	rsp, err := c.AlarmAlarmsDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlarmAlarmsDestroyResponse(rsp)
}

// AlarmAlarmsRetrieveWithResponse request returning *AlarmAlarmsRetrieveResponse
func (c *ClientWithResponses) AlarmAlarmsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *AlarmAlarmsRetrieveParams, reqEditors ...RequestEditorFn) (*AlarmAlarmsRetrieveResponse, error) {
	rsp, err := c.AlarmAlarmsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlarmAlarmsRetrieveResponse(rsp)
}

// AlarmAlarmsPartialUpdateWithBodyWithResponse request with arbitrary body returning *AlarmAlarmsPartialUpdateResponse
func (c *ClientWithResponses) AlarmAlarmsPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *AlarmAlarmsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AlarmAlarmsPartialUpdateResponse, error) {
	rsp, err := c.AlarmAlarmsPartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlarmAlarmsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) AlarmAlarmsPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *AlarmAlarmsPartialUpdateParams, body AlarmAlarmsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AlarmAlarmsPartialUpdateResponse, error) {
	rsp, err := c.AlarmAlarmsPartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlarmAlarmsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) AlarmAlarmsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *AlarmAlarmsPartialUpdateParams, body AlarmAlarmsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AlarmAlarmsPartialUpdateResponse, error) {
	rsp, err := c.AlarmAlarmsPartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlarmAlarmsPartialUpdateResponse(rsp)
}

// AlarmAlarmsUpdateWithBodyWithResponse request with arbitrary body returning *AlarmAlarmsUpdateResponse
func (c *ClientWithResponses) AlarmAlarmsUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *AlarmAlarmsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AlarmAlarmsUpdateResponse, error) {
	rsp, err := c.AlarmAlarmsUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlarmAlarmsUpdateResponse(rsp)
}

func (c *ClientWithResponses) AlarmAlarmsUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *AlarmAlarmsUpdateParams, body AlarmAlarmsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AlarmAlarmsUpdateResponse, error) {
	rsp, err := c.AlarmAlarmsUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlarmAlarmsUpdateResponse(rsp)
}

func (c *ClientWithResponses) AlarmAlarmsUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *AlarmAlarmsUpdateParams, body AlarmAlarmsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AlarmAlarmsUpdateResponse, error) {
	rsp, err := c.AlarmAlarmsUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlarmAlarmsUpdateResponse(rsp)
}

// BccsOrdersPurchaseCallbackCreateWithBodyWithResponse request with arbitrary body returning *BccsOrdersPurchaseCallbackCreateResponse
func (c *ClientWithResponses) BccsOrdersPurchaseCallbackCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BccsOrdersPurchaseCallbackCreateResponse, error) {
	rsp, err := c.BccsOrdersPurchaseCallbackCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsOrdersPurchaseCallbackCreateResponse(rsp)
}

func (c *ClientWithResponses) BccsOrdersPurchaseCallbackCreateWithResponse(ctx context.Context, body BccsOrdersPurchaseCallbackCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*BccsOrdersPurchaseCallbackCreateResponse, error) {
	rsp, err := c.BccsOrdersPurchaseCallbackCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsOrdersPurchaseCallbackCreateResponse(rsp)
}

func (c *ClientWithResponses) BccsOrdersPurchaseCallbackCreateWithFormdataBodyWithResponse(ctx context.Context, body BccsOrdersPurchaseCallbackCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*BccsOrdersPurchaseCallbackCreateResponse, error) {
	rsp, err := c.BccsOrdersPurchaseCallbackCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsOrdersPurchaseCallbackCreateResponse(rsp)
}

// BccsPlansBackupListWithResponse request returning *BccsPlansBackupListResponse
func (c *ClientWithResponses) BccsPlansBackupListWithResponse(ctx context.Context, params *BccsPlansBackupListParams, reqEditors ...RequestEditorFn) (*BccsPlansBackupListResponse, error) {
	rsp, err := c.BccsPlansBackupList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansBackupListResponse(rsp)
}

// BccsPlansBackupCreateWithBodyWithResponse request with arbitrary body returning *BccsPlansBackupCreateResponse
func (c *ClientWithResponses) BccsPlansBackupCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BccsPlansBackupCreateResponse, error) {
	rsp, err := c.BccsPlansBackupCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansBackupCreateResponse(rsp)
}

func (c *ClientWithResponses) BccsPlansBackupCreateWithResponse(ctx context.Context, body BccsPlansBackupCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*BccsPlansBackupCreateResponse, error) {
	rsp, err := c.BccsPlansBackupCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansBackupCreateResponse(rsp)
}

func (c *ClientWithResponses) BccsPlansBackupCreateWithFormdataBodyWithResponse(ctx context.Context, body BccsPlansBackupCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*BccsPlansBackupCreateResponse, error) {
	rsp, err := c.BccsPlansBackupCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansBackupCreateResponse(rsp)
}

// BccsPlansBackupRetrieveWithResponse request returning *BccsPlansBackupRetrieveResponse
func (c *ClientWithResponses) BccsPlansBackupRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*BccsPlansBackupRetrieveResponse, error) {
	rsp, err := c.BccsPlansBackupRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansBackupRetrieveResponse(rsp)
}

// BccsPlansContainerRegistryListWithResponse request returning *BccsPlansContainerRegistryListResponse
func (c *ClientWithResponses) BccsPlansContainerRegistryListWithResponse(ctx context.Context, params *BccsPlansContainerRegistryListParams, reqEditors ...RequestEditorFn) (*BccsPlansContainerRegistryListResponse, error) {
	rsp, err := c.BccsPlansContainerRegistryList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansContainerRegistryListResponse(rsp)
}

// BccsPlansContainerRegistryCreateWithBodyWithResponse request with arbitrary body returning *BccsPlansContainerRegistryCreateResponse
func (c *ClientWithResponses) BccsPlansContainerRegistryCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BccsPlansContainerRegistryCreateResponse, error) {
	rsp, err := c.BccsPlansContainerRegistryCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansContainerRegistryCreateResponse(rsp)
}

func (c *ClientWithResponses) BccsPlansContainerRegistryCreateWithResponse(ctx context.Context, body BccsPlansContainerRegistryCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*BccsPlansContainerRegistryCreateResponse, error) {
	rsp, err := c.BccsPlansContainerRegistryCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansContainerRegistryCreateResponse(rsp)
}

func (c *ClientWithResponses) BccsPlansContainerRegistryCreateWithFormdataBodyWithResponse(ctx context.Context, body BccsPlansContainerRegistryCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*BccsPlansContainerRegistryCreateResponse, error) {
	rsp, err := c.BccsPlansContainerRegistryCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansContainerRegistryCreateResponse(rsp)
}

// BccsPlansContainerRegistryRetrieveWithResponse request returning *BccsPlansContainerRegistryRetrieveResponse
func (c *ClientWithResponses) BccsPlansContainerRegistryRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*BccsPlansContainerRegistryRetrieveResponse, error) {
	rsp, err := c.BccsPlansContainerRegistryRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansContainerRegistryRetrieveResponse(rsp)
}

// BccsPlansFileStorageListWithResponse request returning *BccsPlansFileStorageListResponse
func (c *ClientWithResponses) BccsPlansFileStorageListWithResponse(ctx context.Context, params *BccsPlansFileStorageListParams, reqEditors ...RequestEditorFn) (*BccsPlansFileStorageListResponse, error) {
	rsp, err := c.BccsPlansFileStorageList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansFileStorageListResponse(rsp)
}

// BccsPlansFileStorageCreateWithBodyWithResponse request with arbitrary body returning *BccsPlansFileStorageCreateResponse
func (c *ClientWithResponses) BccsPlansFileStorageCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BccsPlansFileStorageCreateResponse, error) {
	rsp, err := c.BccsPlansFileStorageCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansFileStorageCreateResponse(rsp)
}

func (c *ClientWithResponses) BccsPlansFileStorageCreateWithResponse(ctx context.Context, body BccsPlansFileStorageCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*BccsPlansFileStorageCreateResponse, error) {
	rsp, err := c.BccsPlansFileStorageCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansFileStorageCreateResponse(rsp)
}

func (c *ClientWithResponses) BccsPlansFileStorageCreateWithFormdataBodyWithResponse(ctx context.Context, body BccsPlansFileStorageCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*BccsPlansFileStorageCreateResponse, error) {
	rsp, err := c.BccsPlansFileStorageCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansFileStorageCreateResponse(rsp)
}

// BccsPlansFileStorageRetrieveWithResponse request returning *BccsPlansFileStorageRetrieveResponse
func (c *ClientWithResponses) BccsPlansFileStorageRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*BccsPlansFileStorageRetrieveResponse, error) {
	rsp, err := c.BccsPlansFileStorageRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansFileStorageRetrieveResponse(rsp)
}

// BccsPlansK8sClusterListWithResponse request returning *BccsPlansK8sClusterListResponse
func (c *ClientWithResponses) BccsPlansK8sClusterListWithResponse(ctx context.Context, params *BccsPlansK8sClusterListParams, reqEditors ...RequestEditorFn) (*BccsPlansK8sClusterListResponse, error) {
	rsp, err := c.BccsPlansK8sClusterList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansK8sClusterListResponse(rsp)
}

// BccsPlansK8sClusterCreateWithBodyWithResponse request with arbitrary body returning *BccsPlansK8sClusterCreateResponse
func (c *ClientWithResponses) BccsPlansK8sClusterCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BccsPlansK8sClusterCreateResponse, error) {
	rsp, err := c.BccsPlansK8sClusterCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansK8sClusterCreateResponse(rsp)
}

func (c *ClientWithResponses) BccsPlansK8sClusterCreateWithResponse(ctx context.Context, body BccsPlansK8sClusterCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*BccsPlansK8sClusterCreateResponse, error) {
	rsp, err := c.BccsPlansK8sClusterCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansK8sClusterCreateResponse(rsp)
}

func (c *ClientWithResponses) BccsPlansK8sClusterCreateWithFormdataBodyWithResponse(ctx context.Context, body BccsPlansK8sClusterCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*BccsPlansK8sClusterCreateResponse, error) {
	rsp, err := c.BccsPlansK8sClusterCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansK8sClusterCreateResponse(rsp)
}

// BccsPlansK8sClusterRetrieveWithResponse request returning *BccsPlansK8sClusterRetrieveResponse
func (c *ClientWithResponses) BccsPlansK8sClusterRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*BccsPlansK8sClusterRetrieveResponse, error) {
	rsp, err := c.BccsPlansK8sClusterRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansK8sClusterRetrieveResponse(rsp)
}

// BccsPlansLoadBalancingListWithResponse request returning *BccsPlansLoadBalancingListResponse
func (c *ClientWithResponses) BccsPlansLoadBalancingListWithResponse(ctx context.Context, params *BccsPlansLoadBalancingListParams, reqEditors ...RequestEditorFn) (*BccsPlansLoadBalancingListResponse, error) {
	rsp, err := c.BccsPlansLoadBalancingList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansLoadBalancingListResponse(rsp)
}

// BccsPlansLoadBalancingCreateWithBodyWithResponse request with arbitrary body returning *BccsPlansLoadBalancingCreateResponse
func (c *ClientWithResponses) BccsPlansLoadBalancingCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BccsPlansLoadBalancingCreateResponse, error) {
	rsp, err := c.BccsPlansLoadBalancingCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansLoadBalancingCreateResponse(rsp)
}

func (c *ClientWithResponses) BccsPlansLoadBalancingCreateWithResponse(ctx context.Context, body BccsPlansLoadBalancingCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*BccsPlansLoadBalancingCreateResponse, error) {
	rsp, err := c.BccsPlansLoadBalancingCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansLoadBalancingCreateResponse(rsp)
}

func (c *ClientWithResponses) BccsPlansLoadBalancingCreateWithFormdataBodyWithResponse(ctx context.Context, body BccsPlansLoadBalancingCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*BccsPlansLoadBalancingCreateResponse, error) {
	rsp, err := c.BccsPlansLoadBalancingCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansLoadBalancingCreateResponse(rsp)
}

// BccsPlansLoadBalancingRetrieveWithResponse request returning *BccsPlansLoadBalancingRetrieveResponse
func (c *ClientWithResponses) BccsPlansLoadBalancingRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*BccsPlansLoadBalancingRetrieveResponse, error) {
	rsp, err := c.BccsPlansLoadBalancingRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansLoadBalancingRetrieveResponse(rsp)
}

// BccsPlansObjectStorageListWithResponse request returning *BccsPlansObjectStorageListResponse
func (c *ClientWithResponses) BccsPlansObjectStorageListWithResponse(ctx context.Context, params *BccsPlansObjectStorageListParams, reqEditors ...RequestEditorFn) (*BccsPlansObjectStorageListResponse, error) {
	rsp, err := c.BccsPlansObjectStorageList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansObjectStorageListResponse(rsp)
}

// BccsPlansObjectStorageCreateWithBodyWithResponse request with arbitrary body returning *BccsPlansObjectStorageCreateResponse
func (c *ClientWithResponses) BccsPlansObjectStorageCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BccsPlansObjectStorageCreateResponse, error) {
	rsp, err := c.BccsPlansObjectStorageCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansObjectStorageCreateResponse(rsp)
}

func (c *ClientWithResponses) BccsPlansObjectStorageCreateWithResponse(ctx context.Context, body BccsPlansObjectStorageCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*BccsPlansObjectStorageCreateResponse, error) {
	rsp, err := c.BccsPlansObjectStorageCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansObjectStorageCreateResponse(rsp)
}

func (c *ClientWithResponses) BccsPlansObjectStorageCreateWithFormdataBodyWithResponse(ctx context.Context, body BccsPlansObjectStorageCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*BccsPlansObjectStorageCreateResponse, error) {
	rsp, err := c.BccsPlansObjectStorageCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansObjectStorageCreateResponse(rsp)
}

// BccsPlansObjectStorageRetrieveWithResponse request returning *BccsPlansObjectStorageRetrieveResponse
func (c *ClientWithResponses) BccsPlansObjectStorageRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*BccsPlansObjectStorageRetrieveResponse, error) {
	rsp, err := c.BccsPlansObjectStorageRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansObjectStorageRetrieveResponse(rsp)
}

// BccsPlansServerListWithResponse request returning *BccsPlansServerListResponse
func (c *ClientWithResponses) BccsPlansServerListWithResponse(ctx context.Context, params *BccsPlansServerListParams, reqEditors ...RequestEditorFn) (*BccsPlansServerListResponse, error) {
	rsp, err := c.BccsPlansServerList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansServerListResponse(rsp)
}

// BccsPlansServerCreateWithBodyWithResponse request with arbitrary body returning *BccsPlansServerCreateResponse
func (c *ClientWithResponses) BccsPlansServerCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BccsPlansServerCreateResponse, error) {
	rsp, err := c.BccsPlansServerCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansServerCreateResponse(rsp)
}

func (c *ClientWithResponses) BccsPlansServerCreateWithResponse(ctx context.Context, body BccsPlansServerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*BccsPlansServerCreateResponse, error) {
	rsp, err := c.BccsPlansServerCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansServerCreateResponse(rsp)
}

func (c *ClientWithResponses) BccsPlansServerCreateWithFormdataBodyWithResponse(ctx context.Context, body BccsPlansServerCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*BccsPlansServerCreateResponse, error) {
	rsp, err := c.BccsPlansServerCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansServerCreateResponse(rsp)
}

// BccsPlansServerRetrieveWithResponse request returning *BccsPlansServerRetrieveResponse
func (c *ClientWithResponses) BccsPlansServerRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*BccsPlansServerRetrieveResponse, error) {
	rsp, err := c.BccsPlansServerRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansServerRetrieveResponse(rsp)
}

// BccsPlansVolumeListWithResponse request returning *BccsPlansVolumeListResponse
func (c *ClientWithResponses) BccsPlansVolumeListWithResponse(ctx context.Context, params *BccsPlansVolumeListParams, reqEditors ...RequestEditorFn) (*BccsPlansVolumeListResponse, error) {
	rsp, err := c.BccsPlansVolumeList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansVolumeListResponse(rsp)
}

// BccsPlansVolumeCreateWithBodyWithResponse request with arbitrary body returning *BccsPlansVolumeCreateResponse
func (c *ClientWithResponses) BccsPlansVolumeCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BccsPlansVolumeCreateResponse, error) {
	rsp, err := c.BccsPlansVolumeCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansVolumeCreateResponse(rsp)
}

func (c *ClientWithResponses) BccsPlansVolumeCreateWithResponse(ctx context.Context, body BccsPlansVolumeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*BccsPlansVolumeCreateResponse, error) {
	rsp, err := c.BccsPlansVolumeCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansVolumeCreateResponse(rsp)
}

func (c *ClientWithResponses) BccsPlansVolumeCreateWithFormdataBodyWithResponse(ctx context.Context, body BccsPlansVolumeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*BccsPlansVolumeCreateResponse, error) {
	rsp, err := c.BccsPlansVolumeCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansVolumeCreateResponse(rsp)
}

// BccsPlansVolumeRetrieveWithResponse request returning *BccsPlansVolumeRetrieveResponse
func (c *ClientWithResponses) BccsPlansVolumeRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*BccsPlansVolumeRetrieveResponse, error) {
	rsp, err := c.BccsPlansVolumeRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsPlansVolumeRetrieveResponse(rsp)
}

// BccsUsersListWithResponse request returning *BccsUsersListResponse
func (c *ClientWithResponses) BccsUsersListWithResponse(ctx context.Context, params *BccsUsersListParams, reqEditors ...RequestEditorFn) (*BccsUsersListResponse, error) {
	rsp, err := c.BccsUsersList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsUsersListResponse(rsp)
}

// BccsUsersCreateWithBodyWithResponse request with arbitrary body returning *BccsUsersCreateResponse
func (c *ClientWithResponses) BccsUsersCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BccsUsersCreateResponse, error) {
	rsp, err := c.BccsUsersCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsUsersCreateResponse(rsp)
}

func (c *ClientWithResponses) BccsUsersCreateWithResponse(ctx context.Context, body BccsUsersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*BccsUsersCreateResponse, error) {
	rsp, err := c.BccsUsersCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsUsersCreateResponse(rsp)
}

func (c *ClientWithResponses) BccsUsersCreateWithFormdataBodyWithResponse(ctx context.Context, body BccsUsersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*BccsUsersCreateResponse, error) {
	rsp, err := c.BccsUsersCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsUsersCreateResponse(rsp)
}

// BccsUsersRetrieveWithResponse request returning *BccsUsersRetrieveResponse
func (c *ClientWithResponses) BccsUsersRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*BccsUsersRetrieveResponse, error) {
	rsp, err := c.BccsUsersRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsUsersRetrieveResponse(rsp)
}

// BccsUsersProjectsRetrieveWithResponse request returning *BccsUsersProjectsRetrieveResponse
func (c *ClientWithResponses) BccsUsersProjectsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*BccsUsersProjectsRetrieveResponse, error) {
	rsp, err := c.BccsUsersProjectsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsUsersProjectsRetrieveResponse(rsp)
}

// BccsVolumesListWithResponse request returning *BccsVolumesListResponse
func (c *ClientWithResponses) BccsVolumesListWithResponse(ctx context.Context, params *BccsVolumesListParams, reqEditors ...RequestEditorFn) (*BccsVolumesListResponse, error) {
	rsp, err := c.BccsVolumesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBccsVolumesListResponse(rsp)
}

// ContainerRegistryCliSecretRetrieveWithResponse request returning *ContainerRegistryCliSecretRetrieveResponse
func (c *ClientWithResponses) ContainerRegistryCliSecretRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ContainerRegistryCliSecretRetrieveResponse, error) {
	rsp, err := c.ContainerRegistryCliSecretRetrieve(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContainerRegistryCliSecretRetrieveResponse(rsp)
}

// ContainerRegistryImagesListWithResponse request returning *ContainerRegistryImagesListResponse
func (c *ClientWithResponses) ContainerRegistryImagesListWithResponse(ctx context.Context, params *ContainerRegistryImagesListParams, reqEditors ...RequestEditorFn) (*ContainerRegistryImagesListResponse, error) {
	rsp, err := c.ContainerRegistryImagesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContainerRegistryImagesListResponse(rsp)
}

// ContainerRegistryImagesDestroyWithResponse request returning *ContainerRegistryImagesDestroyResponse
func (c *ClientWithResponses) ContainerRegistryImagesDestroyWithResponse(ctx context.Context, imageName string, params *ContainerRegistryImagesDestroyParams, reqEditors ...RequestEditorFn) (*ContainerRegistryImagesDestroyResponse, error) {
	rsp, err := c.ContainerRegistryImagesDestroy(ctx, imageName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContainerRegistryImagesDestroyResponse(rsp)
}

// ContainerRegistryImagesRetrieveWithResponse request returning *ContainerRegistryImagesRetrieveResponse
func (c *ClientWithResponses) ContainerRegistryImagesRetrieveWithResponse(ctx context.Context, imageName string, params *ContainerRegistryImagesRetrieveParams, reqEditors ...RequestEditorFn) (*ContainerRegistryImagesRetrieveResponse, error) {
	rsp, err := c.ContainerRegistryImagesRetrieve(ctx, imageName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContainerRegistryImagesRetrieveResponse(rsp)
}

// ContainerRegistryImagesArtifactsListWithResponse request returning *ContainerRegistryImagesArtifactsListResponse
func (c *ClientWithResponses) ContainerRegistryImagesArtifactsListWithResponse(ctx context.Context, imageName string, params *ContainerRegistryImagesArtifactsListParams, reqEditors ...RequestEditorFn) (*ContainerRegistryImagesArtifactsListResponse, error) {
	rsp, err := c.ContainerRegistryImagesArtifactsList(ctx, imageName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContainerRegistryImagesArtifactsListResponse(rsp)
}

// ContainerRegistryImagesArtifactsDestroyWithResponse request returning *ContainerRegistryImagesArtifactsDestroyResponse
func (c *ClientWithResponses) ContainerRegistryImagesArtifactsDestroyWithResponse(ctx context.Context, imageName string, reference string, params *ContainerRegistryImagesArtifactsDestroyParams, reqEditors ...RequestEditorFn) (*ContainerRegistryImagesArtifactsDestroyResponse, error) {
	rsp, err := c.ContainerRegistryImagesArtifactsDestroy(ctx, imageName, reference, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContainerRegistryImagesArtifactsDestroyResponse(rsp)
}

// ContainerRegistryImagesArtifactsRetrieveWithResponse request returning *ContainerRegistryImagesArtifactsRetrieveResponse
func (c *ClientWithResponses) ContainerRegistryImagesArtifactsRetrieveWithResponse(ctx context.Context, imageName string, reference string, params *ContainerRegistryImagesArtifactsRetrieveParams, reqEditors ...RequestEditorFn) (*ContainerRegistryImagesArtifactsRetrieveResponse, error) {
	rsp, err := c.ContainerRegistryImagesArtifactsRetrieve(ctx, imageName, reference, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContainerRegistryImagesArtifactsRetrieveResponse(rsp)
}

// ContainerRegistryImagesArtifactsBuildHistoryRetrieveWithResponse request returning *ContainerRegistryImagesArtifactsBuildHistoryRetrieveResponse
func (c *ClientWithResponses) ContainerRegistryImagesArtifactsBuildHistoryRetrieveWithResponse(ctx context.Context, imageName string, reference string, params *ContainerRegistryImagesArtifactsBuildHistoryRetrieveParams, reqEditors ...RequestEditorFn) (*ContainerRegistryImagesArtifactsBuildHistoryRetrieveResponse, error) {
	rsp, err := c.ContainerRegistryImagesArtifactsBuildHistoryRetrieve(ctx, imageName, reference, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContainerRegistryImagesArtifactsBuildHistoryRetrieveResponse(rsp)
}

// ContainerRegistryImagesArtifactsScanCreateWithResponse request returning *ContainerRegistryImagesArtifactsScanCreateResponse
func (c *ClientWithResponses) ContainerRegistryImagesArtifactsScanCreateWithResponse(ctx context.Context, imageName string, reference string, params *ContainerRegistryImagesArtifactsScanCreateParams, reqEditors ...RequestEditorFn) (*ContainerRegistryImagesArtifactsScanCreateResponse, error) {
	rsp, err := c.ContainerRegistryImagesArtifactsScanCreate(ctx, imageName, reference, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContainerRegistryImagesArtifactsScanCreateResponse(rsp)
}

// ContainerRegistryImagesArtifactsTagsRetrieveWithResponse request returning *ContainerRegistryImagesArtifactsTagsRetrieveResponse
func (c *ClientWithResponses) ContainerRegistryImagesArtifactsTagsRetrieveWithResponse(ctx context.Context, imageName string, reference string, params *ContainerRegistryImagesArtifactsTagsRetrieveParams, reqEditors ...RequestEditorFn) (*ContainerRegistryImagesArtifactsTagsRetrieveResponse, error) {
	rsp, err := c.ContainerRegistryImagesArtifactsTagsRetrieve(ctx, imageName, reference, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContainerRegistryImagesArtifactsTagsRetrieveResponse(rsp)
}

// ContainerRegistryImagesArtifactsTagsDestroyWithResponse request returning *ContainerRegistryImagesArtifactsTagsDestroyResponse
func (c *ClientWithResponses) ContainerRegistryImagesArtifactsTagsDestroyWithResponse(ctx context.Context, imageName string, reference string, tagName string, params *ContainerRegistryImagesArtifactsTagsDestroyParams, reqEditors ...RequestEditorFn) (*ContainerRegistryImagesArtifactsTagsDestroyResponse, error) {
	rsp, err := c.ContainerRegistryImagesArtifactsTagsDestroy(ctx, imageName, reference, tagName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContainerRegistryImagesArtifactsTagsDestroyResponse(rsp)
}

// ContainerRegistryImagesArtifactsVulnerabilitiesRetrieveWithResponse request returning *ContainerRegistryImagesArtifactsVulnerabilitiesRetrieveResponse
func (c *ClientWithResponses) ContainerRegistryImagesArtifactsVulnerabilitiesRetrieveWithResponse(ctx context.Context, imageName string, reference string, params *ContainerRegistryImagesArtifactsVulnerabilitiesRetrieveParams, reqEditors ...RequestEditorFn) (*ContainerRegistryImagesArtifactsVulnerabilitiesRetrieveResponse, error) {
	rsp, err := c.ContainerRegistryImagesArtifactsVulnerabilitiesRetrieve(ctx, imageName, reference, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContainerRegistryImagesArtifactsVulnerabilitiesRetrieveResponse(rsp)
}

// ContainerRegistryLogsRetrieveWithResponse request returning *ContainerRegistryLogsRetrieveResponse
func (c *ClientWithResponses) ContainerRegistryLogsRetrieveWithResponse(ctx context.Context, params *ContainerRegistryLogsRetrieveParams, reqEditors ...RequestEditorFn) (*ContainerRegistryLogsRetrieveResponse, error) {
	rsp, err := c.ContainerRegistryLogsRetrieve(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContainerRegistryLogsRetrieveResponse(rsp)
}

// ContainerRegistryQuotaRetrieveWithResponse request returning *ContainerRegistryQuotaRetrieveResponse
func (c *ClientWithResponses) ContainerRegistryQuotaRetrieveWithResponse(ctx context.Context, params *ContainerRegistryQuotaRetrieveParams, reqEditors ...RequestEditorFn) (*ContainerRegistryQuotaRetrieveResponse, error) {
	rsp, err := c.ContainerRegistryQuotaRetrieve(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContainerRegistryQuotaRetrieveResponse(rsp)
}

// DbaasDbInstanceBackupsListWithResponse request returning *DbaasDbInstanceBackupsListResponse
func (c *ClientWithResponses) DbaasDbInstanceBackupsListWithResponse(ctx context.Context, params *DbaasDbInstanceBackupsListParams, reqEditors ...RequestEditorFn) (*DbaasDbInstanceBackupsListResponse, error) {
	rsp, err := c.DbaasDbInstanceBackupsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasDbInstanceBackupsListResponse(rsp)
}

// DbaasDbInstanceBackupsCreateWithBodyWithResponse request with arbitrary body returning *DbaasDbInstanceBackupsCreateResponse
func (c *ClientWithResponses) DbaasDbInstanceBackupsCreateWithBodyWithResponse(ctx context.Context, params *DbaasDbInstanceBackupsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DbaasDbInstanceBackupsCreateResponse, error) {
	rsp, err := c.DbaasDbInstanceBackupsCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasDbInstanceBackupsCreateResponse(rsp)
}

func (c *ClientWithResponses) DbaasDbInstanceBackupsCreateWithResponse(ctx context.Context, params *DbaasDbInstanceBackupsCreateParams, body DbaasDbInstanceBackupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DbaasDbInstanceBackupsCreateResponse, error) {
	rsp, err := c.DbaasDbInstanceBackupsCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasDbInstanceBackupsCreateResponse(rsp)
}

func (c *ClientWithResponses) DbaasDbInstanceBackupsCreateWithFormdataBodyWithResponse(ctx context.Context, params *DbaasDbInstanceBackupsCreateParams, body DbaasDbInstanceBackupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DbaasDbInstanceBackupsCreateResponse, error) {
	rsp, err := c.DbaasDbInstanceBackupsCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasDbInstanceBackupsCreateResponse(rsp)
}

// DbaasDbInstanceBackupsDestroyWithResponse request returning *DbaasDbInstanceBackupsDestroyResponse
func (c *ClientWithResponses) DbaasDbInstanceBackupsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DbaasDbInstanceBackupsDestroyResponse, error) {
	rsp, err := c.DbaasDbInstanceBackupsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasDbInstanceBackupsDestroyResponse(rsp)
}

// DbaasDbInstanceBackupsRetrieveWithResponse request returning *DbaasDbInstanceBackupsRetrieveResponse
func (c *ClientWithResponses) DbaasDbInstanceBackupsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstanceBackupsRetrieveParams, reqEditors ...RequestEditorFn) (*DbaasDbInstanceBackupsRetrieveResponse, error) {
	rsp, err := c.DbaasDbInstanceBackupsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasDbInstanceBackupsRetrieveResponse(rsp)
}

// DbaasDbInstancesListWithResponse request returning *DbaasDbInstancesListResponse
func (c *ClientWithResponses) DbaasDbInstancesListWithResponse(ctx context.Context, params *DbaasDbInstancesListParams, reqEditors ...RequestEditorFn) (*DbaasDbInstancesListResponse, error) {
	rsp, err := c.DbaasDbInstancesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasDbInstancesListResponse(rsp)
}

// DbaasDbInstancesCreateWithBodyWithResponse request with arbitrary body returning *DbaasDbInstancesCreateResponse
func (c *ClientWithResponses) DbaasDbInstancesCreateWithBodyWithResponse(ctx context.Context, params *DbaasDbInstancesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DbaasDbInstancesCreateResponse, error) {
	rsp, err := c.DbaasDbInstancesCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasDbInstancesCreateResponse(rsp)
}

func (c *ClientWithResponses) DbaasDbInstancesCreateWithResponse(ctx context.Context, params *DbaasDbInstancesCreateParams, body DbaasDbInstancesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DbaasDbInstancesCreateResponse, error) {
	rsp, err := c.DbaasDbInstancesCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasDbInstancesCreateResponse(rsp)
}

func (c *ClientWithResponses) DbaasDbInstancesCreateWithFormdataBodyWithResponse(ctx context.Context, params *DbaasDbInstancesCreateParams, body DbaasDbInstancesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DbaasDbInstancesCreateResponse, error) {
	rsp, err := c.DbaasDbInstancesCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasDbInstancesCreateResponse(rsp)
}

// DbaasDbInstancesDestroyWithResponse request returning *DbaasDbInstancesDestroyResponse
func (c *ClientWithResponses) DbaasDbInstancesDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesDestroyParams, reqEditors ...RequestEditorFn) (*DbaasDbInstancesDestroyResponse, error) {
	rsp, err := c.DbaasDbInstancesDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasDbInstancesDestroyResponse(rsp)
}

// DbaasDbInstancesRetrieveWithResponse request returning *DbaasDbInstancesRetrieveResponse
func (c *ClientWithResponses) DbaasDbInstancesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesRetrieveParams, reqEditors ...RequestEditorFn) (*DbaasDbInstancesRetrieveResponse, error) {
	rsp, err := c.DbaasDbInstancesRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasDbInstancesRetrieveResponse(rsp)
}

// DbaasDbInstancesExtendVolumeSizePartialUpdateWithBodyWithResponse request with arbitrary body returning *DbaasDbInstancesExtendVolumeSizePartialUpdateResponse
func (c *ClientWithResponses) DbaasDbInstancesExtendVolumeSizePartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesExtendVolumeSizePartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DbaasDbInstancesExtendVolumeSizePartialUpdateResponse, error) {
	rsp, err := c.DbaasDbInstancesExtendVolumeSizePartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasDbInstancesExtendVolumeSizePartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) DbaasDbInstancesExtendVolumeSizePartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesExtendVolumeSizePartialUpdateParams, body DbaasDbInstancesExtendVolumeSizePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DbaasDbInstancesExtendVolumeSizePartialUpdateResponse, error) {
	rsp, err := c.DbaasDbInstancesExtendVolumeSizePartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasDbInstancesExtendVolumeSizePartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) DbaasDbInstancesExtendVolumeSizePartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesExtendVolumeSizePartialUpdateParams, body DbaasDbInstancesExtendVolumeSizePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DbaasDbInstancesExtendVolumeSizePartialUpdateResponse, error) {
	rsp, err := c.DbaasDbInstancesExtendVolumeSizePartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasDbInstancesExtendVolumeSizePartialUpdateResponse(rsp)
}

// DbaasDbInstancesUpdateBackupPolicyPartialUpdateWithBodyWithResponse request with arbitrary body returning *DbaasDbInstancesUpdateBackupPolicyPartialUpdateResponse
func (c *ClientWithResponses) DbaasDbInstancesUpdateBackupPolicyPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateBackupPolicyPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DbaasDbInstancesUpdateBackupPolicyPartialUpdateResponse, error) {
	rsp, err := c.DbaasDbInstancesUpdateBackupPolicyPartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasDbInstancesUpdateBackupPolicyPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) DbaasDbInstancesUpdateBackupPolicyPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateBackupPolicyPartialUpdateParams, body DbaasDbInstancesUpdateBackupPolicyPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DbaasDbInstancesUpdateBackupPolicyPartialUpdateResponse, error) {
	rsp, err := c.DbaasDbInstancesUpdateBackupPolicyPartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasDbInstancesUpdateBackupPolicyPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) DbaasDbInstancesUpdateBackupPolicyPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateBackupPolicyPartialUpdateParams, body DbaasDbInstancesUpdateBackupPolicyPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DbaasDbInstancesUpdateBackupPolicyPartialUpdateResponse, error) {
	rsp, err := c.DbaasDbInstancesUpdateBackupPolicyPartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasDbInstancesUpdateBackupPolicyPartialUpdateResponse(rsp)
}

// DbaasDbInstancesUpdateFlavorPartialUpdateWithBodyWithResponse request with arbitrary body returning *DbaasDbInstancesUpdateFlavorPartialUpdateResponse
func (c *ClientWithResponses) DbaasDbInstancesUpdateFlavorPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateFlavorPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DbaasDbInstancesUpdateFlavorPartialUpdateResponse, error) {
	rsp, err := c.DbaasDbInstancesUpdateFlavorPartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasDbInstancesUpdateFlavorPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) DbaasDbInstancesUpdateFlavorPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateFlavorPartialUpdateParams, body DbaasDbInstancesUpdateFlavorPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DbaasDbInstancesUpdateFlavorPartialUpdateResponse, error) {
	rsp, err := c.DbaasDbInstancesUpdateFlavorPartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasDbInstancesUpdateFlavorPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) DbaasDbInstancesUpdateFlavorPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateFlavorPartialUpdateParams, body DbaasDbInstancesUpdateFlavorPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DbaasDbInstancesUpdateFlavorPartialUpdateResponse, error) {
	rsp, err := c.DbaasDbInstancesUpdateFlavorPartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasDbInstancesUpdateFlavorPartialUpdateResponse(rsp)
}

// DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateWithBodyWithResponse request with arbitrary body returning *DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateResponse
func (c *ClientWithResponses) DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateResponse, error) {
	rsp, err := c.DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateParams, body DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateResponse, error) {
	rsp, err := c.DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateParams, body DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateResponse, error) {
	rsp, err := c.DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateResponse(rsp)
}

// DbaasDbInstancesUpdateRootPasswordPartialUpdateWithBodyWithResponse request with arbitrary body returning *DbaasDbInstancesUpdateRootPasswordPartialUpdateResponse
func (c *ClientWithResponses) DbaasDbInstancesUpdateRootPasswordPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateRootPasswordPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DbaasDbInstancesUpdateRootPasswordPartialUpdateResponse, error) {
	rsp, err := c.DbaasDbInstancesUpdateRootPasswordPartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasDbInstancesUpdateRootPasswordPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) DbaasDbInstancesUpdateRootPasswordPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateRootPasswordPartialUpdateParams, body DbaasDbInstancesUpdateRootPasswordPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DbaasDbInstancesUpdateRootPasswordPartialUpdateResponse, error) {
	rsp, err := c.DbaasDbInstancesUpdateRootPasswordPartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasDbInstancesUpdateRootPasswordPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) DbaasDbInstancesUpdateRootPasswordPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *DbaasDbInstancesUpdateRootPasswordPartialUpdateParams, body DbaasDbInstancesUpdateRootPasswordPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DbaasDbInstancesUpdateRootPasswordPartialUpdateResponse, error) {
	rsp, err := c.DbaasDbInstancesUpdateRootPasswordPartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasDbInstancesUpdateRootPasswordPartialUpdateResponse(rsp)
}

// DbaasDbVersionsListWithResponse request returning *DbaasDbVersionsListResponse
func (c *ClientWithResponses) DbaasDbVersionsListWithResponse(ctx context.Context, params *DbaasDbVersionsListParams, reqEditors ...RequestEditorFn) (*DbaasDbVersionsListResponse, error) {
	rsp, err := c.DbaasDbVersionsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasDbVersionsListResponse(rsp)
}

// DbaasDbVersionsRetrieveWithResponse request returning *DbaasDbVersionsRetrieveResponse
func (c *ClientWithResponses) DbaasDbVersionsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DbaasDbVersionsRetrieveResponse, error) {
	rsp, err := c.DbaasDbVersionsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasDbVersionsRetrieveResponse(rsp)
}

// DbaasDbaasFlavorsListWithResponse request returning *DbaasDbaasFlavorsListResponse
func (c *ClientWithResponses) DbaasDbaasFlavorsListWithResponse(ctx context.Context, params *DbaasDbaasFlavorsListParams, reqEditors ...RequestEditorFn) (*DbaasDbaasFlavorsListResponse, error) {
	rsp, err := c.DbaasDbaasFlavorsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasDbaasFlavorsListResponse(rsp)
}

// DbaasDbaasFlavorsRetrieveWithResponse request returning *DbaasDbaasFlavorsRetrieveResponse
func (c *ClientWithResponses) DbaasDbaasFlavorsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DbaasDbaasFlavorsRetrieveResponse, error) {
	rsp, err := c.DbaasDbaasFlavorsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasDbaasFlavorsRetrieveResponse(rsp)
}

// DbaasDbaasRegionsListWithResponse request returning *DbaasDbaasRegionsListResponse
func (c *ClientWithResponses) DbaasDbaasRegionsListWithResponse(ctx context.Context, params *DbaasDbaasRegionsListParams, reqEditors ...RequestEditorFn) (*DbaasDbaasRegionsListResponse, error) {
	rsp, err := c.DbaasDbaasRegionsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasDbaasRegionsListResponse(rsp)
}

// DbaasDbaasRegionsRetrieveWithResponse request returning *DbaasDbaasRegionsRetrieveResponse
func (c *ClientWithResponses) DbaasDbaasRegionsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DbaasDbaasRegionsRetrieveResponse, error) {
	rsp, err := c.DbaasDbaasRegionsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasDbaasRegionsRetrieveResponse(rsp)
}

// DbaasDbaasVolumeTypesListWithResponse request returning *DbaasDbaasVolumeTypesListResponse
func (c *ClientWithResponses) DbaasDbaasVolumeTypesListWithResponse(ctx context.Context, params *DbaasDbaasVolumeTypesListParams, reqEditors ...RequestEditorFn) (*DbaasDbaasVolumeTypesListResponse, error) {
	rsp, err := c.DbaasDbaasVolumeTypesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasDbaasVolumeTypesListResponse(rsp)
}

// DbaasDbaasVolumeTypesRetrieveWithResponse request returning *DbaasDbaasVolumeTypesRetrieveResponse
func (c *ClientWithResponses) DbaasDbaasVolumeTypesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DbaasDbaasVolumeTypesRetrieveResponse, error) {
	rsp, err := c.DbaasDbaasVolumeTypesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasDbaasVolumeTypesRetrieveResponse(rsp)
}

// DbaasDbaasZonesListWithResponse request returning *DbaasDbaasZonesListResponse
func (c *ClientWithResponses) DbaasDbaasZonesListWithResponse(ctx context.Context, params *DbaasDbaasZonesListParams, reqEditors ...RequestEditorFn) (*DbaasDbaasZonesListResponse, error) {
	rsp, err := c.DbaasDbaasZonesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasDbaasZonesListResponse(rsp)
}

// DbaasDbaasZonesRetrieveWithResponse request returning *DbaasDbaasZonesRetrieveResponse
func (c *ClientWithResponses) DbaasDbaasZonesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DbaasDbaasZonesRetrieveResponse, error) {
	rsp, err := c.DbaasDbaasZonesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasDbaasZonesRetrieveResponse(rsp)
}

// DbaasFlavorMappingsListWithResponse request returning *DbaasFlavorMappingsListResponse
func (c *ClientWithResponses) DbaasFlavorMappingsListWithResponse(ctx context.Context, params *DbaasFlavorMappingsListParams, reqEditors ...RequestEditorFn) (*DbaasFlavorMappingsListResponse, error) {
	rsp, err := c.DbaasFlavorMappingsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasFlavorMappingsListResponse(rsp)
}

// DbaasFlavorMappingsRetrieveWithResponse request returning *DbaasFlavorMappingsRetrieveResponse
func (c *ClientWithResponses) DbaasFlavorMappingsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DbaasFlavorMappingsRetrieveResponse, error) {
	rsp, err := c.DbaasFlavorMappingsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasFlavorMappingsRetrieveResponse(rsp)
}

// DbaasVolumeTypeMappingsListWithResponse request returning *DbaasVolumeTypeMappingsListResponse
func (c *ClientWithResponses) DbaasVolumeTypeMappingsListWithResponse(ctx context.Context, params *DbaasVolumeTypeMappingsListParams, reqEditors ...RequestEditorFn) (*DbaasVolumeTypeMappingsListResponse, error) {
	rsp, err := c.DbaasVolumeTypeMappingsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasVolumeTypeMappingsListResponse(rsp)
}

// DbaasVolumeTypeMappingsRetrieveWithResponse request returning *DbaasVolumeTypeMappingsRetrieveResponse
func (c *ClientWithResponses) DbaasVolumeTypeMappingsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DbaasVolumeTypeMappingsRetrieveResponse, error) {
	rsp, err := c.DbaasVolumeTypeMappingsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDbaasVolumeTypeMappingsRetrieveResponse(rsp)
}

// InfraAutoScalingScalingActionListWithResponse request returning *InfraAutoScalingScalingActionListResponse
func (c *ClientWithResponses) InfraAutoScalingScalingActionListWithResponse(ctx context.Context, params *InfraAutoScalingScalingActionListParams, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingActionListResponse, error) {
	rsp, err := c.InfraAutoScalingScalingActionList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingActionListResponse(rsp)
}

// InfraAutoScalingScalingGroupListWithResponse request returning *InfraAutoScalingScalingGroupListResponse
func (c *ClientWithResponses) InfraAutoScalingScalingGroupListWithResponse(ctx context.Context, params *InfraAutoScalingScalingGroupListParams, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingGroupListResponse, error) {
	rsp, err := c.InfraAutoScalingScalingGroupList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingGroupListResponse(rsp)
}

// InfraAutoScalingScalingGroupCreateWithBodyWithResponse request with arbitrary body returning *InfraAutoScalingScalingGroupCreateResponse
func (c *ClientWithResponses) InfraAutoScalingScalingGroupCreateWithBodyWithResponse(ctx context.Context, params *InfraAutoScalingScalingGroupCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingGroupCreateResponse, error) {
	rsp, err := c.InfraAutoScalingScalingGroupCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingGroupCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraAutoScalingScalingGroupCreateWithResponse(ctx context.Context, params *InfraAutoScalingScalingGroupCreateParams, body InfraAutoScalingScalingGroupCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingGroupCreateResponse, error) {
	rsp, err := c.InfraAutoScalingScalingGroupCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingGroupCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraAutoScalingScalingGroupCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraAutoScalingScalingGroupCreateParams, body InfraAutoScalingScalingGroupCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingGroupCreateResponse, error) {
	rsp, err := c.InfraAutoScalingScalingGroupCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingGroupCreateResponse(rsp)
}

// InfraAutoScalingScalingGroupMetricsSchemaRetrieveWithResponse request returning *InfraAutoScalingScalingGroupMetricsSchemaRetrieveResponse
func (c *ClientWithResponses) InfraAutoScalingScalingGroupMetricsSchemaRetrieveWithResponse(ctx context.Context, params *InfraAutoScalingScalingGroupMetricsSchemaRetrieveParams, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingGroupMetricsSchemaRetrieveResponse, error) {
	rsp, err := c.InfraAutoScalingScalingGroupMetricsSchemaRetrieve(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingGroupMetricsSchemaRetrieveResponse(rsp)
}

// InfraAutoScalingScalingGroupDestroyWithResponse request returning *InfraAutoScalingScalingGroupDestroyResponse
func (c *ClientWithResponses) InfraAutoScalingScalingGroupDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingGroupDestroyParams, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingGroupDestroyResponse, error) {
	rsp, err := c.InfraAutoScalingScalingGroupDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingGroupDestroyResponse(rsp)
}

// InfraAutoScalingScalingGroupRetrieveWithResponse request returning *InfraAutoScalingScalingGroupRetrieveResponse
func (c *ClientWithResponses) InfraAutoScalingScalingGroupRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingGroupRetrieveParams, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingGroupRetrieveResponse, error) {
	rsp, err := c.InfraAutoScalingScalingGroupRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingGroupRetrieveResponse(rsp)
}

// InfraAutoScalingScalingGroupPartialUpdateWithBodyWithResponse request with arbitrary body returning *InfraAutoScalingScalingGroupPartialUpdateResponse
func (c *ClientWithResponses) InfraAutoScalingScalingGroupPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingGroupPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingGroupPartialUpdateResponse, error) {
	rsp, err := c.InfraAutoScalingScalingGroupPartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingGroupPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraAutoScalingScalingGroupPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingGroupPartialUpdateParams, body InfraAutoScalingScalingGroupPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingGroupPartialUpdateResponse, error) {
	rsp, err := c.InfraAutoScalingScalingGroupPartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingGroupPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraAutoScalingScalingGroupPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingGroupPartialUpdateParams, body InfraAutoScalingScalingGroupPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingGroupPartialUpdateResponse, error) {
	rsp, err := c.InfraAutoScalingScalingGroupPartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingGroupPartialUpdateResponse(rsp)
}

// InfraAutoScalingScalingGroupUpdateWithBodyWithResponse request with arbitrary body returning *InfraAutoScalingScalingGroupUpdateResponse
func (c *ClientWithResponses) InfraAutoScalingScalingGroupUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingGroupUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingGroupUpdateResponse, error) {
	rsp, err := c.InfraAutoScalingScalingGroupUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingGroupUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraAutoScalingScalingGroupUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingGroupUpdateParams, body InfraAutoScalingScalingGroupUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingGroupUpdateResponse, error) {
	rsp, err := c.InfraAutoScalingScalingGroupUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingGroupUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraAutoScalingScalingGroupUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingGroupUpdateParams, body InfraAutoScalingScalingGroupUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingGroupUpdateResponse, error) {
	rsp, err := c.InfraAutoScalingScalingGroupUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingGroupUpdateResponse(rsp)
}

// InfraAutoScalingScalingGroupMetricsRetrieveWithResponse request returning *InfraAutoScalingScalingGroupMetricsRetrieveResponse
func (c *ClientWithResponses) InfraAutoScalingScalingGroupMetricsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingGroupMetricsRetrieveParams, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingGroupMetricsRetrieveResponse, error) {
	rsp, err := c.InfraAutoScalingScalingGroupMetricsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingGroupMetricsRetrieveResponse(rsp)
}

// InfraAutoScalingScalingPolicyListWithResponse request returning *InfraAutoScalingScalingPolicyListResponse
func (c *ClientWithResponses) InfraAutoScalingScalingPolicyListWithResponse(ctx context.Context, params *InfraAutoScalingScalingPolicyListParams, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingPolicyListResponse, error) {
	rsp, err := c.InfraAutoScalingScalingPolicyList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingPolicyListResponse(rsp)
}

// InfraAutoScalingScalingPolicyCreateWithBodyWithResponse request with arbitrary body returning *InfraAutoScalingScalingPolicyCreateResponse
func (c *ClientWithResponses) InfraAutoScalingScalingPolicyCreateWithBodyWithResponse(ctx context.Context, params *InfraAutoScalingScalingPolicyCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingPolicyCreateResponse, error) {
	rsp, err := c.InfraAutoScalingScalingPolicyCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingPolicyCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraAutoScalingScalingPolicyCreateWithResponse(ctx context.Context, params *InfraAutoScalingScalingPolicyCreateParams, body InfraAutoScalingScalingPolicyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingPolicyCreateResponse, error) {
	rsp, err := c.InfraAutoScalingScalingPolicyCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingPolicyCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraAutoScalingScalingPolicyCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraAutoScalingScalingPolicyCreateParams, body InfraAutoScalingScalingPolicyCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingPolicyCreateResponse, error) {
	rsp, err := c.InfraAutoScalingScalingPolicyCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingPolicyCreateResponse(rsp)
}

// InfraAutoScalingScalingPolicyDestroyWithResponse request returning *InfraAutoScalingScalingPolicyDestroyResponse
func (c *ClientWithResponses) InfraAutoScalingScalingPolicyDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyDestroyParams, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingPolicyDestroyResponse, error) {
	rsp, err := c.InfraAutoScalingScalingPolicyDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingPolicyDestroyResponse(rsp)
}

// InfraAutoScalingScalingPolicyRetrieveWithResponse request returning *InfraAutoScalingScalingPolicyRetrieveResponse
func (c *ClientWithResponses) InfraAutoScalingScalingPolicyRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyRetrieveParams, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingPolicyRetrieveResponse, error) {
	rsp, err := c.InfraAutoScalingScalingPolicyRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingPolicyRetrieveResponse(rsp)
}

// InfraAutoScalingScalingPolicyPartialUpdateWithBodyWithResponse request with arbitrary body returning *InfraAutoScalingScalingPolicyPartialUpdateResponse
func (c *ClientWithResponses) InfraAutoScalingScalingPolicyPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingPolicyPartialUpdateResponse, error) {
	rsp, err := c.InfraAutoScalingScalingPolicyPartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingPolicyPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraAutoScalingScalingPolicyPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyPartialUpdateParams, body InfraAutoScalingScalingPolicyPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingPolicyPartialUpdateResponse, error) {
	rsp, err := c.InfraAutoScalingScalingPolicyPartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingPolicyPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraAutoScalingScalingPolicyPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyPartialUpdateParams, body InfraAutoScalingScalingPolicyPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingPolicyPartialUpdateResponse, error) {
	rsp, err := c.InfraAutoScalingScalingPolicyPartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingPolicyPartialUpdateResponse(rsp)
}

// InfraAutoScalingScalingPolicyUpdateWithBodyWithResponse request with arbitrary body returning *InfraAutoScalingScalingPolicyUpdateResponse
func (c *ClientWithResponses) InfraAutoScalingScalingPolicyUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingPolicyUpdateResponse, error) {
	rsp, err := c.InfraAutoScalingScalingPolicyUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingPolicyUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraAutoScalingScalingPolicyUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyUpdateParams, body InfraAutoScalingScalingPolicyUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingPolicyUpdateResponse, error) {
	rsp, err := c.InfraAutoScalingScalingPolicyUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingPolicyUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraAutoScalingScalingPolicyUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingPolicyUpdateParams, body InfraAutoScalingScalingPolicyUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingPolicyUpdateResponse, error) {
	rsp, err := c.InfraAutoScalingScalingPolicyUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingPolicyUpdateResponse(rsp)
}

// InfraAutoScalingScalingQueryListWithResponse request returning *InfraAutoScalingScalingQueryListResponse
func (c *ClientWithResponses) InfraAutoScalingScalingQueryListWithResponse(ctx context.Context, params *InfraAutoScalingScalingQueryListParams, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingQueryListResponse, error) {
	rsp, err := c.InfraAutoScalingScalingQueryList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingQueryListResponse(rsp)
}

// InfraAutoScalingScalingQueryCreateWithBodyWithResponse request with arbitrary body returning *InfraAutoScalingScalingQueryCreateResponse
func (c *ClientWithResponses) InfraAutoScalingScalingQueryCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingQueryCreateResponse, error) {
	rsp, err := c.InfraAutoScalingScalingQueryCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingQueryCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraAutoScalingScalingQueryCreateWithResponse(ctx context.Context, body InfraAutoScalingScalingQueryCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingQueryCreateResponse, error) {
	rsp, err := c.InfraAutoScalingScalingQueryCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingQueryCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraAutoScalingScalingQueryCreateWithFormdataBodyWithResponse(ctx context.Context, body InfraAutoScalingScalingQueryCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingQueryCreateResponse, error) {
	rsp, err := c.InfraAutoScalingScalingQueryCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingQueryCreateResponse(rsp)
}

// InfraAutoScalingScalingQueryDestroyWithResponse request returning *InfraAutoScalingScalingQueryDestroyResponse
func (c *ClientWithResponses) InfraAutoScalingScalingQueryDestroyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingQueryDestroyResponse, error) {
	rsp, err := c.InfraAutoScalingScalingQueryDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingQueryDestroyResponse(rsp)
}

// InfraAutoScalingScalingScheduleListWithResponse request returning *InfraAutoScalingScalingScheduleListResponse
func (c *ClientWithResponses) InfraAutoScalingScalingScheduleListWithResponse(ctx context.Context, params *InfraAutoScalingScalingScheduleListParams, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingScheduleListResponse, error) {
	rsp, err := c.InfraAutoScalingScalingScheduleList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingScheduleListResponse(rsp)
}

// InfraAutoScalingScalingScheduleCreateWithBodyWithResponse request with arbitrary body returning *InfraAutoScalingScalingScheduleCreateResponse
func (c *ClientWithResponses) InfraAutoScalingScalingScheduleCreateWithBodyWithResponse(ctx context.Context, params *InfraAutoScalingScalingScheduleCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingScheduleCreateResponse, error) {
	rsp, err := c.InfraAutoScalingScalingScheduleCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingScheduleCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraAutoScalingScalingScheduleCreateWithResponse(ctx context.Context, params *InfraAutoScalingScalingScheduleCreateParams, body InfraAutoScalingScalingScheduleCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingScheduleCreateResponse, error) {
	rsp, err := c.InfraAutoScalingScalingScheduleCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingScheduleCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraAutoScalingScalingScheduleCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraAutoScalingScalingScheduleCreateParams, body InfraAutoScalingScalingScheduleCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingScheduleCreateResponse, error) {
	rsp, err := c.InfraAutoScalingScalingScheduleCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingScheduleCreateResponse(rsp)
}

// InfraAutoScalingScalingScheduleDestroyWithResponse request returning *InfraAutoScalingScalingScheduleDestroyResponse
func (c *ClientWithResponses) InfraAutoScalingScalingScheduleDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingScheduleDestroyParams, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingScheduleDestroyResponse, error) {
	rsp, err := c.InfraAutoScalingScalingScheduleDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingScheduleDestroyResponse(rsp)
}

// InfraAutoScalingScalingScheduleRetrieveWithResponse request returning *InfraAutoScalingScalingScheduleRetrieveResponse
func (c *ClientWithResponses) InfraAutoScalingScalingScheduleRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingScheduleRetrieveParams, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingScheduleRetrieveResponse, error) {
	rsp, err := c.InfraAutoScalingScalingScheduleRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingScheduleRetrieveResponse(rsp)
}

// InfraAutoScalingScalingSchedulePartialUpdateWithBodyWithResponse request with arbitrary body returning *InfraAutoScalingScalingSchedulePartialUpdateResponse
func (c *ClientWithResponses) InfraAutoScalingScalingSchedulePartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingSchedulePartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingSchedulePartialUpdateResponse, error) {
	rsp, err := c.InfraAutoScalingScalingSchedulePartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingSchedulePartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraAutoScalingScalingSchedulePartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingSchedulePartialUpdateParams, body InfraAutoScalingScalingSchedulePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingSchedulePartialUpdateResponse, error) {
	rsp, err := c.InfraAutoScalingScalingSchedulePartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingSchedulePartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraAutoScalingScalingSchedulePartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingSchedulePartialUpdateParams, body InfraAutoScalingScalingSchedulePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingSchedulePartialUpdateResponse, error) {
	rsp, err := c.InfraAutoScalingScalingSchedulePartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingSchedulePartialUpdateResponse(rsp)
}

// InfraAutoScalingScalingScheduleUpdateWithBodyWithResponse request with arbitrary body returning *InfraAutoScalingScalingScheduleUpdateResponse
func (c *ClientWithResponses) InfraAutoScalingScalingScheduleUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingScheduleUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingScheduleUpdateResponse, error) {
	rsp, err := c.InfraAutoScalingScalingScheduleUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingScheduleUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraAutoScalingScalingScheduleUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingScheduleUpdateParams, body InfraAutoScalingScalingScheduleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingScheduleUpdateResponse, error) {
	rsp, err := c.InfraAutoScalingScalingScheduleUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingScheduleUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraAutoScalingScalingScheduleUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraAutoScalingScalingScheduleUpdateParams, body InfraAutoScalingScalingScheduleUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingScheduleUpdateResponse, error) {
	rsp, err := c.InfraAutoScalingScalingScheduleUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingScheduleUpdateResponse(rsp)
}

// InfraAutoScalingScalingServerListWithResponse request returning *InfraAutoScalingScalingServerListResponse
func (c *ClientWithResponses) InfraAutoScalingScalingServerListWithResponse(ctx context.Context, params *InfraAutoScalingScalingServerListParams, reqEditors ...RequestEditorFn) (*InfraAutoScalingScalingServerListResponse, error) {
	rsp, err := c.InfraAutoScalingScalingServerList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraAutoScalingScalingServerListResponse(rsp)
}

// InfraCertificateListWithResponse request returning *InfraCertificateListResponse
func (c *ClientWithResponses) InfraCertificateListWithResponse(ctx context.Context, params *InfraCertificateListParams, reqEditors ...RequestEditorFn) (*InfraCertificateListResponse, error) {
	rsp, err := c.InfraCertificateList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraCertificateListResponse(rsp)
}

// InfraCertificateCreateWithBodyWithResponse request with arbitrary body returning *InfraCertificateCreateResponse
func (c *ClientWithResponses) InfraCertificateCreateWithBodyWithResponse(ctx context.Context, params *InfraCertificateCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraCertificateCreateResponse, error) {
	rsp, err := c.InfraCertificateCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraCertificateCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraCertificateCreateWithResponse(ctx context.Context, params *InfraCertificateCreateParams, body InfraCertificateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraCertificateCreateResponse, error) {
	rsp, err := c.InfraCertificateCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraCertificateCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraCertificateCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraCertificateCreateParams, body InfraCertificateCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraCertificateCreateResponse, error) {
	rsp, err := c.InfraCertificateCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraCertificateCreateResponse(rsp)
}

// InfraCertificateDestroyWithResponse request returning *InfraCertificateDestroyResponse
func (c *ClientWithResponses) InfraCertificateDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraCertificateDestroyParams, reqEditors ...RequestEditorFn) (*InfraCertificateDestroyResponse, error) {
	rsp, err := c.InfraCertificateDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraCertificateDestroyResponse(rsp)
}

// InfraCertificateRetrieveWithResponse request returning *InfraCertificateRetrieveResponse
func (c *ClientWithResponses) InfraCertificateRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraCertificateRetrieveParams, reqEditors ...RequestEditorFn) (*InfraCertificateRetrieveResponse, error) {
	rsp, err := c.InfraCertificateRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraCertificateRetrieveResponse(rsp)
}

// InfraCertificatePartialUpdateWithBodyWithResponse request with arbitrary body returning *InfraCertificatePartialUpdateResponse
func (c *ClientWithResponses) InfraCertificatePartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraCertificatePartialUpdateResponse, error) {
	rsp, err := c.InfraCertificatePartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraCertificatePartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraCertificatePartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body InfraCertificatePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraCertificatePartialUpdateResponse, error) {
	rsp, err := c.InfraCertificatePartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraCertificatePartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraCertificatePartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body InfraCertificatePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraCertificatePartialUpdateResponse, error) {
	rsp, err := c.InfraCertificatePartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraCertificatePartialUpdateResponse(rsp)
}

// InfraCertificateUpdateWithBodyWithResponse request with arbitrary body returning *InfraCertificateUpdateResponse
func (c *ClientWithResponses) InfraCertificateUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraCertificateUpdateResponse, error) {
	rsp, err := c.InfraCertificateUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraCertificateUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraCertificateUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body InfraCertificateUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraCertificateUpdateResponse, error) {
	rsp, err := c.InfraCertificateUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraCertificateUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraCertificateUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body InfraCertificateUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraCertificateUpdateResponse, error) {
	rsp, err := c.InfraCertificateUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraCertificateUpdateResponse(rsp)
}

// InfraElasticIpsListWithResponse request returning *InfraElasticIpsListResponse
func (c *ClientWithResponses) InfraElasticIpsListWithResponse(ctx context.Context, params *InfraElasticIpsListParams, reqEditors ...RequestEditorFn) (*InfraElasticIpsListResponse, error) {
	rsp, err := c.InfraElasticIpsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraElasticIpsListResponse(rsp)
}

// InfraElasticIpsCreateWithBodyWithResponse request with arbitrary body returning *InfraElasticIpsCreateResponse
func (c *ClientWithResponses) InfraElasticIpsCreateWithBodyWithResponse(ctx context.Context, params *InfraElasticIpsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraElasticIpsCreateResponse, error) {
	rsp, err := c.InfraElasticIpsCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraElasticIpsCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraElasticIpsCreateWithResponse(ctx context.Context, params *InfraElasticIpsCreateParams, body InfraElasticIpsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraElasticIpsCreateResponse, error) {
	rsp, err := c.InfraElasticIpsCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraElasticIpsCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraElasticIpsCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraElasticIpsCreateParams, body InfraElasticIpsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraElasticIpsCreateResponse, error) {
	rsp, err := c.InfraElasticIpsCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraElasticIpsCreateResponse(rsp)
}

// InfraElasticIpsDestroyWithResponse request returning *InfraElasticIpsDestroyResponse
func (c *ClientWithResponses) InfraElasticIpsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraElasticIpsDestroyParams, reqEditors ...RequestEditorFn) (*InfraElasticIpsDestroyResponse, error) {
	rsp, err := c.InfraElasticIpsDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraElasticIpsDestroyResponse(rsp)
}

// InfraElasticIpsRetrieveWithResponse request returning *InfraElasticIpsRetrieveResponse
func (c *ClientWithResponses) InfraElasticIpsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraElasticIpsRetrieveParams, reqEditors ...RequestEditorFn) (*InfraElasticIpsRetrieveResponse, error) {
	rsp, err := c.InfraElasticIpsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraElasticIpsRetrieveResponse(rsp)
}

// InfraFilesystemAccessRulesListWithResponse request returning *InfraFilesystemAccessRulesListResponse
func (c *ClientWithResponses) InfraFilesystemAccessRulesListWithResponse(ctx context.Context, params *InfraFilesystemAccessRulesListParams, reqEditors ...RequestEditorFn) (*InfraFilesystemAccessRulesListResponse, error) {
	rsp, err := c.InfraFilesystemAccessRulesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemAccessRulesListResponse(rsp)
}

// InfraFilesystemAccessRulesCreateWithBodyWithResponse request with arbitrary body returning *InfraFilesystemAccessRulesCreateResponse
func (c *ClientWithResponses) InfraFilesystemAccessRulesCreateWithBodyWithResponse(ctx context.Context, params *InfraFilesystemAccessRulesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraFilesystemAccessRulesCreateResponse, error) {
	rsp, err := c.InfraFilesystemAccessRulesCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemAccessRulesCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraFilesystemAccessRulesCreateWithResponse(ctx context.Context, params *InfraFilesystemAccessRulesCreateParams, body InfraFilesystemAccessRulesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemAccessRulesCreateResponse, error) {
	rsp, err := c.InfraFilesystemAccessRulesCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemAccessRulesCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraFilesystemAccessRulesCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraFilesystemAccessRulesCreateParams, body InfraFilesystemAccessRulesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemAccessRulesCreateResponse, error) {
	rsp, err := c.InfraFilesystemAccessRulesCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemAccessRulesCreateResponse(rsp)
}

// InfraFilesystemAccessRulesDestroyWithResponse request returning *InfraFilesystemAccessRulesDestroyResponse
func (c *ClientWithResponses) InfraFilesystemAccessRulesDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemAccessRulesDestroyParams, reqEditors ...RequestEditorFn) (*InfraFilesystemAccessRulesDestroyResponse, error) {
	rsp, err := c.InfraFilesystemAccessRulesDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemAccessRulesDestroyResponse(rsp)
}

// InfraFilesystemAccessRulesRetrieveWithResponse request returning *InfraFilesystemAccessRulesRetrieveResponse
func (c *ClientWithResponses) InfraFilesystemAccessRulesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemAccessRulesRetrieveParams, reqEditors ...RequestEditorFn) (*InfraFilesystemAccessRulesRetrieveResponse, error) {
	rsp, err := c.InfraFilesystemAccessRulesRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemAccessRulesRetrieveResponse(rsp)
}

// InfraFilesystemAccessRulesPartialUpdateWithBodyWithResponse request with arbitrary body returning *InfraFilesystemAccessRulesPartialUpdateResponse
func (c *ClientWithResponses) InfraFilesystemAccessRulesPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraFilesystemAccessRulesPartialUpdateResponse, error) {
	rsp, err := c.InfraFilesystemAccessRulesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemAccessRulesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraFilesystemAccessRulesPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body InfraFilesystemAccessRulesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemAccessRulesPartialUpdateResponse, error) {
	rsp, err := c.InfraFilesystemAccessRulesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemAccessRulesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraFilesystemAccessRulesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body InfraFilesystemAccessRulesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemAccessRulesPartialUpdateResponse, error) {
	rsp, err := c.InfraFilesystemAccessRulesPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemAccessRulesPartialUpdateResponse(rsp)
}

// InfraFilesystemAccessRulesUpdateWithBodyWithResponse request with arbitrary body returning *InfraFilesystemAccessRulesUpdateResponse
func (c *ClientWithResponses) InfraFilesystemAccessRulesUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraFilesystemAccessRulesUpdateResponse, error) {
	rsp, err := c.InfraFilesystemAccessRulesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemAccessRulesUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraFilesystemAccessRulesUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body InfraFilesystemAccessRulesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemAccessRulesUpdateResponse, error) {
	rsp, err := c.InfraFilesystemAccessRulesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemAccessRulesUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraFilesystemAccessRulesUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body InfraFilesystemAccessRulesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemAccessRulesUpdateResponse, error) {
	rsp, err := c.InfraFilesystemAccessRulesUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemAccessRulesUpdateResponse(rsp)
}

// InfraFilesystemSnapshotPoliciesListWithResponse request returning *InfraFilesystemSnapshotPoliciesListResponse
func (c *ClientWithResponses) InfraFilesystemSnapshotPoliciesListWithResponse(ctx context.Context, params *InfraFilesystemSnapshotPoliciesListParams, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotPoliciesListResponse, error) {
	rsp, err := c.InfraFilesystemSnapshotPoliciesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemSnapshotPoliciesListResponse(rsp)
}

// InfraFilesystemSnapshotPoliciesCreateWithBodyWithResponse request with arbitrary body returning *InfraFilesystemSnapshotPoliciesCreateResponse
func (c *ClientWithResponses) InfraFilesystemSnapshotPoliciesCreateWithBodyWithResponse(ctx context.Context, params *InfraFilesystemSnapshotPoliciesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotPoliciesCreateResponse, error) {
	rsp, err := c.InfraFilesystemSnapshotPoliciesCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemSnapshotPoliciesCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraFilesystemSnapshotPoliciesCreateWithResponse(ctx context.Context, params *InfraFilesystemSnapshotPoliciesCreateParams, body InfraFilesystemSnapshotPoliciesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotPoliciesCreateResponse, error) {
	rsp, err := c.InfraFilesystemSnapshotPoliciesCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemSnapshotPoliciesCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraFilesystemSnapshotPoliciesCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraFilesystemSnapshotPoliciesCreateParams, body InfraFilesystemSnapshotPoliciesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotPoliciesCreateResponse, error) {
	rsp, err := c.InfraFilesystemSnapshotPoliciesCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemSnapshotPoliciesCreateResponse(rsp)
}

// InfraFilesystemSnapshotPoliciesDestroyWithResponse request returning *InfraFilesystemSnapshotPoliciesDestroyResponse
func (c *ClientWithResponses) InfraFilesystemSnapshotPoliciesDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesDestroyParams, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotPoliciesDestroyResponse, error) {
	rsp, err := c.InfraFilesystemSnapshotPoliciesDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemSnapshotPoliciesDestroyResponse(rsp)
}

// InfraFilesystemSnapshotPoliciesRetrieveWithResponse request returning *InfraFilesystemSnapshotPoliciesRetrieveResponse
func (c *ClientWithResponses) InfraFilesystemSnapshotPoliciesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesRetrieveParams, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotPoliciesRetrieveResponse, error) {
	rsp, err := c.InfraFilesystemSnapshotPoliciesRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemSnapshotPoliciesRetrieveResponse(rsp)
}

// InfraFilesystemSnapshotPoliciesPartialUpdateWithBodyWithResponse request with arbitrary body returning *InfraFilesystemSnapshotPoliciesPartialUpdateResponse
func (c *ClientWithResponses) InfraFilesystemSnapshotPoliciesPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotPoliciesPartialUpdateResponse, error) {
	rsp, err := c.InfraFilesystemSnapshotPoliciesPartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemSnapshotPoliciesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraFilesystemSnapshotPoliciesPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesPartialUpdateParams, body InfraFilesystemSnapshotPoliciesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotPoliciesPartialUpdateResponse, error) {
	rsp, err := c.InfraFilesystemSnapshotPoliciesPartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemSnapshotPoliciesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraFilesystemSnapshotPoliciesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesPartialUpdateParams, body InfraFilesystemSnapshotPoliciesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotPoliciesPartialUpdateResponse, error) {
	rsp, err := c.InfraFilesystemSnapshotPoliciesPartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemSnapshotPoliciesPartialUpdateResponse(rsp)
}

// InfraFilesystemSnapshotPoliciesUpdateWithBodyWithResponse request with arbitrary body returning *InfraFilesystemSnapshotPoliciesUpdateResponse
func (c *ClientWithResponses) InfraFilesystemSnapshotPoliciesUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotPoliciesUpdateResponse, error) {
	rsp, err := c.InfraFilesystemSnapshotPoliciesUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemSnapshotPoliciesUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraFilesystemSnapshotPoliciesUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesUpdateParams, body InfraFilesystemSnapshotPoliciesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotPoliciesUpdateResponse, error) {
	rsp, err := c.InfraFilesystemSnapshotPoliciesUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemSnapshotPoliciesUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraFilesystemSnapshotPoliciesUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotPoliciesUpdateParams, body InfraFilesystemSnapshotPoliciesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotPoliciesUpdateResponse, error) {
	rsp, err := c.InfraFilesystemSnapshotPoliciesUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemSnapshotPoliciesUpdateResponse(rsp)
}

// InfraFilesystemSnapshotsListWithResponse request returning *InfraFilesystemSnapshotsListResponse
func (c *ClientWithResponses) InfraFilesystemSnapshotsListWithResponse(ctx context.Context, params *InfraFilesystemSnapshotsListParams, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotsListResponse, error) {
	rsp, err := c.InfraFilesystemSnapshotsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemSnapshotsListResponse(rsp)
}

// InfraFilesystemSnapshotsCreateWithBodyWithResponse request with arbitrary body returning *InfraFilesystemSnapshotsCreateResponse
func (c *ClientWithResponses) InfraFilesystemSnapshotsCreateWithBodyWithResponse(ctx context.Context, params *InfraFilesystemSnapshotsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotsCreateResponse, error) {
	rsp, err := c.InfraFilesystemSnapshotsCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemSnapshotsCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraFilesystemSnapshotsCreateWithResponse(ctx context.Context, params *InfraFilesystemSnapshotsCreateParams, body InfraFilesystemSnapshotsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotsCreateResponse, error) {
	rsp, err := c.InfraFilesystemSnapshotsCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemSnapshotsCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraFilesystemSnapshotsCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraFilesystemSnapshotsCreateParams, body InfraFilesystemSnapshotsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotsCreateResponse, error) {
	rsp, err := c.InfraFilesystemSnapshotsCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemSnapshotsCreateResponse(rsp)
}

// InfraFilesystemSnapshotsDestroyWithResponse request returning *InfraFilesystemSnapshotsDestroyResponse
func (c *ClientWithResponses) InfraFilesystemSnapshotsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotsDestroyParams, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotsDestroyResponse, error) {
	rsp, err := c.InfraFilesystemSnapshotsDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemSnapshotsDestroyResponse(rsp)
}

// InfraFilesystemSnapshotsRetrieveWithResponse request returning *InfraFilesystemSnapshotsRetrieveResponse
func (c *ClientWithResponses) InfraFilesystemSnapshotsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotsRetrieveParams, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotsRetrieveResponse, error) {
	rsp, err := c.InfraFilesystemSnapshotsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemSnapshotsRetrieveResponse(rsp)
}

// InfraFilesystemSnapshotsPartialUpdateWithBodyWithResponse request with arbitrary body returning *InfraFilesystemSnapshotsPartialUpdateResponse
func (c *ClientWithResponses) InfraFilesystemSnapshotsPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotsPartialUpdateResponse, error) {
	rsp, err := c.InfraFilesystemSnapshotsPartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemSnapshotsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraFilesystemSnapshotsPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotsPartialUpdateParams, body InfraFilesystemSnapshotsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotsPartialUpdateResponse, error) {
	rsp, err := c.InfraFilesystemSnapshotsPartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemSnapshotsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraFilesystemSnapshotsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotsPartialUpdateParams, body InfraFilesystemSnapshotsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotsPartialUpdateResponse, error) {
	rsp, err := c.InfraFilesystemSnapshotsPartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemSnapshotsPartialUpdateResponse(rsp)
}

// InfraFilesystemSnapshotsUpdateWithBodyWithResponse request with arbitrary body returning *InfraFilesystemSnapshotsUpdateResponse
func (c *ClientWithResponses) InfraFilesystemSnapshotsUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotsUpdateResponse, error) {
	rsp, err := c.InfraFilesystemSnapshotsUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemSnapshotsUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraFilesystemSnapshotsUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotsUpdateParams, body InfraFilesystemSnapshotsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotsUpdateResponse, error) {
	rsp, err := c.InfraFilesystemSnapshotsUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemSnapshotsUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraFilesystemSnapshotsUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemSnapshotsUpdateParams, body InfraFilesystemSnapshotsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemSnapshotsUpdateResponse, error) {
	rsp, err := c.InfraFilesystemSnapshotsUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemSnapshotsUpdateResponse(rsp)
}

// InfraFilesystemTypesListWithResponse request returning *InfraFilesystemTypesListResponse
func (c *ClientWithResponses) InfraFilesystemTypesListWithResponse(ctx context.Context, params *InfraFilesystemTypesListParams, reqEditors ...RequestEditorFn) (*InfraFilesystemTypesListResponse, error) {
	rsp, err := c.InfraFilesystemTypesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemTypesListResponse(rsp)
}

// InfraFilesystemTypesRetrieveWithResponse request returning *InfraFilesystemTypesRetrieveResponse
func (c *ClientWithResponses) InfraFilesystemTypesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemTypesRetrieveParams, reqEditors ...RequestEditorFn) (*InfraFilesystemTypesRetrieveResponse, error) {
	rsp, err := c.InfraFilesystemTypesRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemTypesRetrieveResponse(rsp)
}

// InfraFilesystemsListWithResponse request returning *InfraFilesystemsListResponse
func (c *ClientWithResponses) InfraFilesystemsListWithResponse(ctx context.Context, params *InfraFilesystemsListParams, reqEditors ...RequestEditorFn) (*InfraFilesystemsListResponse, error) {
	rsp, err := c.InfraFilesystemsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemsListResponse(rsp)
}

// InfraFilesystemsCreateWithBodyWithResponse request with arbitrary body returning *InfraFilesystemsCreateResponse
func (c *ClientWithResponses) InfraFilesystemsCreateWithBodyWithResponse(ctx context.Context, params *InfraFilesystemsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraFilesystemsCreateResponse, error) {
	rsp, err := c.InfraFilesystemsCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemsCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraFilesystemsCreateWithResponse(ctx context.Context, params *InfraFilesystemsCreateParams, body InfraFilesystemsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemsCreateResponse, error) {
	rsp, err := c.InfraFilesystemsCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemsCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraFilesystemsCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraFilesystemsCreateParams, body InfraFilesystemsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemsCreateResponse, error) {
	rsp, err := c.InfraFilesystemsCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemsCreateResponse(rsp)
}

// InfraFilesystemsDestroyWithResponse request returning *InfraFilesystemsDestroyResponse
func (c *ClientWithResponses) InfraFilesystemsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsDestroyParams, reqEditors ...RequestEditorFn) (*InfraFilesystemsDestroyResponse, error) {
	rsp, err := c.InfraFilesystemsDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemsDestroyResponse(rsp)
}

// InfraFilesystemsRetrieveWithResponse request returning *InfraFilesystemsRetrieveResponse
func (c *ClientWithResponses) InfraFilesystemsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsRetrieveParams, reqEditors ...RequestEditorFn) (*InfraFilesystemsRetrieveResponse, error) {
	rsp, err := c.InfraFilesystemsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemsRetrieveResponse(rsp)
}

// InfraFilesystemsPartialUpdateWithBodyWithResponse request with arbitrary body returning *InfraFilesystemsPartialUpdateResponse
func (c *ClientWithResponses) InfraFilesystemsPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraFilesystemsPartialUpdateResponse, error) {
	rsp, err := c.InfraFilesystemsPartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraFilesystemsPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsPartialUpdateParams, body InfraFilesystemsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemsPartialUpdateResponse, error) {
	rsp, err := c.InfraFilesystemsPartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraFilesystemsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsPartialUpdateParams, body InfraFilesystemsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemsPartialUpdateResponse, error) {
	rsp, err := c.InfraFilesystemsPartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemsPartialUpdateResponse(rsp)
}

// InfraFilesystemsUpdateWithBodyWithResponse request with arbitrary body returning *InfraFilesystemsUpdateResponse
func (c *ClientWithResponses) InfraFilesystemsUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraFilesystemsUpdateResponse, error) {
	rsp, err := c.InfraFilesystemsUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemsUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraFilesystemsUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsUpdateParams, body InfraFilesystemsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemsUpdateResponse, error) {
	rsp, err := c.InfraFilesystemsUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemsUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraFilesystemsUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsUpdateParams, body InfraFilesystemsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemsUpdateResponse, error) {
	rsp, err := c.InfraFilesystemsUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemsUpdateResponse(rsp)
}

// InfraFilesystemsApplyPolicyCreateWithBodyWithResponse request with arbitrary body returning *InfraFilesystemsApplyPolicyCreateResponse
func (c *ClientWithResponses) InfraFilesystemsApplyPolicyCreateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsApplyPolicyCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraFilesystemsApplyPolicyCreateResponse, error) {
	rsp, err := c.InfraFilesystemsApplyPolicyCreateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemsApplyPolicyCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraFilesystemsApplyPolicyCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsApplyPolicyCreateParams, body InfraFilesystemsApplyPolicyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemsApplyPolicyCreateResponse, error) {
	rsp, err := c.InfraFilesystemsApplyPolicyCreate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemsApplyPolicyCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraFilesystemsApplyPolicyCreateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsApplyPolicyCreateParams, body InfraFilesystemsApplyPolicyCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemsApplyPolicyCreateResponse, error) {
	rsp, err := c.InfraFilesystemsApplyPolicyCreateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemsApplyPolicyCreateResponse(rsp)
}

// InfraFilesystemsResizeCreateWithBodyWithResponse request with arbitrary body returning *InfraFilesystemsResizeCreateResponse
func (c *ClientWithResponses) InfraFilesystemsResizeCreateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsResizeCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraFilesystemsResizeCreateResponse, error) {
	rsp, err := c.InfraFilesystemsResizeCreateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemsResizeCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraFilesystemsResizeCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsResizeCreateParams, body InfraFilesystemsResizeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemsResizeCreateResponse, error) {
	rsp, err := c.InfraFilesystemsResizeCreate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemsResizeCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraFilesystemsResizeCreateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsResizeCreateParams, body InfraFilesystemsResizeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemsResizeCreateResponse, error) {
	rsp, err := c.InfraFilesystemsResizeCreateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemsResizeCreateResponse(rsp)
}

// InfraFilesystemsStartMigrationCreateWithBodyWithResponse request with arbitrary body returning *InfraFilesystemsStartMigrationCreateResponse
func (c *ClientWithResponses) InfraFilesystemsStartMigrationCreateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsStartMigrationCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraFilesystemsStartMigrationCreateResponse, error) {
	rsp, err := c.InfraFilesystemsStartMigrationCreateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemsStartMigrationCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraFilesystemsStartMigrationCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsStartMigrationCreateParams, body InfraFilesystemsStartMigrationCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemsStartMigrationCreateResponse, error) {
	rsp, err := c.InfraFilesystemsStartMigrationCreate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemsStartMigrationCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraFilesystemsStartMigrationCreateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsStartMigrationCreateParams, body InfraFilesystemsStartMigrationCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraFilesystemsStartMigrationCreateResponse, error) {
	rsp, err := c.InfraFilesystemsStartMigrationCreateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemsStartMigrationCreateResponse(rsp)
}

// InfraFilesystemsUnapplyPolicyCreateWithResponse request returning *InfraFilesystemsUnapplyPolicyCreateResponse
func (c *ClientWithResponses) InfraFilesystemsUnapplyPolicyCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraFilesystemsUnapplyPolicyCreateParams, reqEditors ...RequestEditorFn) (*InfraFilesystemsUnapplyPolicyCreateResponse, error) {
	rsp, err := c.InfraFilesystemsUnapplyPolicyCreate(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFilesystemsUnapplyPolicyCreateResponse(rsp)
}

// InfraFlavorsListWithResponse request returning *InfraFlavorsListResponse
func (c *ClientWithResponses) InfraFlavorsListWithResponse(ctx context.Context, params *InfraFlavorsListParams, reqEditors ...RequestEditorFn) (*InfraFlavorsListResponse, error) {
	rsp, err := c.InfraFlavorsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFlavorsListResponse(rsp)
}

// InfraFlavorsCreateWithBodyWithResponse request with arbitrary body returning *InfraFlavorsCreateResponse
func (c *ClientWithResponses) InfraFlavorsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraFlavorsCreateResponse, error) {
	rsp, err := c.InfraFlavorsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFlavorsCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraFlavorsCreateWithResponse(ctx context.Context, body InfraFlavorsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraFlavorsCreateResponse, error) {
	rsp, err := c.InfraFlavorsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFlavorsCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraFlavorsCreateWithFormdataBodyWithResponse(ctx context.Context, body InfraFlavorsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraFlavorsCreateResponse, error) {
	rsp, err := c.InfraFlavorsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFlavorsCreateResponse(rsp)
}

// InfraFlavorsDestroyWithResponse request returning *InfraFlavorsDestroyResponse
func (c *ClientWithResponses) InfraFlavorsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*InfraFlavorsDestroyResponse, error) {
	rsp, err := c.InfraFlavorsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFlavorsDestroyResponse(rsp)
}

// InfraFlavorsRetrieveWithResponse request returning *InfraFlavorsRetrieveResponse
func (c *ClientWithResponses) InfraFlavorsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*InfraFlavorsRetrieveResponse, error) {
	rsp, err := c.InfraFlavorsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFlavorsRetrieveResponse(rsp)
}

// InfraFlavorsPartialUpdateWithBodyWithResponse request with arbitrary body returning *InfraFlavorsPartialUpdateResponse
func (c *ClientWithResponses) InfraFlavorsPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraFlavorsPartialUpdateResponse, error) {
	rsp, err := c.InfraFlavorsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFlavorsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraFlavorsPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body InfraFlavorsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraFlavorsPartialUpdateResponse, error) {
	rsp, err := c.InfraFlavorsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFlavorsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraFlavorsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body InfraFlavorsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraFlavorsPartialUpdateResponse, error) {
	rsp, err := c.InfraFlavorsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFlavorsPartialUpdateResponse(rsp)
}

// InfraFlavorsUpdateWithBodyWithResponse request with arbitrary body returning *InfraFlavorsUpdateResponse
func (c *ClientWithResponses) InfraFlavorsUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraFlavorsUpdateResponse, error) {
	rsp, err := c.InfraFlavorsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFlavorsUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraFlavorsUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body InfraFlavorsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraFlavorsUpdateResponse, error) {
	rsp, err := c.InfraFlavorsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFlavorsUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraFlavorsUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body InfraFlavorsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraFlavorsUpdateResponse, error) {
	rsp, err := c.InfraFlavorsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraFlavorsUpdateResponse(rsp)
}

// InfraImagesListWithResponse request returning *InfraImagesListResponse
func (c *ClientWithResponses) InfraImagesListWithResponse(ctx context.Context, params *InfraImagesListParams, reqEditors ...RequestEditorFn) (*InfraImagesListResponse, error) {
	rsp, err := c.InfraImagesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraImagesListResponse(rsp)
}

// InfraImagesCreateWithBodyWithResponse request with arbitrary body returning *InfraImagesCreateResponse
func (c *ClientWithResponses) InfraImagesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraImagesCreateResponse, error) {
	rsp, err := c.InfraImagesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraImagesCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraImagesCreateWithResponse(ctx context.Context, body InfraImagesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraImagesCreateResponse, error) {
	rsp, err := c.InfraImagesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraImagesCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraImagesCreateWithFormdataBodyWithResponse(ctx context.Context, body InfraImagesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraImagesCreateResponse, error) {
	rsp, err := c.InfraImagesCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraImagesCreateResponse(rsp)
}

// InfraImagesDestroyWithResponse request returning *InfraImagesDestroyResponse
func (c *ClientWithResponses) InfraImagesDestroyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*InfraImagesDestroyResponse, error) {
	rsp, err := c.InfraImagesDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraImagesDestroyResponse(rsp)
}

// InfraImagesRetrieveWithResponse request returning *InfraImagesRetrieveResponse
func (c *ClientWithResponses) InfraImagesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*InfraImagesRetrieveResponse, error) {
	rsp, err := c.InfraImagesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraImagesRetrieveResponse(rsp)
}

// InfraImagesPartialUpdateWithBodyWithResponse request with arbitrary body returning *InfraImagesPartialUpdateResponse
func (c *ClientWithResponses) InfraImagesPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraImagesPartialUpdateResponse, error) {
	rsp, err := c.InfraImagesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraImagesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraImagesPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body InfraImagesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraImagesPartialUpdateResponse, error) {
	rsp, err := c.InfraImagesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraImagesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraImagesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body InfraImagesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraImagesPartialUpdateResponse, error) {
	rsp, err := c.InfraImagesPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraImagesPartialUpdateResponse(rsp)
}

// InfraImagesUpdateWithBodyWithResponse request with arbitrary body returning *InfraImagesUpdateResponse
func (c *ClientWithResponses) InfraImagesUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraImagesUpdateResponse, error) {
	rsp, err := c.InfraImagesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraImagesUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraImagesUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body InfraImagesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraImagesUpdateResponse, error) {
	rsp, err := c.InfraImagesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraImagesUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraImagesUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body InfraImagesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraImagesUpdateResponse, error) {
	rsp, err := c.InfraImagesUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraImagesUpdateResponse(rsp)
}

// InfraKeypairsListWithResponse request returning *InfraKeypairsListResponse
func (c *ClientWithResponses) InfraKeypairsListWithResponse(ctx context.Context, params *InfraKeypairsListParams, reqEditors ...RequestEditorFn) (*InfraKeypairsListResponse, error) {
	rsp, err := c.InfraKeypairsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraKeypairsListResponse(rsp)
}

// InfraKeypairsCreateWithBodyWithResponse request with arbitrary body returning *InfraKeypairsCreateResponse
func (c *ClientWithResponses) InfraKeypairsCreateWithBodyWithResponse(ctx context.Context, params *InfraKeypairsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraKeypairsCreateResponse, error) {
	rsp, err := c.InfraKeypairsCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraKeypairsCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraKeypairsCreateWithResponse(ctx context.Context, params *InfraKeypairsCreateParams, body InfraKeypairsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraKeypairsCreateResponse, error) {
	rsp, err := c.InfraKeypairsCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraKeypairsCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraKeypairsCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraKeypairsCreateParams, body InfraKeypairsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraKeypairsCreateResponse, error) {
	rsp, err := c.InfraKeypairsCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraKeypairsCreateResponse(rsp)
}

// InfraKeypairsDestroyWithResponse request returning *InfraKeypairsDestroyResponse
func (c *ClientWithResponses) InfraKeypairsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraKeypairsDestroyParams, reqEditors ...RequestEditorFn) (*InfraKeypairsDestroyResponse, error) {
	rsp, err := c.InfraKeypairsDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraKeypairsDestroyResponse(rsp)
}

// InfraKeypairsRetrieveWithResponse request returning *InfraKeypairsRetrieveResponse
func (c *ClientWithResponses) InfraKeypairsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraKeypairsRetrieveParams, reqEditors ...RequestEditorFn) (*InfraKeypairsRetrieveResponse, error) {
	rsp, err := c.InfraKeypairsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraKeypairsRetrieveResponse(rsp)
}

// InfraKeypairsPartialUpdateWithBodyWithResponse request with arbitrary body returning *InfraKeypairsPartialUpdateResponse
func (c *ClientWithResponses) InfraKeypairsPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraKeypairsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraKeypairsPartialUpdateResponse, error) {
	rsp, err := c.InfraKeypairsPartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraKeypairsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraKeypairsPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraKeypairsPartialUpdateParams, body InfraKeypairsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraKeypairsPartialUpdateResponse, error) {
	rsp, err := c.InfraKeypairsPartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraKeypairsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraKeypairsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraKeypairsPartialUpdateParams, body InfraKeypairsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraKeypairsPartialUpdateResponse, error) {
	rsp, err := c.InfraKeypairsPartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraKeypairsPartialUpdateResponse(rsp)
}

// InfraKeypairsUpdateWithBodyWithResponse request with arbitrary body returning *InfraKeypairsUpdateResponse
func (c *ClientWithResponses) InfraKeypairsUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraKeypairsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraKeypairsUpdateResponse, error) {
	rsp, err := c.InfraKeypairsUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraKeypairsUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraKeypairsUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraKeypairsUpdateParams, body InfraKeypairsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraKeypairsUpdateResponse, error) {
	rsp, err := c.InfraKeypairsUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraKeypairsUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraKeypairsUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraKeypairsUpdateParams, body InfraKeypairsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraKeypairsUpdateResponse, error) {
	rsp, err := c.InfraKeypairsUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraKeypairsUpdateResponse(rsp)
}

// InfraLaunchTemplateListWithResponse request returning *InfraLaunchTemplateListResponse
func (c *ClientWithResponses) InfraLaunchTemplateListWithResponse(ctx context.Context, params *InfraLaunchTemplateListParams, reqEditors ...RequestEditorFn) (*InfraLaunchTemplateListResponse, error) {
	rsp, err := c.InfraLaunchTemplateList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLaunchTemplateListResponse(rsp)
}

// InfraLaunchTemplateCreateWithBodyWithResponse request with arbitrary body returning *InfraLaunchTemplateCreateResponse
func (c *ClientWithResponses) InfraLaunchTemplateCreateWithBodyWithResponse(ctx context.Context, params *InfraLaunchTemplateCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLaunchTemplateCreateResponse, error) {
	rsp, err := c.InfraLaunchTemplateCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLaunchTemplateCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraLaunchTemplateCreateWithResponse(ctx context.Context, params *InfraLaunchTemplateCreateParams, body InfraLaunchTemplateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLaunchTemplateCreateResponse, error) {
	rsp, err := c.InfraLaunchTemplateCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLaunchTemplateCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraLaunchTemplateCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraLaunchTemplateCreateParams, body InfraLaunchTemplateCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLaunchTemplateCreateResponse, error) {
	rsp, err := c.InfraLaunchTemplateCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLaunchTemplateCreateResponse(rsp)
}

// InfraLaunchTemplateDestroyWithResponse request returning *InfraLaunchTemplateDestroyResponse
func (c *ClientWithResponses) InfraLaunchTemplateDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLaunchTemplateDestroyParams, reqEditors ...RequestEditorFn) (*InfraLaunchTemplateDestroyResponse, error) {
	rsp, err := c.InfraLaunchTemplateDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLaunchTemplateDestroyResponse(rsp)
}

// InfraLaunchTemplateRetrieveWithResponse request returning *InfraLaunchTemplateRetrieveResponse
func (c *ClientWithResponses) InfraLaunchTemplateRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLaunchTemplateRetrieveParams, reqEditors ...RequestEditorFn) (*InfraLaunchTemplateRetrieveResponse, error) {
	rsp, err := c.InfraLaunchTemplateRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLaunchTemplateRetrieveResponse(rsp)
}

// InfraLaunchTemplatePartialUpdateWithBodyWithResponse request with arbitrary body returning *InfraLaunchTemplatePartialUpdateResponse
func (c *ClientWithResponses) InfraLaunchTemplatePartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLaunchTemplatePartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLaunchTemplatePartialUpdateResponse, error) {
	rsp, err := c.InfraLaunchTemplatePartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLaunchTemplatePartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraLaunchTemplatePartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLaunchTemplatePartialUpdateParams, body InfraLaunchTemplatePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLaunchTemplatePartialUpdateResponse, error) {
	rsp, err := c.InfraLaunchTemplatePartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLaunchTemplatePartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraLaunchTemplatePartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLaunchTemplatePartialUpdateParams, body InfraLaunchTemplatePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLaunchTemplatePartialUpdateResponse, error) {
	rsp, err := c.InfraLaunchTemplatePartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLaunchTemplatePartialUpdateResponse(rsp)
}

// InfraLaunchTemplateUpdateWithBodyWithResponse request with arbitrary body returning *InfraLaunchTemplateUpdateResponse
func (c *ClientWithResponses) InfraLaunchTemplateUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLaunchTemplateUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLaunchTemplateUpdateResponse, error) {
	rsp, err := c.InfraLaunchTemplateUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLaunchTemplateUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraLaunchTemplateUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLaunchTemplateUpdateParams, body InfraLaunchTemplateUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLaunchTemplateUpdateResponse, error) {
	rsp, err := c.InfraLaunchTemplateUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLaunchTemplateUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraLaunchTemplateUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLaunchTemplateUpdateParams, body InfraLaunchTemplateUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLaunchTemplateUpdateResponse, error) {
	rsp, err := c.InfraLaunchTemplateUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLaunchTemplateUpdateResponse(rsp)
}

// InfraLoadBalancingL7policyListWithResponse request returning *InfraLoadBalancingL7policyListResponse
func (c *ClientWithResponses) InfraLoadBalancingL7policyListWithResponse(ctx context.Context, params *InfraLoadBalancingL7policyListParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7policyListResponse, error) {
	rsp, err := c.InfraLoadBalancingL7policyList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingL7policyListResponse(rsp)
}

// InfraLoadBalancingL7policyCreateWithBodyWithResponse request with arbitrary body returning *InfraLoadBalancingL7policyCreateResponse
func (c *ClientWithResponses) InfraLoadBalancingL7policyCreateWithBodyWithResponse(ctx context.Context, params *InfraLoadBalancingL7policyCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7policyCreateResponse, error) {
	rsp, err := c.InfraLoadBalancingL7policyCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingL7policyCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraLoadBalancingL7policyCreateWithResponse(ctx context.Context, params *InfraLoadBalancingL7policyCreateParams, body InfraLoadBalancingL7policyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7policyCreateResponse, error) {
	rsp, err := c.InfraLoadBalancingL7policyCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingL7policyCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraLoadBalancingL7policyCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraLoadBalancingL7policyCreateParams, body InfraLoadBalancingL7policyCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7policyCreateResponse, error) {
	rsp, err := c.InfraLoadBalancingL7policyCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingL7policyCreateResponse(rsp)
}

// InfraLoadBalancingL7policyDestroyWithResponse request returning *InfraLoadBalancingL7policyDestroyResponse
func (c *ClientWithResponses) InfraLoadBalancingL7policyDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7policyDestroyParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7policyDestroyResponse, error) {
	rsp, err := c.InfraLoadBalancingL7policyDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingL7policyDestroyResponse(rsp)
}

// InfraLoadBalancingL7policyRetrieveWithResponse request returning *InfraLoadBalancingL7policyRetrieveResponse
func (c *ClientWithResponses) InfraLoadBalancingL7policyRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7policyRetrieveParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7policyRetrieveResponse, error) {
	rsp, err := c.InfraLoadBalancingL7policyRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingL7policyRetrieveResponse(rsp)
}

// InfraLoadBalancingL7policyPartialUpdateWithBodyWithResponse request with arbitrary body returning *InfraLoadBalancingL7policyPartialUpdateResponse
func (c *ClientWithResponses) InfraLoadBalancingL7policyPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7policyPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7policyPartialUpdateResponse, error) {
	rsp, err := c.InfraLoadBalancingL7policyPartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingL7policyPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraLoadBalancingL7policyPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7policyPartialUpdateParams, body InfraLoadBalancingL7policyPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7policyPartialUpdateResponse, error) {
	rsp, err := c.InfraLoadBalancingL7policyPartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingL7policyPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraLoadBalancingL7policyPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7policyPartialUpdateParams, body InfraLoadBalancingL7policyPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7policyPartialUpdateResponse, error) {
	rsp, err := c.InfraLoadBalancingL7policyPartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingL7policyPartialUpdateResponse(rsp)
}

// InfraLoadBalancingL7policyUpdateWithBodyWithResponse request with arbitrary body returning *InfraLoadBalancingL7policyUpdateResponse
func (c *ClientWithResponses) InfraLoadBalancingL7policyUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7policyUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7policyUpdateResponse, error) {
	rsp, err := c.InfraLoadBalancingL7policyUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingL7policyUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraLoadBalancingL7policyUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7policyUpdateParams, body InfraLoadBalancingL7policyUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7policyUpdateResponse, error) {
	rsp, err := c.InfraLoadBalancingL7policyUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingL7policyUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraLoadBalancingL7policyUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7policyUpdateParams, body InfraLoadBalancingL7policyUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7policyUpdateResponse, error) {
	rsp, err := c.InfraLoadBalancingL7policyUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingL7policyUpdateResponse(rsp)
}

// InfraLoadBalancingL7ruleListWithResponse request returning *InfraLoadBalancingL7ruleListResponse
func (c *ClientWithResponses) InfraLoadBalancingL7ruleListWithResponse(ctx context.Context, params *InfraLoadBalancingL7ruleListParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7ruleListResponse, error) {
	rsp, err := c.InfraLoadBalancingL7ruleList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingL7ruleListResponse(rsp)
}

// InfraLoadBalancingL7ruleCreateWithBodyWithResponse request with arbitrary body returning *InfraLoadBalancingL7ruleCreateResponse
func (c *ClientWithResponses) InfraLoadBalancingL7ruleCreateWithBodyWithResponse(ctx context.Context, params *InfraLoadBalancingL7ruleCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7ruleCreateResponse, error) {
	rsp, err := c.InfraLoadBalancingL7ruleCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingL7ruleCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraLoadBalancingL7ruleCreateWithResponse(ctx context.Context, params *InfraLoadBalancingL7ruleCreateParams, body InfraLoadBalancingL7ruleCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7ruleCreateResponse, error) {
	rsp, err := c.InfraLoadBalancingL7ruleCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingL7ruleCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraLoadBalancingL7ruleCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraLoadBalancingL7ruleCreateParams, body InfraLoadBalancingL7ruleCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7ruleCreateResponse, error) {
	rsp, err := c.InfraLoadBalancingL7ruleCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingL7ruleCreateResponse(rsp)
}

// InfraLoadBalancingL7ruleDestroyWithResponse request returning *InfraLoadBalancingL7ruleDestroyResponse
func (c *ClientWithResponses) InfraLoadBalancingL7ruleDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7ruleDestroyParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7ruleDestroyResponse, error) {
	rsp, err := c.InfraLoadBalancingL7ruleDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingL7ruleDestroyResponse(rsp)
}

// InfraLoadBalancingL7ruleRetrieveWithResponse request returning *InfraLoadBalancingL7ruleRetrieveResponse
func (c *ClientWithResponses) InfraLoadBalancingL7ruleRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7ruleRetrieveParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7ruleRetrieveResponse, error) {
	rsp, err := c.InfraLoadBalancingL7ruleRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingL7ruleRetrieveResponse(rsp)
}

// InfraLoadBalancingL7rulePartialUpdateWithBodyWithResponse request with arbitrary body returning *InfraLoadBalancingL7rulePartialUpdateResponse
func (c *ClientWithResponses) InfraLoadBalancingL7rulePartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7rulePartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7rulePartialUpdateResponse, error) {
	rsp, err := c.InfraLoadBalancingL7rulePartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingL7rulePartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraLoadBalancingL7rulePartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7rulePartialUpdateParams, body InfraLoadBalancingL7rulePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7rulePartialUpdateResponse, error) {
	rsp, err := c.InfraLoadBalancingL7rulePartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingL7rulePartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraLoadBalancingL7rulePartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7rulePartialUpdateParams, body InfraLoadBalancingL7rulePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7rulePartialUpdateResponse, error) {
	rsp, err := c.InfraLoadBalancingL7rulePartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingL7rulePartialUpdateResponse(rsp)
}

// InfraLoadBalancingL7ruleUpdateWithBodyWithResponse request with arbitrary body returning *InfraLoadBalancingL7ruleUpdateResponse
func (c *ClientWithResponses) InfraLoadBalancingL7ruleUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7ruleUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7ruleUpdateResponse, error) {
	rsp, err := c.InfraLoadBalancingL7ruleUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingL7ruleUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraLoadBalancingL7ruleUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7ruleUpdateParams, body InfraLoadBalancingL7ruleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7ruleUpdateResponse, error) {
	rsp, err := c.InfraLoadBalancingL7ruleUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingL7ruleUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraLoadBalancingL7ruleUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingL7ruleUpdateParams, body InfraLoadBalancingL7ruleUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingL7ruleUpdateResponse, error) {
	rsp, err := c.InfraLoadBalancingL7ruleUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingL7ruleUpdateResponse(rsp)
}

// InfraLoadBalancingListenerListWithResponse request returning *InfraLoadBalancingListenerListResponse
func (c *ClientWithResponses) InfraLoadBalancingListenerListWithResponse(ctx context.Context, params *InfraLoadBalancingListenerListParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingListenerListResponse, error) {
	rsp, err := c.InfraLoadBalancingListenerList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingListenerListResponse(rsp)
}

// InfraLoadBalancingListenerCreateWithBodyWithResponse request with arbitrary body returning *InfraLoadBalancingListenerCreateResponse
func (c *ClientWithResponses) InfraLoadBalancingListenerCreateWithBodyWithResponse(ctx context.Context, params *InfraLoadBalancingListenerCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLoadBalancingListenerCreateResponse, error) {
	rsp, err := c.InfraLoadBalancingListenerCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingListenerCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraLoadBalancingListenerCreateWithResponse(ctx context.Context, params *InfraLoadBalancingListenerCreateParams, body InfraLoadBalancingListenerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingListenerCreateResponse, error) {
	rsp, err := c.InfraLoadBalancingListenerCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingListenerCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraLoadBalancingListenerCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraLoadBalancingListenerCreateParams, body InfraLoadBalancingListenerCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingListenerCreateResponse, error) {
	rsp, err := c.InfraLoadBalancingListenerCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingListenerCreateResponse(rsp)
}

// InfraLoadBalancingListenerMetricsSchemaRetrieveWithResponse request returning *InfraLoadBalancingListenerMetricsSchemaRetrieveResponse
func (c *ClientWithResponses) InfraLoadBalancingListenerMetricsSchemaRetrieveWithResponse(ctx context.Context, params *InfraLoadBalancingListenerMetricsSchemaRetrieveParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingListenerMetricsSchemaRetrieveResponse, error) {
	rsp, err := c.InfraLoadBalancingListenerMetricsSchemaRetrieve(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingListenerMetricsSchemaRetrieveResponse(rsp)
}

// InfraLoadBalancingListenerDestroyWithResponse request returning *InfraLoadBalancingListenerDestroyResponse
func (c *ClientWithResponses) InfraLoadBalancingListenerDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingListenerDestroyParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingListenerDestroyResponse, error) {
	rsp, err := c.InfraLoadBalancingListenerDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingListenerDestroyResponse(rsp)
}

// InfraLoadBalancingListenerRetrieveWithResponse request returning *InfraLoadBalancingListenerRetrieveResponse
func (c *ClientWithResponses) InfraLoadBalancingListenerRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingListenerRetrieveParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingListenerRetrieveResponse, error) {
	rsp, err := c.InfraLoadBalancingListenerRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingListenerRetrieveResponse(rsp)
}

// InfraLoadBalancingListenerPartialUpdateWithBodyWithResponse request with arbitrary body returning *InfraLoadBalancingListenerPartialUpdateResponse
func (c *ClientWithResponses) InfraLoadBalancingListenerPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingListenerPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLoadBalancingListenerPartialUpdateResponse, error) {
	rsp, err := c.InfraLoadBalancingListenerPartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingListenerPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraLoadBalancingListenerPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingListenerPartialUpdateParams, body InfraLoadBalancingListenerPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingListenerPartialUpdateResponse, error) {
	rsp, err := c.InfraLoadBalancingListenerPartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingListenerPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraLoadBalancingListenerPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingListenerPartialUpdateParams, body InfraLoadBalancingListenerPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingListenerPartialUpdateResponse, error) {
	rsp, err := c.InfraLoadBalancingListenerPartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingListenerPartialUpdateResponse(rsp)
}

// InfraLoadBalancingListenerUpdateWithBodyWithResponse request with arbitrary body returning *InfraLoadBalancingListenerUpdateResponse
func (c *ClientWithResponses) InfraLoadBalancingListenerUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingListenerUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLoadBalancingListenerUpdateResponse, error) {
	rsp, err := c.InfraLoadBalancingListenerUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingListenerUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraLoadBalancingListenerUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingListenerUpdateParams, body InfraLoadBalancingListenerUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingListenerUpdateResponse, error) {
	rsp, err := c.InfraLoadBalancingListenerUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingListenerUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraLoadBalancingListenerUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingListenerUpdateParams, body InfraLoadBalancingListenerUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingListenerUpdateResponse, error) {
	rsp, err := c.InfraLoadBalancingListenerUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingListenerUpdateResponse(rsp)
}

// InfraLoadBalancingListenerMetricsRetrieveWithResponse request returning *InfraLoadBalancingListenerMetricsRetrieveResponse
func (c *ClientWithResponses) InfraLoadBalancingListenerMetricsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingListenerMetricsRetrieveParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingListenerMetricsRetrieveResponse, error) {
	rsp, err := c.InfraLoadBalancingListenerMetricsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingListenerMetricsRetrieveResponse(rsp)
}

// InfraLoadBalancingLoadBalancerListWithResponse request returning *InfraLoadBalancingLoadBalancerListResponse
func (c *ClientWithResponses) InfraLoadBalancingLoadBalancerListWithResponse(ctx context.Context, params *InfraLoadBalancingLoadBalancerListParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingLoadBalancerListResponse, error) {
	rsp, err := c.InfraLoadBalancingLoadBalancerList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingLoadBalancerListResponse(rsp)
}

// InfraLoadBalancingLoadBalancerCreateWithBodyWithResponse request with arbitrary body returning *InfraLoadBalancingLoadBalancerCreateResponse
func (c *ClientWithResponses) InfraLoadBalancingLoadBalancerCreateWithBodyWithResponse(ctx context.Context, params *InfraLoadBalancingLoadBalancerCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLoadBalancingLoadBalancerCreateResponse, error) {
	rsp, err := c.InfraLoadBalancingLoadBalancerCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingLoadBalancerCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraLoadBalancingLoadBalancerCreateWithResponse(ctx context.Context, params *InfraLoadBalancingLoadBalancerCreateParams, body InfraLoadBalancingLoadBalancerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingLoadBalancerCreateResponse, error) {
	rsp, err := c.InfraLoadBalancingLoadBalancerCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingLoadBalancerCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraLoadBalancingLoadBalancerCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraLoadBalancingLoadBalancerCreateParams, body InfraLoadBalancingLoadBalancerCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingLoadBalancerCreateResponse, error) {
	rsp, err := c.InfraLoadBalancingLoadBalancerCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingLoadBalancerCreateResponse(rsp)
}

// InfraLoadBalancingLoadBalancerMetricsSchemaRetrieveWithResponse request returning *InfraLoadBalancingLoadBalancerMetricsSchemaRetrieveResponse
func (c *ClientWithResponses) InfraLoadBalancingLoadBalancerMetricsSchemaRetrieveWithResponse(ctx context.Context, params *InfraLoadBalancingLoadBalancerMetricsSchemaRetrieveParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingLoadBalancerMetricsSchemaRetrieveResponse, error) {
	rsp, err := c.InfraLoadBalancingLoadBalancerMetricsSchemaRetrieve(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingLoadBalancerMetricsSchemaRetrieveResponse(rsp)
}

// InfraLoadBalancingLoadBalancerDestroyWithResponse request returning *InfraLoadBalancingLoadBalancerDestroyResponse
func (c *ClientWithResponses) InfraLoadBalancingLoadBalancerDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerDestroyParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingLoadBalancerDestroyResponse, error) {
	rsp, err := c.InfraLoadBalancingLoadBalancerDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingLoadBalancerDestroyResponse(rsp)
}

// InfraLoadBalancingLoadBalancerRetrieveWithResponse request returning *InfraLoadBalancingLoadBalancerRetrieveResponse
func (c *ClientWithResponses) InfraLoadBalancingLoadBalancerRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerRetrieveParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingLoadBalancerRetrieveResponse, error) {
	rsp, err := c.InfraLoadBalancingLoadBalancerRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingLoadBalancerRetrieveResponse(rsp)
}

// InfraLoadBalancingLoadBalancerPartialUpdateWithBodyWithResponse request with arbitrary body returning *InfraLoadBalancingLoadBalancerPartialUpdateResponse
func (c *ClientWithResponses) InfraLoadBalancingLoadBalancerPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLoadBalancingLoadBalancerPartialUpdateResponse, error) {
	rsp, err := c.InfraLoadBalancingLoadBalancerPartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingLoadBalancerPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraLoadBalancingLoadBalancerPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerPartialUpdateParams, body InfraLoadBalancingLoadBalancerPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingLoadBalancerPartialUpdateResponse, error) {
	rsp, err := c.InfraLoadBalancingLoadBalancerPartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingLoadBalancerPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraLoadBalancingLoadBalancerPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerPartialUpdateParams, body InfraLoadBalancingLoadBalancerPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingLoadBalancerPartialUpdateResponse, error) {
	rsp, err := c.InfraLoadBalancingLoadBalancerPartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingLoadBalancerPartialUpdateResponse(rsp)
}

// InfraLoadBalancingLoadBalancerUpdateWithBodyWithResponse request with arbitrary body returning *InfraLoadBalancingLoadBalancerUpdateResponse
func (c *ClientWithResponses) InfraLoadBalancingLoadBalancerUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLoadBalancingLoadBalancerUpdateResponse, error) {
	rsp, err := c.InfraLoadBalancingLoadBalancerUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingLoadBalancerUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraLoadBalancingLoadBalancerUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerUpdateParams, body InfraLoadBalancingLoadBalancerUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingLoadBalancerUpdateResponse, error) {
	rsp, err := c.InfraLoadBalancingLoadBalancerUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingLoadBalancerUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraLoadBalancingLoadBalancerUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerUpdateParams, body InfraLoadBalancingLoadBalancerUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingLoadBalancerUpdateResponse, error) {
	rsp, err := c.InfraLoadBalancingLoadBalancerUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingLoadBalancerUpdateResponse(rsp)
}

// InfraLoadBalancingLoadBalancerMetricsRetrieveWithResponse request returning *InfraLoadBalancingLoadBalancerMetricsRetrieveResponse
func (c *ClientWithResponses) InfraLoadBalancingLoadBalancerMetricsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingLoadBalancerMetricsRetrieveParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingLoadBalancerMetricsRetrieveResponse, error) {
	rsp, err := c.InfraLoadBalancingLoadBalancerMetricsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingLoadBalancerMetricsRetrieveResponse(rsp)
}

// InfraLoadBalancingServerGroupMemberListWithResponse request returning *InfraLoadBalancingServerGroupMemberListResponse
func (c *ClientWithResponses) InfraLoadBalancingServerGroupMemberListWithResponse(ctx context.Context, params *InfraLoadBalancingServerGroupMemberListParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupMemberListResponse, error) {
	rsp, err := c.InfraLoadBalancingServerGroupMemberList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingServerGroupMemberListResponse(rsp)
}

// InfraLoadBalancingServerGroupMemberCreateWithBodyWithResponse request with arbitrary body returning *InfraLoadBalancingServerGroupMemberCreateResponse
func (c *ClientWithResponses) InfraLoadBalancingServerGroupMemberCreateWithBodyWithResponse(ctx context.Context, params *InfraLoadBalancingServerGroupMemberCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupMemberCreateResponse, error) {
	rsp, err := c.InfraLoadBalancingServerGroupMemberCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingServerGroupMemberCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraLoadBalancingServerGroupMemberCreateWithResponse(ctx context.Context, params *InfraLoadBalancingServerGroupMemberCreateParams, body InfraLoadBalancingServerGroupMemberCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupMemberCreateResponse, error) {
	rsp, err := c.InfraLoadBalancingServerGroupMemberCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingServerGroupMemberCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraLoadBalancingServerGroupMemberCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraLoadBalancingServerGroupMemberCreateParams, body InfraLoadBalancingServerGroupMemberCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupMemberCreateResponse, error) {
	rsp, err := c.InfraLoadBalancingServerGroupMemberCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingServerGroupMemberCreateResponse(rsp)
}

// InfraLoadBalancingServerGroupMemberDestroyWithResponse request returning *InfraLoadBalancingServerGroupMemberDestroyResponse
func (c *ClientWithResponses) InfraLoadBalancingServerGroupMemberDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberDestroyParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupMemberDestroyResponse, error) {
	rsp, err := c.InfraLoadBalancingServerGroupMemberDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingServerGroupMemberDestroyResponse(rsp)
}

// InfraLoadBalancingServerGroupMemberRetrieveWithResponse request returning *InfraLoadBalancingServerGroupMemberRetrieveResponse
func (c *ClientWithResponses) InfraLoadBalancingServerGroupMemberRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberRetrieveParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupMemberRetrieveResponse, error) {
	rsp, err := c.InfraLoadBalancingServerGroupMemberRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingServerGroupMemberRetrieveResponse(rsp)
}

// InfraLoadBalancingServerGroupMemberPartialUpdateWithBodyWithResponse request with arbitrary body returning *InfraLoadBalancingServerGroupMemberPartialUpdateResponse
func (c *ClientWithResponses) InfraLoadBalancingServerGroupMemberPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupMemberPartialUpdateResponse, error) {
	rsp, err := c.InfraLoadBalancingServerGroupMemberPartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingServerGroupMemberPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraLoadBalancingServerGroupMemberPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberPartialUpdateParams, body InfraLoadBalancingServerGroupMemberPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupMemberPartialUpdateResponse, error) {
	rsp, err := c.InfraLoadBalancingServerGroupMemberPartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingServerGroupMemberPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraLoadBalancingServerGroupMemberPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberPartialUpdateParams, body InfraLoadBalancingServerGroupMemberPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupMemberPartialUpdateResponse, error) {
	rsp, err := c.InfraLoadBalancingServerGroupMemberPartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingServerGroupMemberPartialUpdateResponse(rsp)
}

// InfraLoadBalancingServerGroupMemberUpdateWithBodyWithResponse request with arbitrary body returning *InfraLoadBalancingServerGroupMemberUpdateResponse
func (c *ClientWithResponses) InfraLoadBalancingServerGroupMemberUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupMemberUpdateResponse, error) {
	rsp, err := c.InfraLoadBalancingServerGroupMemberUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingServerGroupMemberUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraLoadBalancingServerGroupMemberUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberUpdateParams, body InfraLoadBalancingServerGroupMemberUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupMemberUpdateResponse, error) {
	rsp, err := c.InfraLoadBalancingServerGroupMemberUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingServerGroupMemberUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraLoadBalancingServerGroupMemberUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupMemberUpdateParams, body InfraLoadBalancingServerGroupMemberUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupMemberUpdateResponse, error) {
	rsp, err := c.InfraLoadBalancingServerGroupMemberUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingServerGroupMemberUpdateResponse(rsp)
}

// InfraLoadBalancingServerGroupListWithResponse request returning *InfraLoadBalancingServerGroupListResponse
func (c *ClientWithResponses) InfraLoadBalancingServerGroupListWithResponse(ctx context.Context, params *InfraLoadBalancingServerGroupListParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupListResponse, error) {
	rsp, err := c.InfraLoadBalancingServerGroupList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingServerGroupListResponse(rsp)
}

// InfraLoadBalancingServerGroupCreateWithBodyWithResponse request with arbitrary body returning *InfraLoadBalancingServerGroupCreateResponse
func (c *ClientWithResponses) InfraLoadBalancingServerGroupCreateWithBodyWithResponse(ctx context.Context, params *InfraLoadBalancingServerGroupCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupCreateResponse, error) {
	rsp, err := c.InfraLoadBalancingServerGroupCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingServerGroupCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraLoadBalancingServerGroupCreateWithResponse(ctx context.Context, params *InfraLoadBalancingServerGroupCreateParams, body InfraLoadBalancingServerGroupCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupCreateResponse, error) {
	rsp, err := c.InfraLoadBalancingServerGroupCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingServerGroupCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraLoadBalancingServerGroupCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraLoadBalancingServerGroupCreateParams, body InfraLoadBalancingServerGroupCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupCreateResponse, error) {
	rsp, err := c.InfraLoadBalancingServerGroupCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingServerGroupCreateResponse(rsp)
}

// InfraLoadBalancingServerGroupDestroyWithResponse request returning *InfraLoadBalancingServerGroupDestroyResponse
func (c *ClientWithResponses) InfraLoadBalancingServerGroupDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupDestroyParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupDestroyResponse, error) {
	rsp, err := c.InfraLoadBalancingServerGroupDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingServerGroupDestroyResponse(rsp)
}

// InfraLoadBalancingServerGroupRetrieveWithResponse request returning *InfraLoadBalancingServerGroupRetrieveResponse
func (c *ClientWithResponses) InfraLoadBalancingServerGroupRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupRetrieveParams, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupRetrieveResponse, error) {
	rsp, err := c.InfraLoadBalancingServerGroupRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingServerGroupRetrieveResponse(rsp)
}

// InfraLoadBalancingServerGroupPartialUpdateWithBodyWithResponse request with arbitrary body returning *InfraLoadBalancingServerGroupPartialUpdateResponse
func (c *ClientWithResponses) InfraLoadBalancingServerGroupPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupPartialUpdateResponse, error) {
	rsp, err := c.InfraLoadBalancingServerGroupPartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingServerGroupPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraLoadBalancingServerGroupPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupPartialUpdateParams, body InfraLoadBalancingServerGroupPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupPartialUpdateResponse, error) {
	rsp, err := c.InfraLoadBalancingServerGroupPartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingServerGroupPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraLoadBalancingServerGroupPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupPartialUpdateParams, body InfraLoadBalancingServerGroupPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupPartialUpdateResponse, error) {
	rsp, err := c.InfraLoadBalancingServerGroupPartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingServerGroupPartialUpdateResponse(rsp)
}

// InfraLoadBalancingServerGroupUpdateWithBodyWithResponse request with arbitrary body returning *InfraLoadBalancingServerGroupUpdateResponse
func (c *ClientWithResponses) InfraLoadBalancingServerGroupUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupUpdateResponse, error) {
	rsp, err := c.InfraLoadBalancingServerGroupUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingServerGroupUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraLoadBalancingServerGroupUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupUpdateParams, body InfraLoadBalancingServerGroupUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupUpdateResponse, error) {
	rsp, err := c.InfraLoadBalancingServerGroupUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingServerGroupUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraLoadBalancingServerGroupUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraLoadBalancingServerGroupUpdateParams, body InfraLoadBalancingServerGroupUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraLoadBalancingServerGroupUpdateResponse, error) {
	rsp, err := c.InfraLoadBalancingServerGroupUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraLoadBalancingServerGroupUpdateResponse(rsp)
}

// InfraPlacementgroupsListWithResponse request returning *InfraPlacementgroupsListResponse
func (c *ClientWithResponses) InfraPlacementgroupsListWithResponse(ctx context.Context, params *InfraPlacementgroupsListParams, reqEditors ...RequestEditorFn) (*InfraPlacementgroupsListResponse, error) {
	rsp, err := c.InfraPlacementgroupsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraPlacementgroupsListResponse(rsp)
}

// InfraPlacementgroupsCreateWithBodyWithResponse request with arbitrary body returning *InfraPlacementgroupsCreateResponse
func (c *ClientWithResponses) InfraPlacementgroupsCreateWithBodyWithResponse(ctx context.Context, params *InfraPlacementgroupsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraPlacementgroupsCreateResponse, error) {
	rsp, err := c.InfraPlacementgroupsCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraPlacementgroupsCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraPlacementgroupsCreateWithResponse(ctx context.Context, params *InfraPlacementgroupsCreateParams, body InfraPlacementgroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraPlacementgroupsCreateResponse, error) {
	rsp, err := c.InfraPlacementgroupsCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraPlacementgroupsCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraPlacementgroupsCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraPlacementgroupsCreateParams, body InfraPlacementgroupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraPlacementgroupsCreateResponse, error) {
	rsp, err := c.InfraPlacementgroupsCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraPlacementgroupsCreateResponse(rsp)
}

// InfraPlacementgroupsDestroyWithResponse request returning *InfraPlacementgroupsDestroyResponse
func (c *ClientWithResponses) InfraPlacementgroupsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraPlacementgroupsDestroyParams, reqEditors ...RequestEditorFn) (*InfraPlacementgroupsDestroyResponse, error) {
	rsp, err := c.InfraPlacementgroupsDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraPlacementgroupsDestroyResponse(rsp)
}

// InfraPlacementgroupsRetrieveWithResponse request returning *InfraPlacementgroupsRetrieveResponse
func (c *ClientWithResponses) InfraPlacementgroupsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraPlacementgroupsRetrieveParams, reqEditors ...RequestEditorFn) (*InfraPlacementgroupsRetrieveResponse, error) {
	rsp, err := c.InfraPlacementgroupsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraPlacementgroupsRetrieveResponse(rsp)
}

// InfraPlacementgroupsPartialUpdateWithBodyWithResponse request with arbitrary body returning *InfraPlacementgroupsPartialUpdateResponse
func (c *ClientWithResponses) InfraPlacementgroupsPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraPlacementgroupsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraPlacementgroupsPartialUpdateResponse, error) {
	rsp, err := c.InfraPlacementgroupsPartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraPlacementgroupsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraPlacementgroupsPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraPlacementgroupsPartialUpdateParams, body InfraPlacementgroupsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraPlacementgroupsPartialUpdateResponse, error) {
	rsp, err := c.InfraPlacementgroupsPartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraPlacementgroupsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraPlacementgroupsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraPlacementgroupsPartialUpdateParams, body InfraPlacementgroupsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraPlacementgroupsPartialUpdateResponse, error) {
	rsp, err := c.InfraPlacementgroupsPartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraPlacementgroupsPartialUpdateResponse(rsp)
}

// InfraPlacementgroupsUpdateWithBodyWithResponse request with arbitrary body returning *InfraPlacementgroupsUpdateResponse
func (c *ClientWithResponses) InfraPlacementgroupsUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraPlacementgroupsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraPlacementgroupsUpdateResponse, error) {
	rsp, err := c.InfraPlacementgroupsUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraPlacementgroupsUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraPlacementgroupsUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraPlacementgroupsUpdateParams, body InfraPlacementgroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraPlacementgroupsUpdateResponse, error) {
	rsp, err := c.InfraPlacementgroupsUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraPlacementgroupsUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraPlacementgroupsUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraPlacementgroupsUpdateParams, body InfraPlacementgroupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraPlacementgroupsUpdateResponse, error) {
	rsp, err := c.InfraPlacementgroupsUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraPlacementgroupsUpdateResponse(rsp)
}

// InfraPrivateIpsListWithResponse request returning *InfraPrivateIpsListResponse
func (c *ClientWithResponses) InfraPrivateIpsListWithResponse(ctx context.Context, params *InfraPrivateIpsListParams, reqEditors ...RequestEditorFn) (*InfraPrivateIpsListResponse, error) {
	rsp, err := c.InfraPrivateIpsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraPrivateIpsListResponse(rsp)
}

// InfraPrivateIpsCreateWithBodyWithResponse request with arbitrary body returning *InfraPrivateIpsCreateResponse
func (c *ClientWithResponses) InfraPrivateIpsCreateWithBodyWithResponse(ctx context.Context, params *InfraPrivateIpsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraPrivateIpsCreateResponse, error) {
	rsp, err := c.InfraPrivateIpsCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraPrivateIpsCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraPrivateIpsCreateWithResponse(ctx context.Context, params *InfraPrivateIpsCreateParams, body InfraPrivateIpsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraPrivateIpsCreateResponse, error) {
	rsp, err := c.InfraPrivateIpsCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraPrivateIpsCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraPrivateIpsCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraPrivateIpsCreateParams, body InfraPrivateIpsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraPrivateIpsCreateResponse, error) {
	rsp, err := c.InfraPrivateIpsCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraPrivateIpsCreateResponse(rsp)
}

// InfraPrivateIpsDestroyWithResponse request returning *InfraPrivateIpsDestroyResponse
func (c *ClientWithResponses) InfraPrivateIpsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraPrivateIpsDestroyParams, reqEditors ...RequestEditorFn) (*InfraPrivateIpsDestroyResponse, error) {
	rsp, err := c.InfraPrivateIpsDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraPrivateIpsDestroyResponse(rsp)
}

// InfraPrivateIpsRetrieveWithResponse request returning *InfraPrivateIpsRetrieveResponse
func (c *ClientWithResponses) InfraPrivateIpsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraPrivateIpsRetrieveParams, reqEditors ...RequestEditorFn) (*InfraPrivateIpsRetrieveResponse, error) {
	rsp, err := c.InfraPrivateIpsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraPrivateIpsRetrieveResponse(rsp)
}

// InfraPrivateIpsPartialUpdateWithBodyWithResponse request with arbitrary body returning *InfraPrivateIpsPartialUpdateResponse
func (c *ClientWithResponses) InfraPrivateIpsPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraPrivateIpsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraPrivateIpsPartialUpdateResponse, error) {
	rsp, err := c.InfraPrivateIpsPartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraPrivateIpsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraPrivateIpsPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraPrivateIpsPartialUpdateParams, body InfraPrivateIpsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraPrivateIpsPartialUpdateResponse, error) {
	rsp, err := c.InfraPrivateIpsPartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraPrivateIpsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraPrivateIpsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraPrivateIpsPartialUpdateParams, body InfraPrivateIpsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraPrivateIpsPartialUpdateResponse, error) {
	rsp, err := c.InfraPrivateIpsPartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraPrivateIpsPartialUpdateResponse(rsp)
}

// InfraPrivateIpsUpdateWithBodyWithResponse request with arbitrary body returning *InfraPrivateIpsUpdateResponse
func (c *ClientWithResponses) InfraPrivateIpsUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraPrivateIpsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraPrivateIpsUpdateResponse, error) {
	rsp, err := c.InfraPrivateIpsUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraPrivateIpsUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraPrivateIpsUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraPrivateIpsUpdateParams, body InfraPrivateIpsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraPrivateIpsUpdateResponse, error) {
	rsp, err := c.InfraPrivateIpsUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraPrivateIpsUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraPrivateIpsUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraPrivateIpsUpdateParams, body InfraPrivateIpsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraPrivateIpsUpdateResponse, error) {
	rsp, err := c.InfraPrivateIpsUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraPrivateIpsUpdateResponse(rsp)
}

// InfraRouteTablesListWithResponse request returning *InfraRouteTablesListResponse
func (c *ClientWithResponses) InfraRouteTablesListWithResponse(ctx context.Context, params *InfraRouteTablesListParams, reqEditors ...RequestEditorFn) (*InfraRouteTablesListResponse, error) {
	rsp, err := c.InfraRouteTablesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraRouteTablesListResponse(rsp)
}

// InfraRouteTablesCreateWithBodyWithResponse request with arbitrary body returning *InfraRouteTablesCreateResponse
func (c *ClientWithResponses) InfraRouteTablesCreateWithBodyWithResponse(ctx context.Context, params *InfraRouteTablesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraRouteTablesCreateResponse, error) {
	rsp, err := c.InfraRouteTablesCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraRouteTablesCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraRouteTablesCreateWithResponse(ctx context.Context, params *InfraRouteTablesCreateParams, body InfraRouteTablesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraRouteTablesCreateResponse, error) {
	rsp, err := c.InfraRouteTablesCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraRouteTablesCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraRouteTablesCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraRouteTablesCreateParams, body InfraRouteTablesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraRouteTablesCreateResponse, error) {
	rsp, err := c.InfraRouteTablesCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraRouteTablesCreateResponse(rsp)
}

// InfraRouteTablesDestroyWithResponse request returning *InfraRouteTablesDestroyResponse
func (c *ClientWithResponses) InfraRouteTablesDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesDestroyParams, reqEditors ...RequestEditorFn) (*InfraRouteTablesDestroyResponse, error) {
	rsp, err := c.InfraRouteTablesDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraRouteTablesDestroyResponse(rsp)
}

// InfraRouteTablesRetrieveWithResponse request returning *InfraRouteTablesRetrieveResponse
func (c *ClientWithResponses) InfraRouteTablesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesRetrieveParams, reqEditors ...RequestEditorFn) (*InfraRouteTablesRetrieveResponse, error) {
	rsp, err := c.InfraRouteTablesRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraRouteTablesRetrieveResponse(rsp)
}

// InfraRouteTablesPartialUpdateWithBodyWithResponse request with arbitrary body returning *InfraRouteTablesPartialUpdateResponse
func (c *ClientWithResponses) InfraRouteTablesPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraRouteTablesPartialUpdateResponse, error) {
	rsp, err := c.InfraRouteTablesPartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraRouteTablesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraRouteTablesPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesPartialUpdateParams, body InfraRouteTablesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraRouteTablesPartialUpdateResponse, error) {
	rsp, err := c.InfraRouteTablesPartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraRouteTablesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraRouteTablesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesPartialUpdateParams, body InfraRouteTablesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraRouteTablesPartialUpdateResponse, error) {
	rsp, err := c.InfraRouteTablesPartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraRouteTablesPartialUpdateResponse(rsp)
}

// InfraRouteTablesUpdateWithBodyWithResponse request with arbitrary body returning *InfraRouteTablesUpdateResponse
func (c *ClientWithResponses) InfraRouteTablesUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraRouteTablesUpdateResponse, error) {
	rsp, err := c.InfraRouteTablesUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraRouteTablesUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraRouteTablesUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesUpdateParams, body InfraRouteTablesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraRouteTablesUpdateResponse, error) {
	rsp, err := c.InfraRouteTablesUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraRouteTablesUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraRouteTablesUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesUpdateParams, body InfraRouteTablesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraRouteTablesUpdateResponse, error) {
	rsp, err := c.InfraRouteTablesUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraRouteTablesUpdateResponse(rsp)
}

// InfraRouteTablesDisableInternetAccessUpdateWithResponse request returning *InfraRouteTablesDisableInternetAccessUpdateResponse
func (c *ClientWithResponses) InfraRouteTablesDisableInternetAccessUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesDisableInternetAccessUpdateParams, reqEditors ...RequestEditorFn) (*InfraRouteTablesDisableInternetAccessUpdateResponse, error) {
	rsp, err := c.InfraRouteTablesDisableInternetAccessUpdate(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraRouteTablesDisableInternetAccessUpdateResponse(rsp)
}

// InfraRouteTablesEnableInternetAccessUpdateWithResponse request returning *InfraRouteTablesEnableInternetAccessUpdateResponse
func (c *ClientWithResponses) InfraRouteTablesEnableInternetAccessUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesEnableInternetAccessUpdateParams, reqEditors ...RequestEditorFn) (*InfraRouteTablesEnableInternetAccessUpdateResponse, error) {
	rsp, err := c.InfraRouteTablesEnableInternetAccessUpdate(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraRouteTablesEnableInternetAccessUpdateResponse(rsp)
}

// InfraRouteTablesSubnetsRetrieveWithResponse request returning *InfraRouteTablesSubnetsRetrieveResponse
func (c *ClientWithResponses) InfraRouteTablesSubnetsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraRouteTablesSubnetsRetrieveParams, reqEditors ...RequestEditorFn) (*InfraRouteTablesSubnetsRetrieveResponse, error) {
	rsp, err := c.InfraRouteTablesSubnetsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraRouteTablesSubnetsRetrieveResponse(rsp)
}

// InfraSecurityGroupRulesListWithResponse request returning *InfraSecurityGroupRulesListResponse
func (c *ClientWithResponses) InfraSecurityGroupRulesListWithResponse(ctx context.Context, params *InfraSecurityGroupRulesListParams, reqEditors ...RequestEditorFn) (*InfraSecurityGroupRulesListResponse, error) {
	rsp, err := c.InfraSecurityGroupRulesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSecurityGroupRulesListResponse(rsp)
}

// InfraSecurityGroupRulesCreateWithBodyWithResponse request with arbitrary body returning *InfraSecurityGroupRulesCreateResponse
func (c *ClientWithResponses) InfraSecurityGroupRulesCreateWithBodyWithResponse(ctx context.Context, params *InfraSecurityGroupRulesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraSecurityGroupRulesCreateResponse, error) {
	rsp, err := c.InfraSecurityGroupRulesCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSecurityGroupRulesCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraSecurityGroupRulesCreateWithResponse(ctx context.Context, params *InfraSecurityGroupRulesCreateParams, body InfraSecurityGroupRulesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraSecurityGroupRulesCreateResponse, error) {
	rsp, err := c.InfraSecurityGroupRulesCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSecurityGroupRulesCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraSecurityGroupRulesCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraSecurityGroupRulesCreateParams, body InfraSecurityGroupRulesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraSecurityGroupRulesCreateResponse, error) {
	rsp, err := c.InfraSecurityGroupRulesCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSecurityGroupRulesCreateResponse(rsp)
}

// InfraSecurityGroupRulesDestroyWithResponse request returning *InfraSecurityGroupRulesDestroyResponse
func (c *ClientWithResponses) InfraSecurityGroupRulesDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupRulesDestroyParams, reqEditors ...RequestEditorFn) (*InfraSecurityGroupRulesDestroyResponse, error) {
	rsp, err := c.InfraSecurityGroupRulesDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSecurityGroupRulesDestroyResponse(rsp)
}

// InfraSecurityGroupRulesRetrieveWithResponse request returning *InfraSecurityGroupRulesRetrieveResponse
func (c *ClientWithResponses) InfraSecurityGroupRulesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupRulesRetrieveParams, reqEditors ...RequestEditorFn) (*InfraSecurityGroupRulesRetrieveResponse, error) {
	rsp, err := c.InfraSecurityGroupRulesRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSecurityGroupRulesRetrieveResponse(rsp)
}

// InfraSecurityGroupRulesPartialUpdateWithBodyWithResponse request with arbitrary body returning *InfraSecurityGroupRulesPartialUpdateResponse
func (c *ClientWithResponses) InfraSecurityGroupRulesPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupRulesPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraSecurityGroupRulesPartialUpdateResponse, error) {
	rsp, err := c.InfraSecurityGroupRulesPartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSecurityGroupRulesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraSecurityGroupRulesPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupRulesPartialUpdateParams, body InfraSecurityGroupRulesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraSecurityGroupRulesPartialUpdateResponse, error) {
	rsp, err := c.InfraSecurityGroupRulesPartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSecurityGroupRulesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraSecurityGroupRulesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupRulesPartialUpdateParams, body InfraSecurityGroupRulesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraSecurityGroupRulesPartialUpdateResponse, error) {
	rsp, err := c.InfraSecurityGroupRulesPartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSecurityGroupRulesPartialUpdateResponse(rsp)
}

// InfraSecurityGroupRulesUpdateWithBodyWithResponse request with arbitrary body returning *InfraSecurityGroupRulesUpdateResponse
func (c *ClientWithResponses) InfraSecurityGroupRulesUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupRulesUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraSecurityGroupRulesUpdateResponse, error) {
	rsp, err := c.InfraSecurityGroupRulesUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSecurityGroupRulesUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraSecurityGroupRulesUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupRulesUpdateParams, body InfraSecurityGroupRulesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraSecurityGroupRulesUpdateResponse, error) {
	rsp, err := c.InfraSecurityGroupRulesUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSecurityGroupRulesUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraSecurityGroupRulesUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupRulesUpdateParams, body InfraSecurityGroupRulesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraSecurityGroupRulesUpdateResponse, error) {
	rsp, err := c.InfraSecurityGroupRulesUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSecurityGroupRulesUpdateResponse(rsp)
}

// InfraSecurityGroupsListWithResponse request returning *InfraSecurityGroupsListResponse
func (c *ClientWithResponses) InfraSecurityGroupsListWithResponse(ctx context.Context, params *InfraSecurityGroupsListParams, reqEditors ...RequestEditorFn) (*InfraSecurityGroupsListResponse, error) {
	rsp, err := c.InfraSecurityGroupsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSecurityGroupsListResponse(rsp)
}

// InfraSecurityGroupsCreateWithBodyWithResponse request with arbitrary body returning *InfraSecurityGroupsCreateResponse
func (c *ClientWithResponses) InfraSecurityGroupsCreateWithBodyWithResponse(ctx context.Context, params *InfraSecurityGroupsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraSecurityGroupsCreateResponse, error) {
	rsp, err := c.InfraSecurityGroupsCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSecurityGroupsCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraSecurityGroupsCreateWithResponse(ctx context.Context, params *InfraSecurityGroupsCreateParams, body InfraSecurityGroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraSecurityGroupsCreateResponse, error) {
	rsp, err := c.InfraSecurityGroupsCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSecurityGroupsCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraSecurityGroupsCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraSecurityGroupsCreateParams, body InfraSecurityGroupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraSecurityGroupsCreateResponse, error) {
	rsp, err := c.InfraSecurityGroupsCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSecurityGroupsCreateResponse(rsp)
}

// InfraSecurityGroupsDestroyWithResponse request returning *InfraSecurityGroupsDestroyResponse
func (c *ClientWithResponses) InfraSecurityGroupsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupsDestroyParams, reqEditors ...RequestEditorFn) (*InfraSecurityGroupsDestroyResponse, error) {
	rsp, err := c.InfraSecurityGroupsDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSecurityGroupsDestroyResponse(rsp)
}

// InfraSecurityGroupsRetrieveWithResponse request returning *InfraSecurityGroupsRetrieveResponse
func (c *ClientWithResponses) InfraSecurityGroupsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupsRetrieveParams, reqEditors ...RequestEditorFn) (*InfraSecurityGroupsRetrieveResponse, error) {
	rsp, err := c.InfraSecurityGroupsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSecurityGroupsRetrieveResponse(rsp)
}

// InfraSecurityGroupsPartialUpdateWithBodyWithResponse request with arbitrary body returning *InfraSecurityGroupsPartialUpdateResponse
func (c *ClientWithResponses) InfraSecurityGroupsPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraSecurityGroupsPartialUpdateResponse, error) {
	rsp, err := c.InfraSecurityGroupsPartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSecurityGroupsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraSecurityGroupsPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupsPartialUpdateParams, body InfraSecurityGroupsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraSecurityGroupsPartialUpdateResponse, error) {
	rsp, err := c.InfraSecurityGroupsPartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSecurityGroupsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraSecurityGroupsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupsPartialUpdateParams, body InfraSecurityGroupsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraSecurityGroupsPartialUpdateResponse, error) {
	rsp, err := c.InfraSecurityGroupsPartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSecurityGroupsPartialUpdateResponse(rsp)
}

// InfraSecurityGroupsUpdateWithBodyWithResponse request with arbitrary body returning *InfraSecurityGroupsUpdateResponse
func (c *ClientWithResponses) InfraSecurityGroupsUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraSecurityGroupsUpdateResponse, error) {
	rsp, err := c.InfraSecurityGroupsUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSecurityGroupsUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraSecurityGroupsUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupsUpdateParams, body InfraSecurityGroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraSecurityGroupsUpdateResponse, error) {
	rsp, err := c.InfraSecurityGroupsUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSecurityGroupsUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraSecurityGroupsUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSecurityGroupsUpdateParams, body InfraSecurityGroupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraSecurityGroupsUpdateResponse, error) {
	rsp, err := c.InfraSecurityGroupsUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSecurityGroupsUpdateResponse(rsp)
}

// InfraServersListWithResponse request returning *InfraServersListResponse
func (c *ClientWithResponses) InfraServersListWithResponse(ctx context.Context, params *InfraServersListParams, reqEditors ...RequestEditorFn) (*InfraServersListResponse, error) {
	rsp, err := c.InfraServersList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersListResponse(rsp)
}

// InfraServersCreateWithBodyWithResponse request with arbitrary body returning *InfraServersCreateResponse
func (c *ClientWithResponses) InfraServersCreateWithBodyWithResponse(ctx context.Context, params *InfraServersCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraServersCreateResponse, error) {
	rsp, err := c.InfraServersCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraServersCreateWithResponse(ctx context.Context, params *InfraServersCreateParams, body InfraServersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraServersCreateResponse, error) {
	rsp, err := c.InfraServersCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraServersCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraServersCreateParams, body InfraServersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraServersCreateResponse, error) {
	rsp, err := c.InfraServersCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersCreateResponse(rsp)
}

// InfraServersMetricsSchemaRetrieveWithResponse request returning *InfraServersMetricsSchemaRetrieveResponse
func (c *ClientWithResponses) InfraServersMetricsSchemaRetrieveWithResponse(ctx context.Context, params *InfraServersMetricsSchemaRetrieveParams, reqEditors ...RequestEditorFn) (*InfraServersMetricsSchemaRetrieveResponse, error) {
	rsp, err := c.InfraServersMetricsSchemaRetrieve(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersMetricsSchemaRetrieveResponse(rsp)
}

// InfraServersDestroyWithResponse request returning *InfraServersDestroyResponse
func (c *ClientWithResponses) InfraServersDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersDestroyParams, reqEditors ...RequestEditorFn) (*InfraServersDestroyResponse, error) {
	rsp, err := c.InfraServersDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersDestroyResponse(rsp)
}

// InfraServersRetrieveWithResponse request returning *InfraServersRetrieveResponse
func (c *ClientWithResponses) InfraServersRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersRetrieveParams, reqEditors ...RequestEditorFn) (*InfraServersRetrieveResponse, error) {
	rsp, err := c.InfraServersRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersRetrieveResponse(rsp)
}

// InfraServersPartialUpdateWithBodyWithResponse request with arbitrary body returning *InfraServersPartialUpdateResponse
func (c *ClientWithResponses) InfraServersPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraServersPartialUpdateResponse, error) {
	rsp, err := c.InfraServersPartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraServersPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersPartialUpdateParams, body InfraServersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraServersPartialUpdateResponse, error) {
	rsp, err := c.InfraServersPartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraServersPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersPartialUpdateParams, body InfraServersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraServersPartialUpdateResponse, error) {
	rsp, err := c.InfraServersPartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersPartialUpdateResponse(rsp)
}

// InfraServersUpdateWithBodyWithResponse request with arbitrary body returning *InfraServersUpdateResponse
func (c *ClientWithResponses) InfraServersUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraServersUpdateResponse, error) {
	rsp, err := c.InfraServersUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraServersUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body InfraServersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraServersUpdateResponse, error) {
	rsp, err := c.InfraServersUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraServersUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body InfraServersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraServersUpdateResponse, error) {
	rsp, err := c.InfraServersUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersUpdateResponse(rsp)
}

// InfraServersActionLogRetrieveWithResponse request returning *InfraServersActionLogRetrieveResponse
func (c *ClientWithResponses) InfraServersActionLogRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersActionLogRetrieveParams, reqEditors ...RequestEditorFn) (*InfraServersActionLogRetrieveResponse, error) {
	rsp, err := c.InfraServersActionLogRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersActionLogRetrieveResponse(rsp)
}

// InfraServersAttachEipCreateWithBodyWithResponse request with arbitrary body returning *InfraServersAttachEipCreateResponse
func (c *ClientWithResponses) InfraServersAttachEipCreateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachEipCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraServersAttachEipCreateResponse, error) {
	rsp, err := c.InfraServersAttachEipCreateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersAttachEipCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraServersAttachEipCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachEipCreateParams, body InfraServersAttachEipCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraServersAttachEipCreateResponse, error) {
	rsp, err := c.InfraServersAttachEipCreate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersAttachEipCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraServersAttachEipCreateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachEipCreateParams, body InfraServersAttachEipCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraServersAttachEipCreateResponse, error) {
	rsp, err := c.InfraServersAttachEipCreateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersAttachEipCreateResponse(rsp)
}

// InfraServersAttachPrivateipCreateWithBodyWithResponse request with arbitrary body returning *InfraServersAttachPrivateipCreateResponse
func (c *ClientWithResponses) InfraServersAttachPrivateipCreateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachPrivateipCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraServersAttachPrivateipCreateResponse, error) {
	rsp, err := c.InfraServersAttachPrivateipCreateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersAttachPrivateipCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraServersAttachPrivateipCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachPrivateipCreateParams, body InfraServersAttachPrivateipCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraServersAttachPrivateipCreateResponse, error) {
	rsp, err := c.InfraServersAttachPrivateipCreate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersAttachPrivateipCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraServersAttachPrivateipCreateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachPrivateipCreateParams, body InfraServersAttachPrivateipCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraServersAttachPrivateipCreateResponse, error) {
	rsp, err := c.InfraServersAttachPrivateipCreateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersAttachPrivateipCreateResponse(rsp)
}

// InfraServersAttachSubnetCreateWithBodyWithResponse request with arbitrary body returning *InfraServersAttachSubnetCreateResponse
func (c *ClientWithResponses) InfraServersAttachSubnetCreateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachSubnetCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraServersAttachSubnetCreateResponse, error) {
	rsp, err := c.InfraServersAttachSubnetCreateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersAttachSubnetCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraServersAttachSubnetCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachSubnetCreateParams, body InfraServersAttachSubnetCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraServersAttachSubnetCreateResponse, error) {
	rsp, err := c.InfraServersAttachSubnetCreate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersAttachSubnetCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraServersAttachSubnetCreateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachSubnetCreateParams, body InfraServersAttachSubnetCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraServersAttachSubnetCreateResponse, error) {
	rsp, err := c.InfraServersAttachSubnetCreateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersAttachSubnetCreateResponse(rsp)
}

// InfraServersAttachVolumeCreateWithBodyWithResponse request with arbitrary body returning *InfraServersAttachVolumeCreateResponse
func (c *ClientWithResponses) InfraServersAttachVolumeCreateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachVolumeCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraServersAttachVolumeCreateResponse, error) {
	rsp, err := c.InfraServersAttachVolumeCreateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersAttachVolumeCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraServersAttachVolumeCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachVolumeCreateParams, body InfraServersAttachVolumeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraServersAttachVolumeCreateResponse, error) {
	rsp, err := c.InfraServersAttachVolumeCreate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersAttachVolumeCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraServersAttachVolumeCreateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersAttachVolumeCreateParams, body InfraServersAttachVolumeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraServersAttachVolumeCreateResponse, error) {
	rsp, err := c.InfraServersAttachVolumeCreateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersAttachVolumeCreateResponse(rsp)
}

// InfraServersChangePasswordCreateWithBodyWithResponse request with arbitrary body returning *InfraServersChangePasswordCreateResponse
func (c *ClientWithResponses) InfraServersChangePasswordCreateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersChangePasswordCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraServersChangePasswordCreateResponse, error) {
	rsp, err := c.InfraServersChangePasswordCreateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersChangePasswordCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraServersChangePasswordCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersChangePasswordCreateParams, body InfraServersChangePasswordCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraServersChangePasswordCreateResponse, error) {
	rsp, err := c.InfraServersChangePasswordCreate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersChangePasswordCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraServersChangePasswordCreateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersChangePasswordCreateParams, body InfraServersChangePasswordCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraServersChangePasswordCreateResponse, error) {
	rsp, err := c.InfraServersChangePasswordCreateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersChangePasswordCreateResponse(rsp)
}

// InfraServersConsoleLogRetrieveWithResponse request returning *InfraServersConsoleLogRetrieveResponse
func (c *ClientWithResponses) InfraServersConsoleLogRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersConsoleLogRetrieveParams, reqEditors ...RequestEditorFn) (*InfraServersConsoleLogRetrieveResponse, error) {
	rsp, err := c.InfraServersConsoleLogRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersConsoleLogRetrieveResponse(rsp)
}

// InfraServersConsoleCreateWithResponse request returning *InfraServersConsoleCreateResponse
func (c *ClientWithResponses) InfraServersConsoleCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersConsoleCreateParams, reqEditors ...RequestEditorFn) (*InfraServersConsoleCreateResponse, error) {
	rsp, err := c.InfraServersConsoleCreate(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersConsoleCreateResponse(rsp)
}

// InfraServersDeleteCreateWithBodyWithResponse request with arbitrary body returning *InfraServersDeleteCreateResponse
func (c *ClientWithResponses) InfraServersDeleteCreateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersDeleteCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraServersDeleteCreateResponse, error) {
	rsp, err := c.InfraServersDeleteCreateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersDeleteCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraServersDeleteCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersDeleteCreateParams, body InfraServersDeleteCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraServersDeleteCreateResponse, error) {
	rsp, err := c.InfraServersDeleteCreate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersDeleteCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraServersDeleteCreateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersDeleteCreateParams, body InfraServersDeleteCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraServersDeleteCreateResponse, error) {
	rsp, err := c.InfraServersDeleteCreateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersDeleteCreateResponse(rsp)
}

// InfraServersDetachEipCreateWithBodyWithResponse request with arbitrary body returning *InfraServersDetachEipCreateResponse
func (c *ClientWithResponses) InfraServersDetachEipCreateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersDetachEipCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraServersDetachEipCreateResponse, error) {
	rsp, err := c.InfraServersDetachEipCreateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersDetachEipCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraServersDetachEipCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersDetachEipCreateParams, body InfraServersDetachEipCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraServersDetachEipCreateResponse, error) {
	rsp, err := c.InfraServersDetachEipCreate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersDetachEipCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraServersDetachEipCreateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersDetachEipCreateParams, body InfraServersDetachEipCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraServersDetachEipCreateResponse, error) {
	rsp, err := c.InfraServersDetachEipCreateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersDetachEipCreateResponse(rsp)
}

// InfraServersDetachPrivateIpCreateWithBodyWithResponse request with arbitrary body returning *InfraServersDetachPrivateIpCreateResponse
func (c *ClientWithResponses) InfraServersDetachPrivateIpCreateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersDetachPrivateIpCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraServersDetachPrivateIpCreateResponse, error) {
	rsp, err := c.InfraServersDetachPrivateIpCreateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersDetachPrivateIpCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraServersDetachPrivateIpCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersDetachPrivateIpCreateParams, body InfraServersDetachPrivateIpCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraServersDetachPrivateIpCreateResponse, error) {
	rsp, err := c.InfraServersDetachPrivateIpCreate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersDetachPrivateIpCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraServersDetachPrivateIpCreateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersDetachPrivateIpCreateParams, body InfraServersDetachPrivateIpCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraServersDetachPrivateIpCreateResponse, error) {
	rsp, err := c.InfraServersDetachPrivateIpCreateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersDetachPrivateIpCreateResponse(rsp)
}

// InfraServersDetachVolumeCreateWithBodyWithResponse request with arbitrary body returning *InfraServersDetachVolumeCreateResponse
func (c *ClientWithResponses) InfraServersDetachVolumeCreateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersDetachVolumeCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraServersDetachVolumeCreateResponse, error) {
	rsp, err := c.InfraServersDetachVolumeCreateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersDetachVolumeCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraServersDetachVolumeCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersDetachVolumeCreateParams, body InfraServersDetachVolumeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraServersDetachVolumeCreateResponse, error) {
	rsp, err := c.InfraServersDetachVolumeCreate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersDetachVolumeCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraServersDetachVolumeCreateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersDetachVolumeCreateParams, body InfraServersDetachVolumeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraServersDetachVolumeCreateResponse, error) {
	rsp, err := c.InfraServersDetachVolumeCreateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersDetachVolumeCreateResponse(rsp)
}

// InfraServersMetricsRetrieveWithResponse request returning *InfraServersMetricsRetrieveResponse
func (c *ClientWithResponses) InfraServersMetricsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersMetricsRetrieveParams, reqEditors ...RequestEditorFn) (*InfraServersMetricsRetrieveResponse, error) {
	rsp, err := c.InfraServersMetricsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersMetricsRetrieveResponse(rsp)
}

// InfraServersResizeCreateWithBodyWithResponse request with arbitrary body returning *InfraServersResizeCreateResponse
func (c *ClientWithResponses) InfraServersResizeCreateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersResizeCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraServersResizeCreateResponse, error) {
	rsp, err := c.InfraServersResizeCreateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersResizeCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraServersResizeCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersResizeCreateParams, body InfraServersResizeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraServersResizeCreateResponse, error) {
	rsp, err := c.InfraServersResizeCreate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersResizeCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraServersResizeCreateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersResizeCreateParams, body InfraServersResizeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraServersResizeCreateResponse, error) {
	rsp, err := c.InfraServersResizeCreateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersResizeCreateResponse(rsp)
}

// InfraServersStartCreateWithResponse request returning *InfraServersStartCreateResponse
func (c *ClientWithResponses) InfraServersStartCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersStartCreateParams, reqEditors ...RequestEditorFn) (*InfraServersStartCreateResponse, error) {
	rsp, err := c.InfraServersStartCreate(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersStartCreateResponse(rsp)
}

// InfraServersStopCreateWithResponse request returning *InfraServersStopCreateResponse
func (c *ClientWithResponses) InfraServersStopCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraServersStopCreateParams, reqEditors ...RequestEditorFn) (*InfraServersStopCreateResponse, error) {
	rsp, err := c.InfraServersStopCreate(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraServersStopCreateResponse(rsp)
}

// InfraSnapshotpolicyListWithResponse request returning *InfraSnapshotpolicyListResponse
func (c *ClientWithResponses) InfraSnapshotpolicyListWithResponse(ctx context.Context, params *InfraSnapshotpolicyListParams, reqEditors ...RequestEditorFn) (*InfraSnapshotpolicyListResponse, error) {
	rsp, err := c.InfraSnapshotpolicyList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSnapshotpolicyListResponse(rsp)
}

// InfraSnapshotpolicyCreateWithBodyWithResponse request with arbitrary body returning *InfraSnapshotpolicyCreateResponse
func (c *ClientWithResponses) InfraSnapshotpolicyCreateWithBodyWithResponse(ctx context.Context, params *InfraSnapshotpolicyCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraSnapshotpolicyCreateResponse, error) {
	rsp, err := c.InfraSnapshotpolicyCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSnapshotpolicyCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraSnapshotpolicyCreateWithResponse(ctx context.Context, params *InfraSnapshotpolicyCreateParams, body InfraSnapshotpolicyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraSnapshotpolicyCreateResponse, error) {
	rsp, err := c.InfraSnapshotpolicyCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSnapshotpolicyCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraSnapshotpolicyCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraSnapshotpolicyCreateParams, body InfraSnapshotpolicyCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraSnapshotpolicyCreateResponse, error) {
	rsp, err := c.InfraSnapshotpolicyCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSnapshotpolicyCreateResponse(rsp)
}

// InfraSnapshotpolicyDestroyWithResponse request returning *InfraSnapshotpolicyDestroyResponse
func (c *ClientWithResponses) InfraSnapshotpolicyDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotpolicyDestroyParams, reqEditors ...RequestEditorFn) (*InfraSnapshotpolicyDestroyResponse, error) {
	rsp, err := c.InfraSnapshotpolicyDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSnapshotpolicyDestroyResponse(rsp)
}

// InfraSnapshotpolicyRetrieveWithResponse request returning *InfraSnapshotpolicyRetrieveResponse
func (c *ClientWithResponses) InfraSnapshotpolicyRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotpolicyRetrieveParams, reqEditors ...RequestEditorFn) (*InfraSnapshotpolicyRetrieveResponse, error) {
	rsp, err := c.InfraSnapshotpolicyRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSnapshotpolicyRetrieveResponse(rsp)
}

// InfraSnapshotpolicyPartialUpdateWithBodyWithResponse request with arbitrary body returning *InfraSnapshotpolicyPartialUpdateResponse
func (c *ClientWithResponses) InfraSnapshotpolicyPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotpolicyPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraSnapshotpolicyPartialUpdateResponse, error) {
	rsp, err := c.InfraSnapshotpolicyPartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSnapshotpolicyPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraSnapshotpolicyPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotpolicyPartialUpdateParams, body InfraSnapshotpolicyPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraSnapshotpolicyPartialUpdateResponse, error) {
	rsp, err := c.InfraSnapshotpolicyPartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSnapshotpolicyPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraSnapshotpolicyPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotpolicyPartialUpdateParams, body InfraSnapshotpolicyPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraSnapshotpolicyPartialUpdateResponse, error) {
	rsp, err := c.InfraSnapshotpolicyPartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSnapshotpolicyPartialUpdateResponse(rsp)
}

// InfraSnapshotpolicyUpdateWithBodyWithResponse request with arbitrary body returning *InfraSnapshotpolicyUpdateResponse
func (c *ClientWithResponses) InfraSnapshotpolicyUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotpolicyUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraSnapshotpolicyUpdateResponse, error) {
	rsp, err := c.InfraSnapshotpolicyUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSnapshotpolicyUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraSnapshotpolicyUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotpolicyUpdateParams, body InfraSnapshotpolicyUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraSnapshotpolicyUpdateResponse, error) {
	rsp, err := c.InfraSnapshotpolicyUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSnapshotpolicyUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraSnapshotpolicyUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotpolicyUpdateParams, body InfraSnapshotpolicyUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraSnapshotpolicyUpdateResponse, error) {
	rsp, err := c.InfraSnapshotpolicyUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSnapshotpolicyUpdateResponse(rsp)
}

// InfraSnapshotsListWithResponse request returning *InfraSnapshotsListResponse
func (c *ClientWithResponses) InfraSnapshotsListWithResponse(ctx context.Context, params *InfraSnapshotsListParams, reqEditors ...RequestEditorFn) (*InfraSnapshotsListResponse, error) {
	rsp, err := c.InfraSnapshotsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSnapshotsListResponse(rsp)
}

// InfraSnapshotsCreateWithBodyWithResponse request with arbitrary body returning *InfraSnapshotsCreateResponse
func (c *ClientWithResponses) InfraSnapshotsCreateWithBodyWithResponse(ctx context.Context, params *InfraSnapshotsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraSnapshotsCreateResponse, error) {
	rsp, err := c.InfraSnapshotsCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSnapshotsCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraSnapshotsCreateWithResponse(ctx context.Context, params *InfraSnapshotsCreateParams, body InfraSnapshotsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraSnapshotsCreateResponse, error) {
	rsp, err := c.InfraSnapshotsCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSnapshotsCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraSnapshotsCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraSnapshotsCreateParams, body InfraSnapshotsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraSnapshotsCreateResponse, error) {
	rsp, err := c.InfraSnapshotsCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSnapshotsCreateResponse(rsp)
}

// InfraSnapshotsDestroyWithResponse request returning *InfraSnapshotsDestroyResponse
func (c *ClientWithResponses) InfraSnapshotsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotsDestroyParams, reqEditors ...RequestEditorFn) (*InfraSnapshotsDestroyResponse, error) {
	rsp, err := c.InfraSnapshotsDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSnapshotsDestroyResponse(rsp)
}

// InfraSnapshotsRetrieveWithResponse request returning *InfraSnapshotsRetrieveResponse
func (c *ClientWithResponses) InfraSnapshotsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotsRetrieveParams, reqEditors ...RequestEditorFn) (*InfraSnapshotsRetrieveResponse, error) {
	rsp, err := c.InfraSnapshotsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSnapshotsRetrieveResponse(rsp)
}

// InfraSnapshotsPartialUpdateWithBodyWithResponse request with arbitrary body returning *InfraSnapshotsPartialUpdateResponse
func (c *ClientWithResponses) InfraSnapshotsPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraSnapshotsPartialUpdateResponse, error) {
	rsp, err := c.InfraSnapshotsPartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSnapshotsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraSnapshotsPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotsPartialUpdateParams, body InfraSnapshotsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraSnapshotsPartialUpdateResponse, error) {
	rsp, err := c.InfraSnapshotsPartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSnapshotsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraSnapshotsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotsPartialUpdateParams, body InfraSnapshotsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraSnapshotsPartialUpdateResponse, error) {
	rsp, err := c.InfraSnapshotsPartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSnapshotsPartialUpdateResponse(rsp)
}

// InfraSnapshotsUpdateWithBodyWithResponse request with arbitrary body returning *InfraSnapshotsUpdateResponse
func (c *ClientWithResponses) InfraSnapshotsUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraSnapshotsUpdateResponse, error) {
	rsp, err := c.InfraSnapshotsUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSnapshotsUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraSnapshotsUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotsUpdateParams, body InfraSnapshotsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraSnapshotsUpdateResponse, error) {
	rsp, err := c.InfraSnapshotsUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSnapshotsUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraSnapshotsUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSnapshotsUpdateParams, body InfraSnapshotsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraSnapshotsUpdateResponse, error) {
	rsp, err := c.InfraSnapshotsUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSnapshotsUpdateResponse(rsp)
}

// InfraSubnetsListWithResponse request returning *InfraSubnetsListResponse
func (c *ClientWithResponses) InfraSubnetsListWithResponse(ctx context.Context, params *InfraSubnetsListParams, reqEditors ...RequestEditorFn) (*InfraSubnetsListResponse, error) {
	rsp, err := c.InfraSubnetsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSubnetsListResponse(rsp)
}

// InfraSubnetsCreateWithBodyWithResponse request with arbitrary body returning *InfraSubnetsCreateResponse
func (c *ClientWithResponses) InfraSubnetsCreateWithBodyWithResponse(ctx context.Context, params *InfraSubnetsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraSubnetsCreateResponse, error) {
	rsp, err := c.InfraSubnetsCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSubnetsCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraSubnetsCreateWithResponse(ctx context.Context, params *InfraSubnetsCreateParams, body InfraSubnetsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraSubnetsCreateResponse, error) {
	rsp, err := c.InfraSubnetsCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSubnetsCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraSubnetsCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraSubnetsCreateParams, body InfraSubnetsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraSubnetsCreateResponse, error) {
	rsp, err := c.InfraSubnetsCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSubnetsCreateResponse(rsp)
}

// InfraSubnetsDestroyWithResponse request returning *InfraSubnetsDestroyResponse
func (c *ClientWithResponses) InfraSubnetsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSubnetsDestroyParams, reqEditors ...RequestEditorFn) (*InfraSubnetsDestroyResponse, error) {
	rsp, err := c.InfraSubnetsDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSubnetsDestroyResponse(rsp)
}

// InfraSubnetsRetrieveWithResponse request returning *InfraSubnetsRetrieveResponse
func (c *ClientWithResponses) InfraSubnetsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSubnetsRetrieveParams, reqEditors ...RequestEditorFn) (*InfraSubnetsRetrieveResponse, error) {
	rsp, err := c.InfraSubnetsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSubnetsRetrieveResponse(rsp)
}

// InfraSubnetsPartialUpdateWithBodyWithResponse request with arbitrary body returning *InfraSubnetsPartialUpdateResponse
func (c *ClientWithResponses) InfraSubnetsPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSubnetsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraSubnetsPartialUpdateResponse, error) {
	rsp, err := c.InfraSubnetsPartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSubnetsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraSubnetsPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSubnetsPartialUpdateParams, body InfraSubnetsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraSubnetsPartialUpdateResponse, error) {
	rsp, err := c.InfraSubnetsPartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSubnetsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraSubnetsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSubnetsPartialUpdateParams, body InfraSubnetsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraSubnetsPartialUpdateResponse, error) {
	rsp, err := c.InfraSubnetsPartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSubnetsPartialUpdateResponse(rsp)
}

// InfraSubnetsUpdateWithBodyWithResponse request with arbitrary body returning *InfraSubnetsUpdateResponse
func (c *ClientWithResponses) InfraSubnetsUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSubnetsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraSubnetsUpdateResponse, error) {
	rsp, err := c.InfraSubnetsUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSubnetsUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraSubnetsUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSubnetsUpdateParams, body InfraSubnetsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraSubnetsUpdateResponse, error) {
	rsp, err := c.InfraSubnetsUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSubnetsUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraSubnetsUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraSubnetsUpdateParams, body InfraSubnetsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraSubnetsUpdateResponse, error) {
	rsp, err := c.InfraSubnetsUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraSubnetsUpdateResponse(rsp)
}

// InfraVolumeBackupPoliciesListWithResponse request returning *InfraVolumeBackupPoliciesListResponse
func (c *ClientWithResponses) InfraVolumeBackupPoliciesListWithResponse(ctx context.Context, params *InfraVolumeBackupPoliciesListParams, reqEditors ...RequestEditorFn) (*InfraVolumeBackupPoliciesListResponse, error) {
	rsp, err := c.InfraVolumeBackupPoliciesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumeBackupPoliciesListResponse(rsp)
}

// InfraVolumeBackupPoliciesCreateWithBodyWithResponse request with arbitrary body returning *InfraVolumeBackupPoliciesCreateResponse
func (c *ClientWithResponses) InfraVolumeBackupPoliciesCreateWithBodyWithResponse(ctx context.Context, params *InfraVolumeBackupPoliciesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraVolumeBackupPoliciesCreateResponse, error) {
	rsp, err := c.InfraVolumeBackupPoliciesCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumeBackupPoliciesCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraVolumeBackupPoliciesCreateWithResponse(ctx context.Context, params *InfraVolumeBackupPoliciesCreateParams, body InfraVolumeBackupPoliciesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeBackupPoliciesCreateResponse, error) {
	rsp, err := c.InfraVolumeBackupPoliciesCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumeBackupPoliciesCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraVolumeBackupPoliciesCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraVolumeBackupPoliciesCreateParams, body InfraVolumeBackupPoliciesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeBackupPoliciesCreateResponse, error) {
	rsp, err := c.InfraVolumeBackupPoliciesCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumeBackupPoliciesCreateResponse(rsp)
}

// InfraVolumeBackupPoliciesDestroyWithResponse request returning *InfraVolumeBackupPoliciesDestroyResponse
func (c *ClientWithResponses) InfraVolumeBackupPoliciesDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupPoliciesDestroyParams, reqEditors ...RequestEditorFn) (*InfraVolumeBackupPoliciesDestroyResponse, error) {
	rsp, err := c.InfraVolumeBackupPoliciesDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumeBackupPoliciesDestroyResponse(rsp)
}

// InfraVolumeBackupPoliciesRetrieveWithResponse request returning *InfraVolumeBackupPoliciesRetrieveResponse
func (c *ClientWithResponses) InfraVolumeBackupPoliciesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupPoliciesRetrieveParams, reqEditors ...RequestEditorFn) (*InfraVolumeBackupPoliciesRetrieveResponse, error) {
	rsp, err := c.InfraVolumeBackupPoliciesRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumeBackupPoliciesRetrieveResponse(rsp)
}

// InfraVolumeBackupPoliciesPartialUpdateWithBodyWithResponse request with arbitrary body returning *InfraVolumeBackupPoliciesPartialUpdateResponse
func (c *ClientWithResponses) InfraVolumeBackupPoliciesPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupPoliciesPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraVolumeBackupPoliciesPartialUpdateResponse, error) {
	rsp, err := c.InfraVolumeBackupPoliciesPartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumeBackupPoliciesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraVolumeBackupPoliciesPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupPoliciesPartialUpdateParams, body InfraVolumeBackupPoliciesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeBackupPoliciesPartialUpdateResponse, error) {
	rsp, err := c.InfraVolumeBackupPoliciesPartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumeBackupPoliciesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraVolumeBackupPoliciesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupPoliciesPartialUpdateParams, body InfraVolumeBackupPoliciesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeBackupPoliciesPartialUpdateResponse, error) {
	rsp, err := c.InfraVolumeBackupPoliciesPartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumeBackupPoliciesPartialUpdateResponse(rsp)
}

// InfraVolumeBackupPoliciesUpdateWithBodyWithResponse request with arbitrary body returning *InfraVolumeBackupPoliciesUpdateResponse
func (c *ClientWithResponses) InfraVolumeBackupPoliciesUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupPoliciesUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraVolumeBackupPoliciesUpdateResponse, error) {
	rsp, err := c.InfraVolumeBackupPoliciesUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumeBackupPoliciesUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraVolumeBackupPoliciesUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupPoliciesUpdateParams, body InfraVolumeBackupPoliciesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeBackupPoliciesUpdateResponse, error) {
	rsp, err := c.InfraVolumeBackupPoliciesUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumeBackupPoliciesUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraVolumeBackupPoliciesUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupPoliciesUpdateParams, body InfraVolumeBackupPoliciesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeBackupPoliciesUpdateResponse, error) {
	rsp, err := c.InfraVolumeBackupPoliciesUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumeBackupPoliciesUpdateResponse(rsp)
}

// InfraVolumeBackupsListWithResponse request returning *InfraVolumeBackupsListResponse
func (c *ClientWithResponses) InfraVolumeBackupsListWithResponse(ctx context.Context, params *InfraVolumeBackupsListParams, reqEditors ...RequestEditorFn) (*InfraVolumeBackupsListResponse, error) {
	rsp, err := c.InfraVolumeBackupsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumeBackupsListResponse(rsp)
}

// InfraVolumeBackupsCreateWithBodyWithResponse request with arbitrary body returning *InfraVolumeBackupsCreateResponse
func (c *ClientWithResponses) InfraVolumeBackupsCreateWithBodyWithResponse(ctx context.Context, params *InfraVolumeBackupsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraVolumeBackupsCreateResponse, error) {
	rsp, err := c.InfraVolumeBackupsCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumeBackupsCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraVolumeBackupsCreateWithResponse(ctx context.Context, params *InfraVolumeBackupsCreateParams, body InfraVolumeBackupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeBackupsCreateResponse, error) {
	rsp, err := c.InfraVolumeBackupsCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumeBackupsCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraVolumeBackupsCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraVolumeBackupsCreateParams, body InfraVolumeBackupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeBackupsCreateResponse, error) {
	rsp, err := c.InfraVolumeBackupsCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumeBackupsCreateResponse(rsp)
}

// InfraVolumeBackupsDestroyWithResponse request returning *InfraVolumeBackupsDestroyResponse
func (c *ClientWithResponses) InfraVolumeBackupsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsDestroyParams, reqEditors ...RequestEditorFn) (*InfraVolumeBackupsDestroyResponse, error) {
	rsp, err := c.InfraVolumeBackupsDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumeBackupsDestroyResponse(rsp)
}

// InfraVolumeBackupsRetrieveWithResponse request returning *InfraVolumeBackupsRetrieveResponse
func (c *ClientWithResponses) InfraVolumeBackupsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsRetrieveParams, reqEditors ...RequestEditorFn) (*InfraVolumeBackupsRetrieveResponse, error) {
	rsp, err := c.InfraVolumeBackupsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumeBackupsRetrieveResponse(rsp)
}

// InfraVolumeBackupsPartialUpdateWithBodyWithResponse request with arbitrary body returning *InfraVolumeBackupsPartialUpdateResponse
func (c *ClientWithResponses) InfraVolumeBackupsPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraVolumeBackupsPartialUpdateResponse, error) {
	rsp, err := c.InfraVolumeBackupsPartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumeBackupsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraVolumeBackupsPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsPartialUpdateParams, body InfraVolumeBackupsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeBackupsPartialUpdateResponse, error) {
	rsp, err := c.InfraVolumeBackupsPartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumeBackupsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraVolumeBackupsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsPartialUpdateParams, body InfraVolumeBackupsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeBackupsPartialUpdateResponse, error) {
	rsp, err := c.InfraVolumeBackupsPartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumeBackupsPartialUpdateResponse(rsp)
}

// InfraVolumeBackupsUpdateWithBodyWithResponse request with arbitrary body returning *InfraVolumeBackupsUpdateResponse
func (c *ClientWithResponses) InfraVolumeBackupsUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraVolumeBackupsUpdateResponse, error) {
	rsp, err := c.InfraVolumeBackupsUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumeBackupsUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraVolumeBackupsUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsUpdateParams, body InfraVolumeBackupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeBackupsUpdateResponse, error) {
	rsp, err := c.InfraVolumeBackupsUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumeBackupsUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraVolumeBackupsUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsUpdateParams, body InfraVolumeBackupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeBackupsUpdateResponse, error) {
	rsp, err := c.InfraVolumeBackupsUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumeBackupsUpdateResponse(rsp)
}

// InfraVolumeBackupsRestoreCreateWithBodyWithResponse request with arbitrary body returning *InfraVolumeBackupsRestoreCreateResponse
func (c *ClientWithResponses) InfraVolumeBackupsRestoreCreateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsRestoreCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraVolumeBackupsRestoreCreateResponse, error) {
	rsp, err := c.InfraVolumeBackupsRestoreCreateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumeBackupsRestoreCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraVolumeBackupsRestoreCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsRestoreCreateParams, body InfraVolumeBackupsRestoreCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeBackupsRestoreCreateResponse, error) {
	rsp, err := c.InfraVolumeBackupsRestoreCreate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumeBackupsRestoreCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraVolumeBackupsRestoreCreateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumeBackupsRestoreCreateParams, body InfraVolumeBackupsRestoreCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeBackupsRestoreCreateResponse, error) {
	rsp, err := c.InfraVolumeBackupsRestoreCreateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumeBackupsRestoreCreateResponse(rsp)
}

// InfraVolumeTypeListWithResponse request returning *InfraVolumeTypeListResponse
func (c *ClientWithResponses) InfraVolumeTypeListWithResponse(ctx context.Context, params *InfraVolumeTypeListParams, reqEditors ...RequestEditorFn) (*InfraVolumeTypeListResponse, error) {
	rsp, err := c.InfraVolumeTypeList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumeTypeListResponse(rsp)
}

// InfraVolumeTypeCreateWithBodyWithResponse request with arbitrary body returning *InfraVolumeTypeCreateResponse
func (c *ClientWithResponses) InfraVolumeTypeCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraVolumeTypeCreateResponse, error) {
	rsp, err := c.InfraVolumeTypeCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumeTypeCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraVolumeTypeCreateWithResponse(ctx context.Context, body InfraVolumeTypeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeTypeCreateResponse, error) {
	rsp, err := c.InfraVolumeTypeCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumeTypeCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraVolumeTypeCreateWithFormdataBodyWithResponse(ctx context.Context, body InfraVolumeTypeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeTypeCreateResponse, error) {
	rsp, err := c.InfraVolumeTypeCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumeTypeCreateResponse(rsp)
}

// InfraVolumeTypeDestroyWithResponse request returning *InfraVolumeTypeDestroyResponse
func (c *ClientWithResponses) InfraVolumeTypeDestroyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*InfraVolumeTypeDestroyResponse, error) {
	rsp, err := c.InfraVolumeTypeDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumeTypeDestroyResponse(rsp)
}

// InfraVolumeTypeRetrieveWithResponse request returning *InfraVolumeTypeRetrieveResponse
func (c *ClientWithResponses) InfraVolumeTypeRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*InfraVolumeTypeRetrieveResponse, error) {
	rsp, err := c.InfraVolumeTypeRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumeTypeRetrieveResponse(rsp)
}

// InfraVolumeTypePartialUpdateWithBodyWithResponse request with arbitrary body returning *InfraVolumeTypePartialUpdateResponse
func (c *ClientWithResponses) InfraVolumeTypePartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraVolumeTypePartialUpdateResponse, error) {
	rsp, err := c.InfraVolumeTypePartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumeTypePartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraVolumeTypePartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body InfraVolumeTypePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeTypePartialUpdateResponse, error) {
	rsp, err := c.InfraVolumeTypePartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumeTypePartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraVolumeTypePartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body InfraVolumeTypePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeTypePartialUpdateResponse, error) {
	rsp, err := c.InfraVolumeTypePartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumeTypePartialUpdateResponse(rsp)
}

// InfraVolumeTypeUpdateWithBodyWithResponse request with arbitrary body returning *InfraVolumeTypeUpdateResponse
func (c *ClientWithResponses) InfraVolumeTypeUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraVolumeTypeUpdateResponse, error) {
	rsp, err := c.InfraVolumeTypeUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumeTypeUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraVolumeTypeUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body InfraVolumeTypeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeTypeUpdateResponse, error) {
	rsp, err := c.InfraVolumeTypeUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumeTypeUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraVolumeTypeUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body InfraVolumeTypeUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumeTypeUpdateResponse, error) {
	rsp, err := c.InfraVolumeTypeUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumeTypeUpdateResponse(rsp)
}

// InfraVolumesListWithResponse request returning *InfraVolumesListResponse
func (c *ClientWithResponses) InfraVolumesListWithResponse(ctx context.Context, params *InfraVolumesListParams, reqEditors ...RequestEditorFn) (*InfraVolumesListResponse, error) {
	rsp, err := c.InfraVolumesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumesListResponse(rsp)
}

// InfraVolumesCreateWithBodyWithResponse request with arbitrary body returning *InfraVolumesCreateResponse
func (c *ClientWithResponses) InfraVolumesCreateWithBodyWithResponse(ctx context.Context, params *InfraVolumesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraVolumesCreateResponse, error) {
	rsp, err := c.InfraVolumesCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumesCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraVolumesCreateWithResponse(ctx context.Context, params *InfraVolumesCreateParams, body InfraVolumesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumesCreateResponse, error) {
	rsp, err := c.InfraVolumesCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumesCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraVolumesCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraVolumesCreateParams, body InfraVolumesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumesCreateResponse, error) {
	rsp, err := c.InfraVolumesCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumesCreateResponse(rsp)
}

// InfraVolumesDestroyWithResponse request returning *InfraVolumesDestroyResponse
func (c *ClientWithResponses) InfraVolumesDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumesDestroyParams, reqEditors ...RequestEditorFn) (*InfraVolumesDestroyResponse, error) {
	rsp, err := c.InfraVolumesDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumesDestroyResponse(rsp)
}

// InfraVolumesRetrieveWithResponse request returning *InfraVolumesRetrieveResponse
func (c *ClientWithResponses) InfraVolumesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumesRetrieveParams, reqEditors ...RequestEditorFn) (*InfraVolumesRetrieveResponse, error) {
	rsp, err := c.InfraVolumesRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumesRetrieveResponse(rsp)
}

// InfraVolumesPartialUpdateWithBodyWithResponse request with arbitrary body returning *InfraVolumesPartialUpdateResponse
func (c *ClientWithResponses) InfraVolumesPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumesPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraVolumesPartialUpdateResponse, error) {
	rsp, err := c.InfraVolumesPartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraVolumesPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumesPartialUpdateParams, body InfraVolumesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumesPartialUpdateResponse, error) {
	rsp, err := c.InfraVolumesPartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraVolumesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumesPartialUpdateParams, body InfraVolumesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumesPartialUpdateResponse, error) {
	rsp, err := c.InfraVolumesPartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumesPartialUpdateResponse(rsp)
}

// InfraVolumesUpdateWithBodyWithResponse request with arbitrary body returning *InfraVolumesUpdateResponse
func (c *ClientWithResponses) InfraVolumesUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumesUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraVolumesUpdateResponse, error) {
	rsp, err := c.InfraVolumesUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumesUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraVolumesUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumesUpdateParams, body InfraVolumesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumesUpdateResponse, error) {
	rsp, err := c.InfraVolumesUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumesUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraVolumesUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumesUpdateParams, body InfraVolumesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumesUpdateResponse, error) {
	rsp, err := c.InfraVolumesUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumesUpdateResponse(rsp)
}

// InfraVolumesApplyBackupPolicyCreateWithBodyWithResponse request with arbitrary body returning *InfraVolumesApplyBackupPolicyCreateResponse
func (c *ClientWithResponses) InfraVolumesApplyBackupPolicyCreateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumesApplyBackupPolicyCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraVolumesApplyBackupPolicyCreateResponse, error) {
	rsp, err := c.InfraVolumesApplyBackupPolicyCreateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumesApplyBackupPolicyCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraVolumesApplyBackupPolicyCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumesApplyBackupPolicyCreateParams, body InfraVolumesApplyBackupPolicyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumesApplyBackupPolicyCreateResponse, error) {
	rsp, err := c.InfraVolumesApplyBackupPolicyCreate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumesApplyBackupPolicyCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraVolumesApplyBackupPolicyCreateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumesApplyBackupPolicyCreateParams, body InfraVolumesApplyBackupPolicyCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumesApplyBackupPolicyCreateResponse, error) {
	rsp, err := c.InfraVolumesApplyBackupPolicyCreateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumesApplyBackupPolicyCreateResponse(rsp)
}

// InfraVolumesApplySnapshotPolicyCreateWithBodyWithResponse request with arbitrary body returning *InfraVolumesApplySnapshotPolicyCreateResponse
func (c *ClientWithResponses) InfraVolumesApplySnapshotPolicyCreateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumesApplySnapshotPolicyCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraVolumesApplySnapshotPolicyCreateResponse, error) {
	rsp, err := c.InfraVolumesApplySnapshotPolicyCreateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumesApplySnapshotPolicyCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraVolumesApplySnapshotPolicyCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumesApplySnapshotPolicyCreateParams, body InfraVolumesApplySnapshotPolicyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumesApplySnapshotPolicyCreateResponse, error) {
	rsp, err := c.InfraVolumesApplySnapshotPolicyCreate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumesApplySnapshotPolicyCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraVolumesApplySnapshotPolicyCreateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumesApplySnapshotPolicyCreateParams, body InfraVolumesApplySnapshotPolicyCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumesApplySnapshotPolicyCreateResponse, error) {
	rsp, err := c.InfraVolumesApplySnapshotPolicyCreateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumesApplySnapshotPolicyCreateResponse(rsp)
}

// InfraVolumesExtendCreateWithBodyWithResponse request with arbitrary body returning *InfraVolumesExtendCreateResponse
func (c *ClientWithResponses) InfraVolumesExtendCreateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumesExtendCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraVolumesExtendCreateResponse, error) {
	rsp, err := c.InfraVolumesExtendCreateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumesExtendCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraVolumesExtendCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumesExtendCreateParams, body InfraVolumesExtendCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumesExtendCreateResponse, error) {
	rsp, err := c.InfraVolumesExtendCreate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumesExtendCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraVolumesExtendCreateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumesExtendCreateParams, body InfraVolumesExtendCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraVolumesExtendCreateResponse, error) {
	rsp, err := c.InfraVolumesExtendCreateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumesExtendCreateResponse(rsp)
}

// InfraVolumesUnapplyBackupPolicyCreateWithResponse request returning *InfraVolumesUnapplyBackupPolicyCreateResponse
func (c *ClientWithResponses) InfraVolumesUnapplyBackupPolicyCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumesUnapplyBackupPolicyCreateParams, reqEditors ...RequestEditorFn) (*InfraVolumesUnapplyBackupPolicyCreateResponse, error) {
	rsp, err := c.InfraVolumesUnapplyBackupPolicyCreate(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumesUnapplyBackupPolicyCreateResponse(rsp)
}

// InfraVolumesUnapplySnapshotPolicyCreateWithResponse request returning *InfraVolumesUnapplySnapshotPolicyCreateResponse
func (c *ClientWithResponses) InfraVolumesUnapplySnapshotPolicyCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVolumesUnapplySnapshotPolicyCreateParams, reqEditors ...RequestEditorFn) (*InfraVolumesUnapplySnapshotPolicyCreateResponse, error) {
	rsp, err := c.InfraVolumesUnapplySnapshotPolicyCreate(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVolumesUnapplySnapshotPolicyCreateResponse(rsp)
}

// InfraVpcsListWithResponse request returning *InfraVpcsListResponse
func (c *ClientWithResponses) InfraVpcsListWithResponse(ctx context.Context, params *InfraVpcsListParams, reqEditors ...RequestEditorFn) (*InfraVpcsListResponse, error) {
	rsp, err := c.InfraVpcsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVpcsListResponse(rsp)
}

// InfraVpcsCreateWithBodyWithResponse request with arbitrary body returning *InfraVpcsCreateResponse
func (c *ClientWithResponses) InfraVpcsCreateWithBodyWithResponse(ctx context.Context, params *InfraVpcsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraVpcsCreateResponse, error) {
	rsp, err := c.InfraVpcsCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVpcsCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraVpcsCreateWithResponse(ctx context.Context, params *InfraVpcsCreateParams, body InfraVpcsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraVpcsCreateResponse, error) {
	rsp, err := c.InfraVpcsCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVpcsCreateResponse(rsp)
}

func (c *ClientWithResponses) InfraVpcsCreateWithFormdataBodyWithResponse(ctx context.Context, params *InfraVpcsCreateParams, body InfraVpcsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraVpcsCreateResponse, error) {
	rsp, err := c.InfraVpcsCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVpcsCreateResponse(rsp)
}

// InfraVpcsDestroyWithResponse request returning *InfraVpcsDestroyResponse
func (c *ClientWithResponses) InfraVpcsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVpcsDestroyParams, reqEditors ...RequestEditorFn) (*InfraVpcsDestroyResponse, error) {
	rsp, err := c.InfraVpcsDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVpcsDestroyResponse(rsp)
}

// InfraVpcsRetrieveWithResponse request returning *InfraVpcsRetrieveResponse
func (c *ClientWithResponses) InfraVpcsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVpcsRetrieveParams, reqEditors ...RequestEditorFn) (*InfraVpcsRetrieveResponse, error) {
	rsp, err := c.InfraVpcsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVpcsRetrieveResponse(rsp)
}

// InfraVpcsPartialUpdateWithBodyWithResponse request with arbitrary body returning *InfraVpcsPartialUpdateResponse
func (c *ClientWithResponses) InfraVpcsPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVpcsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraVpcsPartialUpdateResponse, error) {
	rsp, err := c.InfraVpcsPartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVpcsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraVpcsPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVpcsPartialUpdateParams, body InfraVpcsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraVpcsPartialUpdateResponse, error) {
	rsp, err := c.InfraVpcsPartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVpcsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraVpcsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVpcsPartialUpdateParams, body InfraVpcsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraVpcsPartialUpdateResponse, error) {
	rsp, err := c.InfraVpcsPartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVpcsPartialUpdateResponse(rsp)
}

// InfraVpcsUpdateWithBodyWithResponse request with arbitrary body returning *InfraVpcsUpdateResponse
func (c *ClientWithResponses) InfraVpcsUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVpcsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InfraVpcsUpdateResponse, error) {
	rsp, err := c.InfraVpcsUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVpcsUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraVpcsUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVpcsUpdateParams, body InfraVpcsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InfraVpcsUpdateResponse, error) {
	rsp, err := c.InfraVpcsUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVpcsUpdateResponse(rsp)
}

func (c *ClientWithResponses) InfraVpcsUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *InfraVpcsUpdateParams, body InfraVpcsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*InfraVpcsUpdateResponse, error) {
	rsp, err := c.InfraVpcsUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfraVpcsUpdateResponse(rsp)
}

// ProjectUserAcceptWithBodyWithResponse request with arbitrary body returning *ProjectUserAcceptResponse
func (c *ClientWithResponses) ProjectUserAcceptWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProjectUserAcceptResponse, error) {
	rsp, err := c.ProjectUserAcceptWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProjectUserAcceptResponse(rsp)
}

func (c *ClientWithResponses) ProjectUserAcceptWithResponse(ctx context.Context, body ProjectUserAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*ProjectUserAcceptResponse, error) {
	rsp, err := c.ProjectUserAccept(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProjectUserAcceptResponse(rsp)
}

func (c *ClientWithResponses) ProjectUserAcceptWithFormdataBodyWithResponse(ctx context.Context, body ProjectUserAcceptFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProjectUserAcceptResponse, error) {
	rsp, err := c.ProjectUserAcceptWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProjectUserAcceptResponse(rsp)
}

// ProjectUserInviteWithBodyWithResponse request with arbitrary body returning *ProjectUserInviteResponse
func (c *ClientWithResponses) ProjectUserInviteWithBodyWithResponse(ctx context.Context, params *ProjectUserInviteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProjectUserInviteResponse, error) {
	rsp, err := c.ProjectUserInviteWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProjectUserInviteResponse(rsp)
}

func (c *ClientWithResponses) ProjectUserInviteWithResponse(ctx context.Context, params *ProjectUserInviteParams, body ProjectUserInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*ProjectUserInviteResponse, error) {
	rsp, err := c.ProjectUserInvite(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProjectUserInviteResponse(rsp)
}

func (c *ClientWithResponses) ProjectUserInviteWithFormdataBodyWithResponse(ctx context.Context, params *ProjectUserInviteParams, body ProjectUserInviteFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProjectUserInviteResponse, error) {
	rsp, err := c.ProjectUserInviteWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProjectUserInviteResponse(rsp)
}

// KaasBackupPlansListWithResponse request returning *KaasBackupPlansListResponse
func (c *ClientWithResponses) KaasBackupPlansListWithResponse(ctx context.Context, params *KaasBackupPlansListParams, reqEditors ...RequestEditorFn) (*KaasBackupPlansListResponse, error) {
	rsp, err := c.KaasBackupPlansList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasBackupPlansListResponse(rsp)
}

// KaasBackupPlansCreateWithBodyWithResponse request with arbitrary body returning *KaasBackupPlansCreateResponse
func (c *ClientWithResponses) KaasBackupPlansCreateWithBodyWithResponse(ctx context.Context, params *KaasBackupPlansCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KaasBackupPlansCreateResponse, error) {
	rsp, err := c.KaasBackupPlansCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasBackupPlansCreateResponse(rsp)
}

func (c *ClientWithResponses) KaasBackupPlansCreateWithResponse(ctx context.Context, params *KaasBackupPlansCreateParams, body KaasBackupPlansCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*KaasBackupPlansCreateResponse, error) {
	rsp, err := c.KaasBackupPlansCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasBackupPlansCreateResponse(rsp)
}

func (c *ClientWithResponses) KaasBackupPlansCreateWithFormdataBodyWithResponse(ctx context.Context, params *KaasBackupPlansCreateParams, body KaasBackupPlansCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*KaasBackupPlansCreateResponse, error) {
	rsp, err := c.KaasBackupPlansCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasBackupPlansCreateResponse(rsp)
}

// KaasBackupPlansDestroyWithResponse request returning *KaasBackupPlansDestroyResponse
func (c *ClientWithResponses) KaasBackupPlansDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasBackupPlansDestroyParams, reqEditors ...RequestEditorFn) (*KaasBackupPlansDestroyResponse, error) {
	rsp, err := c.KaasBackupPlansDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasBackupPlansDestroyResponse(rsp)
}

// KaasBackupPlansRetrieveWithResponse request returning *KaasBackupPlansRetrieveResponse
func (c *ClientWithResponses) KaasBackupPlansRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasBackupPlansRetrieveParams, reqEditors ...RequestEditorFn) (*KaasBackupPlansRetrieveResponse, error) {
	rsp, err := c.KaasBackupPlansRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasBackupPlansRetrieveResponse(rsp)
}

// KaasBackupPlansPartialUpdateWithBodyWithResponse request with arbitrary body returning *KaasBackupPlansPartialUpdateResponse
func (c *ClientWithResponses) KaasBackupPlansPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasBackupPlansPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KaasBackupPlansPartialUpdateResponse, error) {
	rsp, err := c.KaasBackupPlansPartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasBackupPlansPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) KaasBackupPlansPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasBackupPlansPartialUpdateParams, body KaasBackupPlansPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*KaasBackupPlansPartialUpdateResponse, error) {
	rsp, err := c.KaasBackupPlansPartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasBackupPlansPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) KaasBackupPlansPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasBackupPlansPartialUpdateParams, body KaasBackupPlansPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*KaasBackupPlansPartialUpdateResponse, error) {
	rsp, err := c.KaasBackupPlansPartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasBackupPlansPartialUpdateResponse(rsp)
}

// KaasBackupPlansUpdateWithBodyWithResponse request with arbitrary body returning *KaasBackupPlansUpdateResponse
func (c *ClientWithResponses) KaasBackupPlansUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasBackupPlansUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KaasBackupPlansUpdateResponse, error) {
	rsp, err := c.KaasBackupPlansUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasBackupPlansUpdateResponse(rsp)
}

func (c *ClientWithResponses) KaasBackupPlansUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasBackupPlansUpdateParams, body KaasBackupPlansUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*KaasBackupPlansUpdateResponse, error) {
	rsp, err := c.KaasBackupPlansUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasBackupPlansUpdateResponse(rsp)
}

func (c *ClientWithResponses) KaasBackupPlansUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasBackupPlansUpdateParams, body KaasBackupPlansUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*KaasBackupPlansUpdateResponse, error) {
	rsp, err := c.KaasBackupPlansUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasBackupPlansUpdateResponse(rsp)
}

// KaasBackupsListWithResponse request returning *KaasBackupsListResponse
func (c *ClientWithResponses) KaasBackupsListWithResponse(ctx context.Context, params *KaasBackupsListParams, reqEditors ...RequestEditorFn) (*KaasBackupsListResponse, error) {
	rsp, err := c.KaasBackupsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasBackupsListResponse(rsp)
}

// KaasBackupsCreateWithBodyWithResponse request with arbitrary body returning *KaasBackupsCreateResponse
func (c *ClientWithResponses) KaasBackupsCreateWithBodyWithResponse(ctx context.Context, params *KaasBackupsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KaasBackupsCreateResponse, error) {
	rsp, err := c.KaasBackupsCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasBackupsCreateResponse(rsp)
}

func (c *ClientWithResponses) KaasBackupsCreateWithResponse(ctx context.Context, params *KaasBackupsCreateParams, body KaasBackupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*KaasBackupsCreateResponse, error) {
	rsp, err := c.KaasBackupsCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasBackupsCreateResponse(rsp)
}

func (c *ClientWithResponses) KaasBackupsCreateWithFormdataBodyWithResponse(ctx context.Context, params *KaasBackupsCreateParams, body KaasBackupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*KaasBackupsCreateResponse, error) {
	rsp, err := c.KaasBackupsCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasBackupsCreateResponse(rsp)
}

// KaasBackupsDestroyWithResponse request returning *KaasBackupsDestroyResponse
func (c *ClientWithResponses) KaasBackupsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasBackupsDestroyParams, reqEditors ...RequestEditorFn) (*KaasBackupsDestroyResponse, error) {
	rsp, err := c.KaasBackupsDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasBackupsDestroyResponse(rsp)
}

// KaasBackupsRetrieveWithResponse request returning *KaasBackupsRetrieveResponse
func (c *ClientWithResponses) KaasBackupsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasBackupsRetrieveParams, reqEditors ...RequestEditorFn) (*KaasBackupsRetrieveResponse, error) {
	rsp, err := c.KaasBackupsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasBackupsRetrieveResponse(rsp)
}

// KaasBackupsPartialUpdateWithBodyWithResponse request with arbitrary body returning *KaasBackupsPartialUpdateResponse
func (c *ClientWithResponses) KaasBackupsPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasBackupsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KaasBackupsPartialUpdateResponse, error) {
	rsp, err := c.KaasBackupsPartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasBackupsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) KaasBackupsPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasBackupsPartialUpdateParams, body KaasBackupsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*KaasBackupsPartialUpdateResponse, error) {
	rsp, err := c.KaasBackupsPartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasBackupsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) KaasBackupsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasBackupsPartialUpdateParams, body KaasBackupsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*KaasBackupsPartialUpdateResponse, error) {
	rsp, err := c.KaasBackupsPartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasBackupsPartialUpdateResponse(rsp)
}

// KaasBackupsUpdateWithBodyWithResponse request with arbitrary body returning *KaasBackupsUpdateResponse
func (c *ClientWithResponses) KaasBackupsUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasBackupsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KaasBackupsUpdateResponse, error) {
	rsp, err := c.KaasBackupsUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasBackupsUpdateResponse(rsp)
}

func (c *ClientWithResponses) KaasBackupsUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasBackupsUpdateParams, body KaasBackupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*KaasBackupsUpdateResponse, error) {
	rsp, err := c.KaasBackupsUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasBackupsUpdateResponse(rsp)
}

func (c *ClientWithResponses) KaasBackupsUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasBackupsUpdateParams, body KaasBackupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*KaasBackupsUpdateResponse, error) {
	rsp, err := c.KaasBackupsUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasBackupsUpdateResponse(rsp)
}

// KaasCniVersionsListWithResponse request returning *KaasCniVersionsListResponse
func (c *ClientWithResponses) KaasCniVersionsListWithResponse(ctx context.Context, params *KaasCniVersionsListParams, reqEditors ...RequestEditorFn) (*KaasCniVersionsListResponse, error) {
	rsp, err := c.KaasCniVersionsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasCniVersionsListResponse(rsp)
}

// KaasCniVersionsRetrieveWithResponse request returning *KaasCniVersionsRetrieveResponse
func (c *ClientWithResponses) KaasCniVersionsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*KaasCniVersionsRetrieveResponse, error) {
	rsp, err := c.KaasCniVersionsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasCniVersionsRetrieveResponse(rsp)
}

// KaasCsiVersionsListWithResponse request returning *KaasCsiVersionsListResponse
func (c *ClientWithResponses) KaasCsiVersionsListWithResponse(ctx context.Context, params *KaasCsiVersionsListParams, reqEditors ...RequestEditorFn) (*KaasCsiVersionsListResponse, error) {
	rsp, err := c.KaasCsiVersionsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasCsiVersionsListResponse(rsp)
}

// KaasCsiVersionsRetrieveWithResponse request returning *KaasCsiVersionsRetrieveResponse
func (c *ClientWithResponses) KaasCsiVersionsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*KaasCsiVersionsRetrieveResponse, error) {
	rsp, err := c.KaasCsiVersionsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasCsiVersionsRetrieveResponse(rsp)
}

// KaasDashboardVersionsListWithResponse request returning *KaasDashboardVersionsListResponse
func (c *ClientWithResponses) KaasDashboardVersionsListWithResponse(ctx context.Context, params *KaasDashboardVersionsListParams, reqEditors ...RequestEditorFn) (*KaasDashboardVersionsListResponse, error) {
	rsp, err := c.KaasDashboardVersionsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasDashboardVersionsListResponse(rsp)
}

// KaasDashboardVersionsRetrieveWithResponse request returning *KaasDashboardVersionsRetrieveResponse
func (c *ClientWithResponses) KaasDashboardVersionsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*KaasDashboardVersionsRetrieveResponse, error) {
	rsp, err := c.KaasDashboardVersionsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasDashboardVersionsRetrieveResponse(rsp)
}

// KaasK8sVersionsListWithResponse request returning *KaasK8sVersionsListResponse
func (c *ClientWithResponses) KaasK8sVersionsListWithResponse(ctx context.Context, params *KaasK8sVersionsListParams, reqEditors ...RequestEditorFn) (*KaasK8sVersionsListResponse, error) {
	rsp, err := c.KaasK8sVersionsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasK8sVersionsListResponse(rsp)
}

// KaasK8sVersionsRetrieveWithResponse request returning *KaasK8sVersionsRetrieveResponse
func (c *ClientWithResponses) KaasK8sVersionsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*KaasK8sVersionsRetrieveResponse, error) {
	rsp, err := c.KaasK8sVersionsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasK8sVersionsRetrieveResponse(rsp)
}

// KaasRestoresListWithResponse request returning *KaasRestoresListResponse
func (c *ClientWithResponses) KaasRestoresListWithResponse(ctx context.Context, params *KaasRestoresListParams, reqEditors ...RequestEditorFn) (*KaasRestoresListResponse, error) {
	rsp, err := c.KaasRestoresList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasRestoresListResponse(rsp)
}

// KaasRestoresCreateWithBodyWithResponse request with arbitrary body returning *KaasRestoresCreateResponse
func (c *ClientWithResponses) KaasRestoresCreateWithBodyWithResponse(ctx context.Context, params *KaasRestoresCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KaasRestoresCreateResponse, error) {
	rsp, err := c.KaasRestoresCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasRestoresCreateResponse(rsp)
}

func (c *ClientWithResponses) KaasRestoresCreateWithResponse(ctx context.Context, params *KaasRestoresCreateParams, body KaasRestoresCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*KaasRestoresCreateResponse, error) {
	rsp, err := c.KaasRestoresCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasRestoresCreateResponse(rsp)
}

func (c *ClientWithResponses) KaasRestoresCreateWithFormdataBodyWithResponse(ctx context.Context, params *KaasRestoresCreateParams, body KaasRestoresCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*KaasRestoresCreateResponse, error) {
	rsp, err := c.KaasRestoresCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasRestoresCreateResponse(rsp)
}

// KaasRestoresDestroyWithResponse request returning *KaasRestoresDestroyResponse
func (c *ClientWithResponses) KaasRestoresDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasRestoresDestroyParams, reqEditors ...RequestEditorFn) (*KaasRestoresDestroyResponse, error) {
	rsp, err := c.KaasRestoresDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasRestoresDestroyResponse(rsp)
}

// KaasRestoresRetrieveWithResponse request returning *KaasRestoresRetrieveResponse
func (c *ClientWithResponses) KaasRestoresRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasRestoresRetrieveParams, reqEditors ...RequestEditorFn) (*KaasRestoresRetrieveResponse, error) {
	rsp, err := c.KaasRestoresRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasRestoresRetrieveResponse(rsp)
}

// KaasRestoresPartialUpdateWithBodyWithResponse request with arbitrary body returning *KaasRestoresPartialUpdateResponse
func (c *ClientWithResponses) KaasRestoresPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasRestoresPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KaasRestoresPartialUpdateResponse, error) {
	rsp, err := c.KaasRestoresPartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasRestoresPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) KaasRestoresPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasRestoresPartialUpdateParams, body KaasRestoresPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*KaasRestoresPartialUpdateResponse, error) {
	rsp, err := c.KaasRestoresPartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasRestoresPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) KaasRestoresPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasRestoresPartialUpdateParams, body KaasRestoresPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*KaasRestoresPartialUpdateResponse, error) {
	rsp, err := c.KaasRestoresPartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasRestoresPartialUpdateResponse(rsp)
}

// KaasRestoresUpdateWithBodyWithResponse request with arbitrary body returning *KaasRestoresUpdateResponse
func (c *ClientWithResponses) KaasRestoresUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasRestoresUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KaasRestoresUpdateResponse, error) {
	rsp, err := c.KaasRestoresUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasRestoresUpdateResponse(rsp)
}

func (c *ClientWithResponses) KaasRestoresUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasRestoresUpdateParams, body KaasRestoresUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*KaasRestoresUpdateResponse, error) {
	rsp, err := c.KaasRestoresUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasRestoresUpdateResponse(rsp)
}

func (c *ClientWithResponses) KaasRestoresUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasRestoresUpdateParams, body KaasRestoresUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*KaasRestoresUpdateResponse, error) {
	rsp, err := c.KaasRestoresUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasRestoresUpdateResponse(rsp)
}

// KaasVkeClustersListWithResponse request returning *KaasVkeClustersListResponse
func (c *ClientWithResponses) KaasVkeClustersListWithResponse(ctx context.Context, params *KaasVkeClustersListParams, reqEditors ...RequestEditorFn) (*KaasVkeClustersListResponse, error) {
	rsp, err := c.KaasVkeClustersList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasVkeClustersListResponse(rsp)
}

// KaasVkeClustersCreateWithBodyWithResponse request with arbitrary body returning *KaasVkeClustersCreateResponse
func (c *ClientWithResponses) KaasVkeClustersCreateWithBodyWithResponse(ctx context.Context, params *KaasVkeClustersCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KaasVkeClustersCreateResponse, error) {
	rsp, err := c.KaasVkeClustersCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasVkeClustersCreateResponse(rsp)
}

func (c *ClientWithResponses) KaasVkeClustersCreateWithResponse(ctx context.Context, params *KaasVkeClustersCreateParams, body KaasVkeClustersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*KaasVkeClustersCreateResponse, error) {
	rsp, err := c.KaasVkeClustersCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasVkeClustersCreateResponse(rsp)
}

func (c *ClientWithResponses) KaasVkeClustersCreateWithFormdataBodyWithResponse(ctx context.Context, params *KaasVkeClustersCreateParams, body KaasVkeClustersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*KaasVkeClustersCreateResponse, error) {
	rsp, err := c.KaasVkeClustersCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasVkeClustersCreateResponse(rsp)
}

// KaasVkeClustersDestroyWithResponse request returning *KaasVkeClustersDestroyResponse
func (c *ClientWithResponses) KaasVkeClustersDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasVkeClustersDestroyParams, reqEditors ...RequestEditorFn) (*KaasVkeClustersDestroyResponse, error) {
	rsp, err := c.KaasVkeClustersDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasVkeClustersDestroyResponse(rsp)
}

// KaasVkeClustersRetrieveWithResponse request returning *KaasVkeClustersRetrieveResponse
func (c *ClientWithResponses) KaasVkeClustersRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasVkeClustersRetrieveParams, reqEditors ...RequestEditorFn) (*KaasVkeClustersRetrieveResponse, error) {
	rsp, err := c.KaasVkeClustersRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasVkeClustersRetrieveResponse(rsp)
}

// KaasVkeClustersPartialUpdateWithBodyWithResponse request with arbitrary body returning *KaasVkeClustersPartialUpdateResponse
func (c *ClientWithResponses) KaasVkeClustersPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasVkeClustersPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KaasVkeClustersPartialUpdateResponse, error) {
	rsp, err := c.KaasVkeClustersPartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasVkeClustersPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) KaasVkeClustersPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasVkeClustersPartialUpdateParams, body KaasVkeClustersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*KaasVkeClustersPartialUpdateResponse, error) {
	rsp, err := c.KaasVkeClustersPartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasVkeClustersPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) KaasVkeClustersPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasVkeClustersPartialUpdateParams, body KaasVkeClustersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*KaasVkeClustersPartialUpdateResponse, error) {
	rsp, err := c.KaasVkeClustersPartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasVkeClustersPartialUpdateResponse(rsp)
}

// KaasVkeClustersUpdateWithBodyWithResponse request with arbitrary body returning *KaasVkeClustersUpdateResponse
func (c *ClientWithResponses) KaasVkeClustersUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasVkeClustersUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KaasVkeClustersUpdateResponse, error) {
	rsp, err := c.KaasVkeClustersUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasVkeClustersUpdateResponse(rsp)
}

func (c *ClientWithResponses) KaasVkeClustersUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasVkeClustersUpdateParams, body KaasVkeClustersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*KaasVkeClustersUpdateResponse, error) {
	rsp, err := c.KaasVkeClustersUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasVkeClustersUpdateResponse(rsp)
}

func (c *ClientWithResponses) KaasVkeClustersUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasVkeClustersUpdateParams, body KaasVkeClustersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*KaasVkeClustersUpdateResponse, error) {
	rsp, err := c.KaasVkeClustersUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasVkeClustersUpdateResponse(rsp)
}

// KaasVkeKubeconfigsRetrieveWithResponse request returning *KaasVkeKubeconfigsRetrieveResponse
func (c *ClientWithResponses) KaasVkeKubeconfigsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasVkeKubeconfigsRetrieveParams, reqEditors ...RequestEditorFn) (*KaasVkeKubeconfigsRetrieveResponse, error) {
	rsp, err := c.KaasVkeKubeconfigsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasVkeKubeconfigsRetrieveResponse(rsp)
}

// KaasVkeKubedashboardsRetrieveWithResponse request returning *KaasVkeKubedashboardsRetrieveResponse
func (c *ClientWithResponses) KaasVkeKubedashboardsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasVkeKubedashboardsRetrieveParams, reqEditors ...RequestEditorFn) (*KaasVkeKubedashboardsRetrieveResponse, error) {
	rsp, err := c.KaasVkeKubedashboardsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasVkeKubedashboardsRetrieveResponse(rsp)
}

// KaasVkeMachinesListWithResponse request returning *KaasVkeMachinesListResponse
func (c *ClientWithResponses) KaasVkeMachinesListWithResponse(ctx context.Context, params *KaasVkeMachinesListParams, reqEditors ...RequestEditorFn) (*KaasVkeMachinesListResponse, error) {
	rsp, err := c.KaasVkeMachinesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasVkeMachinesListResponse(rsp)
}

// KaasVkeNodePoolsListWithResponse request returning *KaasVkeNodePoolsListResponse
func (c *ClientWithResponses) KaasVkeNodePoolsListWithResponse(ctx context.Context, params *KaasVkeNodePoolsListParams, reqEditors ...RequestEditorFn) (*KaasVkeNodePoolsListResponse, error) {
	rsp, err := c.KaasVkeNodePoolsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasVkeNodePoolsListResponse(rsp)
}

// KaasVkeNodePoolsCreateWithBodyWithResponse request with arbitrary body returning *KaasVkeNodePoolsCreateResponse
func (c *ClientWithResponses) KaasVkeNodePoolsCreateWithBodyWithResponse(ctx context.Context, params *KaasVkeNodePoolsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KaasVkeNodePoolsCreateResponse, error) {
	rsp, err := c.KaasVkeNodePoolsCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasVkeNodePoolsCreateResponse(rsp)
}

func (c *ClientWithResponses) KaasVkeNodePoolsCreateWithResponse(ctx context.Context, params *KaasVkeNodePoolsCreateParams, body KaasVkeNodePoolsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*KaasVkeNodePoolsCreateResponse, error) {
	rsp, err := c.KaasVkeNodePoolsCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasVkeNodePoolsCreateResponse(rsp)
}

func (c *ClientWithResponses) KaasVkeNodePoolsCreateWithFormdataBodyWithResponse(ctx context.Context, params *KaasVkeNodePoolsCreateParams, body KaasVkeNodePoolsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*KaasVkeNodePoolsCreateResponse, error) {
	rsp, err := c.KaasVkeNodePoolsCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasVkeNodePoolsCreateResponse(rsp)
}

// KaasVkeNodePoolsDestroyWithResponse request returning *KaasVkeNodePoolsDestroyResponse
func (c *ClientWithResponses) KaasVkeNodePoolsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasVkeNodePoolsDestroyParams, reqEditors ...RequestEditorFn) (*KaasVkeNodePoolsDestroyResponse, error) {
	rsp, err := c.KaasVkeNodePoolsDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasVkeNodePoolsDestroyResponse(rsp)
}

// KaasVkeNodePoolsRetrieveWithResponse request returning *KaasVkeNodePoolsRetrieveResponse
func (c *ClientWithResponses) KaasVkeNodePoolsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasVkeNodePoolsRetrieveParams, reqEditors ...RequestEditorFn) (*KaasVkeNodePoolsRetrieveResponse, error) {
	rsp, err := c.KaasVkeNodePoolsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasVkeNodePoolsRetrieveResponse(rsp)
}

// KaasVkeNodePoolsPartialUpdateWithBodyWithResponse request with arbitrary body returning *KaasVkeNodePoolsPartialUpdateResponse
func (c *ClientWithResponses) KaasVkeNodePoolsPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasVkeNodePoolsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KaasVkeNodePoolsPartialUpdateResponse, error) {
	rsp, err := c.KaasVkeNodePoolsPartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasVkeNodePoolsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) KaasVkeNodePoolsPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasVkeNodePoolsPartialUpdateParams, body KaasVkeNodePoolsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*KaasVkeNodePoolsPartialUpdateResponse, error) {
	rsp, err := c.KaasVkeNodePoolsPartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasVkeNodePoolsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) KaasVkeNodePoolsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasVkeNodePoolsPartialUpdateParams, body KaasVkeNodePoolsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*KaasVkeNodePoolsPartialUpdateResponse, error) {
	rsp, err := c.KaasVkeNodePoolsPartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasVkeNodePoolsPartialUpdateResponse(rsp)
}

// KaasVkeNodePoolsUpdateWithBodyWithResponse request with arbitrary body returning *KaasVkeNodePoolsUpdateResponse
func (c *ClientWithResponses) KaasVkeNodePoolsUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasVkeNodePoolsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KaasVkeNodePoolsUpdateResponse, error) {
	rsp, err := c.KaasVkeNodePoolsUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasVkeNodePoolsUpdateResponse(rsp)
}

func (c *ClientWithResponses) KaasVkeNodePoolsUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasVkeNodePoolsUpdateParams, body KaasVkeNodePoolsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*KaasVkeNodePoolsUpdateResponse, error) {
	rsp, err := c.KaasVkeNodePoolsUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasVkeNodePoolsUpdateResponse(rsp)
}

func (c *ClientWithResponses) KaasVkeNodePoolsUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasVkeNodePoolsUpdateParams, body KaasVkeNodePoolsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*KaasVkeNodePoolsUpdateResponse, error) {
	rsp, err := c.KaasVkeNodePoolsUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasVkeNodePoolsUpdateResponse(rsp)
}

// KaasVkeWebcliRetrieveWithResponse request returning *KaasVkeWebcliRetrieveResponse
func (c *ClientWithResponses) KaasVkeWebcliRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *KaasVkeWebcliRetrieveParams, reqEditors ...RequestEditorFn) (*KaasVkeWebcliRetrieveResponse, error) {
	rsp, err := c.KaasVkeWebcliRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKaasVkeWebcliRetrieveResponse(rsp)
}

// MarketplaceCategoriesListWithResponse request returning *MarketplaceCategoriesListResponse
func (c *ClientWithResponses) MarketplaceCategoriesListWithResponse(ctx context.Context, params *MarketplaceCategoriesListParams, reqEditors ...RequestEditorFn) (*MarketplaceCategoriesListResponse, error) {
	rsp, err := c.MarketplaceCategoriesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplaceCategoriesListResponse(rsp)
}

// MarketplaceCategoriesCreateWithBodyWithResponse request with arbitrary body returning *MarketplaceCategoriesCreateResponse
func (c *ClientWithResponses) MarketplaceCategoriesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MarketplaceCategoriesCreateResponse, error) {
	rsp, err := c.MarketplaceCategoriesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplaceCategoriesCreateResponse(rsp)
}

func (c *ClientWithResponses) MarketplaceCategoriesCreateWithResponse(ctx context.Context, body MarketplaceCategoriesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*MarketplaceCategoriesCreateResponse, error) {
	rsp, err := c.MarketplaceCategoriesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplaceCategoriesCreateResponse(rsp)
}

func (c *ClientWithResponses) MarketplaceCategoriesCreateWithFormdataBodyWithResponse(ctx context.Context, body MarketplaceCategoriesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MarketplaceCategoriesCreateResponse, error) {
	rsp, err := c.MarketplaceCategoriesCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplaceCategoriesCreateResponse(rsp)
}

// MarketplaceCategoriesRetrieveWithResponse request returning *MarketplaceCategoriesRetrieveResponse
func (c *ClientWithResponses) MarketplaceCategoriesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*MarketplaceCategoriesRetrieveResponse, error) {
	rsp, err := c.MarketplaceCategoriesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplaceCategoriesRetrieveResponse(rsp)
}

// MarketplaceCategoriesPartialUpdateWithBodyWithResponse request with arbitrary body returning *MarketplaceCategoriesPartialUpdateResponse
func (c *ClientWithResponses) MarketplaceCategoriesPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MarketplaceCategoriesPartialUpdateResponse, error) {
	rsp, err := c.MarketplaceCategoriesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplaceCategoriesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) MarketplaceCategoriesPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body MarketplaceCategoriesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*MarketplaceCategoriesPartialUpdateResponse, error) {
	rsp, err := c.MarketplaceCategoriesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplaceCategoriesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) MarketplaceCategoriesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body MarketplaceCategoriesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MarketplaceCategoriesPartialUpdateResponse, error) {
	rsp, err := c.MarketplaceCategoriesPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplaceCategoriesPartialUpdateResponse(rsp)
}

// MarketplacePricingPlansListWithResponse request returning *MarketplacePricingPlansListResponse
func (c *ClientWithResponses) MarketplacePricingPlansListWithResponse(ctx context.Context, params *MarketplacePricingPlansListParams, reqEditors ...RequestEditorFn) (*MarketplacePricingPlansListResponse, error) {
	rsp, err := c.MarketplacePricingPlansList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplacePricingPlansListResponse(rsp)
}

// MarketplacePricingPlansCreateWithBodyWithResponse request with arbitrary body returning *MarketplacePricingPlansCreateResponse
func (c *ClientWithResponses) MarketplacePricingPlansCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MarketplacePricingPlansCreateResponse, error) {
	rsp, err := c.MarketplacePricingPlansCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplacePricingPlansCreateResponse(rsp)
}

func (c *ClientWithResponses) MarketplacePricingPlansCreateWithResponse(ctx context.Context, body MarketplacePricingPlansCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*MarketplacePricingPlansCreateResponse, error) {
	rsp, err := c.MarketplacePricingPlansCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplacePricingPlansCreateResponse(rsp)
}

func (c *ClientWithResponses) MarketplacePricingPlansCreateWithFormdataBodyWithResponse(ctx context.Context, body MarketplacePricingPlansCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MarketplacePricingPlansCreateResponse, error) {
	rsp, err := c.MarketplacePricingPlansCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplacePricingPlansCreateResponse(rsp)
}

// MarketplacePricingPlansRetrieveWithResponse request returning *MarketplacePricingPlansRetrieveResponse
func (c *ClientWithResponses) MarketplacePricingPlansRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*MarketplacePricingPlansRetrieveResponse, error) {
	rsp, err := c.MarketplacePricingPlansRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplacePricingPlansRetrieveResponse(rsp)
}

// MarketplacePricingPlansPartialUpdateWithBodyWithResponse request with arbitrary body returning *MarketplacePricingPlansPartialUpdateResponse
func (c *ClientWithResponses) MarketplacePricingPlansPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MarketplacePricingPlansPartialUpdateResponse, error) {
	rsp, err := c.MarketplacePricingPlansPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplacePricingPlansPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) MarketplacePricingPlansPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body MarketplacePricingPlansPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*MarketplacePricingPlansPartialUpdateResponse, error) {
	rsp, err := c.MarketplacePricingPlansPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplacePricingPlansPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) MarketplacePricingPlansPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body MarketplacePricingPlansPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MarketplacePricingPlansPartialUpdateResponse, error) {
	rsp, err := c.MarketplacePricingPlansPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplacePricingPlansPartialUpdateResponse(rsp)
}

// MarketplaceProductsListWithResponse request returning *MarketplaceProductsListResponse
func (c *ClientWithResponses) MarketplaceProductsListWithResponse(ctx context.Context, params *MarketplaceProductsListParams, reqEditors ...RequestEditorFn) (*MarketplaceProductsListResponse, error) {
	rsp, err := c.MarketplaceProductsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplaceProductsListResponse(rsp)
}

// MarketplaceProductsCreateWithBodyWithResponse request with arbitrary body returning *MarketplaceProductsCreateResponse
func (c *ClientWithResponses) MarketplaceProductsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MarketplaceProductsCreateResponse, error) {
	rsp, err := c.MarketplaceProductsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplaceProductsCreateResponse(rsp)
}

func (c *ClientWithResponses) MarketplaceProductsCreateWithResponse(ctx context.Context, body MarketplaceProductsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*MarketplaceProductsCreateResponse, error) {
	rsp, err := c.MarketplaceProductsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplaceProductsCreateResponse(rsp)
}

func (c *ClientWithResponses) MarketplaceProductsCreateWithFormdataBodyWithResponse(ctx context.Context, body MarketplaceProductsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MarketplaceProductsCreateResponse, error) {
	rsp, err := c.MarketplaceProductsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplaceProductsCreateResponse(rsp)
}

// MarketplaceProductsRetrieveWithResponse request returning *MarketplaceProductsRetrieveResponse
func (c *ClientWithResponses) MarketplaceProductsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*MarketplaceProductsRetrieveResponse, error) {
	rsp, err := c.MarketplaceProductsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplaceProductsRetrieveResponse(rsp)
}

// MarketplaceProductsPartialUpdateWithBodyWithResponse request with arbitrary body returning *MarketplaceProductsPartialUpdateResponse
func (c *ClientWithResponses) MarketplaceProductsPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MarketplaceProductsPartialUpdateResponse, error) {
	rsp, err := c.MarketplaceProductsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplaceProductsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) MarketplaceProductsPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body MarketplaceProductsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*MarketplaceProductsPartialUpdateResponse, error) {
	rsp, err := c.MarketplaceProductsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplaceProductsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) MarketplaceProductsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body MarketplaceProductsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MarketplaceProductsPartialUpdateResponse, error) {
	rsp, err := c.MarketplaceProductsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplaceProductsPartialUpdateResponse(rsp)
}

// MarketplaceSubscriptionsListWithResponse request returning *MarketplaceSubscriptionsListResponse
func (c *ClientWithResponses) MarketplaceSubscriptionsListWithResponse(ctx context.Context, params *MarketplaceSubscriptionsListParams, reqEditors ...RequestEditorFn) (*MarketplaceSubscriptionsListResponse, error) {
	rsp, err := c.MarketplaceSubscriptionsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplaceSubscriptionsListResponse(rsp)
}

// MarketplaceSubscriptionsCreateWithBodyWithResponse request with arbitrary body returning *MarketplaceSubscriptionsCreateResponse
func (c *ClientWithResponses) MarketplaceSubscriptionsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MarketplaceSubscriptionsCreateResponse, error) {
	rsp, err := c.MarketplaceSubscriptionsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplaceSubscriptionsCreateResponse(rsp)
}

func (c *ClientWithResponses) MarketplaceSubscriptionsCreateWithResponse(ctx context.Context, body MarketplaceSubscriptionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*MarketplaceSubscriptionsCreateResponse, error) {
	rsp, err := c.MarketplaceSubscriptionsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplaceSubscriptionsCreateResponse(rsp)
}

func (c *ClientWithResponses) MarketplaceSubscriptionsCreateWithFormdataBodyWithResponse(ctx context.Context, body MarketplaceSubscriptionsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MarketplaceSubscriptionsCreateResponse, error) {
	rsp, err := c.MarketplaceSubscriptionsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplaceSubscriptionsCreateResponse(rsp)
}

// MarketplaceSubscriptionsDestroyWithResponse request returning *MarketplaceSubscriptionsDestroyResponse
func (c *ClientWithResponses) MarketplaceSubscriptionsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*MarketplaceSubscriptionsDestroyResponse, error) {
	rsp, err := c.MarketplaceSubscriptionsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplaceSubscriptionsDestroyResponse(rsp)
}

// MarketplaceSubscriptionsRetrieveWithResponse request returning *MarketplaceSubscriptionsRetrieveResponse
func (c *ClientWithResponses) MarketplaceSubscriptionsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*MarketplaceSubscriptionsRetrieveResponse, error) {
	rsp, err := c.MarketplaceSubscriptionsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplaceSubscriptionsRetrieveResponse(rsp)
}

// MarketplaceVendorsListWithResponse request returning *MarketplaceVendorsListResponse
func (c *ClientWithResponses) MarketplaceVendorsListWithResponse(ctx context.Context, params *MarketplaceVendorsListParams, reqEditors ...RequestEditorFn) (*MarketplaceVendorsListResponse, error) {
	rsp, err := c.MarketplaceVendorsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplaceVendorsListResponse(rsp)
}

// MarketplaceVendorsCreateWithBodyWithResponse request with arbitrary body returning *MarketplaceVendorsCreateResponse
func (c *ClientWithResponses) MarketplaceVendorsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MarketplaceVendorsCreateResponse, error) {
	rsp, err := c.MarketplaceVendorsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplaceVendorsCreateResponse(rsp)
}

func (c *ClientWithResponses) MarketplaceVendorsCreateWithResponse(ctx context.Context, body MarketplaceVendorsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*MarketplaceVendorsCreateResponse, error) {
	rsp, err := c.MarketplaceVendorsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplaceVendorsCreateResponse(rsp)
}

func (c *ClientWithResponses) MarketplaceVendorsCreateWithFormdataBodyWithResponse(ctx context.Context, body MarketplaceVendorsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MarketplaceVendorsCreateResponse, error) {
	rsp, err := c.MarketplaceVendorsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplaceVendorsCreateResponse(rsp)
}

// MarketplaceVendorsRetrieveWithResponse request returning *MarketplaceVendorsRetrieveResponse
func (c *ClientWithResponses) MarketplaceVendorsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*MarketplaceVendorsRetrieveResponse, error) {
	rsp, err := c.MarketplaceVendorsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplaceVendorsRetrieveResponse(rsp)
}

// MarketplaceVendorsPartialUpdateWithBodyWithResponse request with arbitrary body returning *MarketplaceVendorsPartialUpdateResponse
func (c *ClientWithResponses) MarketplaceVendorsPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MarketplaceVendorsPartialUpdateResponse, error) {
	rsp, err := c.MarketplaceVendorsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplaceVendorsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) MarketplaceVendorsPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body MarketplaceVendorsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*MarketplaceVendorsPartialUpdateResponse, error) {
	rsp, err := c.MarketplaceVendorsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplaceVendorsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) MarketplaceVendorsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body MarketplaceVendorsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MarketplaceVendorsPartialUpdateResponse, error) {
	rsp, err := c.MarketplaceVendorsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplaceVendorsPartialUpdateResponse(rsp)
}

// ObjectStorageActivateServiceCreateWithResponse request returning *ObjectStorageActivateServiceCreateResponse
func (c *ClientWithResponses) ObjectStorageActivateServiceCreateWithResponse(ctx context.Context, params *ObjectStorageActivateServiceCreateParams, reqEditors ...RequestEditorFn) (*ObjectStorageActivateServiceCreateResponse, error) {
	rsp, err := c.ObjectStorageActivateServiceCreate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseObjectStorageActivateServiceCreateResponse(rsp)
}

// ObjectStorageBucketsListWithResponse request returning *ObjectStorageBucketsListResponse
func (c *ClientWithResponses) ObjectStorageBucketsListWithResponse(ctx context.Context, params *ObjectStorageBucketsListParams, reqEditors ...RequestEditorFn) (*ObjectStorageBucketsListResponse, error) {
	rsp, err := c.ObjectStorageBucketsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseObjectStorageBucketsListResponse(rsp)
}

// ObjectStorageBucketsCreateWithBodyWithResponse request with arbitrary body returning *ObjectStorageBucketsCreateResponse
func (c *ClientWithResponses) ObjectStorageBucketsCreateWithBodyWithResponse(ctx context.Context, params *ObjectStorageBucketsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ObjectStorageBucketsCreateResponse, error) {
	rsp, err := c.ObjectStorageBucketsCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseObjectStorageBucketsCreateResponse(rsp)
}

func (c *ClientWithResponses) ObjectStorageBucketsCreateWithResponse(ctx context.Context, params *ObjectStorageBucketsCreateParams, body ObjectStorageBucketsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ObjectStorageBucketsCreateResponse, error) {
	rsp, err := c.ObjectStorageBucketsCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseObjectStorageBucketsCreateResponse(rsp)
}

func (c *ClientWithResponses) ObjectStorageBucketsCreateWithFormdataBodyWithResponse(ctx context.Context, params *ObjectStorageBucketsCreateParams, body ObjectStorageBucketsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ObjectStorageBucketsCreateResponse, error) {
	rsp, err := c.ObjectStorageBucketsCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseObjectStorageBucketsCreateResponse(rsp)
}

// BucketAclShowWithResponse request returning *BucketAclShowResponse
func (c *ClientWithResponses) BucketAclShowWithResponse(ctx context.Context, bucketName string, params *BucketAclShowParams, reqEditors ...RequestEditorFn) (*BucketAclShowResponse, error) {
	rsp, err := c.BucketAclShow(ctx, bucketName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBucketAclShowResponse(rsp)
}

// BucketAclPatchWithBodyWithResponse request with arbitrary body returning *BucketAclPatchResponse
func (c *ClientWithResponses) BucketAclPatchWithBodyWithResponse(ctx context.Context, bucketName string, params *BucketAclPatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BucketAclPatchResponse, error) {
	rsp, err := c.BucketAclPatchWithBody(ctx, bucketName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBucketAclPatchResponse(rsp)
}

func (c *ClientWithResponses) BucketAclPatchWithResponse(ctx context.Context, bucketName string, params *BucketAclPatchParams, body BucketAclPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*BucketAclPatchResponse, error) {
	rsp, err := c.BucketAclPatch(ctx, bucketName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBucketAclPatchResponse(rsp)
}

func (c *ClientWithResponses) BucketAclPatchWithFormdataBodyWithResponse(ctx context.Context, bucketName string, params *BucketAclPatchParams, body BucketAclPatchFormdataRequestBody, reqEditors ...RequestEditorFn) (*BucketAclPatchResponse, error) {
	rsp, err := c.BucketAclPatchWithFormdataBody(ctx, bucketName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBucketAclPatchResponse(rsp)
}

// BucketCorsDeleteWithResponse request returning *BucketCorsDeleteResponse
func (c *ClientWithResponses) BucketCorsDeleteWithResponse(ctx context.Context, bucketName string, params *BucketCorsDeleteParams, reqEditors ...RequestEditorFn) (*BucketCorsDeleteResponse, error) {
	rsp, err := c.BucketCorsDelete(ctx, bucketName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBucketCorsDeleteResponse(rsp)
}

// BucketCorsShowWithResponse request returning *BucketCorsShowResponse
func (c *ClientWithResponses) BucketCorsShowWithResponse(ctx context.Context, bucketName string, params *BucketCorsShowParams, reqEditors ...RequestEditorFn) (*BucketCorsShowResponse, error) {
	rsp, err := c.BucketCorsShow(ctx, bucketName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBucketCorsShowResponse(rsp)
}

// BucketCorsEditWithBodyWithResponse request with arbitrary body returning *BucketCorsEditResponse
func (c *ClientWithResponses) BucketCorsEditWithBodyWithResponse(ctx context.Context, bucketName string, params *BucketCorsEditParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BucketCorsEditResponse, error) {
	rsp, err := c.BucketCorsEditWithBody(ctx, bucketName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBucketCorsEditResponse(rsp)
}

func (c *ClientWithResponses) BucketCorsEditWithResponse(ctx context.Context, bucketName string, params *BucketCorsEditParams, body BucketCorsEditJSONRequestBody, reqEditors ...RequestEditorFn) (*BucketCorsEditResponse, error) {
	rsp, err := c.BucketCorsEdit(ctx, bucketName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBucketCorsEditResponse(rsp)
}

func (c *ClientWithResponses) BucketCorsEditWithFormdataBodyWithResponse(ctx context.Context, bucketName string, params *BucketCorsEditParams, body BucketCorsEditFormdataRequestBody, reqEditors ...RequestEditorFn) (*BucketCorsEditResponse, error) {
	rsp, err := c.BucketCorsEditWithFormdataBody(ctx, bucketName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBucketCorsEditResponse(rsp)
}

// BucketLifecycleDeleteWithResponse request returning *BucketLifecycleDeleteResponse
func (c *ClientWithResponses) BucketLifecycleDeleteWithResponse(ctx context.Context, bucketName string, params *BucketLifecycleDeleteParams, reqEditors ...RequestEditorFn) (*BucketLifecycleDeleteResponse, error) {
	rsp, err := c.BucketLifecycleDelete(ctx, bucketName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBucketLifecycleDeleteResponse(rsp)
}

// BucketLifecycleListWithResponse request returning *BucketLifecycleListResponse
func (c *ClientWithResponses) BucketLifecycleListWithResponse(ctx context.Context, bucketName string, params *BucketLifecycleListParams, reqEditors ...RequestEditorFn) (*BucketLifecycleListResponse, error) {
	rsp, err := c.BucketLifecycleList(ctx, bucketName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBucketLifecycleListResponse(rsp)
}

// BucketLifecyclePutWithBodyWithResponse request with arbitrary body returning *BucketLifecyclePutResponse
func (c *ClientWithResponses) BucketLifecyclePutWithBodyWithResponse(ctx context.Context, bucketName string, params *BucketLifecyclePutParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BucketLifecyclePutResponse, error) {
	rsp, err := c.BucketLifecyclePutWithBody(ctx, bucketName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBucketLifecyclePutResponse(rsp)
}

func (c *ClientWithResponses) BucketLifecyclePutWithResponse(ctx context.Context, bucketName string, params *BucketLifecyclePutParams, body BucketLifecyclePutJSONRequestBody, reqEditors ...RequestEditorFn) (*BucketLifecyclePutResponse, error) {
	rsp, err := c.BucketLifecyclePut(ctx, bucketName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBucketLifecyclePutResponse(rsp)
}

func (c *ClientWithResponses) BucketLifecyclePutWithFormdataBodyWithResponse(ctx context.Context, bucketName string, params *BucketLifecyclePutParams, body BucketLifecyclePutFormdataRequestBody, reqEditors ...RequestEditorFn) (*BucketLifecyclePutResponse, error) {
	rsp, err := c.BucketLifecyclePutWithFormdataBody(ctx, bucketName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBucketLifecyclePutResponse(rsp)
}

// BucketObjectListWithResponse request returning *BucketObjectListResponse
func (c *ClientWithResponses) BucketObjectListWithResponse(ctx context.Context, bucketName string, params *BucketObjectListParams, reqEditors ...RequestEditorFn) (*BucketObjectListResponse, error) {
	rsp, err := c.BucketObjectList(ctx, bucketName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBucketObjectListResponse(rsp)
}

// CreateFolderGetAwsTokenUploadFileWithBodyWithResponse request with arbitrary body returning *CreateFolderGetAwsTokenUploadFileResponse
func (c *ClientWithResponses) CreateFolderGetAwsTokenUploadFileWithBodyWithResponse(ctx context.Context, bucketName string, params *CreateFolderGetAwsTokenUploadFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFolderGetAwsTokenUploadFileResponse, error) {
	rsp, err := c.CreateFolderGetAwsTokenUploadFileWithBody(ctx, bucketName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFolderGetAwsTokenUploadFileResponse(rsp)
}

func (c *ClientWithResponses) CreateFolderGetAwsTokenUploadFileWithResponse(ctx context.Context, bucketName string, params *CreateFolderGetAwsTokenUploadFileParams, body CreateFolderGetAwsTokenUploadFileJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFolderGetAwsTokenUploadFileResponse, error) {
	rsp, err := c.CreateFolderGetAwsTokenUploadFile(ctx, bucketName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFolderGetAwsTokenUploadFileResponse(rsp)
}

func (c *ClientWithResponses) CreateFolderGetAwsTokenUploadFileWithFormdataBodyWithResponse(ctx context.Context, bucketName string, params *CreateFolderGetAwsTokenUploadFileParams, body CreateFolderGetAwsTokenUploadFileFormdataRequestBody, reqEditors ...RequestEditorFn) (*CreateFolderGetAwsTokenUploadFileResponse, error) {
	rsp, err := c.CreateFolderGetAwsTokenUploadFileWithFormdataBody(ctx, bucketName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFolderGetAwsTokenUploadFileResponse(rsp)
}

// GetObjectAclWithResponse request returning *GetObjectAclResponse
func (c *ClientWithResponses) GetObjectAclWithResponse(ctx context.Context, bucketName string, objectName string, params *GetObjectAclParams, reqEditors ...RequestEditorFn) (*GetObjectAclResponse, error) {
	rsp, err := c.GetObjectAcl(ctx, bucketName, objectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObjectAclResponse(rsp)
}

// PatchObjectAclWithBodyWithResponse request with arbitrary body returning *PatchObjectAclResponse
func (c *ClientWithResponses) PatchObjectAclWithBodyWithResponse(ctx context.Context, bucketName string, objectName string, params *PatchObjectAclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchObjectAclResponse, error) {
	rsp, err := c.PatchObjectAclWithBody(ctx, bucketName, objectName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchObjectAclResponse(rsp)
}

func (c *ClientWithResponses) PatchObjectAclWithResponse(ctx context.Context, bucketName string, objectName string, params *PatchObjectAclParams, body PatchObjectAclJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchObjectAclResponse, error) {
	rsp, err := c.PatchObjectAcl(ctx, bucketName, objectName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchObjectAclResponse(rsp)
}

func (c *ClientWithResponses) PatchObjectAclWithFormdataBodyWithResponse(ctx context.Context, bucketName string, objectName string, params *PatchObjectAclParams, body PatchObjectAclFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchObjectAclResponse, error) {
	rsp, err := c.PatchObjectAclWithFormdataBody(ctx, bucketName, objectName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchObjectAclResponse(rsp)
}

// ObjectBatchDeleteWithBodyWithResponse request with arbitrary body returning *ObjectBatchDeleteResponse
func (c *ClientWithResponses) ObjectBatchDeleteWithBodyWithResponse(ctx context.Context, bucketName string, params *ObjectBatchDeleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ObjectBatchDeleteResponse, error) {
	rsp, err := c.ObjectBatchDeleteWithBody(ctx, bucketName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseObjectBatchDeleteResponse(rsp)
}

func (c *ClientWithResponses) ObjectBatchDeleteWithResponse(ctx context.Context, bucketName string, params *ObjectBatchDeleteParams, body ObjectBatchDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*ObjectBatchDeleteResponse, error) {
	rsp, err := c.ObjectBatchDelete(ctx, bucketName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseObjectBatchDeleteResponse(rsp)
}

func (c *ClientWithResponses) ObjectBatchDeleteWithFormdataBodyWithResponse(ctx context.Context, bucketName string, params *ObjectBatchDeleteParams, body ObjectBatchDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*ObjectBatchDeleteResponse, error) {
	rsp, err := c.ObjectBatchDeleteWithFormdataBody(ctx, bucketName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseObjectBatchDeleteResponse(rsp)
}

// DeleteObjectWithResponse request returning *DeleteObjectResponse
func (c *ClientWithResponses) DeleteObjectWithResponse(ctx context.Context, bucketName string, objectName string, params *DeleteObjectParams, reqEditors ...RequestEditorFn) (*DeleteObjectResponse, error) {
	rsp, err := c.DeleteObject(ctx, bucketName, objectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteObjectResponse(rsp)
}

// ObjectDetailsWithResponse request returning *ObjectDetailsResponse
func (c *ClientWithResponses) ObjectDetailsWithResponse(ctx context.Context, bucketName string, objectName string, params *ObjectDetailsParams, reqEditors ...RequestEditorFn) (*ObjectDetailsResponse, error) {
	rsp, err := c.ObjectDetails(ctx, bucketName, objectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseObjectDetailsResponse(rsp)
}

// GetObjectShareUrlWithResponse request returning *GetObjectShareUrlResponse
func (c *ClientWithResponses) GetObjectShareUrlWithResponse(ctx context.Context, bucketName string, objectName string, params *GetObjectShareUrlParams, reqEditors ...RequestEditorFn) (*GetObjectShareUrlResponse, error) {
	rsp, err := c.GetObjectShareUrl(ctx, bucketName, objectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObjectShareUrlResponse(rsp)
}

// DeleteAllObjectTagsWithResponse request returning *DeleteAllObjectTagsResponse
func (c *ClientWithResponses) DeleteAllObjectTagsWithResponse(ctx context.Context, bucketName string, objectName string, params *DeleteAllObjectTagsParams, reqEditors ...RequestEditorFn) (*DeleteAllObjectTagsResponse, error) {
	rsp, err := c.DeleteAllObjectTags(ctx, bucketName, objectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAllObjectTagsResponse(rsp)
}

// GetObjectTagsWithResponse request returning *GetObjectTagsResponse
func (c *ClientWithResponses) GetObjectTagsWithResponse(ctx context.Context, bucketName string, objectName string, params *GetObjectTagsParams, reqEditors ...RequestEditorFn) (*GetObjectTagsResponse, error) {
	rsp, err := c.GetObjectTags(ctx, bucketName, objectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObjectTagsResponse(rsp)
}

// PutObjectTagsWithBodyWithResponse request with arbitrary body returning *PutObjectTagsResponse
func (c *ClientWithResponses) PutObjectTagsWithBodyWithResponse(ctx context.Context, bucketName string, objectName string, params *PutObjectTagsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutObjectTagsResponse, error) {
	rsp, err := c.PutObjectTagsWithBody(ctx, bucketName, objectName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutObjectTagsResponse(rsp)
}

func (c *ClientWithResponses) PutObjectTagsWithResponse(ctx context.Context, bucketName string, objectName string, params *PutObjectTagsParams, body PutObjectTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutObjectTagsResponse, error) {
	rsp, err := c.PutObjectTags(ctx, bucketName, objectName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutObjectTagsResponse(rsp)
}

func (c *ClientWithResponses) PutObjectTagsWithFormdataBodyWithResponse(ctx context.Context, bucketName string, objectName string, params *PutObjectTagsParams, body PutObjectTagsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutObjectTagsResponse, error) {
	rsp, err := c.PutObjectTagsWithFormdataBody(ctx, bucketName, objectName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutObjectTagsResponse(rsp)
}

// BucketPolicyDeleteWithResponse request returning *BucketPolicyDeleteResponse
func (c *ClientWithResponses) BucketPolicyDeleteWithResponse(ctx context.Context, bucketName string, params *BucketPolicyDeleteParams, reqEditors ...RequestEditorFn) (*BucketPolicyDeleteResponse, error) {
	rsp, err := c.BucketPolicyDelete(ctx, bucketName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBucketPolicyDeleteResponse(rsp)
}

// BucketPolicyGetWithResponse request returning *BucketPolicyGetResponse
func (c *ClientWithResponses) BucketPolicyGetWithResponse(ctx context.Context, bucketName string, params *BucketPolicyGetParams, reqEditors ...RequestEditorFn) (*BucketPolicyGetResponse, error) {
	rsp, err := c.BucketPolicyGet(ctx, bucketName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBucketPolicyGetResponse(rsp)
}

// BucketPolicyPutWithBodyWithResponse request with arbitrary body returning *BucketPolicyPutResponse
func (c *ClientWithResponses) BucketPolicyPutWithBodyWithResponse(ctx context.Context, bucketName string, params *BucketPolicyPutParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BucketPolicyPutResponse, error) {
	rsp, err := c.BucketPolicyPutWithBody(ctx, bucketName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBucketPolicyPutResponse(rsp)
}

func (c *ClientWithResponses) BucketPolicyPutWithResponse(ctx context.Context, bucketName string, params *BucketPolicyPutParams, body BucketPolicyPutJSONRequestBody, reqEditors ...RequestEditorFn) (*BucketPolicyPutResponse, error) {
	rsp, err := c.BucketPolicyPut(ctx, bucketName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBucketPolicyPutResponse(rsp)
}

func (c *ClientWithResponses) BucketPolicyPutWithFormdataBodyWithResponse(ctx context.Context, bucketName string, params *BucketPolicyPutParams, body BucketPolicyPutFormdataRequestBody, reqEditors ...RequestEditorFn) (*BucketPolicyPutResponse, error) {
	rsp, err := c.BucketPolicyPutWithFormdataBody(ctx, bucketName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBucketPolicyPutResponse(rsp)
}

// BucketStaticWebDeleteWithResponse request returning *BucketStaticWebDeleteResponse
func (c *ClientWithResponses) BucketStaticWebDeleteWithResponse(ctx context.Context, bucketName string, params *BucketStaticWebDeleteParams, reqEditors ...RequestEditorFn) (*BucketStaticWebDeleteResponse, error) {
	rsp, err := c.BucketStaticWebDelete(ctx, bucketName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBucketStaticWebDeleteResponse(rsp)
}

// BucketStaticWebCreateWithResponse request returning *BucketStaticWebCreateResponse
func (c *ClientWithResponses) BucketStaticWebCreateWithResponse(ctx context.Context, bucketName string, params *BucketStaticWebCreateParams, reqEditors ...RequestEditorFn) (*BucketStaticWebCreateResponse, error) {
	rsp, err := c.BucketStaticWebCreate(ctx, bucketName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBucketStaticWebCreateResponse(rsp)
}

// BucketStaticWebShowWithBodyWithResponse request with arbitrary body returning *BucketStaticWebShowResponse
func (c *ClientWithResponses) BucketStaticWebShowWithBodyWithResponse(ctx context.Context, bucketName string, params *BucketStaticWebShowParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BucketStaticWebShowResponse, error) {
	rsp, err := c.BucketStaticWebShowWithBody(ctx, bucketName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBucketStaticWebShowResponse(rsp)
}

func (c *ClientWithResponses) BucketStaticWebShowWithResponse(ctx context.Context, bucketName string, params *BucketStaticWebShowParams, body BucketStaticWebShowJSONRequestBody, reqEditors ...RequestEditorFn) (*BucketStaticWebShowResponse, error) {
	rsp, err := c.BucketStaticWebShow(ctx, bucketName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBucketStaticWebShowResponse(rsp)
}

func (c *ClientWithResponses) BucketStaticWebShowWithFormdataBodyWithResponse(ctx context.Context, bucketName string, params *BucketStaticWebShowParams, body BucketStaticWebShowFormdataRequestBody, reqEditors ...RequestEditorFn) (*BucketStaticWebShowResponse, error) {
	rsp, err := c.BucketStaticWebShowWithFormdataBody(ctx, bucketName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBucketStaticWebShowResponse(rsp)
}

// DeleteBucketTagsWithResponse request returning *DeleteBucketTagsResponse
func (c *ClientWithResponses) DeleteBucketTagsWithResponse(ctx context.Context, bucketName string, params *DeleteBucketTagsParams, reqEditors ...RequestEditorFn) (*DeleteBucketTagsResponse, error) {
	rsp, err := c.DeleteBucketTags(ctx, bucketName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBucketTagsResponse(rsp)
}

// GetBucketTagsWithResponse request returning *GetBucketTagsResponse
func (c *ClientWithResponses) GetBucketTagsWithResponse(ctx context.Context, bucketName string, params *GetBucketTagsParams, reqEditors ...RequestEditorFn) (*GetBucketTagsResponse, error) {
	rsp, err := c.GetBucketTags(ctx, bucketName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBucketTagsResponse(rsp)
}

// PutBucketTagsWithBodyWithResponse request with arbitrary body returning *PutBucketTagsResponse
func (c *ClientWithResponses) PutBucketTagsWithBodyWithResponse(ctx context.Context, bucketName string, params *PutBucketTagsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBucketTagsResponse, error) {
	rsp, err := c.PutBucketTagsWithBody(ctx, bucketName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBucketTagsResponse(rsp)
}

func (c *ClientWithResponses) PutBucketTagsWithResponse(ctx context.Context, bucketName string, params *PutBucketTagsParams, body PutBucketTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBucketTagsResponse, error) {
	rsp, err := c.PutBucketTags(ctx, bucketName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBucketTagsResponse(rsp)
}

func (c *ClientWithResponses) PutBucketTagsWithFormdataBodyWithResponse(ctx context.Context, bucketName string, params *PutBucketTagsParams, body PutBucketTagsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutBucketTagsResponse, error) {
	rsp, err := c.PutBucketTagsWithFormdataBody(ctx, bucketName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBucketTagsResponse(rsp)
}

// BucketVersioningShowWithResponse request returning *BucketVersioningShowResponse
func (c *ClientWithResponses) BucketVersioningShowWithResponse(ctx context.Context, bucketName string, params *BucketVersioningShowParams, reqEditors ...RequestEditorFn) (*BucketVersioningShowResponse, error) {
	rsp, err := c.BucketVersioningShow(ctx, bucketName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBucketVersioningShowResponse(rsp)
}

// BucketVersioningActionWithBodyWithResponse request with arbitrary body returning *BucketVersioningActionResponse
func (c *ClientWithResponses) BucketVersioningActionWithBodyWithResponse(ctx context.Context, bucketName string, params *BucketVersioningActionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BucketVersioningActionResponse, error) {
	rsp, err := c.BucketVersioningActionWithBody(ctx, bucketName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBucketVersioningActionResponse(rsp)
}

func (c *ClientWithResponses) BucketVersioningActionWithResponse(ctx context.Context, bucketName string, params *BucketVersioningActionParams, body BucketVersioningActionJSONRequestBody, reqEditors ...RequestEditorFn) (*BucketVersioningActionResponse, error) {
	rsp, err := c.BucketVersioningAction(ctx, bucketName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBucketVersioningActionResponse(rsp)
}

func (c *ClientWithResponses) BucketVersioningActionWithFormdataBodyWithResponse(ctx context.Context, bucketName string, params *BucketVersioningActionParams, body BucketVersioningActionFormdataRequestBody, reqEditors ...RequestEditorFn) (*BucketVersioningActionResponse, error) {
	rsp, err := c.BucketVersioningActionWithFormdataBody(ctx, bucketName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBucketVersioningActionResponse(rsp)
}

// BucketObjectVersionListWithResponse request returning *BucketObjectVersionListResponse
func (c *ClientWithResponses) BucketObjectVersionListWithResponse(ctx context.Context, bucketName string, params *BucketObjectVersionListParams, reqEditors ...RequestEditorFn) (*BucketObjectVersionListResponse, error) {
	rsp, err := c.BucketObjectVersionList(ctx, bucketName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBucketObjectVersionListResponse(rsp)
}

// GetObjectVersionAclWithResponse request returning *GetObjectVersionAclResponse
func (c *ClientWithResponses) GetObjectVersionAclWithResponse(ctx context.Context, bucketName string, objectName string, params *GetObjectVersionAclParams, reqEditors ...RequestEditorFn) (*GetObjectVersionAclResponse, error) {
	rsp, err := c.GetObjectVersionAcl(ctx, bucketName, objectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObjectVersionAclResponse(rsp)
}

// PatchObjectVersionAclWithBodyWithResponse request with arbitrary body returning *PatchObjectVersionAclResponse
func (c *ClientWithResponses) PatchObjectVersionAclWithBodyWithResponse(ctx context.Context, bucketName string, objectName string, params *PatchObjectVersionAclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchObjectVersionAclResponse, error) {
	rsp, err := c.PatchObjectVersionAclWithBody(ctx, bucketName, objectName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchObjectVersionAclResponse(rsp)
}

func (c *ClientWithResponses) PatchObjectVersionAclWithResponse(ctx context.Context, bucketName string, objectName string, params *PatchObjectVersionAclParams, body PatchObjectVersionAclJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchObjectVersionAclResponse, error) {
	rsp, err := c.PatchObjectVersionAcl(ctx, bucketName, objectName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchObjectVersionAclResponse(rsp)
}

func (c *ClientWithResponses) PatchObjectVersionAclWithFormdataBodyWithResponse(ctx context.Context, bucketName string, objectName string, params *PatchObjectVersionAclParams, body PatchObjectVersionAclFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchObjectVersionAclResponse, error) {
	rsp, err := c.PatchObjectVersionAclWithFormdataBody(ctx, bucketName, objectName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchObjectVersionAclResponse(rsp)
}

// ObjectVersionBatchDeleteWithBodyWithResponse request with arbitrary body returning *ObjectVersionBatchDeleteResponse
func (c *ClientWithResponses) ObjectVersionBatchDeleteWithBodyWithResponse(ctx context.Context, bucketName string, params *ObjectVersionBatchDeleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ObjectVersionBatchDeleteResponse, error) {
	rsp, err := c.ObjectVersionBatchDeleteWithBody(ctx, bucketName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseObjectVersionBatchDeleteResponse(rsp)
}

func (c *ClientWithResponses) ObjectVersionBatchDeleteWithResponse(ctx context.Context, bucketName string, params *ObjectVersionBatchDeleteParams, body ObjectVersionBatchDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*ObjectVersionBatchDeleteResponse, error) {
	rsp, err := c.ObjectVersionBatchDelete(ctx, bucketName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseObjectVersionBatchDeleteResponse(rsp)
}

func (c *ClientWithResponses) ObjectVersionBatchDeleteWithFormdataBodyWithResponse(ctx context.Context, bucketName string, params *ObjectVersionBatchDeleteParams, body ObjectVersionBatchDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*ObjectVersionBatchDeleteResponse, error) {
	rsp, err := c.ObjectVersionBatchDeleteWithFormdataBody(ctx, bucketName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseObjectVersionBatchDeleteResponse(rsp)
}

// DeleteObjectVersionWithResponse request returning *DeleteObjectVersionResponse
func (c *ClientWithResponses) DeleteObjectVersionWithResponse(ctx context.Context, bucketName string, objectName string, params *DeleteObjectVersionParams, reqEditors ...RequestEditorFn) (*DeleteObjectVersionResponse, error) {
	rsp, err := c.DeleteObjectVersion(ctx, bucketName, objectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteObjectVersionResponse(rsp)
}

// ObjectVersionDetailsWithResponse request returning *ObjectVersionDetailsResponse
func (c *ClientWithResponses) ObjectVersionDetailsWithResponse(ctx context.Context, bucketName string, objectName string, params *ObjectVersionDetailsParams, reqEditors ...RequestEditorFn) (*ObjectVersionDetailsResponse, error) {
	rsp, err := c.ObjectVersionDetails(ctx, bucketName, objectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseObjectVersionDetailsResponse(rsp)
}

// ObjectVersionRestoreWithResponse request returning *ObjectVersionRestoreResponse
func (c *ClientWithResponses) ObjectVersionRestoreWithResponse(ctx context.Context, bucketName string, objectName string, params *ObjectVersionRestoreParams, reqEditors ...RequestEditorFn) (*ObjectVersionRestoreResponse, error) {
	rsp, err := c.ObjectVersionRestore(ctx, bucketName, objectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseObjectVersionRestoreResponse(rsp)
}

// GetObjectVersionShareUrlWithResponse request returning *GetObjectVersionShareUrlResponse
func (c *ClientWithResponses) GetObjectVersionShareUrlWithResponse(ctx context.Context, bucketName string, objectName string, params *GetObjectVersionShareUrlParams, reqEditors ...RequestEditorFn) (*GetObjectVersionShareUrlResponse, error) {
	rsp, err := c.GetObjectVersionShareUrl(ctx, bucketName, objectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObjectVersionShareUrlResponse(rsp)
}

// DeleteAllObjectVersionTagsWithResponse request returning *DeleteAllObjectVersionTagsResponse
func (c *ClientWithResponses) DeleteAllObjectVersionTagsWithResponse(ctx context.Context, bucketName string, objectName string, params *DeleteAllObjectVersionTagsParams, reqEditors ...RequestEditorFn) (*DeleteAllObjectVersionTagsResponse, error) {
	rsp, err := c.DeleteAllObjectVersionTags(ctx, bucketName, objectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAllObjectVersionTagsResponse(rsp)
}

// GetObjectVersionTagsWithResponse request returning *GetObjectVersionTagsResponse
func (c *ClientWithResponses) GetObjectVersionTagsWithResponse(ctx context.Context, bucketName string, objectName string, params *GetObjectVersionTagsParams, reqEditors ...RequestEditorFn) (*GetObjectVersionTagsResponse, error) {
	rsp, err := c.GetObjectVersionTags(ctx, bucketName, objectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObjectVersionTagsResponse(rsp)
}

// PutObjectVersionTagsWithBodyWithResponse request with arbitrary body returning *PutObjectVersionTagsResponse
func (c *ClientWithResponses) PutObjectVersionTagsWithBodyWithResponse(ctx context.Context, bucketName string, objectName string, params *PutObjectVersionTagsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutObjectVersionTagsResponse, error) {
	rsp, err := c.PutObjectVersionTagsWithBody(ctx, bucketName, objectName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutObjectVersionTagsResponse(rsp)
}

func (c *ClientWithResponses) PutObjectVersionTagsWithResponse(ctx context.Context, bucketName string, objectName string, params *PutObjectVersionTagsParams, body PutObjectVersionTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutObjectVersionTagsResponse, error) {
	rsp, err := c.PutObjectVersionTags(ctx, bucketName, objectName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutObjectVersionTagsResponse(rsp)
}

func (c *ClientWithResponses) PutObjectVersionTagsWithFormdataBodyWithResponse(ctx context.Context, bucketName string, objectName string, params *PutObjectVersionTagsParams, body PutObjectVersionTagsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutObjectVersionTagsResponse, error) {
	rsp, err := c.PutObjectVersionTagsWithFormdataBody(ctx, bucketName, objectName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutObjectVersionTagsResponse(rsp)
}

// ObjectStorageBucketsDestroyWithResponse request returning *ObjectStorageBucketsDestroyResponse
func (c *ClientWithResponses) ObjectStorageBucketsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *ObjectStorageBucketsDestroyParams, reqEditors ...RequestEditorFn) (*ObjectStorageBucketsDestroyResponse, error) {
	rsp, err := c.ObjectStorageBucketsDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseObjectStorageBucketsDestroyResponse(rsp)
}

// ObjectStorageBucketsRetrieveWithResponse request returning *ObjectStorageBucketsRetrieveResponse
func (c *ClientWithResponses) ObjectStorageBucketsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *ObjectStorageBucketsRetrieveParams, reqEditors ...RequestEditorFn) (*ObjectStorageBucketsRetrieveResponse, error) {
	rsp, err := c.ObjectStorageBucketsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseObjectStorageBucketsRetrieveResponse(rsp)
}

// S3KeyListWithResponse request returning *S3KeyListResponse
func (c *ClientWithResponses) S3KeyListWithResponse(ctx context.Context, params *S3KeyListParams, reqEditors ...RequestEditorFn) (*S3KeyListResponse, error) {
	rsp, err := c.S3KeyList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseS3KeyListResponse(rsp)
}

// S3KeyCreateWithResponse request returning *S3KeyCreateResponse
func (c *ClientWithResponses) S3KeyCreateWithResponse(ctx context.Context, params *S3KeyCreateParams, reqEditors ...RequestEditorFn) (*S3KeyCreateResponse, error) {
	rsp, err := c.S3KeyCreate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseS3KeyCreateResponse(rsp)
}

// S3KeyDeleteWithResponse request returning *S3KeyDeleteResponse
func (c *ClientWithResponses) S3KeyDeleteWithResponse(ctx context.Context, accessKey string, params *S3KeyDeleteParams, reqEditors ...RequestEditorFn) (*S3KeyDeleteResponse, error) {
	rsp, err := c.S3KeyDelete(ctx, accessKey, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseS3KeyDeleteResponse(rsp)
}

// StorageClassListWithResponse request returning *StorageClassListResponse
func (c *ClientWithResponses) StorageClassListWithResponse(ctx context.Context, params *StorageClassListParams, reqEditors ...RequestEditorFn) (*StorageClassListResponse, error) {
	rsp, err := c.StorageClassList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStorageClassListResponse(rsp)
}

// OrganizationRegionsListWithResponse request returning *OrganizationRegionsListResponse
func (c *ClientWithResponses) OrganizationRegionsListWithResponse(ctx context.Context, params *OrganizationRegionsListParams, reqEditors ...RequestEditorFn) (*OrganizationRegionsListResponse, error) {
	rsp, err := c.OrganizationRegionsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationRegionsListResponse(rsp)
}

// OrganizationRegionsRetrieveWithResponse request returning *OrganizationRegionsRetrieveResponse
func (c *ClientWithResponses) OrganizationRegionsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*OrganizationRegionsRetrieveResponse, error) {
	rsp, err := c.OrganizationRegionsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationRegionsRetrieveResponse(rsp)
}

// OrganizationZonesListWithResponse request returning *OrganizationZonesListResponse
func (c *ClientWithResponses) OrganizationZonesListWithResponse(ctx context.Context, params *OrganizationZonesListParams, reqEditors ...RequestEditorFn) (*OrganizationZonesListResponse, error) {
	rsp, err := c.OrganizationZonesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationZonesListResponse(rsp)
}

// OrganizationZonesRetrieveWithResponse request returning *OrganizationZonesRetrieveResponse
func (c *ClientWithResponses) OrganizationZonesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*OrganizationZonesRetrieveResponse, error) {
	rsp, err := c.OrganizationZonesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationZonesRetrieveResponse(rsp)
}

// PlanTemplateObjectStoragesListWithResponse request returning *PlanTemplateObjectStoragesListResponse
func (c *ClientWithResponses) PlanTemplateObjectStoragesListWithResponse(ctx context.Context, params *PlanTemplateObjectStoragesListParams, reqEditors ...RequestEditorFn) (*PlanTemplateObjectStoragesListResponse, error) {
	rsp, err := c.PlanTemplateObjectStoragesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlanTemplateObjectStoragesListResponse(rsp)
}

// PlanTemplateObjectStoragesRetrieveWithResponse request returning *PlanTemplateObjectStoragesRetrieveResponse
func (c *ClientWithResponses) PlanTemplateObjectStoragesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PlanTemplateObjectStoragesRetrieveResponse, error) {
	rsp, err := c.PlanTemplateObjectStoragesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlanTemplateObjectStoragesRetrieveResponse(rsp)
}

// PlanTemplateServersListWithResponse request returning *PlanTemplateServersListResponse
func (c *ClientWithResponses) PlanTemplateServersListWithResponse(ctx context.Context, params *PlanTemplateServersListParams, reqEditors ...RequestEditorFn) (*PlanTemplateServersListResponse, error) {
	rsp, err := c.PlanTemplateServersList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlanTemplateServersListResponse(rsp)
}

// PlanTemplateServersRetrieveWithResponse request returning *PlanTemplateServersRetrieveResponse
func (c *ClientWithResponses) PlanTemplateServersRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PlanTemplateServersRetrieveResponse, error) {
	rsp, err := c.PlanTemplateServersRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlanTemplateServersRetrieveResponse(rsp)
}

// PlanTemplateVolumesListWithResponse request returning *PlanTemplateVolumesListResponse
func (c *ClientWithResponses) PlanTemplateVolumesListWithResponse(ctx context.Context, params *PlanTemplateVolumesListParams, reqEditors ...RequestEditorFn) (*PlanTemplateVolumesListResponse, error) {
	rsp, err := c.PlanTemplateVolumesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlanTemplateVolumesListResponse(rsp)
}

// PlanTemplateVolumesRetrieveWithResponse request returning *PlanTemplateVolumesRetrieveResponse
func (c *ClientWithResponses) PlanTemplateVolumesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PlanTemplateVolumesRetrieveResponse, error) {
	rsp, err := c.PlanTemplateVolumesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlanTemplateVolumesRetrieveResponse(rsp)
}

// PlanCustomersCacheInfoCreateWithBodyWithResponse request with arbitrary body returning *PlanCustomersCacheInfoCreateResponse
func (c *ClientWithResponses) PlanCustomersCacheInfoCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PlanCustomersCacheInfoCreateResponse, error) {
	rsp, err := c.PlanCustomersCacheInfoCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlanCustomersCacheInfoCreateResponse(rsp)
}

func (c *ClientWithResponses) PlanCustomersCacheInfoCreateWithResponse(ctx context.Context, body PlanCustomersCacheInfoCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PlanCustomersCacheInfoCreateResponse, error) {
	rsp, err := c.PlanCustomersCacheInfoCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlanCustomersCacheInfoCreateResponse(rsp)
}

func (c *ClientWithResponses) PlanCustomersCacheInfoCreateWithFormdataBodyWithResponse(ctx context.Context, body PlanCustomersCacheInfoCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PlanCustomersCacheInfoCreateResponse, error) {
	rsp, err := c.PlanCustomersCacheInfoCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlanCustomersCacheInfoCreateResponse(rsp)
}

// PlanCustomersCustomerTypesListWithResponse request returning *PlanCustomersCustomerTypesListResponse
func (c *ClientWithResponses) PlanCustomersCustomerTypesListWithResponse(ctx context.Context, params *PlanCustomersCustomerTypesListParams, reqEditors ...RequestEditorFn) (*PlanCustomersCustomerTypesListResponse, error) {
	rsp, err := c.PlanCustomersCustomerTypesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlanCustomersCustomerTypesListResponse(rsp)
}

// PlanCustomersDistrictsListWithResponse request returning *PlanCustomersDistrictsListResponse
func (c *ClientWithResponses) PlanCustomersDistrictsListWithResponse(ctx context.Context, params *PlanCustomersDistrictsListParams, reqEditors ...RequestEditorFn) (*PlanCustomersDistrictsListResponse, error) {
	rsp, err := c.PlanCustomersDistrictsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlanCustomersDistrictsListResponse(rsp)
}

// PlanCustomersGetInfoRetrieveWithResponse request returning *PlanCustomersGetInfoRetrieveResponse
func (c *ClientWithResponses) PlanCustomersGetInfoRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PlanCustomersGetInfoRetrieveResponse, error) {
	rsp, err := c.PlanCustomersGetInfoRetrieve(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlanCustomersGetInfoRetrieveResponse(rsp)
}

// PlanCustomersGroupTypesListWithResponse request returning *PlanCustomersGroupTypesListResponse
func (c *ClientWithResponses) PlanCustomersGroupTypesListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PlanCustomersGroupTypesListResponse, error) {
	rsp, err := c.PlanCustomersGroupTypesList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlanCustomersGroupTypesListResponse(rsp)
}

// PlanCustomersPrecinctsListWithResponse request returning *PlanCustomersPrecinctsListResponse
func (c *ClientWithResponses) PlanCustomersPrecinctsListWithResponse(ctx context.Context, params *PlanCustomersPrecinctsListParams, reqEditors ...RequestEditorFn) (*PlanCustomersPrecinctsListResponse, error) {
	rsp, err := c.PlanCustomersPrecinctsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlanCustomersPrecinctsListResponse(rsp)
}

// PlanCustomersProvincesListWithResponse request returning *PlanCustomersProvincesListResponse
func (c *ClientWithResponses) PlanCustomersProvincesListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PlanCustomersProvincesListResponse, error) {
	rsp, err := c.PlanCustomersProvincesList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlanCustomersProvincesListResponse(rsp)
}

// PlanCustomersUploadIdCreateWithBodyWithResponse request with arbitrary body returning *PlanCustomersUploadIdCreateResponse
func (c *ClientWithResponses) PlanCustomersUploadIdCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PlanCustomersUploadIdCreateResponse, error) {
	rsp, err := c.PlanCustomersUploadIdCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlanCustomersUploadIdCreateResponse(rsp)
}

func (c *ClientWithResponses) PlanCustomersUploadIdCreateWithResponse(ctx context.Context, body PlanCustomersUploadIdCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PlanCustomersUploadIdCreateResponse, error) {
	rsp, err := c.PlanCustomersUploadIdCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlanCustomersUploadIdCreateResponse(rsp)
}

func (c *ClientWithResponses) PlanCustomersUploadIdCreateWithFormdataBodyWithResponse(ctx context.Context, body PlanCustomersUploadIdCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PlanCustomersUploadIdCreateResponse, error) {
	rsp, err := c.PlanCustomersUploadIdCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlanCustomersUploadIdCreateResponse(rsp)
}

// PlanObjectStoragesListWithResponse request returning *PlanObjectStoragesListResponse
func (c *ClientWithResponses) PlanObjectStoragesListWithResponse(ctx context.Context, params *PlanObjectStoragesListParams, reqEditors ...RequestEditorFn) (*PlanObjectStoragesListResponse, error) {
	rsp, err := c.PlanObjectStoragesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlanObjectStoragesListResponse(rsp)
}

// PlanObjectStoragesRetrieveWithResponse request returning *PlanObjectStoragesRetrieveResponse
func (c *ClientWithResponses) PlanObjectStoragesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *PlanObjectStoragesRetrieveParams, reqEditors ...RequestEditorFn) (*PlanObjectStoragesRetrieveResponse, error) {
	rsp, err := c.PlanObjectStoragesRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlanObjectStoragesRetrieveResponse(rsp)
}

// PlanOrdersListWithResponse request returning *PlanOrdersListResponse
func (c *ClientWithResponses) PlanOrdersListWithResponse(ctx context.Context, params *PlanOrdersListParams, reqEditors ...RequestEditorFn) (*PlanOrdersListResponse, error) {
	rsp, err := c.PlanOrdersList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlanOrdersListResponse(rsp)
}

// PlanOrdersCreateWithBodyWithResponse request with arbitrary body returning *PlanOrdersCreateResponse
func (c *ClientWithResponses) PlanOrdersCreateWithBodyWithResponse(ctx context.Context, params *PlanOrdersCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PlanOrdersCreateResponse, error) {
	rsp, err := c.PlanOrdersCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlanOrdersCreateResponse(rsp)
}

func (c *ClientWithResponses) PlanOrdersCreateWithResponse(ctx context.Context, params *PlanOrdersCreateParams, body PlanOrdersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PlanOrdersCreateResponse, error) {
	rsp, err := c.PlanOrdersCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlanOrdersCreateResponse(rsp)
}

func (c *ClientWithResponses) PlanOrdersCreateWithFormdataBodyWithResponse(ctx context.Context, params *PlanOrdersCreateParams, body PlanOrdersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PlanOrdersCreateResponse, error) {
	rsp, err := c.PlanOrdersCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlanOrdersCreateResponse(rsp)
}

// PlanOrdersCalculatePriceCreateWithBodyWithResponse request with arbitrary body returning *PlanOrdersCalculatePriceCreateResponse
func (c *ClientWithResponses) PlanOrdersCalculatePriceCreateWithBodyWithResponse(ctx context.Context, params *PlanOrdersCalculatePriceCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PlanOrdersCalculatePriceCreateResponse, error) {
	rsp, err := c.PlanOrdersCalculatePriceCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlanOrdersCalculatePriceCreateResponse(rsp)
}

func (c *ClientWithResponses) PlanOrdersCalculatePriceCreateWithResponse(ctx context.Context, params *PlanOrdersCalculatePriceCreateParams, body PlanOrdersCalculatePriceCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PlanOrdersCalculatePriceCreateResponse, error) {
	rsp, err := c.PlanOrdersCalculatePriceCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlanOrdersCalculatePriceCreateResponse(rsp)
}

func (c *ClientWithResponses) PlanOrdersCalculatePriceCreateWithFormdataBodyWithResponse(ctx context.Context, params *PlanOrdersCalculatePriceCreateParams, body PlanOrdersCalculatePriceCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PlanOrdersCalculatePriceCreateResponse, error) {
	rsp, err := c.PlanOrdersCalculatePriceCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlanOrdersCalculatePriceCreateResponse(rsp)
}

// PlanOrdersPreviewContractCreateWithBodyWithResponse request with arbitrary body returning *PlanOrdersPreviewContractCreateResponse
func (c *ClientWithResponses) PlanOrdersPreviewContractCreateWithBodyWithResponse(ctx context.Context, params *PlanOrdersPreviewContractCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PlanOrdersPreviewContractCreateResponse, error) {
	rsp, err := c.PlanOrdersPreviewContractCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlanOrdersPreviewContractCreateResponse(rsp)
}

func (c *ClientWithResponses) PlanOrdersPreviewContractCreateWithResponse(ctx context.Context, params *PlanOrdersPreviewContractCreateParams, body PlanOrdersPreviewContractCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PlanOrdersPreviewContractCreateResponse, error) {
	rsp, err := c.PlanOrdersPreviewContractCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlanOrdersPreviewContractCreateResponse(rsp)
}

func (c *ClientWithResponses) PlanOrdersPreviewContractCreateWithFormdataBodyWithResponse(ctx context.Context, params *PlanOrdersPreviewContractCreateParams, body PlanOrdersPreviewContractCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PlanOrdersPreviewContractCreateResponse, error) {
	rsp, err := c.PlanOrdersPreviewContractCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlanOrdersPreviewContractCreateResponse(rsp)
}

// PlanOrdersRetrieveWithResponse request returning *PlanOrdersRetrieveResponse
func (c *ClientWithResponses) PlanOrdersRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *PlanOrdersRetrieveParams, reqEditors ...RequestEditorFn) (*PlanOrdersRetrieveResponse, error) {
	rsp, err := c.PlanOrdersRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlanOrdersRetrieveResponse(rsp)
}

// PlanOrdersCancelCreateWithResponse request returning *PlanOrdersCancelCreateResponse
func (c *ClientWithResponses) PlanOrdersCancelCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *PlanOrdersCancelCreateParams, reqEditors ...RequestEditorFn) (*PlanOrdersCancelCreateResponse, error) {
	rsp, err := c.PlanOrdersCancelCreate(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlanOrdersCancelCreateResponse(rsp)
}

// PlanOrdersInvoiceRetrieveWithResponse request returning *PlanOrdersInvoiceRetrieveResponse
func (c *ClientWithResponses) PlanOrdersInvoiceRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *PlanOrdersInvoiceRetrieveParams, reqEditors ...RequestEditorFn) (*PlanOrdersInvoiceRetrieveResponse, error) {
	rsp, err := c.PlanOrdersInvoiceRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlanOrdersInvoiceRetrieveResponse(rsp)
}

// PlanServersListWithResponse request returning *PlanServersListResponse
func (c *ClientWithResponses) PlanServersListWithResponse(ctx context.Context, params *PlanServersListParams, reqEditors ...RequestEditorFn) (*PlanServersListResponse, error) {
	rsp, err := c.PlanServersList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlanServersListResponse(rsp)
}

// PlanServersRetrieveWithResponse request returning *PlanServersRetrieveResponse
func (c *ClientWithResponses) PlanServersRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *PlanServersRetrieveParams, reqEditors ...RequestEditorFn) (*PlanServersRetrieveResponse, error) {
	rsp, err := c.PlanServersRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlanServersRetrieveResponse(rsp)
}

// PlanVolumesListWithResponse request returning *PlanVolumesListResponse
func (c *ClientWithResponses) PlanVolumesListWithResponse(ctx context.Context, params *PlanVolumesListParams, reqEditors ...RequestEditorFn) (*PlanVolumesListResponse, error) {
	rsp, err := c.PlanVolumesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlanVolumesListResponse(rsp)
}

// PlanVolumesRetrieveWithResponse request returning *PlanVolumesRetrieveResponse
func (c *ClientWithResponses) PlanVolumesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *PlanVolumesRetrieveParams, reqEditors ...RequestEditorFn) (*PlanVolumesRetrieveResponse, error) {
	rsp, err := c.PlanVolumesRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlanVolumesRetrieveResponse(rsp)
}

// SecretManagerSecretsListWithResponse request returning *SecretManagerSecretsListResponse
func (c *ClientWithResponses) SecretManagerSecretsListWithResponse(ctx context.Context, params *SecretManagerSecretsListParams, reqEditors ...RequestEditorFn) (*SecretManagerSecretsListResponse, error) {
	rsp, err := c.SecretManagerSecretsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSecretManagerSecretsListResponse(rsp)
}

// SecretManagerSecretsCreateWithBodyWithResponse request with arbitrary body returning *SecretManagerSecretsCreateResponse
func (c *ClientWithResponses) SecretManagerSecretsCreateWithBodyWithResponse(ctx context.Context, params *SecretManagerSecretsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SecretManagerSecretsCreateResponse, error) {
	rsp, err := c.SecretManagerSecretsCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSecretManagerSecretsCreateResponse(rsp)
}

func (c *ClientWithResponses) SecretManagerSecretsCreateWithResponse(ctx context.Context, params *SecretManagerSecretsCreateParams, body SecretManagerSecretsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SecretManagerSecretsCreateResponse, error) {
	rsp, err := c.SecretManagerSecretsCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSecretManagerSecretsCreateResponse(rsp)
}

func (c *ClientWithResponses) SecretManagerSecretsCreateWithFormdataBodyWithResponse(ctx context.Context, params *SecretManagerSecretsCreateParams, body SecretManagerSecretsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SecretManagerSecretsCreateResponse, error) {
	rsp, err := c.SecretManagerSecretsCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSecretManagerSecretsCreateResponse(rsp)
}

// SecretManagerSecretsDestroyWithResponse request returning *SecretManagerSecretsDestroyResponse
func (c *ClientWithResponses) SecretManagerSecretsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsDestroyParams, reqEditors ...RequestEditorFn) (*SecretManagerSecretsDestroyResponse, error) {
	rsp, err := c.SecretManagerSecretsDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSecretManagerSecretsDestroyResponse(rsp)
}

// SecretManagerSecretsRetrieveWithResponse request returning *SecretManagerSecretsRetrieveResponse
func (c *ClientWithResponses) SecretManagerSecretsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsRetrieveParams, reqEditors ...RequestEditorFn) (*SecretManagerSecretsRetrieveResponse, error) {
	rsp, err := c.SecretManagerSecretsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSecretManagerSecretsRetrieveResponse(rsp)
}

// SecretManagerSecretsPartialUpdateWithBodyWithResponse request with arbitrary body returning *SecretManagerSecretsPartialUpdateResponse
func (c *ClientWithResponses) SecretManagerSecretsPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SecretManagerSecretsPartialUpdateResponse, error) {
	rsp, err := c.SecretManagerSecretsPartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSecretManagerSecretsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) SecretManagerSecretsPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsPartialUpdateParams, body SecretManagerSecretsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SecretManagerSecretsPartialUpdateResponse, error) {
	rsp, err := c.SecretManagerSecretsPartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSecretManagerSecretsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) SecretManagerSecretsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsPartialUpdateParams, body SecretManagerSecretsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SecretManagerSecretsPartialUpdateResponse, error) {
	rsp, err := c.SecretManagerSecretsPartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSecretManagerSecretsPartialUpdateResponse(rsp)
}

// SecretManagerSecretsUpdateWithBodyWithResponse request with arbitrary body returning *SecretManagerSecretsUpdateResponse
func (c *ClientWithResponses) SecretManagerSecretsUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SecretManagerSecretsUpdateResponse, error) {
	rsp, err := c.SecretManagerSecretsUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSecretManagerSecretsUpdateResponse(rsp)
}

func (c *ClientWithResponses) SecretManagerSecretsUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsUpdateParams, body SecretManagerSecretsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SecretManagerSecretsUpdateResponse, error) {
	rsp, err := c.SecretManagerSecretsUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSecretManagerSecretsUpdateResponse(rsp)
}

func (c *ClientWithResponses) SecretManagerSecretsUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsUpdateParams, body SecretManagerSecretsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SecretManagerSecretsUpdateResponse, error) {
	rsp, err := c.SecretManagerSecretsUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSecretManagerSecretsUpdateResponse(rsp)
}

// SecretManagerSecretsMetadataRetrieveWithResponse request returning *SecretManagerSecretsMetadataRetrieveResponse
func (c *ClientWithResponses) SecretManagerSecretsMetadataRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsMetadataRetrieveParams, reqEditors ...RequestEditorFn) (*SecretManagerSecretsMetadataRetrieveResponse, error) {
	rsp, err := c.SecretManagerSecretsMetadataRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSecretManagerSecretsMetadataRetrieveResponse(rsp)
}

// SecretManagerSecretsMetadataCreateWithBodyWithResponse request with arbitrary body returning *SecretManagerSecretsMetadataCreateResponse
func (c *ClientWithResponses) SecretManagerSecretsMetadataCreateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsMetadataCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SecretManagerSecretsMetadataCreateResponse, error) {
	rsp, err := c.SecretManagerSecretsMetadataCreateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSecretManagerSecretsMetadataCreateResponse(rsp)
}

func (c *ClientWithResponses) SecretManagerSecretsMetadataCreateWithResponse(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsMetadataCreateParams, body SecretManagerSecretsMetadataCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SecretManagerSecretsMetadataCreateResponse, error) {
	rsp, err := c.SecretManagerSecretsMetadataCreate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSecretManagerSecretsMetadataCreateResponse(rsp)
}

func (c *ClientWithResponses) SecretManagerSecretsMetadataCreateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *SecretManagerSecretsMetadataCreateParams, body SecretManagerSecretsMetadataCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SecretManagerSecretsMetadataCreateResponse, error) {
	rsp, err := c.SecretManagerSecretsMetadataCreateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSecretManagerSecretsMetadataCreateResponse(rsp)
}

// ServiceCatalogFavoriteServicesListWithResponse request returning *ServiceCatalogFavoriteServicesListResponse
func (c *ClientWithResponses) ServiceCatalogFavoriteServicesListWithResponse(ctx context.Context, params *ServiceCatalogFavoriteServicesListParams, reqEditors ...RequestEditorFn) (*ServiceCatalogFavoriteServicesListResponse, error) {
	rsp, err := c.ServiceCatalogFavoriteServicesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServiceCatalogFavoriteServicesListResponse(rsp)
}

// ServiceCatalogFavoriteServicesCreateWithBodyWithResponse request with arbitrary body returning *ServiceCatalogFavoriteServicesCreateResponse
func (c *ClientWithResponses) ServiceCatalogFavoriteServicesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ServiceCatalogFavoriteServicesCreateResponse, error) {
	rsp, err := c.ServiceCatalogFavoriteServicesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServiceCatalogFavoriteServicesCreateResponse(rsp)
}

func (c *ClientWithResponses) ServiceCatalogFavoriteServicesCreateWithResponse(ctx context.Context, body ServiceCatalogFavoriteServicesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ServiceCatalogFavoriteServicesCreateResponse, error) {
	rsp, err := c.ServiceCatalogFavoriteServicesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServiceCatalogFavoriteServicesCreateResponse(rsp)
}

func (c *ClientWithResponses) ServiceCatalogFavoriteServicesCreateWithFormdataBodyWithResponse(ctx context.Context, body ServiceCatalogFavoriteServicesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ServiceCatalogFavoriteServicesCreateResponse, error) {
	rsp, err := c.ServiceCatalogFavoriteServicesCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServiceCatalogFavoriteServicesCreateResponse(rsp)
}

// ServiceCatalogFavoriteServicesDestroyWithResponse request returning *ServiceCatalogFavoriteServicesDestroyResponse
func (c *ClientWithResponses) ServiceCatalogFavoriteServicesDestroyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*ServiceCatalogFavoriteServicesDestroyResponse, error) {
	rsp, err := c.ServiceCatalogFavoriteServicesDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServiceCatalogFavoriteServicesDestroyResponse(rsp)
}

// ServiceCatalogFavoriteServicesRetrieveWithResponse request returning *ServiceCatalogFavoriteServicesRetrieveResponse
func (c *ClientWithResponses) ServiceCatalogFavoriteServicesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*ServiceCatalogFavoriteServicesRetrieveResponse, error) {
	rsp, err := c.ServiceCatalogFavoriteServicesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServiceCatalogFavoriteServicesRetrieveResponse(rsp)
}

// ServiceCatalogServicesListWithResponse request returning *ServiceCatalogServicesListResponse
func (c *ClientWithResponses) ServiceCatalogServicesListWithResponse(ctx context.Context, params *ServiceCatalogServicesListParams, reqEditors ...RequestEditorFn) (*ServiceCatalogServicesListResponse, error) {
	rsp, err := c.ServiceCatalogServicesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServiceCatalogServicesListResponse(rsp)
}

// ServiceCatalogServicesCreateWithBodyWithResponse request with arbitrary body returning *ServiceCatalogServicesCreateResponse
func (c *ClientWithResponses) ServiceCatalogServicesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ServiceCatalogServicesCreateResponse, error) {
	rsp, err := c.ServiceCatalogServicesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServiceCatalogServicesCreateResponse(rsp)
}

func (c *ClientWithResponses) ServiceCatalogServicesCreateWithResponse(ctx context.Context, body ServiceCatalogServicesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ServiceCatalogServicesCreateResponse, error) {
	rsp, err := c.ServiceCatalogServicesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServiceCatalogServicesCreateResponse(rsp)
}

func (c *ClientWithResponses) ServiceCatalogServicesCreateWithFormdataBodyWithResponse(ctx context.Context, body ServiceCatalogServicesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ServiceCatalogServicesCreateResponse, error) {
	rsp, err := c.ServiceCatalogServicesCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServiceCatalogServicesCreateResponse(rsp)
}

// ServiceCatalogServicesUsingServicesRetrieveWithResponse request returning *ServiceCatalogServicesUsingServicesRetrieveResponse
func (c *ClientWithResponses) ServiceCatalogServicesUsingServicesRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ServiceCatalogServicesUsingServicesRetrieveResponse, error) {
	rsp, err := c.ServiceCatalogServicesUsingServicesRetrieve(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServiceCatalogServicesUsingServicesRetrieveResponse(rsp)
}

// ServiceCatalogServicesDestroyWithResponse request returning *ServiceCatalogServicesDestroyResponse
func (c *ClientWithResponses) ServiceCatalogServicesDestroyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*ServiceCatalogServicesDestroyResponse, error) {
	rsp, err := c.ServiceCatalogServicesDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServiceCatalogServicesDestroyResponse(rsp)
}

// ServiceCatalogServicesRetrieveWithResponse request returning *ServiceCatalogServicesRetrieveResponse
func (c *ClientWithResponses) ServiceCatalogServicesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*ServiceCatalogServicesRetrieveResponse, error) {
	rsp, err := c.ServiceCatalogServicesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServiceCatalogServicesRetrieveResponse(rsp)
}

// ServiceCatalogServicesPartialUpdateWithBodyWithResponse request with arbitrary body returning *ServiceCatalogServicesPartialUpdateResponse
func (c *ClientWithResponses) ServiceCatalogServicesPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ServiceCatalogServicesPartialUpdateResponse, error) {
	rsp, err := c.ServiceCatalogServicesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServiceCatalogServicesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ServiceCatalogServicesPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body ServiceCatalogServicesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ServiceCatalogServicesPartialUpdateResponse, error) {
	rsp, err := c.ServiceCatalogServicesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServiceCatalogServicesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ServiceCatalogServicesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body ServiceCatalogServicesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ServiceCatalogServicesPartialUpdateResponse, error) {
	rsp, err := c.ServiceCatalogServicesPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServiceCatalogServicesPartialUpdateResponse(rsp)
}

// ServiceCatalogServicesUpdateWithBodyWithResponse request with arbitrary body returning *ServiceCatalogServicesUpdateResponse
func (c *ClientWithResponses) ServiceCatalogServicesUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ServiceCatalogServicesUpdateResponse, error) {
	rsp, err := c.ServiceCatalogServicesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServiceCatalogServicesUpdateResponse(rsp)
}

func (c *ClientWithResponses) ServiceCatalogServicesUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body ServiceCatalogServicesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ServiceCatalogServicesUpdateResponse, error) {
	rsp, err := c.ServiceCatalogServicesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServiceCatalogServicesUpdateResponse(rsp)
}

func (c *ClientWithResponses) ServiceCatalogServicesUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body ServiceCatalogServicesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ServiceCatalogServicesUpdateResponse, error) {
	rsp, err := c.ServiceCatalogServicesUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServiceCatalogServicesUpdateResponse(rsp)
}

// SupportQuestionsListWithResponse request returning *SupportQuestionsListResponse
func (c *ClientWithResponses) SupportQuestionsListWithResponse(ctx context.Context, params *SupportQuestionsListParams, reqEditors ...RequestEditorFn) (*SupportQuestionsListResponse, error) {
	rsp, err := c.SupportQuestionsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSupportQuestionsListResponse(rsp)
}

// SupportQuestionsCreateWithBodyWithResponse request with arbitrary body returning *SupportQuestionsCreateResponse
func (c *ClientWithResponses) SupportQuestionsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SupportQuestionsCreateResponse, error) {
	rsp, err := c.SupportQuestionsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSupportQuestionsCreateResponse(rsp)
}

func (c *ClientWithResponses) SupportQuestionsCreateWithResponse(ctx context.Context, body SupportQuestionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SupportQuestionsCreateResponse, error) {
	rsp, err := c.SupportQuestionsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSupportQuestionsCreateResponse(rsp)
}

func (c *ClientWithResponses) SupportQuestionsCreateWithFormdataBodyWithResponse(ctx context.Context, body SupportQuestionsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SupportQuestionsCreateResponse, error) {
	rsp, err := c.SupportQuestionsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSupportQuestionsCreateResponse(rsp)
}

// SupportQuestionsRetrieveWithResponse request returning *SupportQuestionsRetrieveResponse
func (c *ClientWithResponses) SupportQuestionsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*SupportQuestionsRetrieveResponse, error) {
	rsp, err := c.SupportQuestionsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSupportQuestionsRetrieveResponse(rsp)
}

// SupportQuestionsPartialUpdateWithBodyWithResponse request with arbitrary body returning *SupportQuestionsPartialUpdateResponse
func (c *ClientWithResponses) SupportQuestionsPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SupportQuestionsPartialUpdateResponse, error) {
	rsp, err := c.SupportQuestionsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSupportQuestionsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) SupportQuestionsPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body SupportQuestionsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SupportQuestionsPartialUpdateResponse, error) {
	rsp, err := c.SupportQuestionsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSupportQuestionsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) SupportQuestionsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body SupportQuestionsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SupportQuestionsPartialUpdateResponse, error) {
	rsp, err := c.SupportQuestionsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSupportQuestionsPartialUpdateResponse(rsp)
}

// TenantProjectUsersListWithResponse request returning *TenantProjectUsersListResponse
func (c *ClientWithResponses) TenantProjectUsersListWithResponse(ctx context.Context, params *TenantProjectUsersListParams, reqEditors ...RequestEditorFn) (*TenantProjectUsersListResponse, error) {
	rsp, err := c.TenantProjectUsersList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTenantProjectUsersListResponse(rsp)
}

// TenantProjectUsersDestroyWithResponse request returning *TenantProjectUsersDestroyResponse
func (c *ClientWithResponses) TenantProjectUsersDestroyWithResponse(ctx context.Context, id openapi_types.UUID, params *TenantProjectUsersDestroyParams, reqEditors ...RequestEditorFn) (*TenantProjectUsersDestroyResponse, error) {
	rsp, err := c.TenantProjectUsersDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTenantProjectUsersDestroyResponse(rsp)
}

// TenantProjectUsersRetrieveWithResponse request returning *TenantProjectUsersRetrieveResponse
func (c *ClientWithResponses) TenantProjectUsersRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, params *TenantProjectUsersRetrieveParams, reqEditors ...RequestEditorFn) (*TenantProjectUsersRetrieveResponse, error) {
	rsp, err := c.TenantProjectUsersRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTenantProjectUsersRetrieveResponse(rsp)
}

// TenantProjectUsersPartialUpdateWithBodyWithResponse request with arbitrary body returning *TenantProjectUsersPartialUpdateResponse
func (c *ClientWithResponses) TenantProjectUsersPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *TenantProjectUsersPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TenantProjectUsersPartialUpdateResponse, error) {
	rsp, err := c.TenantProjectUsersPartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTenantProjectUsersPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) TenantProjectUsersPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *TenantProjectUsersPartialUpdateParams, body TenantProjectUsersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TenantProjectUsersPartialUpdateResponse, error) {
	rsp, err := c.TenantProjectUsersPartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTenantProjectUsersPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) TenantProjectUsersPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *TenantProjectUsersPartialUpdateParams, body TenantProjectUsersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TenantProjectUsersPartialUpdateResponse, error) {
	rsp, err := c.TenantProjectUsersPartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTenantProjectUsersPartialUpdateResponse(rsp)
}

// TenantProjectUsersUpdateWithBodyWithResponse request with arbitrary body returning *TenantProjectUsersUpdateResponse
func (c *ClientWithResponses) TenantProjectUsersUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *TenantProjectUsersUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TenantProjectUsersUpdateResponse, error) {
	rsp, err := c.TenantProjectUsersUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTenantProjectUsersUpdateResponse(rsp)
}

func (c *ClientWithResponses) TenantProjectUsersUpdateWithResponse(ctx context.Context, id openapi_types.UUID, params *TenantProjectUsersUpdateParams, body TenantProjectUsersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TenantProjectUsersUpdateResponse, error) {
	rsp, err := c.TenantProjectUsersUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTenantProjectUsersUpdateResponse(rsp)
}

func (c *ClientWithResponses) TenantProjectUsersUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *TenantProjectUsersUpdateParams, body TenantProjectUsersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TenantProjectUsersUpdateResponse, error) {
	rsp, err := c.TenantProjectUsersUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTenantProjectUsersUpdateResponse(rsp)
}

// TenantProjectsListWithResponse request returning *TenantProjectsListResponse
func (c *ClientWithResponses) TenantProjectsListWithResponse(ctx context.Context, params *TenantProjectsListParams, reqEditors ...RequestEditorFn) (*TenantProjectsListResponse, error) {
	rsp, err := c.TenantProjectsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTenantProjectsListResponse(rsp)
}

// TenantProjectsCreateWithBodyWithResponse request with arbitrary body returning *TenantProjectsCreateResponse
func (c *ClientWithResponses) TenantProjectsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TenantProjectsCreateResponse, error) {
	rsp, err := c.TenantProjectsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTenantProjectsCreateResponse(rsp)
}

func (c *ClientWithResponses) TenantProjectsCreateWithResponse(ctx context.Context, body TenantProjectsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TenantProjectsCreateResponse, error) {
	rsp, err := c.TenantProjectsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTenantProjectsCreateResponse(rsp)
}

func (c *ClientWithResponses) TenantProjectsCreateWithFormdataBodyWithResponse(ctx context.Context, body TenantProjectsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TenantProjectsCreateResponse, error) {
	rsp, err := c.TenantProjectsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTenantProjectsCreateResponse(rsp)
}

// TenantProjectsDestroyWithResponse request returning *TenantProjectsDestroyResponse
func (c *ClientWithResponses) TenantProjectsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*TenantProjectsDestroyResponse, error) {
	rsp, err := c.TenantProjectsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTenantProjectsDestroyResponse(rsp)
}

// TenantProjectsRetrieveWithResponse request returning *TenantProjectsRetrieveResponse
func (c *ClientWithResponses) TenantProjectsRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*TenantProjectsRetrieveResponse, error) {
	rsp, err := c.TenantProjectsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTenantProjectsRetrieveResponse(rsp)
}

// TenantProjectsPartialUpdateWithBodyWithResponse request with arbitrary body returning *TenantProjectsPartialUpdateResponse
func (c *ClientWithResponses) TenantProjectsPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TenantProjectsPartialUpdateResponse, error) {
	rsp, err := c.TenantProjectsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTenantProjectsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) TenantProjectsPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body TenantProjectsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TenantProjectsPartialUpdateResponse, error) {
	rsp, err := c.TenantProjectsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTenantProjectsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) TenantProjectsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body TenantProjectsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TenantProjectsPartialUpdateResponse, error) {
	rsp, err := c.TenantProjectsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTenantProjectsPartialUpdateResponse(rsp)
}

// TenantProjectsUpdateWithBodyWithResponse request with arbitrary body returning *TenantProjectsUpdateResponse
func (c *ClientWithResponses) TenantProjectsUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TenantProjectsUpdateResponse, error) {
	rsp, err := c.TenantProjectsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTenantProjectsUpdateResponse(rsp)
}

func (c *ClientWithResponses) TenantProjectsUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body TenantProjectsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TenantProjectsUpdateResponse, error) {
	rsp, err := c.TenantProjectsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTenantProjectsUpdateResponse(rsp)
}

func (c *ClientWithResponses) TenantProjectsUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body TenantProjectsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TenantProjectsUpdateResponse, error) {
	rsp, err := c.TenantProjectsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTenantProjectsUpdateResponse(rsp)
}

// TenantProjectsServicesRetrieveWithResponse request returning *TenantProjectsServicesRetrieveResponse
func (c *ClientWithResponses) TenantProjectsServicesRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*TenantProjectsServicesRetrieveResponse, error) {
	rsp, err := c.TenantProjectsServicesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTenantProjectsServicesRetrieveResponse(rsp)
}

// TenantUsersListWithResponse request returning *TenantUsersListResponse
func (c *ClientWithResponses) TenantUsersListWithResponse(ctx context.Context, params *TenantUsersListParams, reqEditors ...RequestEditorFn) (*TenantUsersListResponse, error) {
	rsp, err := c.TenantUsersList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTenantUsersListResponse(rsp)
}

// TenantUsersCurrentUserRetrieveWithResponse request returning *TenantUsersCurrentUserRetrieveResponse
func (c *ClientWithResponses) TenantUsersCurrentUserRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TenantUsersCurrentUserRetrieveResponse, error) {
	rsp, err := c.TenantUsersCurrentUserRetrieve(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTenantUsersCurrentUserRetrieveResponse(rsp)
}

// TenantUsersRetrieveWithResponse request returning *TenantUsersRetrieveResponse
func (c *ClientWithResponses) TenantUsersRetrieveWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*TenantUsersRetrieveResponse, error) {
	rsp, err := c.TenantUsersRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTenantUsersRetrieveResponse(rsp)
}

// TenantUsersPartialUpdateWithBodyWithResponse request with arbitrary body returning *TenantUsersPartialUpdateResponse
func (c *ClientWithResponses) TenantUsersPartialUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TenantUsersPartialUpdateResponse, error) {
	rsp, err := c.TenantUsersPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTenantUsersPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) TenantUsersPartialUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body TenantUsersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TenantUsersPartialUpdateResponse, error) {
	rsp, err := c.TenantUsersPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTenantUsersPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) TenantUsersPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body TenantUsersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TenantUsersPartialUpdateResponse, error) {
	rsp, err := c.TenantUsersPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTenantUsersPartialUpdateResponse(rsp)
}

// TenantUsersUpdateWithBodyWithResponse request with arbitrary body returning *TenantUsersUpdateResponse
func (c *ClientWithResponses) TenantUsersUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TenantUsersUpdateResponse, error) {
	rsp, err := c.TenantUsersUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTenantUsersUpdateResponse(rsp)
}

func (c *ClientWithResponses) TenantUsersUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body TenantUsersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TenantUsersUpdateResponse, error) {
	rsp, err := c.TenantUsersUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTenantUsersUpdateResponse(rsp)
}

func (c *ClientWithResponses) TenantUsersUpdateWithFormdataBodyWithResponse(ctx context.Context, id openapi_types.UUID, body TenantUsersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TenantUsersUpdateResponse, error) {
	rsp, err := c.TenantUsersUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTenantUsersUpdateResponse(rsp)
}

// ParseAlarmAlarmsListResponse parses an HTTP response from a AlarmAlarmsListWithResponse call
func ParseAlarmAlarmsListResponse(rsp *http.Response) (*AlarmAlarmsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlarmAlarmsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedAlarmList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAlarmAlarmsCreateResponse parses an HTTP response from a AlarmAlarmsCreateWithResponse call
func ParseAlarmAlarmsCreateResponse(rsp *http.Response) (*AlarmAlarmsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlarmAlarmsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Alarm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseAlarmAlarmsDestroyResponse parses an HTTP response from a AlarmAlarmsDestroyWithResponse call
func ParseAlarmAlarmsDestroyResponse(rsp *http.Response) (*AlarmAlarmsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlarmAlarmsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAlarmAlarmsRetrieveResponse parses an HTTP response from a AlarmAlarmsRetrieveWithResponse call
func ParseAlarmAlarmsRetrieveResponse(rsp *http.Response) (*AlarmAlarmsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlarmAlarmsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Alarm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAlarmAlarmsPartialUpdateResponse parses an HTTP response from a AlarmAlarmsPartialUpdateWithResponse call
func ParseAlarmAlarmsPartialUpdateResponse(rsp *http.Response) (*AlarmAlarmsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlarmAlarmsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlarmUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAlarmAlarmsUpdateResponse parses an HTTP response from a AlarmAlarmsUpdateWithResponse call
func ParseAlarmAlarmsUpdateResponse(rsp *http.Response) (*AlarmAlarmsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlarmAlarmsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Alarm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBccsOrdersPurchaseCallbackCreateResponse parses an HTTP response from a BccsOrdersPurchaseCallbackCreateWithResponse call
func ParseBccsOrdersPurchaseCallbackCreateResponse(rsp *http.Response) (*BccsOrdersPurchaseCallbackCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BccsOrdersPurchaseCallbackCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseBccsPlansBackupListResponse parses an HTTP response from a BccsPlansBackupListWithResponse call
func ParseBccsPlansBackupListResponse(rsp *http.Response) (*BccsPlansBackupListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BccsPlansBackupListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedBCCSVolumeBackupPlanList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBccsPlansBackupCreateResponse parses an HTTP response from a BccsPlansBackupCreateWithResponse call
func ParseBccsPlansBackupCreateResponse(rsp *http.Response) (*BccsPlansBackupCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BccsPlansBackupCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BCCSVolumeBackupPlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseBccsPlansBackupRetrieveResponse parses an HTTP response from a BccsPlansBackupRetrieveWithResponse call
func ParseBccsPlansBackupRetrieveResponse(rsp *http.Response) (*BccsPlansBackupRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BccsPlansBackupRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BCCSVolumeBackupPlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBccsPlansContainerRegistryListResponse parses an HTTP response from a BccsPlansContainerRegistryListWithResponse call
func ParseBccsPlansContainerRegistryListResponse(rsp *http.Response) (*BccsPlansContainerRegistryListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BccsPlansContainerRegistryListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedBCCSCRPlanList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBccsPlansContainerRegistryCreateResponse parses an HTTP response from a BccsPlansContainerRegistryCreateWithResponse call
func ParseBccsPlansContainerRegistryCreateResponse(rsp *http.Response) (*BccsPlansContainerRegistryCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BccsPlansContainerRegistryCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BCCSCRPlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseBccsPlansContainerRegistryRetrieveResponse parses an HTTP response from a BccsPlansContainerRegistryRetrieveWithResponse call
func ParseBccsPlansContainerRegistryRetrieveResponse(rsp *http.Response) (*BccsPlansContainerRegistryRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BccsPlansContainerRegistryRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BCCSCRPlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBccsPlansFileStorageListResponse parses an HTTP response from a BccsPlansFileStorageListWithResponse call
func ParseBccsPlansFileStorageListResponse(rsp *http.Response) (*BccsPlansFileStorageListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BccsPlansFileStorageListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedBCCSFilesystemPlanList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBccsPlansFileStorageCreateResponse parses an HTTP response from a BccsPlansFileStorageCreateWithResponse call
func ParseBccsPlansFileStorageCreateResponse(rsp *http.Response) (*BccsPlansFileStorageCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BccsPlansFileStorageCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BCCSFilesystemPlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseBccsPlansFileStorageRetrieveResponse parses an HTTP response from a BccsPlansFileStorageRetrieveWithResponse call
func ParseBccsPlansFileStorageRetrieveResponse(rsp *http.Response) (*BccsPlansFileStorageRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BccsPlansFileStorageRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BCCSFilesystemPlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBccsPlansK8sClusterListResponse parses an HTTP response from a BccsPlansK8sClusterListWithResponse call
func ParseBccsPlansK8sClusterListResponse(rsp *http.Response) (*BccsPlansK8sClusterListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BccsPlansK8sClusterListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedBCCSK8SClusterPlanList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBccsPlansK8sClusterCreateResponse parses an HTTP response from a BccsPlansK8sClusterCreateWithResponse call
func ParseBccsPlansK8sClusterCreateResponse(rsp *http.Response) (*BccsPlansK8sClusterCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BccsPlansK8sClusterCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BCCSK8SClusterPlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseBccsPlansK8sClusterRetrieveResponse parses an HTTP response from a BccsPlansK8sClusterRetrieveWithResponse call
func ParseBccsPlansK8sClusterRetrieveResponse(rsp *http.Response) (*BccsPlansK8sClusterRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BccsPlansK8sClusterRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BCCSK8SClusterPlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBccsPlansLoadBalancingListResponse parses an HTTP response from a BccsPlansLoadBalancingListWithResponse call
func ParseBccsPlansLoadBalancingListResponse(rsp *http.Response) (*BccsPlansLoadBalancingListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BccsPlansLoadBalancingListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedBCCSLoadBalancerPlanList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBccsPlansLoadBalancingCreateResponse parses an HTTP response from a BccsPlansLoadBalancingCreateWithResponse call
func ParseBccsPlansLoadBalancingCreateResponse(rsp *http.Response) (*BccsPlansLoadBalancingCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BccsPlansLoadBalancingCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BCCSLoadBalancerPlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseBccsPlansLoadBalancingRetrieveResponse parses an HTTP response from a BccsPlansLoadBalancingRetrieveWithResponse call
func ParseBccsPlansLoadBalancingRetrieveResponse(rsp *http.Response) (*BccsPlansLoadBalancingRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BccsPlansLoadBalancingRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BCCSLoadBalancerPlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBccsPlansObjectStorageListResponse parses an HTTP response from a BccsPlansObjectStorageListWithResponse call
func ParseBccsPlansObjectStorageListResponse(rsp *http.Response) (*BccsPlansObjectStorageListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BccsPlansObjectStorageListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedBCCSObjectStoragePlanList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBccsPlansObjectStorageCreateResponse parses an HTTP response from a BccsPlansObjectStorageCreateWithResponse call
func ParseBccsPlansObjectStorageCreateResponse(rsp *http.Response) (*BccsPlansObjectStorageCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BccsPlansObjectStorageCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BCCSObjectStoragePlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseBccsPlansObjectStorageRetrieveResponse parses an HTTP response from a BccsPlansObjectStorageRetrieveWithResponse call
func ParseBccsPlansObjectStorageRetrieveResponse(rsp *http.Response) (*BccsPlansObjectStorageRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BccsPlansObjectStorageRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BCCSObjectStoragePlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBccsPlansServerListResponse parses an HTTP response from a BccsPlansServerListWithResponse call
func ParseBccsPlansServerListResponse(rsp *http.Response) (*BccsPlansServerListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BccsPlansServerListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedBCCSServerPlanList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBccsPlansServerCreateResponse parses an HTTP response from a BccsPlansServerCreateWithResponse call
func ParseBccsPlansServerCreateResponse(rsp *http.Response) (*BccsPlansServerCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BccsPlansServerCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BCCSServerPlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseBccsPlansServerRetrieveResponse parses an HTTP response from a BccsPlansServerRetrieveWithResponse call
func ParseBccsPlansServerRetrieveResponse(rsp *http.Response) (*BccsPlansServerRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BccsPlansServerRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BCCSServerPlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBccsPlansVolumeListResponse parses an HTTP response from a BccsPlansVolumeListWithResponse call
func ParseBccsPlansVolumeListResponse(rsp *http.Response) (*BccsPlansVolumeListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BccsPlansVolumeListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedBCCSVolumePlanList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBccsPlansVolumeCreateResponse parses an HTTP response from a BccsPlansVolumeCreateWithResponse call
func ParseBccsPlansVolumeCreateResponse(rsp *http.Response) (*BccsPlansVolumeCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BccsPlansVolumeCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BCCSVolumePlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseBccsPlansVolumeRetrieveResponse parses an HTTP response from a BccsPlansVolumeRetrieveWithResponse call
func ParseBccsPlansVolumeRetrieveResponse(rsp *http.Response) (*BccsPlansVolumeRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BccsPlansVolumeRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BCCSVolumePlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBccsUsersListResponse parses an HTTP response from a BccsUsersListWithResponse call
func ParseBccsUsersListResponse(rsp *http.Response) (*BccsUsersListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BccsUsersListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedBCCSUserList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBccsUsersCreateResponse parses an HTTP response from a BccsUsersCreateWithResponse call
func ParseBccsUsersCreateResponse(rsp *http.Response) (*BccsUsersCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BccsUsersCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BCCSUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseBccsUsersRetrieveResponse parses an HTTP response from a BccsUsersRetrieveWithResponse call
func ParseBccsUsersRetrieveResponse(rsp *http.Response) (*BccsUsersRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BccsUsersRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BCCSUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBccsUsersProjectsRetrieveResponse parses an HTTP response from a BccsUsersProjectsRetrieveWithResponse call
func ParseBccsUsersProjectsRetrieveResponse(rsp *http.Response) (*BccsUsersProjectsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BccsUsersProjectsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedProjectList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBccsVolumesListResponse parses an HTTP response from a BccsVolumesListWithResponse call
func ParseBccsVolumesListResponse(rsp *http.Response) (*BccsVolumesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BccsVolumesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedVolumeList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContainerRegistryCliSecretRetrieveResponse parses an HTTP response from a ContainerRegistryCliSecretRetrieveWithResponse call
func ParseContainerRegistryCliSecretRetrieveResponse(rsp *http.Response) (*ContainerRegistryCliSecretRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContainerRegistryCliSecretRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CLISecret
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContainerRegistryImagesListResponse parses an HTTP response from a ContainerRegistryImagesListWithResponse call
func ParseContainerRegistryImagesListResponse(rsp *http.Response) (*ContainerRegistryImagesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContainerRegistryImagesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedContainerImageList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContainerRegistryImagesDestroyResponse parses an HTTP response from a ContainerRegistryImagesDestroyWithResponse call
func ParseContainerRegistryImagesDestroyResponse(rsp *http.Response) (*ContainerRegistryImagesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContainerRegistryImagesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseContainerRegistryImagesRetrieveResponse parses an HTTP response from a ContainerRegistryImagesRetrieveWithResponse call
func ParseContainerRegistryImagesRetrieveResponse(rsp *http.Response) (*ContainerRegistryImagesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContainerRegistryImagesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainerImage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContainerRegistryImagesArtifactsListResponse parses an HTTP response from a ContainerRegistryImagesArtifactsListWithResponse call
func ParseContainerRegistryImagesArtifactsListResponse(rsp *http.Response) (*ContainerRegistryImagesArtifactsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContainerRegistryImagesArtifactsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedContainerImageArtifactList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContainerRegistryImagesArtifactsDestroyResponse parses an HTTP response from a ContainerRegistryImagesArtifactsDestroyWithResponse call
func ParseContainerRegistryImagesArtifactsDestroyResponse(rsp *http.Response) (*ContainerRegistryImagesArtifactsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContainerRegistryImagesArtifactsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseContainerRegistryImagesArtifactsRetrieveResponse parses an HTTP response from a ContainerRegistryImagesArtifactsRetrieveWithResponse call
func ParseContainerRegistryImagesArtifactsRetrieveResponse(rsp *http.Response) (*ContainerRegistryImagesArtifactsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContainerRegistryImagesArtifactsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainerImageArtifact
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContainerRegistryImagesArtifactsBuildHistoryRetrieveResponse parses an HTTP response from a ContainerRegistryImagesArtifactsBuildHistoryRetrieveWithResponse call
func ParseContainerRegistryImagesArtifactsBuildHistoryRetrieveResponse(rsp *http.Response) (*ContainerRegistryImagesArtifactsBuildHistoryRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContainerRegistryImagesArtifactsBuildHistoryRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtifactBuildHistory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContainerRegistryImagesArtifactsScanCreateResponse parses an HTTP response from a ContainerRegistryImagesArtifactsScanCreateWithResponse call
func ParseContainerRegistryImagesArtifactsScanCreateResponse(rsp *http.Response) (*ContainerRegistryImagesArtifactsScanCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContainerRegistryImagesArtifactsScanCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseContainerRegistryImagesArtifactsTagsRetrieveResponse parses an HTTP response from a ContainerRegistryImagesArtifactsTagsRetrieveWithResponse call
func ParseContainerRegistryImagesArtifactsTagsRetrieveResponse(rsp *http.Response) (*ContainerRegistryImagesArtifactsTagsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContainerRegistryImagesArtifactsTagsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedContainerArtifactTagList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContainerRegistryImagesArtifactsTagsDestroyResponse parses an HTTP response from a ContainerRegistryImagesArtifactsTagsDestroyWithResponse call
func ParseContainerRegistryImagesArtifactsTagsDestroyResponse(rsp *http.Response) (*ContainerRegistryImagesArtifactsTagsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContainerRegistryImagesArtifactsTagsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseContainerRegistryImagesArtifactsVulnerabilitiesRetrieveResponse parses an HTTP response from a ContainerRegistryImagesArtifactsVulnerabilitiesRetrieveWithResponse call
func ParseContainerRegistryImagesArtifactsVulnerabilitiesRetrieveResponse(rsp *http.Response) (*ContainerRegistryImagesArtifactsVulnerabilitiesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContainerRegistryImagesArtifactsVulnerabilitiesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtifactVulnerability
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContainerRegistryLogsRetrieveResponse parses an HTTP response from a ContainerRegistryLogsRetrieveWithResponse call
func ParseContainerRegistryLogsRetrieveResponse(rsp *http.Response) (*ContainerRegistryLogsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContainerRegistryLogsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedProjectLogList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContainerRegistryQuotaRetrieveResponse parses an HTTP response from a ContainerRegistryQuotaRetrieveWithResponse call
func ParseContainerRegistryQuotaRetrieveResponse(rsp *http.Response) (*ContainerRegistryQuotaRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContainerRegistryQuotaRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectQuota
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDbaasDbInstanceBackupsListResponse parses an HTTP response from a DbaasDbInstanceBackupsListWithResponse call
func ParseDbaasDbInstanceBackupsListResponse(rsp *http.Response) (*DbaasDbInstanceBackupsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DbaasDbInstanceBackupsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDBInstanceBackupList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDbaasDbInstanceBackupsCreateResponse parses an HTTP response from a DbaasDbInstanceBackupsCreateWithResponse call
func ParseDbaasDbInstanceBackupsCreateResponse(rsp *http.Response) (*DbaasDbInstanceBackupsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DbaasDbInstanceBackupsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DBInstanceBackup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDbaasDbInstanceBackupsDestroyResponse parses an HTTP response from a DbaasDbInstanceBackupsDestroyWithResponse call
func ParseDbaasDbInstanceBackupsDestroyResponse(rsp *http.Response) (*DbaasDbInstanceBackupsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DbaasDbInstanceBackupsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDbaasDbInstanceBackupsRetrieveResponse parses an HTTP response from a DbaasDbInstanceBackupsRetrieveWithResponse call
func ParseDbaasDbInstanceBackupsRetrieveResponse(rsp *http.Response) (*DbaasDbInstanceBackupsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DbaasDbInstanceBackupsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DBInstanceBackup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDbaasDbInstancesListResponse parses an HTTP response from a DbaasDbInstancesListWithResponse call
func ParseDbaasDbInstancesListResponse(rsp *http.Response) (*DbaasDbInstancesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DbaasDbInstancesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDBInstanceList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDbaasDbInstancesCreateResponse parses an HTTP response from a DbaasDbInstancesCreateWithResponse call
func ParseDbaasDbInstancesCreateResponse(rsp *http.Response) (*DbaasDbInstancesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DbaasDbInstancesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DBInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDbaasDbInstancesDestroyResponse parses an HTTP response from a DbaasDbInstancesDestroyWithResponse call
func ParseDbaasDbInstancesDestroyResponse(rsp *http.Response) (*DbaasDbInstancesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DbaasDbInstancesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDbaasDbInstancesRetrieveResponse parses an HTTP response from a DbaasDbInstancesRetrieveWithResponse call
func ParseDbaasDbInstancesRetrieveResponse(rsp *http.Response) (*DbaasDbInstancesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DbaasDbInstancesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DBInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDbaasDbInstancesExtendVolumeSizePartialUpdateResponse parses an HTTP response from a DbaasDbInstancesExtendVolumeSizePartialUpdateWithResponse call
func ParseDbaasDbInstancesExtendVolumeSizePartialUpdateResponse(rsp *http.Response) (*DbaasDbInstancesExtendVolumeSizePartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DbaasDbInstancesExtendVolumeSizePartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDbaasDbInstancesUpdateBackupPolicyPartialUpdateResponse parses an HTTP response from a DbaasDbInstancesUpdateBackupPolicyPartialUpdateWithResponse call
func ParseDbaasDbInstancesUpdateBackupPolicyPartialUpdateResponse(rsp *http.Response) (*DbaasDbInstancesUpdateBackupPolicyPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DbaasDbInstancesUpdateBackupPolicyPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDbaasDbInstancesUpdateFlavorPartialUpdateResponse parses an HTTP response from a DbaasDbInstancesUpdateFlavorPartialUpdateWithResponse call
func ParseDbaasDbInstancesUpdateFlavorPartialUpdateResponse(rsp *http.Response) (*DbaasDbInstancesUpdateFlavorPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DbaasDbInstancesUpdateFlavorPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateResponse parses an HTTP response from a DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateWithResponse call
func ParseDbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateResponse(rsp *http.Response) (*DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DbaasDbInstancesUpdateKeepBackupPolicyPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDbaasDbInstancesUpdateRootPasswordPartialUpdateResponse parses an HTTP response from a DbaasDbInstancesUpdateRootPasswordPartialUpdateWithResponse call
func ParseDbaasDbInstancesUpdateRootPasswordPartialUpdateResponse(rsp *http.Response) (*DbaasDbInstancesUpdateRootPasswordPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DbaasDbInstancesUpdateRootPasswordPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDbaasDbVersionsListResponse parses an HTTP response from a DbaasDbVersionsListWithResponse call
func ParseDbaasDbVersionsListResponse(rsp *http.Response) (*DbaasDbVersionsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DbaasDbVersionsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDBVersionList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDbaasDbVersionsRetrieveResponse parses an HTTP response from a DbaasDbVersionsRetrieveWithResponse call
func ParseDbaasDbVersionsRetrieveResponse(rsp *http.Response) (*DbaasDbVersionsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DbaasDbVersionsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DBVersion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDbaasDbaasFlavorsListResponse parses an HTTP response from a DbaasDbaasFlavorsListWithResponse call
func ParseDbaasDbaasFlavorsListResponse(rsp *http.Response) (*DbaasDbaasFlavorsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DbaasDbaasFlavorsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDBaaSRegionFlavorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDbaasDbaasFlavorsRetrieveResponse parses an HTTP response from a DbaasDbaasFlavorsRetrieveWithResponse call
func ParseDbaasDbaasFlavorsRetrieveResponse(rsp *http.Response) (*DbaasDbaasFlavorsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DbaasDbaasFlavorsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DBaaSRegionFlavor
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDbaasDbaasRegionsListResponse parses an HTTP response from a DbaasDbaasRegionsListWithResponse call
func ParseDbaasDbaasRegionsListResponse(rsp *http.Response) (*DbaasDbaasRegionsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DbaasDbaasRegionsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDBaaSRegionList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDbaasDbaasRegionsRetrieveResponse parses an HTTP response from a DbaasDbaasRegionsRetrieveWithResponse call
func ParseDbaasDbaasRegionsRetrieveResponse(rsp *http.Response) (*DbaasDbaasRegionsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DbaasDbaasRegionsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DBaaSRegion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDbaasDbaasVolumeTypesListResponse parses an HTTP response from a DbaasDbaasVolumeTypesListWithResponse call
func ParseDbaasDbaasVolumeTypesListResponse(rsp *http.Response) (*DbaasDbaasVolumeTypesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DbaasDbaasVolumeTypesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDBaaSRegionVolumeTypeList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDbaasDbaasVolumeTypesRetrieveResponse parses an HTTP response from a DbaasDbaasVolumeTypesRetrieveWithResponse call
func ParseDbaasDbaasVolumeTypesRetrieveResponse(rsp *http.Response) (*DbaasDbaasVolumeTypesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DbaasDbaasVolumeTypesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DBaaSRegionVolumeType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDbaasDbaasZonesListResponse parses an HTTP response from a DbaasDbaasZonesListWithResponse call
func ParseDbaasDbaasZonesListResponse(rsp *http.Response) (*DbaasDbaasZonesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DbaasDbaasZonesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDBaaSZoneList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDbaasDbaasZonesRetrieveResponse parses an HTTP response from a DbaasDbaasZonesRetrieveWithResponse call
func ParseDbaasDbaasZonesRetrieveResponse(rsp *http.Response) (*DbaasDbaasZonesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DbaasDbaasZonesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DBaaSZone
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDbaasFlavorMappingsListResponse parses an HTTP response from a DbaasFlavorMappingsListWithResponse call
func ParseDbaasFlavorMappingsListResponse(rsp *http.Response) (*DbaasFlavorMappingsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DbaasFlavorMappingsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedFlavorMappingList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDbaasFlavorMappingsRetrieveResponse parses an HTTP response from a DbaasFlavorMappingsRetrieveWithResponse call
func ParseDbaasFlavorMappingsRetrieveResponse(rsp *http.Response) (*DbaasFlavorMappingsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DbaasFlavorMappingsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FlavorMapping
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDbaasVolumeTypeMappingsListResponse parses an HTTP response from a DbaasVolumeTypeMappingsListWithResponse call
func ParseDbaasVolumeTypeMappingsListResponse(rsp *http.Response) (*DbaasVolumeTypeMappingsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DbaasVolumeTypeMappingsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedVolumeTypeMappingList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDbaasVolumeTypeMappingsRetrieveResponse parses an HTTP response from a DbaasVolumeTypeMappingsRetrieveWithResponse call
func ParseDbaasVolumeTypeMappingsRetrieveResponse(rsp *http.Response) (*DbaasVolumeTypeMappingsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DbaasVolumeTypeMappingsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VolumeTypeMapping
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraAutoScalingScalingActionListResponse parses an HTTP response from a InfraAutoScalingScalingActionListWithResponse call
func ParseInfraAutoScalingScalingActionListResponse(rsp *http.Response) (*InfraAutoScalingScalingActionListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraAutoScalingScalingActionListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedScalingActionList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraAutoScalingScalingGroupListResponse parses an HTTP response from a InfraAutoScalingScalingGroupListWithResponse call
func ParseInfraAutoScalingScalingGroupListResponse(rsp *http.Response) (*InfraAutoScalingScalingGroupListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraAutoScalingScalingGroupListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedScalingGroupListList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraAutoScalingScalingGroupCreateResponse parses an HTTP response from a InfraAutoScalingScalingGroupCreateWithResponse call
func ParseInfraAutoScalingScalingGroupCreateResponse(rsp *http.Response) (*InfraAutoScalingScalingGroupCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraAutoScalingScalingGroupCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ScalingGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseInfraAutoScalingScalingGroupMetricsSchemaRetrieveResponse parses an HTTP response from a InfraAutoScalingScalingGroupMetricsSchemaRetrieveWithResponse call
func ParseInfraAutoScalingScalingGroupMetricsSchemaRetrieveResponse(rsp *http.Response) (*InfraAutoScalingScalingGroupMetricsSchemaRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraAutoScalingScalingGroupMetricsSchemaRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalingGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraAutoScalingScalingGroupDestroyResponse parses an HTTP response from a InfraAutoScalingScalingGroupDestroyWithResponse call
func ParseInfraAutoScalingScalingGroupDestroyResponse(rsp *http.Response) (*InfraAutoScalingScalingGroupDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraAutoScalingScalingGroupDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraAutoScalingScalingGroupRetrieveResponse parses an HTTP response from a InfraAutoScalingScalingGroupRetrieveWithResponse call
func ParseInfraAutoScalingScalingGroupRetrieveResponse(rsp *http.Response) (*InfraAutoScalingScalingGroupRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraAutoScalingScalingGroupRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalingGroupDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraAutoScalingScalingGroupPartialUpdateResponse parses an HTTP response from a InfraAutoScalingScalingGroupPartialUpdateWithResponse call
func ParseInfraAutoScalingScalingGroupPartialUpdateResponse(rsp *http.Response) (*InfraAutoScalingScalingGroupPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraAutoScalingScalingGroupPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalingGroupUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraAutoScalingScalingGroupUpdateResponse parses an HTTP response from a InfraAutoScalingScalingGroupUpdateWithResponse call
func ParseInfraAutoScalingScalingGroupUpdateResponse(rsp *http.Response) (*InfraAutoScalingScalingGroupUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraAutoScalingScalingGroupUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalingGroupUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraAutoScalingScalingGroupMetricsRetrieveResponse parses an HTTP response from a InfraAutoScalingScalingGroupMetricsRetrieveWithResponse call
func ParseInfraAutoScalingScalingGroupMetricsRetrieveResponse(rsp *http.Response) (*InfraAutoScalingScalingGroupMetricsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraAutoScalingScalingGroupMetricsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedMonitorResponseList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraAutoScalingScalingPolicyListResponse parses an HTTP response from a InfraAutoScalingScalingPolicyListWithResponse call
func ParseInfraAutoScalingScalingPolicyListResponse(rsp *http.Response) (*InfraAutoScalingScalingPolicyListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraAutoScalingScalingPolicyListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedScalingPolicyListList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraAutoScalingScalingPolicyCreateResponse parses an HTTP response from a InfraAutoScalingScalingPolicyCreateWithResponse call
func ParseInfraAutoScalingScalingPolicyCreateResponse(rsp *http.Response) (*InfraAutoScalingScalingPolicyCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraAutoScalingScalingPolicyCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ScalingPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseInfraAutoScalingScalingPolicyDestroyResponse parses an HTTP response from a InfraAutoScalingScalingPolicyDestroyWithResponse call
func ParseInfraAutoScalingScalingPolicyDestroyResponse(rsp *http.Response) (*InfraAutoScalingScalingPolicyDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraAutoScalingScalingPolicyDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraAutoScalingScalingPolicyRetrieveResponse parses an HTTP response from a InfraAutoScalingScalingPolicyRetrieveWithResponse call
func ParseInfraAutoScalingScalingPolicyRetrieveResponse(rsp *http.Response) (*InfraAutoScalingScalingPolicyRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraAutoScalingScalingPolicyRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalingPolicyDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraAutoScalingScalingPolicyPartialUpdateResponse parses an HTTP response from a InfraAutoScalingScalingPolicyPartialUpdateWithResponse call
func ParseInfraAutoScalingScalingPolicyPartialUpdateResponse(rsp *http.Response) (*InfraAutoScalingScalingPolicyPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraAutoScalingScalingPolicyPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalingPolicyUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraAutoScalingScalingPolicyUpdateResponse parses an HTTP response from a InfraAutoScalingScalingPolicyUpdateWithResponse call
func ParseInfraAutoScalingScalingPolicyUpdateResponse(rsp *http.Response) (*InfraAutoScalingScalingPolicyUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraAutoScalingScalingPolicyUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalingPolicyUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraAutoScalingScalingQueryListResponse parses an HTTP response from a InfraAutoScalingScalingQueryListWithResponse call
func ParseInfraAutoScalingScalingQueryListResponse(rsp *http.Response) (*InfraAutoScalingScalingQueryListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraAutoScalingScalingQueryListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedScalingQueryList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraAutoScalingScalingQueryCreateResponse parses an HTTP response from a InfraAutoScalingScalingQueryCreateWithResponse call
func ParseInfraAutoScalingScalingQueryCreateResponse(rsp *http.Response) (*InfraAutoScalingScalingQueryCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraAutoScalingScalingQueryCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ScalingQuery
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseInfraAutoScalingScalingQueryDestroyResponse parses an HTTP response from a InfraAutoScalingScalingQueryDestroyWithResponse call
func ParseInfraAutoScalingScalingQueryDestroyResponse(rsp *http.Response) (*InfraAutoScalingScalingQueryDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraAutoScalingScalingQueryDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraAutoScalingScalingScheduleListResponse parses an HTTP response from a InfraAutoScalingScalingScheduleListWithResponse call
func ParseInfraAutoScalingScalingScheduleListResponse(rsp *http.Response) (*InfraAutoScalingScalingScheduleListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraAutoScalingScalingScheduleListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedScalingScheduleListList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraAutoScalingScalingScheduleCreateResponse parses an HTTP response from a InfraAutoScalingScalingScheduleCreateWithResponse call
func ParseInfraAutoScalingScalingScheduleCreateResponse(rsp *http.Response) (*InfraAutoScalingScalingScheduleCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraAutoScalingScalingScheduleCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ScalingSchedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseInfraAutoScalingScalingScheduleDestroyResponse parses an HTTP response from a InfraAutoScalingScalingScheduleDestroyWithResponse call
func ParseInfraAutoScalingScalingScheduleDestroyResponse(rsp *http.Response) (*InfraAutoScalingScalingScheduleDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraAutoScalingScalingScheduleDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraAutoScalingScalingScheduleRetrieveResponse parses an HTTP response from a InfraAutoScalingScalingScheduleRetrieveWithResponse call
func ParseInfraAutoScalingScalingScheduleRetrieveResponse(rsp *http.Response) (*InfraAutoScalingScalingScheduleRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraAutoScalingScalingScheduleRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalingSchedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraAutoScalingScalingSchedulePartialUpdateResponse parses an HTTP response from a InfraAutoScalingScalingSchedulePartialUpdateWithResponse call
func ParseInfraAutoScalingScalingSchedulePartialUpdateResponse(rsp *http.Response) (*InfraAutoScalingScalingSchedulePartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraAutoScalingScalingSchedulePartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalingScheduleUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraAutoScalingScalingScheduleUpdateResponse parses an HTTP response from a InfraAutoScalingScalingScheduleUpdateWithResponse call
func ParseInfraAutoScalingScalingScheduleUpdateResponse(rsp *http.Response) (*InfraAutoScalingScalingScheduleUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraAutoScalingScalingScheduleUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalingScheduleUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraAutoScalingScalingServerListResponse parses an HTTP response from a InfraAutoScalingScalingServerListWithResponse call
func ParseInfraAutoScalingScalingServerListResponse(rsp *http.Response) (*InfraAutoScalingScalingServerListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraAutoScalingScalingServerListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedScalingServerList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraCertificateListResponse parses an HTTP response from a InfraCertificateListWithResponse call
func ParseInfraCertificateListResponse(rsp *http.Response) (*InfraCertificateListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraCertificateListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedCertificateList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraCertificateCreateResponse parses an HTTP response from a InfraCertificateCreateWithResponse call
func ParseInfraCertificateCreateResponse(rsp *http.Response) (*InfraCertificateCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraCertificateCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Certificate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseInfraCertificateDestroyResponse parses an HTTP response from a InfraCertificateDestroyWithResponse call
func ParseInfraCertificateDestroyResponse(rsp *http.Response) (*InfraCertificateDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraCertificateDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraCertificateRetrieveResponse parses an HTTP response from a InfraCertificateRetrieveWithResponse call
func ParseInfraCertificateRetrieveResponse(rsp *http.Response) (*InfraCertificateRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraCertificateRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Certificate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraCertificatePartialUpdateResponse parses an HTTP response from a InfraCertificatePartialUpdateWithResponse call
func ParseInfraCertificatePartialUpdateResponse(rsp *http.Response) (*InfraCertificatePartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraCertificatePartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Certificate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraCertificateUpdateResponse parses an HTTP response from a InfraCertificateUpdateWithResponse call
func ParseInfraCertificateUpdateResponse(rsp *http.Response) (*InfraCertificateUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraCertificateUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Certificate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraElasticIpsListResponse parses an HTTP response from a InfraElasticIpsListWithResponse call
func ParseInfraElasticIpsListResponse(rsp *http.Response) (*InfraElasticIpsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraElasticIpsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedElasticIPList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraElasticIpsCreateResponse parses an HTTP response from a InfraElasticIpsCreateWithResponse call
func ParseInfraElasticIpsCreateResponse(rsp *http.Response) (*InfraElasticIpsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraElasticIpsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ElasticIP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseInfraElasticIpsDestroyResponse parses an HTTP response from a InfraElasticIpsDestroyWithResponse call
func ParseInfraElasticIpsDestroyResponse(rsp *http.Response) (*InfraElasticIpsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraElasticIpsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraElasticIpsRetrieveResponse parses an HTTP response from a InfraElasticIpsRetrieveWithResponse call
func ParseInfraElasticIpsRetrieveResponse(rsp *http.Response) (*InfraElasticIpsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraElasticIpsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ElasticIP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraFilesystemAccessRulesListResponse parses an HTTP response from a InfraFilesystemAccessRulesListWithResponse call
func ParseInfraFilesystemAccessRulesListResponse(rsp *http.Response) (*InfraFilesystemAccessRulesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraFilesystemAccessRulesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedFilesystemAccessRuleList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraFilesystemAccessRulesCreateResponse parses an HTTP response from a InfraFilesystemAccessRulesCreateWithResponse call
func ParseInfraFilesystemAccessRulesCreateResponse(rsp *http.Response) (*InfraFilesystemAccessRulesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraFilesystemAccessRulesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest FilesystemAccessRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseInfraFilesystemAccessRulesDestroyResponse parses an HTTP response from a InfraFilesystemAccessRulesDestroyWithResponse call
func ParseInfraFilesystemAccessRulesDestroyResponse(rsp *http.Response) (*InfraFilesystemAccessRulesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraFilesystemAccessRulesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraFilesystemAccessRulesRetrieveResponse parses an HTTP response from a InfraFilesystemAccessRulesRetrieveWithResponse call
func ParseInfraFilesystemAccessRulesRetrieveResponse(rsp *http.Response) (*InfraFilesystemAccessRulesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraFilesystemAccessRulesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FilesystemAccessRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraFilesystemAccessRulesPartialUpdateResponse parses an HTTP response from a InfraFilesystemAccessRulesPartialUpdateWithResponse call
func ParseInfraFilesystemAccessRulesPartialUpdateResponse(rsp *http.Response) (*InfraFilesystemAccessRulesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraFilesystemAccessRulesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FilesystemAccessRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraFilesystemAccessRulesUpdateResponse parses an HTTP response from a InfraFilesystemAccessRulesUpdateWithResponse call
func ParseInfraFilesystemAccessRulesUpdateResponse(rsp *http.Response) (*InfraFilesystemAccessRulesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraFilesystemAccessRulesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FilesystemAccessRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraFilesystemSnapshotPoliciesListResponse parses an HTTP response from a InfraFilesystemSnapshotPoliciesListWithResponse call
func ParseInfraFilesystemSnapshotPoliciesListResponse(rsp *http.Response) (*InfraFilesystemSnapshotPoliciesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraFilesystemSnapshotPoliciesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedFilesystemSnapshotPolicyList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraFilesystemSnapshotPoliciesCreateResponse parses an HTTP response from a InfraFilesystemSnapshotPoliciesCreateWithResponse call
func ParseInfraFilesystemSnapshotPoliciesCreateResponse(rsp *http.Response) (*InfraFilesystemSnapshotPoliciesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraFilesystemSnapshotPoliciesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest FilesystemSnapshotPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseInfraFilesystemSnapshotPoliciesDestroyResponse parses an HTTP response from a InfraFilesystemSnapshotPoliciesDestroyWithResponse call
func ParseInfraFilesystemSnapshotPoliciesDestroyResponse(rsp *http.Response) (*InfraFilesystemSnapshotPoliciesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraFilesystemSnapshotPoliciesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraFilesystemSnapshotPoliciesRetrieveResponse parses an HTTP response from a InfraFilesystemSnapshotPoliciesRetrieveWithResponse call
func ParseInfraFilesystemSnapshotPoliciesRetrieveResponse(rsp *http.Response) (*InfraFilesystemSnapshotPoliciesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraFilesystemSnapshotPoliciesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FilesystemSnapshotPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraFilesystemSnapshotPoliciesPartialUpdateResponse parses an HTTP response from a InfraFilesystemSnapshotPoliciesPartialUpdateWithResponse call
func ParseInfraFilesystemSnapshotPoliciesPartialUpdateResponse(rsp *http.Response) (*InfraFilesystemSnapshotPoliciesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraFilesystemSnapshotPoliciesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FilesystemSnapshotPolicyUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraFilesystemSnapshotPoliciesUpdateResponse parses an HTTP response from a InfraFilesystemSnapshotPoliciesUpdateWithResponse call
func ParseInfraFilesystemSnapshotPoliciesUpdateResponse(rsp *http.Response) (*InfraFilesystemSnapshotPoliciesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraFilesystemSnapshotPoliciesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FilesystemSnapshotPolicyUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraFilesystemSnapshotsListResponse parses an HTTP response from a InfraFilesystemSnapshotsListWithResponse call
func ParseInfraFilesystemSnapshotsListResponse(rsp *http.Response) (*InfraFilesystemSnapshotsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraFilesystemSnapshotsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedFilesystemSnapshotList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraFilesystemSnapshotsCreateResponse parses an HTTP response from a InfraFilesystemSnapshotsCreateWithResponse call
func ParseInfraFilesystemSnapshotsCreateResponse(rsp *http.Response) (*InfraFilesystemSnapshotsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraFilesystemSnapshotsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest FilesystemSnapshot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseInfraFilesystemSnapshotsDestroyResponse parses an HTTP response from a InfraFilesystemSnapshotsDestroyWithResponse call
func ParseInfraFilesystemSnapshotsDestroyResponse(rsp *http.Response) (*InfraFilesystemSnapshotsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraFilesystemSnapshotsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraFilesystemSnapshotsRetrieveResponse parses an HTTP response from a InfraFilesystemSnapshotsRetrieveWithResponse call
func ParseInfraFilesystemSnapshotsRetrieveResponse(rsp *http.Response) (*InfraFilesystemSnapshotsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraFilesystemSnapshotsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FilesystemSnapshot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraFilesystemSnapshotsPartialUpdateResponse parses an HTTP response from a InfraFilesystemSnapshotsPartialUpdateWithResponse call
func ParseInfraFilesystemSnapshotsPartialUpdateResponse(rsp *http.Response) (*InfraFilesystemSnapshotsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraFilesystemSnapshotsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FilesystemSnapshotUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraFilesystemSnapshotsUpdateResponse parses an HTTP response from a InfraFilesystemSnapshotsUpdateWithResponse call
func ParseInfraFilesystemSnapshotsUpdateResponse(rsp *http.Response) (*InfraFilesystemSnapshotsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraFilesystemSnapshotsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FilesystemSnapshotUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraFilesystemTypesListResponse parses an HTTP response from a InfraFilesystemTypesListWithResponse call
func ParseInfraFilesystemTypesListResponse(rsp *http.Response) (*InfraFilesystemTypesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraFilesystemTypesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedFilesystemTypeList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraFilesystemTypesRetrieveResponse parses an HTTP response from a InfraFilesystemTypesRetrieveWithResponse call
func ParseInfraFilesystemTypesRetrieveResponse(rsp *http.Response) (*InfraFilesystemTypesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraFilesystemTypesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FilesystemType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraFilesystemsListResponse parses an HTTP response from a InfraFilesystemsListWithResponse call
func ParseInfraFilesystemsListResponse(rsp *http.Response) (*InfraFilesystemsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraFilesystemsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedFilesystemList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraFilesystemsCreateResponse parses an HTTP response from a InfraFilesystemsCreateWithResponse call
func ParseInfraFilesystemsCreateResponse(rsp *http.Response) (*InfraFilesystemsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraFilesystemsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Filesystem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseInfraFilesystemsDestroyResponse parses an HTTP response from a InfraFilesystemsDestroyWithResponse call
func ParseInfraFilesystemsDestroyResponse(rsp *http.Response) (*InfraFilesystemsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraFilesystemsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraFilesystemsRetrieveResponse parses an HTTP response from a InfraFilesystemsRetrieveWithResponse call
func ParseInfraFilesystemsRetrieveResponse(rsp *http.Response) (*InfraFilesystemsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraFilesystemsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Filesystem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraFilesystemsPartialUpdateResponse parses an HTTP response from a InfraFilesystemsPartialUpdateWithResponse call
func ParseInfraFilesystemsPartialUpdateResponse(rsp *http.Response) (*InfraFilesystemsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraFilesystemsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FilesystemUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraFilesystemsUpdateResponse parses an HTTP response from a InfraFilesystemsUpdateWithResponse call
func ParseInfraFilesystemsUpdateResponse(rsp *http.Response) (*InfraFilesystemsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraFilesystemsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FilesystemUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraFilesystemsApplyPolicyCreateResponse parses an HTTP response from a InfraFilesystemsApplyPolicyCreateWithResponse call
func ParseInfraFilesystemsApplyPolicyCreateResponse(rsp *http.Response) (*InfraFilesystemsApplyPolicyCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraFilesystemsApplyPolicyCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraFilesystemsResizeCreateResponse parses an HTTP response from a InfraFilesystemsResizeCreateWithResponse call
func ParseInfraFilesystemsResizeCreateResponse(rsp *http.Response) (*InfraFilesystemsResizeCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraFilesystemsResizeCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Filesystem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraFilesystemsStartMigrationCreateResponse parses an HTTP response from a InfraFilesystemsStartMigrationCreateWithResponse call
func ParseInfraFilesystemsStartMigrationCreateResponse(rsp *http.Response) (*InfraFilesystemsStartMigrationCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraFilesystemsStartMigrationCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Filesystem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraFilesystemsUnapplyPolicyCreateResponse parses an HTTP response from a InfraFilesystemsUnapplyPolicyCreateWithResponse call
func ParseInfraFilesystemsUnapplyPolicyCreateResponse(rsp *http.Response) (*InfraFilesystemsUnapplyPolicyCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraFilesystemsUnapplyPolicyCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraFlavorsListResponse parses an HTTP response from a InfraFlavorsListWithResponse call
func ParseInfraFlavorsListResponse(rsp *http.Response) (*InfraFlavorsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraFlavorsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedFlavorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraFlavorsCreateResponse parses an HTTP response from a InfraFlavorsCreateWithResponse call
func ParseInfraFlavorsCreateResponse(rsp *http.Response) (*InfraFlavorsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraFlavorsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Flavor
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseInfraFlavorsDestroyResponse parses an HTTP response from a InfraFlavorsDestroyWithResponse call
func ParseInfraFlavorsDestroyResponse(rsp *http.Response) (*InfraFlavorsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraFlavorsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraFlavorsRetrieveResponse parses an HTTP response from a InfraFlavorsRetrieveWithResponse call
func ParseInfraFlavorsRetrieveResponse(rsp *http.Response) (*InfraFlavorsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraFlavorsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Flavor
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraFlavorsPartialUpdateResponse parses an HTTP response from a InfraFlavorsPartialUpdateWithResponse call
func ParseInfraFlavorsPartialUpdateResponse(rsp *http.Response) (*InfraFlavorsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraFlavorsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FlavorUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraFlavorsUpdateResponse parses an HTTP response from a InfraFlavorsUpdateWithResponse call
func ParseInfraFlavorsUpdateResponse(rsp *http.Response) (*InfraFlavorsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraFlavorsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FlavorUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraImagesListResponse parses an HTTP response from a InfraImagesListWithResponse call
func ParseInfraImagesListResponse(rsp *http.Response) (*InfraImagesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraImagesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedImageList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraImagesCreateResponse parses an HTTP response from a InfraImagesCreateWithResponse call
func ParseInfraImagesCreateResponse(rsp *http.Response) (*InfraImagesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraImagesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Image
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseInfraImagesDestroyResponse parses an HTTP response from a InfraImagesDestroyWithResponse call
func ParseInfraImagesDestroyResponse(rsp *http.Response) (*InfraImagesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraImagesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraImagesRetrieveResponse parses an HTTP response from a InfraImagesRetrieveWithResponse call
func ParseInfraImagesRetrieveResponse(rsp *http.Response) (*InfraImagesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraImagesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Image
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraImagesPartialUpdateResponse parses an HTTP response from a InfraImagesPartialUpdateWithResponse call
func ParseInfraImagesPartialUpdateResponse(rsp *http.Response) (*InfraImagesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraImagesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImageUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraImagesUpdateResponse parses an HTTP response from a InfraImagesUpdateWithResponse call
func ParseInfraImagesUpdateResponse(rsp *http.Response) (*InfraImagesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraImagesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImageUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraKeypairsListResponse parses an HTTP response from a InfraKeypairsListWithResponse call
func ParseInfraKeypairsListResponse(rsp *http.Response) (*InfraKeypairsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraKeypairsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedKeypairList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraKeypairsCreateResponse parses an HTTP response from a InfraKeypairsCreateWithResponse call
func ParseInfraKeypairsCreateResponse(rsp *http.Response) (*InfraKeypairsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraKeypairsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Keypair
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseInfraKeypairsDestroyResponse parses an HTTP response from a InfraKeypairsDestroyWithResponse call
func ParseInfraKeypairsDestroyResponse(rsp *http.Response) (*InfraKeypairsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraKeypairsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraKeypairsRetrieveResponse parses an HTTP response from a InfraKeypairsRetrieveWithResponse call
func ParseInfraKeypairsRetrieveResponse(rsp *http.Response) (*InfraKeypairsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraKeypairsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Keypair
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraKeypairsPartialUpdateResponse parses an HTTP response from a InfraKeypairsPartialUpdateWithResponse call
func ParseInfraKeypairsPartialUpdateResponse(rsp *http.Response) (*InfraKeypairsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraKeypairsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KeypairUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraKeypairsUpdateResponse parses an HTTP response from a InfraKeypairsUpdateWithResponse call
func ParseInfraKeypairsUpdateResponse(rsp *http.Response) (*InfraKeypairsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraKeypairsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KeypairUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraLaunchTemplateListResponse parses an HTTP response from a InfraLaunchTemplateListWithResponse call
func ParseInfraLaunchTemplateListResponse(rsp *http.Response) (*InfraLaunchTemplateListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLaunchTemplateListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedLaunchTemplateDetailList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraLaunchTemplateCreateResponse parses an HTTP response from a InfraLaunchTemplateCreateWithResponse call
func ParseInfraLaunchTemplateCreateResponse(rsp *http.Response) (*InfraLaunchTemplateCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLaunchTemplateCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest LaunchTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseInfraLaunchTemplateDestroyResponse parses an HTTP response from a InfraLaunchTemplateDestroyWithResponse call
func ParseInfraLaunchTemplateDestroyResponse(rsp *http.Response) (*InfraLaunchTemplateDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLaunchTemplateDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraLaunchTemplateRetrieveResponse parses an HTTP response from a InfraLaunchTemplateRetrieveWithResponse call
func ParseInfraLaunchTemplateRetrieveResponse(rsp *http.Response) (*InfraLaunchTemplateRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLaunchTemplateRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LaunchTemplateDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraLaunchTemplatePartialUpdateResponse parses an HTTP response from a InfraLaunchTemplatePartialUpdateWithResponse call
func ParseInfraLaunchTemplatePartialUpdateResponse(rsp *http.Response) (*InfraLaunchTemplatePartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLaunchTemplatePartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LaunchTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraLaunchTemplateUpdateResponse parses an HTTP response from a InfraLaunchTemplateUpdateWithResponse call
func ParseInfraLaunchTemplateUpdateResponse(rsp *http.Response) (*InfraLaunchTemplateUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLaunchTemplateUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LaunchTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraLoadBalancingL7policyListResponse parses an HTTP response from a InfraLoadBalancingL7policyListWithResponse call
func ParseInfraLoadBalancingL7policyListResponse(rsp *http.Response) (*InfraLoadBalancingL7policyListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingL7policyListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedL7PolicyListList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraLoadBalancingL7policyCreateResponse parses an HTTP response from a InfraLoadBalancingL7policyCreateWithResponse call
func ParseInfraLoadBalancingL7policyCreateResponse(rsp *http.Response) (*InfraLoadBalancingL7policyCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingL7policyCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest L7Policy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseInfraLoadBalancingL7policyDestroyResponse parses an HTTP response from a InfraLoadBalancingL7policyDestroyWithResponse call
func ParseInfraLoadBalancingL7policyDestroyResponse(rsp *http.Response) (*InfraLoadBalancingL7policyDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingL7policyDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraLoadBalancingL7policyRetrieveResponse parses an HTTP response from a InfraLoadBalancingL7policyRetrieveWithResponse call
func ParseInfraLoadBalancingL7policyRetrieveResponse(rsp *http.Response) (*InfraLoadBalancingL7policyRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingL7policyRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest L7PolicyDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraLoadBalancingL7policyPartialUpdateResponse parses an HTTP response from a InfraLoadBalancingL7policyPartialUpdateWithResponse call
func ParseInfraLoadBalancingL7policyPartialUpdateResponse(rsp *http.Response) (*InfraLoadBalancingL7policyPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingL7policyPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest L7PolicyUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraLoadBalancingL7policyUpdateResponse parses an HTTP response from a InfraLoadBalancingL7policyUpdateWithResponse call
func ParseInfraLoadBalancingL7policyUpdateResponse(rsp *http.Response) (*InfraLoadBalancingL7policyUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingL7policyUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest L7PolicyUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraLoadBalancingL7ruleListResponse parses an HTTP response from a InfraLoadBalancingL7ruleListWithResponse call
func ParseInfraLoadBalancingL7ruleListResponse(rsp *http.Response) (*InfraLoadBalancingL7ruleListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingL7ruleListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedL7RuleListList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraLoadBalancingL7ruleCreateResponse parses an HTTP response from a InfraLoadBalancingL7ruleCreateWithResponse call
func ParseInfraLoadBalancingL7ruleCreateResponse(rsp *http.Response) (*InfraLoadBalancingL7ruleCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingL7ruleCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest L7Rule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseInfraLoadBalancingL7ruleDestroyResponse parses an HTTP response from a InfraLoadBalancingL7ruleDestroyWithResponse call
func ParseInfraLoadBalancingL7ruleDestroyResponse(rsp *http.Response) (*InfraLoadBalancingL7ruleDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingL7ruleDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraLoadBalancingL7ruleRetrieveResponse parses an HTTP response from a InfraLoadBalancingL7ruleRetrieveWithResponse call
func ParseInfraLoadBalancingL7ruleRetrieveResponse(rsp *http.Response) (*InfraLoadBalancingL7ruleRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingL7ruleRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest L7Rule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraLoadBalancingL7rulePartialUpdateResponse parses an HTTP response from a InfraLoadBalancingL7rulePartialUpdateWithResponse call
func ParseInfraLoadBalancingL7rulePartialUpdateResponse(rsp *http.Response) (*InfraLoadBalancingL7rulePartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingL7rulePartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest L7RuleUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraLoadBalancingL7ruleUpdateResponse parses an HTTP response from a InfraLoadBalancingL7ruleUpdateWithResponse call
func ParseInfraLoadBalancingL7ruleUpdateResponse(rsp *http.Response) (*InfraLoadBalancingL7ruleUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingL7ruleUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest L7RuleUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraLoadBalancingListenerListResponse parses an HTTP response from a InfraLoadBalancingListenerListWithResponse call
func ParseInfraLoadBalancingListenerListResponse(rsp *http.Response) (*InfraLoadBalancingListenerListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingListenerListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedListenerListList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraLoadBalancingListenerCreateResponse parses an HTTP response from a InfraLoadBalancingListenerCreateWithResponse call
func ParseInfraLoadBalancingListenerCreateResponse(rsp *http.Response) (*InfraLoadBalancingListenerCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingListenerCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Listener
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseInfraLoadBalancingListenerMetricsSchemaRetrieveResponse parses an HTTP response from a InfraLoadBalancingListenerMetricsSchemaRetrieveWithResponse call
func ParseInfraLoadBalancingListenerMetricsSchemaRetrieveResponse(rsp *http.Response) (*InfraLoadBalancingListenerMetricsSchemaRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingListenerMetricsSchemaRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Listener
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraLoadBalancingListenerDestroyResponse parses an HTTP response from a InfraLoadBalancingListenerDestroyWithResponse call
func ParseInfraLoadBalancingListenerDestroyResponse(rsp *http.Response) (*InfraLoadBalancingListenerDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingListenerDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraLoadBalancingListenerRetrieveResponse parses an HTTP response from a InfraLoadBalancingListenerRetrieveWithResponse call
func ParseInfraLoadBalancingListenerRetrieveResponse(rsp *http.Response) (*InfraLoadBalancingListenerRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingListenerRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListenerDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraLoadBalancingListenerPartialUpdateResponse parses an HTTP response from a InfraLoadBalancingListenerPartialUpdateWithResponse call
func ParseInfraLoadBalancingListenerPartialUpdateResponse(rsp *http.Response) (*InfraLoadBalancingListenerPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingListenerPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListenerUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraLoadBalancingListenerUpdateResponse parses an HTTP response from a InfraLoadBalancingListenerUpdateWithResponse call
func ParseInfraLoadBalancingListenerUpdateResponse(rsp *http.Response) (*InfraLoadBalancingListenerUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingListenerUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListenerUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraLoadBalancingListenerMetricsRetrieveResponse parses an HTTP response from a InfraLoadBalancingListenerMetricsRetrieveWithResponse call
func ParseInfraLoadBalancingListenerMetricsRetrieveResponse(rsp *http.Response) (*InfraLoadBalancingListenerMetricsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingListenerMetricsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedMonitorResponseList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraLoadBalancingLoadBalancerListResponse parses an HTTP response from a InfraLoadBalancingLoadBalancerListWithResponse call
func ParseInfraLoadBalancingLoadBalancerListResponse(rsp *http.Response) (*InfraLoadBalancingLoadBalancerListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingLoadBalancerListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedLoadBalancerListList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraLoadBalancingLoadBalancerCreateResponse parses an HTTP response from a InfraLoadBalancingLoadBalancerCreateWithResponse call
func ParseInfraLoadBalancingLoadBalancerCreateResponse(rsp *http.Response) (*InfraLoadBalancingLoadBalancerCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingLoadBalancerCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest LoadBalancer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseInfraLoadBalancingLoadBalancerMetricsSchemaRetrieveResponse parses an HTTP response from a InfraLoadBalancingLoadBalancerMetricsSchemaRetrieveWithResponse call
func ParseInfraLoadBalancingLoadBalancerMetricsSchemaRetrieveResponse(rsp *http.Response) (*InfraLoadBalancingLoadBalancerMetricsSchemaRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingLoadBalancerMetricsSchemaRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LoadBalancer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraLoadBalancingLoadBalancerDestroyResponse parses an HTTP response from a InfraLoadBalancingLoadBalancerDestroyWithResponse call
func ParseInfraLoadBalancingLoadBalancerDestroyResponse(rsp *http.Response) (*InfraLoadBalancingLoadBalancerDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingLoadBalancerDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraLoadBalancingLoadBalancerRetrieveResponse parses an HTTP response from a InfraLoadBalancingLoadBalancerRetrieveWithResponse call
func ParseInfraLoadBalancingLoadBalancerRetrieveResponse(rsp *http.Response) (*InfraLoadBalancingLoadBalancerRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingLoadBalancerRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LoadBalancerDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraLoadBalancingLoadBalancerPartialUpdateResponse parses an HTTP response from a InfraLoadBalancingLoadBalancerPartialUpdateWithResponse call
func ParseInfraLoadBalancingLoadBalancerPartialUpdateResponse(rsp *http.Response) (*InfraLoadBalancingLoadBalancerPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingLoadBalancerPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LoadBalancerUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraLoadBalancingLoadBalancerUpdateResponse parses an HTTP response from a InfraLoadBalancingLoadBalancerUpdateWithResponse call
func ParseInfraLoadBalancingLoadBalancerUpdateResponse(rsp *http.Response) (*InfraLoadBalancingLoadBalancerUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingLoadBalancerUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LoadBalancerUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraLoadBalancingLoadBalancerMetricsRetrieveResponse parses an HTTP response from a InfraLoadBalancingLoadBalancerMetricsRetrieveWithResponse call
func ParseInfraLoadBalancingLoadBalancerMetricsRetrieveResponse(rsp *http.Response) (*InfraLoadBalancingLoadBalancerMetricsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingLoadBalancerMetricsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedMonitorResponseList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraLoadBalancingServerGroupMemberListResponse parses an HTTP response from a InfraLoadBalancingServerGroupMemberListWithResponse call
func ParseInfraLoadBalancingServerGroupMemberListResponse(rsp *http.Response) (*InfraLoadBalancingServerGroupMemberListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingServerGroupMemberListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedServerGroupMemberListList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraLoadBalancingServerGroupMemberCreateResponse parses an HTTP response from a InfraLoadBalancingServerGroupMemberCreateWithResponse call
func ParseInfraLoadBalancingServerGroupMemberCreateResponse(rsp *http.Response) (*InfraLoadBalancingServerGroupMemberCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingServerGroupMemberCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ServerGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseInfraLoadBalancingServerGroupMemberDestroyResponse parses an HTTP response from a InfraLoadBalancingServerGroupMemberDestroyWithResponse call
func ParseInfraLoadBalancingServerGroupMemberDestroyResponse(rsp *http.Response) (*InfraLoadBalancingServerGroupMemberDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingServerGroupMemberDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraLoadBalancingServerGroupMemberRetrieveResponse parses an HTTP response from a InfraLoadBalancingServerGroupMemberRetrieveWithResponse call
func ParseInfraLoadBalancingServerGroupMemberRetrieveResponse(rsp *http.Response) (*InfraLoadBalancingServerGroupMemberRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingServerGroupMemberRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerGroupMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraLoadBalancingServerGroupMemberPartialUpdateResponse parses an HTTP response from a InfraLoadBalancingServerGroupMemberPartialUpdateWithResponse call
func ParseInfraLoadBalancingServerGroupMemberPartialUpdateResponse(rsp *http.Response) (*InfraLoadBalancingServerGroupMemberPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingServerGroupMemberPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerGroupMemberUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraLoadBalancingServerGroupMemberUpdateResponse parses an HTTP response from a InfraLoadBalancingServerGroupMemberUpdateWithResponse call
func ParseInfraLoadBalancingServerGroupMemberUpdateResponse(rsp *http.Response) (*InfraLoadBalancingServerGroupMemberUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingServerGroupMemberUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerGroupMemberUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraLoadBalancingServerGroupListResponse parses an HTTP response from a InfraLoadBalancingServerGroupListWithResponse call
func ParseInfraLoadBalancingServerGroupListResponse(rsp *http.Response) (*InfraLoadBalancingServerGroupListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingServerGroupListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedServerGroupListList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraLoadBalancingServerGroupCreateResponse parses an HTTP response from a InfraLoadBalancingServerGroupCreateWithResponse call
func ParseInfraLoadBalancingServerGroupCreateResponse(rsp *http.Response) (*InfraLoadBalancingServerGroupCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingServerGroupCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ServerGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseInfraLoadBalancingServerGroupDestroyResponse parses an HTTP response from a InfraLoadBalancingServerGroupDestroyWithResponse call
func ParseInfraLoadBalancingServerGroupDestroyResponse(rsp *http.Response) (*InfraLoadBalancingServerGroupDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingServerGroupDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraLoadBalancingServerGroupRetrieveResponse parses an HTTP response from a InfraLoadBalancingServerGroupRetrieveWithResponse call
func ParseInfraLoadBalancingServerGroupRetrieveResponse(rsp *http.Response) (*InfraLoadBalancingServerGroupRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingServerGroupRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerGroupDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraLoadBalancingServerGroupPartialUpdateResponse parses an HTTP response from a InfraLoadBalancingServerGroupPartialUpdateWithResponse call
func ParseInfraLoadBalancingServerGroupPartialUpdateResponse(rsp *http.Response) (*InfraLoadBalancingServerGroupPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingServerGroupPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerGroupUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraLoadBalancingServerGroupUpdateResponse parses an HTTP response from a InfraLoadBalancingServerGroupUpdateWithResponse call
func ParseInfraLoadBalancingServerGroupUpdateResponse(rsp *http.Response) (*InfraLoadBalancingServerGroupUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraLoadBalancingServerGroupUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerGroupUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraPlacementgroupsListResponse parses an HTTP response from a InfraPlacementgroupsListWithResponse call
func ParseInfraPlacementgroupsListResponse(rsp *http.Response) (*InfraPlacementgroupsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraPlacementgroupsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedPlacementGroupList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraPlacementgroupsCreateResponse parses an HTTP response from a InfraPlacementgroupsCreateWithResponse call
func ParseInfraPlacementgroupsCreateResponse(rsp *http.Response) (*InfraPlacementgroupsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraPlacementgroupsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PlacementGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseInfraPlacementgroupsDestroyResponse parses an HTTP response from a InfraPlacementgroupsDestroyWithResponse call
func ParseInfraPlacementgroupsDestroyResponse(rsp *http.Response) (*InfraPlacementgroupsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraPlacementgroupsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraPlacementgroupsRetrieveResponse parses an HTTP response from a InfraPlacementgroupsRetrieveWithResponse call
func ParseInfraPlacementgroupsRetrieveResponse(rsp *http.Response) (*InfraPlacementgroupsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraPlacementgroupsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlacementGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraPlacementgroupsPartialUpdateResponse parses an HTTP response from a InfraPlacementgroupsPartialUpdateWithResponse call
func ParseInfraPlacementgroupsPartialUpdateResponse(rsp *http.Response) (*InfraPlacementgroupsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraPlacementgroupsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlacementGroupUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraPlacementgroupsUpdateResponse parses an HTTP response from a InfraPlacementgroupsUpdateWithResponse call
func ParseInfraPlacementgroupsUpdateResponse(rsp *http.Response) (*InfraPlacementgroupsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraPlacementgroupsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlacementGroupUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraPrivateIpsListResponse parses an HTTP response from a InfraPrivateIpsListWithResponse call
func ParseInfraPrivateIpsListResponse(rsp *http.Response) (*InfraPrivateIpsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraPrivateIpsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedPrivateIPList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraPrivateIpsCreateResponse parses an HTTP response from a InfraPrivateIpsCreateWithResponse call
func ParseInfraPrivateIpsCreateResponse(rsp *http.Response) (*InfraPrivateIpsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraPrivateIpsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PrivateIPCreate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseInfraPrivateIpsDestroyResponse parses an HTTP response from a InfraPrivateIpsDestroyWithResponse call
func ParseInfraPrivateIpsDestroyResponse(rsp *http.Response) (*InfraPrivateIpsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraPrivateIpsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraPrivateIpsRetrieveResponse parses an HTTP response from a InfraPrivateIpsRetrieveWithResponse call
func ParseInfraPrivateIpsRetrieveResponse(rsp *http.Response) (*InfraPrivateIpsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraPrivateIpsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrivateIP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraPrivateIpsPartialUpdateResponse parses an HTTP response from a InfraPrivateIpsPartialUpdateWithResponse call
func ParseInfraPrivateIpsPartialUpdateResponse(rsp *http.Response) (*InfraPrivateIpsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraPrivateIpsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrivateIPUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraPrivateIpsUpdateResponse parses an HTTP response from a InfraPrivateIpsUpdateWithResponse call
func ParseInfraPrivateIpsUpdateResponse(rsp *http.Response) (*InfraPrivateIpsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraPrivateIpsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrivateIPUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraRouteTablesListResponse parses an HTTP response from a InfraRouteTablesListWithResponse call
func ParseInfraRouteTablesListResponse(rsp *http.Response) (*InfraRouteTablesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraRouteTablesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedRouteTableList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraRouteTablesCreateResponse parses an HTTP response from a InfraRouteTablesCreateWithResponse call
func ParseInfraRouteTablesCreateResponse(rsp *http.Response) (*InfraRouteTablesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraRouteTablesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RouteTable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseInfraRouteTablesDestroyResponse parses an HTTP response from a InfraRouteTablesDestroyWithResponse call
func ParseInfraRouteTablesDestroyResponse(rsp *http.Response) (*InfraRouteTablesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraRouteTablesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraRouteTablesRetrieveResponse parses an HTTP response from a InfraRouteTablesRetrieveWithResponse call
func ParseInfraRouteTablesRetrieveResponse(rsp *http.Response) (*InfraRouteTablesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraRouteTablesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RouteTable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraRouteTablesPartialUpdateResponse parses an HTTP response from a InfraRouteTablesPartialUpdateWithResponse call
func ParseInfraRouteTablesPartialUpdateResponse(rsp *http.Response) (*InfraRouteTablesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraRouteTablesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RouteTableUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraRouteTablesUpdateResponse parses an HTTP response from a InfraRouteTablesUpdateWithResponse call
func ParseInfraRouteTablesUpdateResponse(rsp *http.Response) (*InfraRouteTablesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraRouteTablesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RouteTableUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraRouteTablesDisableInternetAccessUpdateResponse parses an HTTP response from a InfraRouteTablesDisableInternetAccessUpdateWithResponse call
func ParseInfraRouteTablesDisableInternetAccessUpdateResponse(rsp *http.Response) (*InfraRouteTablesDisableInternetAccessUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraRouteTablesDisableInternetAccessUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraRouteTablesEnableInternetAccessUpdateResponse parses an HTTP response from a InfraRouteTablesEnableInternetAccessUpdateWithResponse call
func ParseInfraRouteTablesEnableInternetAccessUpdateResponse(rsp *http.Response) (*InfraRouteTablesEnableInternetAccessUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraRouteTablesEnableInternetAccessUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraRouteTablesSubnetsRetrieveResponse parses an HTTP response from a InfraRouteTablesSubnetsRetrieveWithResponse call
func ParseInfraRouteTablesSubnetsRetrieveResponse(rsp *http.Response) (*InfraRouteTablesSubnetsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraRouteTablesSubnetsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedSubnetAssociateList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraSecurityGroupRulesListResponse parses an HTTP response from a InfraSecurityGroupRulesListWithResponse call
func ParseInfraSecurityGroupRulesListResponse(rsp *http.Response) (*InfraSecurityGroupRulesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraSecurityGroupRulesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedSecurityGroupRuleList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraSecurityGroupRulesCreateResponse parses an HTTP response from a InfraSecurityGroupRulesCreateWithResponse call
func ParseInfraSecurityGroupRulesCreateResponse(rsp *http.Response) (*InfraSecurityGroupRulesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraSecurityGroupRulesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SecurityGroupRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseInfraSecurityGroupRulesDestroyResponse parses an HTTP response from a InfraSecurityGroupRulesDestroyWithResponse call
func ParseInfraSecurityGroupRulesDestroyResponse(rsp *http.Response) (*InfraSecurityGroupRulesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraSecurityGroupRulesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraSecurityGroupRulesRetrieveResponse parses an HTTP response from a InfraSecurityGroupRulesRetrieveWithResponse call
func ParseInfraSecurityGroupRulesRetrieveResponse(rsp *http.Response) (*InfraSecurityGroupRulesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraSecurityGroupRulesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecurityGroupRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraSecurityGroupRulesPartialUpdateResponse parses an HTTP response from a InfraSecurityGroupRulesPartialUpdateWithResponse call
func ParseInfraSecurityGroupRulesPartialUpdateResponse(rsp *http.Response) (*InfraSecurityGroupRulesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraSecurityGroupRulesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecurityGroupRuleUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraSecurityGroupRulesUpdateResponse parses an HTTP response from a InfraSecurityGroupRulesUpdateWithResponse call
func ParseInfraSecurityGroupRulesUpdateResponse(rsp *http.Response) (*InfraSecurityGroupRulesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraSecurityGroupRulesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecurityGroupRuleUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraSecurityGroupsListResponse parses an HTTP response from a InfraSecurityGroupsListWithResponse call
func ParseInfraSecurityGroupsListResponse(rsp *http.Response) (*InfraSecurityGroupsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraSecurityGroupsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedSecurityGroupList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraSecurityGroupsCreateResponse parses an HTTP response from a InfraSecurityGroupsCreateWithResponse call
func ParseInfraSecurityGroupsCreateResponse(rsp *http.Response) (*InfraSecurityGroupsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraSecurityGroupsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SecurityGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseInfraSecurityGroupsDestroyResponse parses an HTTP response from a InfraSecurityGroupsDestroyWithResponse call
func ParseInfraSecurityGroupsDestroyResponse(rsp *http.Response) (*InfraSecurityGroupsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraSecurityGroupsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraSecurityGroupsRetrieveResponse parses an HTTP response from a InfraSecurityGroupsRetrieveWithResponse call
func ParseInfraSecurityGroupsRetrieveResponse(rsp *http.Response) (*InfraSecurityGroupsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraSecurityGroupsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecurityGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraSecurityGroupsPartialUpdateResponse parses an HTTP response from a InfraSecurityGroupsPartialUpdateWithResponse call
func ParseInfraSecurityGroupsPartialUpdateResponse(rsp *http.Response) (*InfraSecurityGroupsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraSecurityGroupsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecurityGroupUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraSecurityGroupsUpdateResponse parses an HTTP response from a InfraSecurityGroupsUpdateWithResponse call
func ParseInfraSecurityGroupsUpdateResponse(rsp *http.Response) (*InfraSecurityGroupsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraSecurityGroupsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecurityGroupUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraServersListResponse parses an HTTP response from a InfraServersListWithResponse call
func ParseInfraServersListResponse(rsp *http.Response) (*InfraServersListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraServersListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedServerListList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraServersCreateResponse parses an HTTP response from a InfraServersCreateWithResponse call
func ParseInfraServersCreateResponse(rsp *http.Response) (*InfraServersCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraServersCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Server
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseInfraServersMetricsSchemaRetrieveResponse parses an HTTP response from a InfraServersMetricsSchemaRetrieveWithResponse call
func ParseInfraServersMetricsSchemaRetrieveResponse(rsp *http.Response) (*InfraServersMetricsSchemaRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraServersMetricsSchemaRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Server
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraServersDestroyResponse parses an HTTP response from a InfraServersDestroyWithResponse call
func ParseInfraServersDestroyResponse(rsp *http.Response) (*InfraServersDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraServersDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraServersRetrieveResponse parses an HTTP response from a InfraServersRetrieveWithResponse call
func ParseInfraServersRetrieveResponse(rsp *http.Response) (*InfraServersRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraServersRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraServersPartialUpdateResponse parses an HTTP response from a InfraServersPartialUpdateWithResponse call
func ParseInfraServersPartialUpdateResponse(rsp *http.Response) (*InfraServersPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraServersPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraServersUpdateResponse parses an HTTP response from a InfraServersUpdateWithResponse call
func ParseInfraServersUpdateResponse(rsp *http.Response) (*InfraServersUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraServersUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Server
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraServersActionLogRetrieveResponse parses an HTTP response from a InfraServersActionLogRetrieveWithResponse call
func ParseInfraServersActionLogRetrieveResponse(rsp *http.Response) (*InfraServersActionLogRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraServersActionLogRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Password
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraServersAttachEipCreateResponse parses an HTTP response from a InfraServersAttachEipCreateWithResponse call
func ParseInfraServersAttachEipCreateResponse(rsp *http.Response) (*InfraServersAttachEipCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraServersAttachEipCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraServersAttachPrivateipCreateResponse parses an HTTP response from a InfraServersAttachPrivateipCreateWithResponse call
func ParseInfraServersAttachPrivateipCreateResponse(rsp *http.Response) (*InfraServersAttachPrivateipCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraServersAttachPrivateipCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraServersAttachSubnetCreateResponse parses an HTTP response from a InfraServersAttachSubnetCreateWithResponse call
func ParseInfraServersAttachSubnetCreateResponse(rsp *http.Response) (*InfraServersAttachSubnetCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraServersAttachSubnetCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraServersAttachVolumeCreateResponse parses an HTTP response from a InfraServersAttachVolumeCreateWithResponse call
func ParseInfraServersAttachVolumeCreateResponse(rsp *http.Response) (*InfraServersAttachVolumeCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraServersAttachVolumeCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerVolumeAttachment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraServersChangePasswordCreateResponse parses an HTTP response from a InfraServersChangePasswordCreateWithResponse call
func ParseInfraServersChangePasswordCreateResponse(rsp *http.Response) (*InfraServersChangePasswordCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraServersChangePasswordCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraServersConsoleLogRetrieveResponse parses an HTTP response from a InfraServersConsoleLogRetrieveWithResponse call
func ParseInfraServersConsoleLogRetrieveResponse(rsp *http.Response) (*InfraServersConsoleLogRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraServersConsoleLogRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Password
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraServersConsoleCreateResponse parses an HTTP response from a InfraServersConsoleCreateWithResponse call
func ParseInfraServersConsoleCreateResponse(rsp *http.Response) (*InfraServersConsoleCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraServersConsoleCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Password
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraServersDeleteCreateResponse parses an HTTP response from a InfraServersDeleteCreateWithResponse call
func ParseInfraServersDeleteCreateResponse(rsp *http.Response) (*InfraServersDeleteCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraServersDeleteCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraServersDetachEipCreateResponse parses an HTTP response from a InfraServersDetachEipCreateWithResponse call
func ParseInfraServersDetachEipCreateResponse(rsp *http.Response) (*InfraServersDetachEipCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraServersDetachEipCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraServersDetachPrivateIpCreateResponse parses an HTTP response from a InfraServersDetachPrivateIpCreateWithResponse call
func ParseInfraServersDetachPrivateIpCreateResponse(rsp *http.Response) (*InfraServersDetachPrivateIpCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraServersDetachPrivateIpCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraServersDetachVolumeCreateResponse parses an HTTP response from a InfraServersDetachVolumeCreateWithResponse call
func ParseInfraServersDetachVolumeCreateResponse(rsp *http.Response) (*InfraServersDetachVolumeCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraServersDetachVolumeCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraServersMetricsRetrieveResponse parses an HTTP response from a InfraServersMetricsRetrieveWithResponse call
func ParseInfraServersMetricsRetrieveResponse(rsp *http.Response) (*InfraServersMetricsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraServersMetricsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Server
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraServersResizeCreateResponse parses an HTTP response from a InfraServersResizeCreateWithResponse call
func ParseInfraServersResizeCreateResponse(rsp *http.Response) (*InfraServersResizeCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraServersResizeCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraServersStartCreateResponse parses an HTTP response from a InfraServersStartCreateWithResponse call
func ParseInfraServersStartCreateResponse(rsp *http.Response) (*InfraServersStartCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraServersStartCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraServersStopCreateResponse parses an HTTP response from a InfraServersStopCreateWithResponse call
func ParseInfraServersStopCreateResponse(rsp *http.Response) (*InfraServersStopCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraServersStopCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraSnapshotpolicyListResponse parses an HTTP response from a InfraSnapshotpolicyListWithResponse call
func ParseInfraSnapshotpolicyListResponse(rsp *http.Response) (*InfraSnapshotpolicyListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraSnapshotpolicyListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedSnapshotPolicyList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraSnapshotpolicyCreateResponse parses an HTTP response from a InfraSnapshotpolicyCreateWithResponse call
func ParseInfraSnapshotpolicyCreateResponse(rsp *http.Response) (*InfraSnapshotpolicyCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraSnapshotpolicyCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SnapshotPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseInfraSnapshotpolicyDestroyResponse parses an HTTP response from a InfraSnapshotpolicyDestroyWithResponse call
func ParseInfraSnapshotpolicyDestroyResponse(rsp *http.Response) (*InfraSnapshotpolicyDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraSnapshotpolicyDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraSnapshotpolicyRetrieveResponse parses an HTTP response from a InfraSnapshotpolicyRetrieveWithResponse call
func ParseInfraSnapshotpolicyRetrieveResponse(rsp *http.Response) (*InfraSnapshotpolicyRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraSnapshotpolicyRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SnapshotPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraSnapshotpolicyPartialUpdateResponse parses an HTTP response from a InfraSnapshotpolicyPartialUpdateWithResponse call
func ParseInfraSnapshotpolicyPartialUpdateResponse(rsp *http.Response) (*InfraSnapshotpolicyPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraSnapshotpolicyPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SnapshotPolicyUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraSnapshotpolicyUpdateResponse parses an HTTP response from a InfraSnapshotpolicyUpdateWithResponse call
func ParseInfraSnapshotpolicyUpdateResponse(rsp *http.Response) (*InfraSnapshotpolicyUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraSnapshotpolicyUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SnapshotPolicyUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraSnapshotsListResponse parses an HTTP response from a InfraSnapshotsListWithResponse call
func ParseInfraSnapshotsListResponse(rsp *http.Response) (*InfraSnapshotsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraSnapshotsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedSnapshotList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraSnapshotsCreateResponse parses an HTTP response from a InfraSnapshotsCreateWithResponse call
func ParseInfraSnapshotsCreateResponse(rsp *http.Response) (*InfraSnapshotsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraSnapshotsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Snapshot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseInfraSnapshotsDestroyResponse parses an HTTP response from a InfraSnapshotsDestroyWithResponse call
func ParseInfraSnapshotsDestroyResponse(rsp *http.Response) (*InfraSnapshotsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraSnapshotsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraSnapshotsRetrieveResponse parses an HTTP response from a InfraSnapshotsRetrieveWithResponse call
func ParseInfraSnapshotsRetrieveResponse(rsp *http.Response) (*InfraSnapshotsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraSnapshotsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Snapshot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraSnapshotsPartialUpdateResponse parses an HTTP response from a InfraSnapshotsPartialUpdateWithResponse call
func ParseInfraSnapshotsPartialUpdateResponse(rsp *http.Response) (*InfraSnapshotsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraSnapshotsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SnapshotUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraSnapshotsUpdateResponse parses an HTTP response from a InfraSnapshotsUpdateWithResponse call
func ParseInfraSnapshotsUpdateResponse(rsp *http.Response) (*InfraSnapshotsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraSnapshotsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SnapshotUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraSubnetsListResponse parses an HTTP response from a InfraSubnetsListWithResponse call
func ParseInfraSubnetsListResponse(rsp *http.Response) (*InfraSubnetsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraSubnetsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedSubnetList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraSubnetsCreateResponse parses an HTTP response from a InfraSubnetsCreateWithResponse call
func ParseInfraSubnetsCreateResponse(rsp *http.Response) (*InfraSubnetsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraSubnetsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SubnetCreate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseInfraSubnetsDestroyResponse parses an HTTP response from a InfraSubnetsDestroyWithResponse call
func ParseInfraSubnetsDestroyResponse(rsp *http.Response) (*InfraSubnetsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraSubnetsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraSubnetsRetrieveResponse parses an HTTP response from a InfraSubnetsRetrieveWithResponse call
func ParseInfraSubnetsRetrieveResponse(rsp *http.Response) (*InfraSubnetsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraSubnetsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Subnet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraSubnetsPartialUpdateResponse parses an HTTP response from a InfraSubnetsPartialUpdateWithResponse call
func ParseInfraSubnetsPartialUpdateResponse(rsp *http.Response) (*InfraSubnetsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraSubnetsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubnetUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraSubnetsUpdateResponse parses an HTTP response from a InfraSubnetsUpdateWithResponse call
func ParseInfraSubnetsUpdateResponse(rsp *http.Response) (*InfraSubnetsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraSubnetsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubnetUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraVolumeBackupPoliciesListResponse parses an HTTP response from a InfraVolumeBackupPoliciesListWithResponse call
func ParseInfraVolumeBackupPoliciesListResponse(rsp *http.Response) (*InfraVolumeBackupPoliciesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraVolumeBackupPoliciesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedVolumeBackupPolicyList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraVolumeBackupPoliciesCreateResponse parses an HTTP response from a InfraVolumeBackupPoliciesCreateWithResponse call
func ParseInfraVolumeBackupPoliciesCreateResponse(rsp *http.Response) (*InfraVolumeBackupPoliciesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraVolumeBackupPoliciesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest VolumeBackupPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseInfraVolumeBackupPoliciesDestroyResponse parses an HTTP response from a InfraVolumeBackupPoliciesDestroyWithResponse call
func ParseInfraVolumeBackupPoliciesDestroyResponse(rsp *http.Response) (*InfraVolumeBackupPoliciesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraVolumeBackupPoliciesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraVolumeBackupPoliciesRetrieveResponse parses an HTTP response from a InfraVolumeBackupPoliciesRetrieveWithResponse call
func ParseInfraVolumeBackupPoliciesRetrieveResponse(rsp *http.Response) (*InfraVolumeBackupPoliciesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraVolumeBackupPoliciesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VolumeBackupPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraVolumeBackupPoliciesPartialUpdateResponse parses an HTTP response from a InfraVolumeBackupPoliciesPartialUpdateWithResponse call
func ParseInfraVolumeBackupPoliciesPartialUpdateResponse(rsp *http.Response) (*InfraVolumeBackupPoliciesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraVolumeBackupPoliciesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VolumeBackupPolicyUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraVolumeBackupPoliciesUpdateResponse parses an HTTP response from a InfraVolumeBackupPoliciesUpdateWithResponse call
func ParseInfraVolumeBackupPoliciesUpdateResponse(rsp *http.Response) (*InfraVolumeBackupPoliciesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraVolumeBackupPoliciesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VolumeBackupPolicyUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraVolumeBackupsListResponse parses an HTTP response from a InfraVolumeBackupsListWithResponse call
func ParseInfraVolumeBackupsListResponse(rsp *http.Response) (*InfraVolumeBackupsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraVolumeBackupsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedVolumeBackupList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraVolumeBackupsCreateResponse parses an HTTP response from a InfraVolumeBackupsCreateWithResponse call
func ParseInfraVolumeBackupsCreateResponse(rsp *http.Response) (*InfraVolumeBackupsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraVolumeBackupsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest VolumeBackup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseInfraVolumeBackupsDestroyResponse parses an HTTP response from a InfraVolumeBackupsDestroyWithResponse call
func ParseInfraVolumeBackupsDestroyResponse(rsp *http.Response) (*InfraVolumeBackupsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraVolumeBackupsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraVolumeBackupsRetrieveResponse parses an HTTP response from a InfraVolumeBackupsRetrieveWithResponse call
func ParseInfraVolumeBackupsRetrieveResponse(rsp *http.Response) (*InfraVolumeBackupsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraVolumeBackupsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VolumeBackup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraVolumeBackupsPartialUpdateResponse parses an HTTP response from a InfraVolumeBackupsPartialUpdateWithResponse call
func ParseInfraVolumeBackupsPartialUpdateResponse(rsp *http.Response) (*InfraVolumeBackupsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraVolumeBackupsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VolumeBackupUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraVolumeBackupsUpdateResponse parses an HTTP response from a InfraVolumeBackupsUpdateWithResponse call
func ParseInfraVolumeBackupsUpdateResponse(rsp *http.Response) (*InfraVolumeBackupsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraVolumeBackupsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VolumeBackupUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraVolumeBackupsRestoreCreateResponse parses an HTTP response from a InfraVolumeBackupsRestoreCreateWithResponse call
func ParseInfraVolumeBackupsRestoreCreateResponse(rsp *http.Response) (*InfraVolumeBackupsRestoreCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraVolumeBackupsRestoreCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraVolumeTypeListResponse parses an HTTP response from a InfraVolumeTypeListWithResponse call
func ParseInfraVolumeTypeListResponse(rsp *http.Response) (*InfraVolumeTypeListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraVolumeTypeListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedVolumeTypeList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraVolumeTypeCreateResponse parses an HTTP response from a InfraVolumeTypeCreateWithResponse call
func ParseInfraVolumeTypeCreateResponse(rsp *http.Response) (*InfraVolumeTypeCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraVolumeTypeCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest VolumeType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseInfraVolumeTypeDestroyResponse parses an HTTP response from a InfraVolumeTypeDestroyWithResponse call
func ParseInfraVolumeTypeDestroyResponse(rsp *http.Response) (*InfraVolumeTypeDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraVolumeTypeDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraVolumeTypeRetrieveResponse parses an HTTP response from a InfraVolumeTypeRetrieveWithResponse call
func ParseInfraVolumeTypeRetrieveResponse(rsp *http.Response) (*InfraVolumeTypeRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraVolumeTypeRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VolumeType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraVolumeTypePartialUpdateResponse parses an HTTP response from a InfraVolumeTypePartialUpdateWithResponse call
func ParseInfraVolumeTypePartialUpdateResponse(rsp *http.Response) (*InfraVolumeTypePartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraVolumeTypePartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VolumeTypeUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraVolumeTypeUpdateResponse parses an HTTP response from a InfraVolumeTypeUpdateWithResponse call
func ParseInfraVolumeTypeUpdateResponse(rsp *http.Response) (*InfraVolumeTypeUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraVolumeTypeUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VolumeTypeUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraVolumesListResponse parses an HTTP response from a InfraVolumesListWithResponse call
func ParseInfraVolumesListResponse(rsp *http.Response) (*InfraVolumesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraVolumesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedVolumeList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraVolumesCreateResponse parses an HTTP response from a InfraVolumesCreateWithResponse call
func ParseInfraVolumesCreateResponse(rsp *http.Response) (*InfraVolumesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraVolumesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Volume
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseInfraVolumesDestroyResponse parses an HTTP response from a InfraVolumesDestroyWithResponse call
func ParseInfraVolumesDestroyResponse(rsp *http.Response) (*InfraVolumesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraVolumesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraVolumesRetrieveResponse parses an HTTP response from a InfraVolumesRetrieveWithResponse call
func ParseInfraVolumesRetrieveResponse(rsp *http.Response) (*InfraVolumesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraVolumesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Volume
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraVolumesPartialUpdateResponse parses an HTTP response from a InfraVolumesPartialUpdateWithResponse call
func ParseInfraVolumesPartialUpdateResponse(rsp *http.Response) (*InfraVolumesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraVolumesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VolumeUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraVolumesUpdateResponse parses an HTTP response from a InfraVolumesUpdateWithResponse call
func ParseInfraVolumesUpdateResponse(rsp *http.Response) (*InfraVolumesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraVolumesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VolumeUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraVolumesApplyBackupPolicyCreateResponse parses an HTTP response from a InfraVolumesApplyBackupPolicyCreateWithResponse call
func ParseInfraVolumesApplyBackupPolicyCreateResponse(rsp *http.Response) (*InfraVolumesApplyBackupPolicyCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraVolumesApplyBackupPolicyCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraVolumesApplySnapshotPolicyCreateResponse parses an HTTP response from a InfraVolumesApplySnapshotPolicyCreateWithResponse call
func ParseInfraVolumesApplySnapshotPolicyCreateResponse(rsp *http.Response) (*InfraVolumesApplySnapshotPolicyCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraVolumesApplySnapshotPolicyCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraVolumesExtendCreateResponse parses an HTTP response from a InfraVolumesExtendCreateWithResponse call
func ParseInfraVolumesExtendCreateResponse(rsp *http.Response) (*InfraVolumesExtendCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraVolumesExtendCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Volume
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraVolumesUnapplyBackupPolicyCreateResponse parses an HTTP response from a InfraVolumesUnapplyBackupPolicyCreateWithResponse call
func ParseInfraVolumesUnapplyBackupPolicyCreateResponse(rsp *http.Response) (*InfraVolumesUnapplyBackupPolicyCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraVolumesUnapplyBackupPolicyCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraVolumesUnapplySnapshotPolicyCreateResponse parses an HTTP response from a InfraVolumesUnapplySnapshotPolicyCreateWithResponse call
func ParseInfraVolumesUnapplySnapshotPolicyCreateResponse(rsp *http.Response) (*InfraVolumesUnapplySnapshotPolicyCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraVolumesUnapplySnapshotPolicyCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraVpcsListResponse parses an HTTP response from a InfraVpcsListWithResponse call
func ParseInfraVpcsListResponse(rsp *http.Response) (*InfraVpcsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraVpcsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedVPCList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraVpcsCreateResponse parses an HTTP response from a InfraVpcsCreateWithResponse call
func ParseInfraVpcsCreateResponse(rsp *http.Response) (*InfraVpcsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraVpcsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest VPC
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseInfraVpcsDestroyResponse parses an HTTP response from a InfraVpcsDestroyWithResponse call
func ParseInfraVpcsDestroyResponse(rsp *http.Response) (*InfraVpcsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraVpcsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInfraVpcsRetrieveResponse parses an HTTP response from a InfraVpcsRetrieveWithResponse call
func ParseInfraVpcsRetrieveResponse(rsp *http.Response) (*InfraVpcsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraVpcsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPC
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraVpcsPartialUpdateResponse parses an HTTP response from a InfraVpcsPartialUpdateWithResponse call
func ParseInfraVpcsPartialUpdateResponse(rsp *http.Response) (*InfraVpcsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraVpcsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPCUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInfraVpcsUpdateResponse parses an HTTP response from a InfraVpcsUpdateWithResponse call
func ParseInfraVpcsUpdateResponse(rsp *http.Response) (*InfraVpcsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfraVpcsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPCUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProjectUserAcceptResponse parses an HTTP response from a ProjectUserAcceptWithResponse call
func ParseProjectUserAcceptResponse(rsp *http.Response) (*ProjectUserAcceptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProjectUserAcceptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectAcceptResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProjectUserInviteResponse parses an HTTP response from a ProjectUserInviteWithResponse call
func ParseProjectUserInviteResponse(rsp *http.Response) (*ProjectUserInviteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProjectUserInviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseKaasBackupPlansListResponse parses an HTTP response from a KaasBackupPlansListWithResponse call
func ParseKaasBackupPlansListResponse(rsp *http.Response) (*KaasBackupPlansListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasBackupPlansListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedBackupPlanDetailList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseKaasBackupPlansCreateResponse parses an HTTP response from a KaasBackupPlansCreateWithResponse call
func ParseKaasBackupPlansCreateResponse(rsp *http.Response) (*KaasBackupPlansCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasBackupPlansCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BackupPlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseKaasBackupPlansDestroyResponse parses an HTTP response from a KaasBackupPlansDestroyWithResponse call
func ParseKaasBackupPlansDestroyResponse(rsp *http.Response) (*KaasBackupPlansDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasBackupPlansDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseKaasBackupPlansRetrieveResponse parses an HTTP response from a KaasBackupPlansRetrieveWithResponse call
func ParseKaasBackupPlansRetrieveResponse(rsp *http.Response) (*KaasBackupPlansRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasBackupPlansRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BackupPlanDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseKaasBackupPlansPartialUpdateResponse parses an HTTP response from a KaasBackupPlansPartialUpdateWithResponse call
func ParseKaasBackupPlansPartialUpdateResponse(rsp *http.Response) (*KaasBackupPlansPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasBackupPlansPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BackupPlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseKaasBackupPlansUpdateResponse parses an HTTP response from a KaasBackupPlansUpdateWithResponse call
func ParseKaasBackupPlansUpdateResponse(rsp *http.Response) (*KaasBackupPlansUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasBackupPlansUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BackupPlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseKaasBackupsListResponse parses an HTTP response from a KaasBackupsListWithResponse call
func ParseKaasBackupsListResponse(rsp *http.Response) (*KaasBackupsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasBackupsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedBackupDetailList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseKaasBackupsCreateResponse parses an HTTP response from a KaasBackupsCreateWithResponse call
func ParseKaasBackupsCreateResponse(rsp *http.Response) (*KaasBackupsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasBackupsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Backup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseKaasBackupsDestroyResponse parses an HTTP response from a KaasBackupsDestroyWithResponse call
func ParseKaasBackupsDestroyResponse(rsp *http.Response) (*KaasBackupsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasBackupsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseKaasBackupsRetrieveResponse parses an HTTP response from a KaasBackupsRetrieveWithResponse call
func ParseKaasBackupsRetrieveResponse(rsp *http.Response) (*KaasBackupsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasBackupsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BackupDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseKaasBackupsPartialUpdateResponse parses an HTTP response from a KaasBackupsPartialUpdateWithResponse call
func ParseKaasBackupsPartialUpdateResponse(rsp *http.Response) (*KaasBackupsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasBackupsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Backup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseKaasBackupsUpdateResponse parses an HTTP response from a KaasBackupsUpdateWithResponse call
func ParseKaasBackupsUpdateResponse(rsp *http.Response) (*KaasBackupsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasBackupsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Backup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseKaasCniVersionsListResponse parses an HTTP response from a KaasCniVersionsListWithResponse call
func ParseKaasCniVersionsListResponse(rsp *http.Response) (*KaasCniVersionsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasCniVersionsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedCNIVersionList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseKaasCniVersionsRetrieveResponse parses an HTTP response from a KaasCniVersionsRetrieveWithResponse call
func ParseKaasCniVersionsRetrieveResponse(rsp *http.Response) (*KaasCniVersionsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasCniVersionsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CNIVersion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseKaasCsiVersionsListResponse parses an HTTP response from a KaasCsiVersionsListWithResponse call
func ParseKaasCsiVersionsListResponse(rsp *http.Response) (*KaasCsiVersionsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasCsiVersionsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedCSIVersionList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseKaasCsiVersionsRetrieveResponse parses an HTTP response from a KaasCsiVersionsRetrieveWithResponse call
func ParseKaasCsiVersionsRetrieveResponse(rsp *http.Response) (*KaasCsiVersionsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasCsiVersionsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CSIVersion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseKaasDashboardVersionsListResponse parses an HTTP response from a KaasDashboardVersionsListWithResponse call
func ParseKaasDashboardVersionsListResponse(rsp *http.Response) (*KaasDashboardVersionsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasDashboardVersionsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDashboardVersionList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseKaasDashboardVersionsRetrieveResponse parses an HTTP response from a KaasDashboardVersionsRetrieveWithResponse call
func ParseKaasDashboardVersionsRetrieveResponse(rsp *http.Response) (*KaasDashboardVersionsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasDashboardVersionsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DashboardVersion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseKaasK8sVersionsListResponse parses an HTTP response from a KaasK8sVersionsListWithResponse call
func ParseKaasK8sVersionsListResponse(rsp *http.Response) (*KaasK8sVersionsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasK8sVersionsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedK8SVersionList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseKaasK8sVersionsRetrieveResponse parses an HTTP response from a KaasK8sVersionsRetrieveWithResponse call
func ParseKaasK8sVersionsRetrieveResponse(rsp *http.Response) (*KaasK8sVersionsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasK8sVersionsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest K8SVersion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseKaasRestoresListResponse parses an HTTP response from a KaasRestoresListWithResponse call
func ParseKaasRestoresListResponse(rsp *http.Response) (*KaasRestoresListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasRestoresListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedRestoreDetailList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseKaasRestoresCreateResponse parses an HTTP response from a KaasRestoresCreateWithResponse call
func ParseKaasRestoresCreateResponse(rsp *http.Response) (*KaasRestoresCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasRestoresCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Restore
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseKaasRestoresDestroyResponse parses an HTTP response from a KaasRestoresDestroyWithResponse call
func ParseKaasRestoresDestroyResponse(rsp *http.Response) (*KaasRestoresDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasRestoresDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseKaasRestoresRetrieveResponse parses an HTTP response from a KaasRestoresRetrieveWithResponse call
func ParseKaasRestoresRetrieveResponse(rsp *http.Response) (*KaasRestoresRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasRestoresRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RestoreDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseKaasRestoresPartialUpdateResponse parses an HTTP response from a KaasRestoresPartialUpdateWithResponse call
func ParseKaasRestoresPartialUpdateResponse(rsp *http.Response) (*KaasRestoresPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasRestoresPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Restore
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseKaasRestoresUpdateResponse parses an HTTP response from a KaasRestoresUpdateWithResponse call
func ParseKaasRestoresUpdateResponse(rsp *http.Response) (*KaasRestoresUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasRestoresUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Restore
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseKaasVkeClustersListResponse parses an HTTP response from a KaasVkeClustersListWithResponse call
func ParseKaasVkeClustersListResponse(rsp *http.Response) (*KaasVkeClustersListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasVkeClustersListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedVKEClusterDetailList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseKaasVkeClustersCreateResponse parses an HTTP response from a KaasVkeClustersCreateWithResponse call
func ParseKaasVkeClustersCreateResponse(rsp *http.Response) (*KaasVkeClustersCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasVkeClustersCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest VKECluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseKaasVkeClustersDestroyResponse parses an HTTP response from a KaasVkeClustersDestroyWithResponse call
func ParseKaasVkeClustersDestroyResponse(rsp *http.Response) (*KaasVkeClustersDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasVkeClustersDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseKaasVkeClustersRetrieveResponse parses an HTTP response from a KaasVkeClustersRetrieveWithResponse call
func ParseKaasVkeClustersRetrieveResponse(rsp *http.Response) (*KaasVkeClustersRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasVkeClustersRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VKEClusterDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseKaasVkeClustersPartialUpdateResponse parses an HTTP response from a KaasVkeClustersPartialUpdateWithResponse call
func ParseKaasVkeClustersPartialUpdateResponse(rsp *http.Response) (*KaasVkeClustersPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasVkeClustersPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VKEClusterUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseKaasVkeClustersUpdateResponse parses an HTTP response from a KaasVkeClustersUpdateWithResponse call
func ParseKaasVkeClustersUpdateResponse(rsp *http.Response) (*KaasVkeClustersUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasVkeClustersUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VKEClusterUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseKaasVkeKubeconfigsRetrieveResponse parses an HTTP response from a KaasVkeKubeconfigsRetrieveWithResponse call
func ParseKaasVkeKubeconfigsRetrieveResponse(rsp *http.Response) (*KaasVkeKubeconfigsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasVkeKubeconfigsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VKEKubeConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseKaasVkeKubedashboardsRetrieveResponse parses an HTTP response from a KaasVkeKubedashboardsRetrieveWithResponse call
func ParseKaasVkeKubedashboardsRetrieveResponse(rsp *http.Response) (*KaasVkeKubedashboardsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasVkeKubedashboardsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VKEDashboardEndpoint
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseKaasVkeMachinesListResponse parses an HTTP response from a KaasVkeMachinesListWithResponse call
func ParseKaasVkeMachinesListResponse(rsp *http.Response) (*KaasVkeMachinesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasVkeMachinesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedVKEMachineList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseKaasVkeNodePoolsListResponse parses an HTTP response from a KaasVkeNodePoolsListWithResponse call
func ParseKaasVkeNodePoolsListResponse(rsp *http.Response) (*KaasVkeNodePoolsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasVkeNodePoolsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedVKENodePoolDetailList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseKaasVkeNodePoolsCreateResponse parses an HTTP response from a KaasVkeNodePoolsCreateWithResponse call
func ParseKaasVkeNodePoolsCreateResponse(rsp *http.Response) (*KaasVkeNodePoolsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasVkeNodePoolsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest VKENodePool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseKaasVkeNodePoolsDestroyResponse parses an HTTP response from a KaasVkeNodePoolsDestroyWithResponse call
func ParseKaasVkeNodePoolsDestroyResponse(rsp *http.Response) (*KaasVkeNodePoolsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasVkeNodePoolsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseKaasVkeNodePoolsRetrieveResponse parses an HTTP response from a KaasVkeNodePoolsRetrieveWithResponse call
func ParseKaasVkeNodePoolsRetrieveResponse(rsp *http.Response) (*KaasVkeNodePoolsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasVkeNodePoolsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VKENodePoolDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseKaasVkeNodePoolsPartialUpdateResponse parses an HTTP response from a KaasVkeNodePoolsPartialUpdateWithResponse call
func ParseKaasVkeNodePoolsPartialUpdateResponse(rsp *http.Response) (*KaasVkeNodePoolsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasVkeNodePoolsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VkeNodePoolUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseKaasVkeNodePoolsUpdateResponse parses an HTTP response from a KaasVkeNodePoolsUpdateWithResponse call
func ParseKaasVkeNodePoolsUpdateResponse(rsp *http.Response) (*KaasVkeNodePoolsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasVkeNodePoolsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VkeNodePoolUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseKaasVkeWebcliRetrieveResponse parses an HTTP response from a KaasVkeWebcliRetrieveWithResponse call
func ParseKaasVkeWebcliRetrieveResponse(rsp *http.Response) (*KaasVkeWebcliRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KaasVkeWebcliRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VKEWebCliEndpoint
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMarketplaceCategoriesListResponse parses an HTTP response from a MarketplaceCategoriesListWithResponse call
func ParseMarketplaceCategoriesListResponse(rsp *http.Response) (*MarketplaceCategoriesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarketplaceCategoriesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedCategoryList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMarketplaceCategoriesCreateResponse parses an HTTP response from a MarketplaceCategoriesCreateWithResponse call
func ParseMarketplaceCategoriesCreateResponse(rsp *http.Response) (*MarketplaceCategoriesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarketplaceCategoriesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Category
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseMarketplaceCategoriesRetrieveResponse parses an HTTP response from a MarketplaceCategoriesRetrieveWithResponse call
func ParseMarketplaceCategoriesRetrieveResponse(rsp *http.Response) (*MarketplaceCategoriesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarketplaceCategoriesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Category
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMarketplaceCategoriesPartialUpdateResponse parses an HTTP response from a MarketplaceCategoriesPartialUpdateWithResponse call
func ParseMarketplaceCategoriesPartialUpdateResponse(rsp *http.Response) (*MarketplaceCategoriesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarketplaceCategoriesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Category
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMarketplacePricingPlansListResponse parses an HTTP response from a MarketplacePricingPlansListWithResponse call
func ParseMarketplacePricingPlansListResponse(rsp *http.Response) (*MarketplacePricingPlansListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarketplacePricingPlansListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedPricingPlanList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMarketplacePricingPlansCreateResponse parses an HTTP response from a MarketplacePricingPlansCreateWithResponse call
func ParseMarketplacePricingPlansCreateResponse(rsp *http.Response) (*MarketplacePricingPlansCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarketplacePricingPlansCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PricingPlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseMarketplacePricingPlansRetrieveResponse parses an HTTP response from a MarketplacePricingPlansRetrieveWithResponse call
func ParseMarketplacePricingPlansRetrieveResponse(rsp *http.Response) (*MarketplacePricingPlansRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarketplacePricingPlansRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PricingPlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMarketplacePricingPlansPartialUpdateResponse parses an HTTP response from a MarketplacePricingPlansPartialUpdateWithResponse call
func ParseMarketplacePricingPlansPartialUpdateResponse(rsp *http.Response) (*MarketplacePricingPlansPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarketplacePricingPlansPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PricingPlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMarketplaceProductsListResponse parses an HTTP response from a MarketplaceProductsListWithResponse call
func ParseMarketplaceProductsListResponse(rsp *http.Response) (*MarketplaceProductsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarketplaceProductsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedProductList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMarketplaceProductsCreateResponse parses an HTTP response from a MarketplaceProductsCreateWithResponse call
func ParseMarketplaceProductsCreateResponse(rsp *http.Response) (*MarketplaceProductsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarketplaceProductsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Product
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseMarketplaceProductsRetrieveResponse parses an HTTP response from a MarketplaceProductsRetrieveWithResponse call
func ParseMarketplaceProductsRetrieveResponse(rsp *http.Response) (*MarketplaceProductsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarketplaceProductsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMarketplaceProductsPartialUpdateResponse parses an HTTP response from a MarketplaceProductsPartialUpdateWithResponse call
func ParseMarketplaceProductsPartialUpdateResponse(rsp *http.Response) (*MarketplaceProductsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarketplaceProductsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Product
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMarketplaceSubscriptionsListResponse parses an HTTP response from a MarketplaceSubscriptionsListWithResponse call
func ParseMarketplaceSubscriptionsListResponse(rsp *http.Response) (*MarketplaceSubscriptionsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarketplaceSubscriptionsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedSubscriptionList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMarketplaceSubscriptionsCreateResponse parses an HTTP response from a MarketplaceSubscriptionsCreateWithResponse call
func ParseMarketplaceSubscriptionsCreateResponse(rsp *http.Response) (*MarketplaceSubscriptionsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarketplaceSubscriptionsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SubscriptionCreate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseMarketplaceSubscriptionsDestroyResponse parses an HTTP response from a MarketplaceSubscriptionsDestroyWithResponse call
func ParseMarketplaceSubscriptionsDestroyResponse(rsp *http.Response) (*MarketplaceSubscriptionsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarketplaceSubscriptionsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseMarketplaceSubscriptionsRetrieveResponse parses an HTTP response from a MarketplaceSubscriptionsRetrieveWithResponse call
func ParseMarketplaceSubscriptionsRetrieveResponse(rsp *http.Response) (*MarketplaceSubscriptionsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarketplaceSubscriptionsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Subscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMarketplaceVendorsListResponse parses an HTTP response from a MarketplaceVendorsListWithResponse call
func ParseMarketplaceVendorsListResponse(rsp *http.Response) (*MarketplaceVendorsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarketplaceVendorsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedVendorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMarketplaceVendorsCreateResponse parses an HTTP response from a MarketplaceVendorsCreateWithResponse call
func ParseMarketplaceVendorsCreateResponse(rsp *http.Response) (*MarketplaceVendorsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarketplaceVendorsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Vendor
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseMarketplaceVendorsRetrieveResponse parses an HTTP response from a MarketplaceVendorsRetrieveWithResponse call
func ParseMarketplaceVendorsRetrieveResponse(rsp *http.Response) (*MarketplaceVendorsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarketplaceVendorsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Vendor
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMarketplaceVendorsPartialUpdateResponse parses an HTTP response from a MarketplaceVendorsPartialUpdateWithResponse call
func ParseMarketplaceVendorsPartialUpdateResponse(rsp *http.Response) (*MarketplaceVendorsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarketplaceVendorsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Vendor
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseObjectStorageActivateServiceCreateResponse parses an HTTP response from a ObjectStorageActivateServiceCreateWithResponse call
func ParseObjectStorageActivateServiceCreateResponse(rsp *http.Response) (*ObjectStorageActivateServiceCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ObjectStorageActivateServiceCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseObjectStorageBucketsListResponse parses an HTTP response from a ObjectStorageBucketsListWithResponse call
func ParseObjectStorageBucketsListResponse(rsp *http.Response) (*ObjectStorageBucketsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ObjectStorageBucketsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedBucketList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseObjectStorageBucketsCreateResponse parses an HTTP response from a ObjectStorageBucketsCreateWithResponse call
func ParseObjectStorageBucketsCreateResponse(rsp *http.Response) (*ObjectStorageBucketsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ObjectStorageBucketsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Bucket
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBucketAclShowResponse parses an HTTP response from a BucketAclShowWithResponse call
func ParseBucketAclShowResponse(rsp *http.Response) (*BucketAclShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BucketAclShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BucketACL
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBucketAclPatchResponse parses an HTTP response from a BucketAclPatchWithResponse call
func ParseBucketAclPatchResponse(rsp *http.Response) (*BucketAclPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BucketAclPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseBucketCorsDeleteResponse parses an HTTP response from a BucketCorsDeleteWithResponse call
func ParseBucketCorsDeleteResponse(rsp *http.Response) (*BucketCorsDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BucketCorsDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseBucketCorsShowResponse parses an HTTP response from a BucketCorsShowWithResponse call
func ParseBucketCorsShowResponse(rsp *http.Response) (*BucketCorsShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BucketCorsShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BucketCORS
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBucketCorsEditResponse parses an HTTP response from a BucketCorsEditWithResponse call
func ParseBucketCorsEditResponse(rsp *http.Response) (*BucketCorsEditResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BucketCorsEditResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BucketCORS
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBucketLifecycleDeleteResponse parses an HTTP response from a BucketLifecycleDeleteWithResponse call
func ParseBucketLifecycleDeleteResponse(rsp *http.Response) (*BucketLifecycleDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BucketLifecycleDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseBucketLifecycleListResponse parses an HTTP response from a BucketLifecycleListWithResponse call
func ParseBucketLifecycleListResponse(rsp *http.Response) (*BucketLifecycleListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BucketLifecycleListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Lifecycle
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBucketLifecyclePutResponse parses an HTTP response from a BucketLifecyclePutWithResponse call
func ParseBucketLifecyclePutResponse(rsp *http.Response) (*BucketLifecyclePutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BucketLifecyclePutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Lifecycle
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBucketObjectListResponse parses an HTTP response from a BucketObjectListWithResponse call
func ParseBucketObjectListResponse(rsp *http.Response) (*BucketObjectListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BucketObjectListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateFolderGetAwsTokenUploadFileResponse parses an HTTP response from a CreateFolderGetAwsTokenUploadFileWithResponse call
func ParseCreateFolderGetAwsTokenUploadFileResponse(rsp *http.Response) (*CreateFolderGetAwsTokenUploadFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFolderGetAwsTokenUploadFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ObjectPostResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetObjectAclResponse parses an HTTP response from a GetObjectAclWithResponse call
func ParseGetObjectAclResponse(rsp *http.Response) (*GetObjectAclResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObjectAclResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ObjectAcl
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchObjectAclResponse parses an HTTP response from a PatchObjectAclWithResponse call
func ParsePatchObjectAclResponse(rsp *http.Response) (*PatchObjectAclResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchObjectAclResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ObjectAcl
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseObjectBatchDeleteResponse parses an HTTP response from a ObjectBatchDeleteWithResponse call
func ParseObjectBatchDeleteResponse(rsp *http.Response) (*ObjectBatchDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ObjectBatchDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteObjectResponse parses an HTTP response from a DeleteObjectWithResponse call
func ParseDeleteObjectResponse(rsp *http.Response) (*DeleteObjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteObjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseObjectDetailsResponse parses an HTTP response from a ObjectDetailsWithResponse call
func ParseObjectDetailsResponse(rsp *http.Response) (*ObjectDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ObjectDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ObjectDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetObjectShareUrlResponse parses an HTTP response from a GetObjectShareUrlWithResponse call
func ParseGetObjectShareUrlResponse(rsp *http.Response) (*GetObjectShareUrlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObjectShareUrlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ObjectPublicUrl
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAllObjectTagsResponse parses an HTTP response from a DeleteAllObjectTagsWithResponse call
func ParseDeleteAllObjectTagsResponse(rsp *http.Response) (*DeleteAllObjectTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAllObjectTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetObjectTagsResponse parses an HTTP response from a GetObjectTagsWithResponse call
func ParseGetObjectTagsResponse(rsp *http.Response) (*GetObjectTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObjectTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutObjectTagsResponse parses an HTTP response from a PutObjectTagsWithResponse call
func ParsePutObjectTagsResponse(rsp *http.Response) (*PutObjectTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutObjectTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBucketPolicyDeleteResponse parses an HTTP response from a BucketPolicyDeleteWithResponse call
func ParseBucketPolicyDeleteResponse(rsp *http.Response) (*BucketPolicyDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BucketPolicyDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseBucketPolicyGetResponse parses an HTTP response from a BucketPolicyGetWithResponse call
func ParseBucketPolicyGetResponse(rsp *http.Response) (*BucketPolicyGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BucketPolicyGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBucketPolicyPutResponse parses an HTTP response from a BucketPolicyPutWithResponse call
func ParseBucketPolicyPutResponse(rsp *http.Response) (*BucketPolicyPutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BucketPolicyPutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseBucketStaticWebDeleteResponse parses an HTTP response from a BucketStaticWebDeleteWithResponse call
func ParseBucketStaticWebDeleteResponse(rsp *http.Response) (*BucketStaticWebDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BucketStaticWebDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseBucketStaticWebCreateResponse parses an HTTP response from a BucketStaticWebCreateWithResponse call
func ParseBucketStaticWebCreateResponse(rsp *http.Response) (*BucketStaticWebCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BucketStaticWebCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BucketStaticWebShow
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBucketStaticWebShowResponse parses an HTTP response from a BucketStaticWebShowWithResponse call
func ParseBucketStaticWebShowResponse(rsp *http.Response) (*BucketStaticWebShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BucketStaticWebShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BucketStaticWebCreate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteBucketTagsResponse parses an HTTP response from a DeleteBucketTagsWithResponse call
func ParseDeleteBucketTagsResponse(rsp *http.Response) (*DeleteBucketTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBucketTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetBucketTagsResponse parses an HTTP response from a GetBucketTagsWithResponse call
func ParseGetBucketTagsResponse(rsp *http.Response) (*GetBucketTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBucketTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutBucketTagsResponse parses an HTTP response from a PutBucketTagsWithResponse call
func ParsePutBucketTagsResponse(rsp *http.Response) (*PutBucketTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBucketTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBucketVersioningShowResponse parses an HTTP response from a BucketVersioningShowWithResponse call
func ParseBucketVersioningShowResponse(rsp *http.Response) (*BucketVersioningShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BucketVersioningShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BucketVersioning
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBucketVersioningActionResponse parses an HTTP response from a BucketVersioningActionWithResponse call
func ParseBucketVersioningActionResponse(rsp *http.Response) (*BucketVersioningActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BucketVersioningActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseBucketObjectVersionListResponse parses an HTTP response from a BucketObjectVersionListWithResponse call
func ParseBucketObjectVersionListResponse(rsp *http.Response) (*BucketObjectVersionListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BucketObjectVersionListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListObjectVersion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetObjectVersionAclResponse parses an HTTP response from a GetObjectVersionAclWithResponse call
func ParseGetObjectVersionAclResponse(rsp *http.Response) (*GetObjectVersionAclResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObjectVersionAclResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ObjectAcl
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchObjectVersionAclResponse parses an HTTP response from a PatchObjectVersionAclWithResponse call
func ParsePatchObjectVersionAclResponse(rsp *http.Response) (*PatchObjectVersionAclResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchObjectVersionAclResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ObjectAcl
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseObjectVersionBatchDeleteResponse parses an HTTP response from a ObjectVersionBatchDeleteWithResponse call
func ParseObjectVersionBatchDeleteResponse(rsp *http.Response) (*ObjectVersionBatchDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ObjectVersionBatchDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteObjectVersionResponse parses an HTTP response from a DeleteObjectVersionWithResponse call
func ParseDeleteObjectVersionResponse(rsp *http.Response) (*DeleteObjectVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteObjectVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseObjectVersionDetailsResponse parses an HTTP response from a ObjectVersionDetailsWithResponse call
func ParseObjectVersionDetailsResponse(rsp *http.Response) (*ObjectVersionDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ObjectVersionDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ObjectDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseObjectVersionRestoreResponse parses an HTTP response from a ObjectVersionRestoreWithResponse call
func ParseObjectVersionRestoreResponse(rsp *http.Response) (*ObjectVersionRestoreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ObjectVersionRestoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetObjectVersionShareUrlResponse parses an HTTP response from a GetObjectVersionShareUrlWithResponse call
func ParseGetObjectVersionShareUrlResponse(rsp *http.Response) (*GetObjectVersionShareUrlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObjectVersionShareUrlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ObjectPublicUrl
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAllObjectVersionTagsResponse parses an HTTP response from a DeleteAllObjectVersionTagsWithResponse call
func ParseDeleteAllObjectVersionTagsResponse(rsp *http.Response) (*DeleteAllObjectVersionTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAllObjectVersionTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetObjectVersionTagsResponse parses an HTTP response from a GetObjectVersionTagsWithResponse call
func ParseGetObjectVersionTagsResponse(rsp *http.Response) (*GetObjectVersionTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObjectVersionTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutObjectVersionTagsResponse parses an HTTP response from a PutObjectVersionTagsWithResponse call
func ParsePutObjectVersionTagsResponse(rsp *http.Response) (*PutObjectVersionTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutObjectVersionTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseObjectStorageBucketsDestroyResponse parses an HTTP response from a ObjectStorageBucketsDestroyWithResponse call
func ParseObjectStorageBucketsDestroyResponse(rsp *http.Response) (*ObjectStorageBucketsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ObjectStorageBucketsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseObjectStorageBucketsRetrieveResponse parses an HTTP response from a ObjectStorageBucketsRetrieveWithResponse call
func ParseObjectStorageBucketsRetrieveResponse(rsp *http.Response) (*ObjectStorageBucketsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ObjectStorageBucketsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowBucket
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseS3KeyListResponse parses an HTTP response from a S3KeyListWithResponse call
func ParseS3KeyListResponse(rsp *http.Response) (*S3KeyListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &S3KeyListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest S3Key
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseS3KeyCreateResponse parses an HTTP response from a S3KeyCreateWithResponse call
func ParseS3KeyCreateResponse(rsp *http.Response) (*S3KeyCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &S3KeyCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest S3Key
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseS3KeyDeleteResponse parses an HTTP response from a S3KeyDeleteWithResponse call
func ParseS3KeyDeleteResponse(rsp *http.Response) (*S3KeyDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &S3KeyDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseStorageClassListResponse parses an HTTP response from a StorageClassListWithResponse call
func ParseStorageClassListResponse(rsp *http.Response) (*StorageClassListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StorageClassListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOrganizationRegionsListResponse parses an HTTP response from a OrganizationRegionsListWithResponse call
func ParseOrganizationRegionsListResponse(rsp *http.Response) (*OrganizationRegionsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationRegionsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedRegionList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrganizationRegionsRetrieveResponse parses an HTTP response from a OrganizationRegionsRetrieveWithResponse call
func ParseOrganizationRegionsRetrieveResponse(rsp *http.Response) (*OrganizationRegionsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationRegionsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Region
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrganizationZonesListResponse parses an HTTP response from a OrganizationZonesListWithResponse call
func ParseOrganizationZonesListResponse(rsp *http.Response) (*OrganizationZonesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationZonesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedZoneList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrganizationZonesRetrieveResponse parses an HTTP response from a OrganizationZonesRetrieveWithResponse call
func ParseOrganizationZonesRetrieveResponse(rsp *http.Response) (*OrganizationZonesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationZonesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Zone
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePlanTemplateObjectStoragesListResponse parses an HTTP response from a PlanTemplateObjectStoragesListWithResponse call
func ParsePlanTemplateObjectStoragesListResponse(rsp *http.Response) (*PlanTemplateObjectStoragesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlanTemplateObjectStoragesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedObjectStoragePlanTemplateList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePlanTemplateObjectStoragesRetrieveResponse parses an HTTP response from a PlanTemplateObjectStoragesRetrieveWithResponse call
func ParsePlanTemplateObjectStoragesRetrieveResponse(rsp *http.Response) (*PlanTemplateObjectStoragesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlanTemplateObjectStoragesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ObjectStoragePlanTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePlanTemplateServersListResponse parses an HTTP response from a PlanTemplateServersListWithResponse call
func ParsePlanTemplateServersListResponse(rsp *http.Response) (*PlanTemplateServersListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlanTemplateServersListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedServerPlanTemplateList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePlanTemplateServersRetrieveResponse parses an HTTP response from a PlanTemplateServersRetrieveWithResponse call
func ParsePlanTemplateServersRetrieveResponse(rsp *http.Response) (*PlanTemplateServersRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlanTemplateServersRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerPlanTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePlanTemplateVolumesListResponse parses an HTTP response from a PlanTemplateVolumesListWithResponse call
func ParsePlanTemplateVolumesListResponse(rsp *http.Response) (*PlanTemplateVolumesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlanTemplateVolumesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedVolumePlanTemplateList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePlanTemplateVolumesRetrieveResponse parses an HTTP response from a PlanTemplateVolumesRetrieveWithResponse call
func ParsePlanTemplateVolumesRetrieveResponse(rsp *http.Response) (*PlanTemplateVolumesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlanTemplateVolumesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VolumePlanTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePlanCustomersCacheInfoCreateResponse parses an HTTP response from a PlanCustomersCacheInfoCreateWithResponse call
func ParsePlanCustomersCacheInfoCreateResponse(rsp *http.Response) (*PlanCustomersCacheInfoCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlanCustomersCacheInfoCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlanCustomersCustomerTypesListResponse parses an HTTP response from a PlanCustomersCustomerTypesListWithResponse call
func ParsePlanCustomersCustomerTypesListResponse(rsp *http.Response) (*PlanCustomersCustomerTypesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlanCustomersCustomerTypesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CustomerType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePlanCustomersDistrictsListResponse parses an HTTP response from a PlanCustomersDistrictsListWithResponse call
func ParsePlanCustomersDistrictsListResponse(rsp *http.Response) (*PlanCustomersDistrictsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlanCustomersDistrictsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AdministrativeDivision
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePlanCustomersGetInfoRetrieveResponse parses an HTTP response from a PlanCustomersGetInfoRetrieveWithResponse call
func ParsePlanCustomersGetInfoRetrieveResponse(rsp *http.Response) (*PlanCustomersGetInfoRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlanCustomersGetInfoRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomerResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePlanCustomersGroupTypesListResponse parses an HTTP response from a PlanCustomersGroupTypesListWithResponse call
func ParsePlanCustomersGroupTypesListResponse(rsp *http.Response) (*PlanCustomersGroupTypesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlanCustomersGroupTypesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []GroupType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePlanCustomersPrecinctsListResponse parses an HTTP response from a PlanCustomersPrecinctsListWithResponse call
func ParsePlanCustomersPrecinctsListResponse(rsp *http.Response) (*PlanCustomersPrecinctsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlanCustomersPrecinctsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AdministrativeDivision
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePlanCustomersProvincesListResponse parses an HTTP response from a PlanCustomersProvincesListWithResponse call
func ParsePlanCustomersProvincesListResponse(rsp *http.Response) (*PlanCustomersProvincesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlanCustomersProvincesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AdministrativeDivision
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePlanCustomersUploadIdCreateResponse parses an HTTP response from a PlanCustomersUploadIdCreateWithResponse call
func ParsePlanCustomersUploadIdCreateResponse(rsp *http.Response) (*PlanCustomersUploadIdCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlanCustomersUploadIdCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdentityDocumentsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePlanObjectStoragesListResponse parses an HTTP response from a PlanObjectStoragesListWithResponse call
func ParsePlanObjectStoragesListResponse(rsp *http.Response) (*PlanObjectStoragesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlanObjectStoragesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedObjectStoragePlanList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePlanObjectStoragesRetrieveResponse parses an HTTP response from a PlanObjectStoragesRetrieveWithResponse call
func ParsePlanObjectStoragesRetrieveResponse(rsp *http.Response) (*PlanObjectStoragesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlanObjectStoragesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ObjectStoragePlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePlanOrdersListResponse parses an HTTP response from a PlanOrdersListWithResponse call
func ParsePlanOrdersListResponse(rsp *http.Response) (*PlanOrdersListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlanOrdersListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedOrderList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePlanOrdersCreateResponse parses an HTTP response from a PlanOrdersCreateWithResponse call
func ParsePlanOrdersCreateResponse(rsp *http.Response) (*PlanOrdersCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlanOrdersCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Order
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePlanOrdersCalculatePriceCreateResponse parses an HTTP response from a PlanOrdersCalculatePriceCreateWithResponse call
func ParsePlanOrdersCalculatePriceCreateResponse(rsp *http.Response) (*PlanOrdersCalculatePriceCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlanOrdersCalculatePriceCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Order
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePlanOrdersPreviewContractCreateResponse parses an HTTP response from a PlanOrdersPreviewContractCreateWithResponse call
func ParsePlanOrdersPreviewContractCreateResponse(rsp *http.Response) (*PlanOrdersPreviewContractCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlanOrdersPreviewContractCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContractPreview
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePlanOrdersRetrieveResponse parses an HTTP response from a PlanOrdersRetrieveWithResponse call
func ParsePlanOrdersRetrieveResponse(rsp *http.Response) (*PlanOrdersRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlanOrdersRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Order
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePlanOrdersCancelCreateResponse parses an HTTP response from a PlanOrdersCancelCreateWithResponse call
func ParsePlanOrdersCancelCreateResponse(rsp *http.Response) (*PlanOrdersCancelCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlanOrdersCancelCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlanOrdersInvoiceRetrieveResponse parses an HTTP response from a PlanOrdersInvoiceRetrieveWithResponse call
func ParsePlanOrdersInvoiceRetrieveResponse(rsp *http.Response) (*PlanOrdersInvoiceRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlanOrdersInvoiceRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrderInvoice
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePlanServersListResponse parses an HTTP response from a PlanServersListWithResponse call
func ParsePlanServersListResponse(rsp *http.Response) (*PlanServersListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlanServersListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedServerPlanList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePlanServersRetrieveResponse parses an HTTP response from a PlanServersRetrieveWithResponse call
func ParsePlanServersRetrieveResponse(rsp *http.Response) (*PlanServersRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlanServersRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerPlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePlanVolumesListResponse parses an HTTP response from a PlanVolumesListWithResponse call
func ParsePlanVolumesListResponse(rsp *http.Response) (*PlanVolumesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlanVolumesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedVolumePlanList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePlanVolumesRetrieveResponse parses an HTTP response from a PlanVolumesRetrieveWithResponse call
func ParsePlanVolumesRetrieveResponse(rsp *http.Response) (*PlanVolumesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlanVolumesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VolumePlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSecretManagerSecretsListResponse parses an HTTP response from a SecretManagerSecretsListWithResponse call
func ParseSecretManagerSecretsListResponse(rsp *http.Response) (*SecretManagerSecretsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecretManagerSecretsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedSecretListList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSecretManagerSecretsCreateResponse parses an HTTP response from a SecretManagerSecretsCreateWithResponse call
func ParseSecretManagerSecretsCreateResponse(rsp *http.Response) (*SecretManagerSecretsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecretManagerSecretsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Secret
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseSecretManagerSecretsDestroyResponse parses an HTTP response from a SecretManagerSecretsDestroyWithResponse call
func ParseSecretManagerSecretsDestroyResponse(rsp *http.Response) (*SecretManagerSecretsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecretManagerSecretsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSecretManagerSecretsRetrieveResponse parses an HTTP response from a SecretManagerSecretsRetrieveWithResponse call
func ParseSecretManagerSecretsRetrieveResponse(rsp *http.Response) (*SecretManagerSecretsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecretManagerSecretsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecretRetrieve
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSecretManagerSecretsPartialUpdateResponse parses an HTTP response from a SecretManagerSecretsPartialUpdateWithResponse call
func ParseSecretManagerSecretsPartialUpdateResponse(rsp *http.Response) (*SecretManagerSecretsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecretManagerSecretsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecretUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSecretManagerSecretsUpdateResponse parses an HTTP response from a SecretManagerSecretsUpdateWithResponse call
func ParseSecretManagerSecretsUpdateResponse(rsp *http.Response) (*SecretManagerSecretsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecretManagerSecretsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecretUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSecretManagerSecretsMetadataRetrieveResponse parses an HTTP response from a SecretManagerSecretsMetadataRetrieveWithResponse call
func ParseSecretManagerSecretsMetadataRetrieveResponse(rsp *http.Response) (*SecretManagerSecretsMetadataRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecretManagerSecretsMetadataRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Secret
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSecretManagerSecretsMetadataCreateResponse parses an HTTP response from a SecretManagerSecretsMetadataCreateWithResponse call
func ParseSecretManagerSecretsMetadataCreateResponse(rsp *http.Response) (*SecretManagerSecretsMetadataCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecretManagerSecretsMetadataCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Secret
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseServiceCatalogFavoriteServicesListResponse parses an HTTP response from a ServiceCatalogFavoriteServicesListWithResponse call
func ParseServiceCatalogFavoriteServicesListResponse(rsp *http.Response) (*ServiceCatalogFavoriteServicesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ServiceCatalogFavoriteServicesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedFavoriteServiceList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseServiceCatalogFavoriteServicesCreateResponse parses an HTTP response from a ServiceCatalogFavoriteServicesCreateWithResponse call
func ParseServiceCatalogFavoriteServicesCreateResponse(rsp *http.Response) (*ServiceCatalogFavoriteServicesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ServiceCatalogFavoriteServicesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest FavoriteService
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseServiceCatalogFavoriteServicesDestroyResponse parses an HTTP response from a ServiceCatalogFavoriteServicesDestroyWithResponse call
func ParseServiceCatalogFavoriteServicesDestroyResponse(rsp *http.Response) (*ServiceCatalogFavoriteServicesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ServiceCatalogFavoriteServicesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseServiceCatalogFavoriteServicesRetrieveResponse parses an HTTP response from a ServiceCatalogFavoriteServicesRetrieveWithResponse call
func ParseServiceCatalogFavoriteServicesRetrieveResponse(rsp *http.Response) (*ServiceCatalogFavoriteServicesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ServiceCatalogFavoriteServicesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FavoriteService
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseServiceCatalogServicesListResponse parses an HTTP response from a ServiceCatalogServicesListWithResponse call
func ParseServiceCatalogServicesListResponse(rsp *http.Response) (*ServiceCatalogServicesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ServiceCatalogServicesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedServiceList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseServiceCatalogServicesCreateResponse parses an HTTP response from a ServiceCatalogServicesCreateWithResponse call
func ParseServiceCatalogServicesCreateResponse(rsp *http.Response) (*ServiceCatalogServicesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ServiceCatalogServicesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Service
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseServiceCatalogServicesUsingServicesRetrieveResponse parses an HTTP response from a ServiceCatalogServicesUsingServicesRetrieveWithResponse call
func ParseServiceCatalogServicesUsingServicesRetrieveResponse(rsp *http.Response) (*ServiceCatalogServicesUsingServicesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ServiceCatalogServicesUsingServicesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Service
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseServiceCatalogServicesDestroyResponse parses an HTTP response from a ServiceCatalogServicesDestroyWithResponse call
func ParseServiceCatalogServicesDestroyResponse(rsp *http.Response) (*ServiceCatalogServicesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ServiceCatalogServicesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseServiceCatalogServicesRetrieveResponse parses an HTTP response from a ServiceCatalogServicesRetrieveWithResponse call
func ParseServiceCatalogServicesRetrieveResponse(rsp *http.Response) (*ServiceCatalogServicesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ServiceCatalogServicesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServiceDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseServiceCatalogServicesPartialUpdateResponse parses an HTTP response from a ServiceCatalogServicesPartialUpdateWithResponse call
func ParseServiceCatalogServicesPartialUpdateResponse(rsp *http.Response) (*ServiceCatalogServicesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ServiceCatalogServicesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Service
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseServiceCatalogServicesUpdateResponse parses an HTTP response from a ServiceCatalogServicesUpdateWithResponse call
func ParseServiceCatalogServicesUpdateResponse(rsp *http.Response) (*ServiceCatalogServicesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ServiceCatalogServicesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Service
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSupportQuestionsListResponse parses an HTTP response from a SupportQuestionsListWithResponse call
func ParseSupportQuestionsListResponse(rsp *http.Response) (*SupportQuestionsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SupportQuestionsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedQuestionList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSupportQuestionsCreateResponse parses an HTTP response from a SupportQuestionsCreateWithResponse call
func ParseSupportQuestionsCreateResponse(rsp *http.Response) (*SupportQuestionsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SupportQuestionsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Question
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseSupportQuestionsRetrieveResponse parses an HTTP response from a SupportQuestionsRetrieveWithResponse call
func ParseSupportQuestionsRetrieveResponse(rsp *http.Response) (*SupportQuestionsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SupportQuestionsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Question
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSupportQuestionsPartialUpdateResponse parses an HTTP response from a SupportQuestionsPartialUpdateWithResponse call
func ParseSupportQuestionsPartialUpdateResponse(rsp *http.Response) (*SupportQuestionsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SupportQuestionsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QuestionUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTenantProjectUsersListResponse parses an HTTP response from a TenantProjectUsersListWithResponse call
func ParseTenantProjectUsersListResponse(rsp *http.Response) (*TenantProjectUsersListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TenantProjectUsersListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedProjectUserList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTenantProjectUsersDestroyResponse parses an HTTP response from a TenantProjectUsersDestroyWithResponse call
func ParseTenantProjectUsersDestroyResponse(rsp *http.Response) (*TenantProjectUsersDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TenantProjectUsersDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTenantProjectUsersRetrieveResponse parses an HTTP response from a TenantProjectUsersRetrieveWithResponse call
func ParseTenantProjectUsersRetrieveResponse(rsp *http.Response) (*TenantProjectUsersRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TenantProjectUsersRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTenantProjectUsersPartialUpdateResponse parses an HTTP response from a TenantProjectUsersPartialUpdateWithResponse call
func ParseTenantProjectUsersPartialUpdateResponse(rsp *http.Response) (*TenantProjectUsersPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TenantProjectUsersPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTenantProjectUsersUpdateResponse parses an HTTP response from a TenantProjectUsersUpdateWithResponse call
func ParseTenantProjectUsersUpdateResponse(rsp *http.Response) (*TenantProjectUsersUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TenantProjectUsersUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTenantProjectsListResponse parses an HTTP response from a TenantProjectsListWithResponse call
func ParseTenantProjectsListResponse(rsp *http.Response) (*TenantProjectsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TenantProjectsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedProjectList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTenantProjectsCreateResponse parses an HTTP response from a TenantProjectsCreateWithResponse call
func ParseTenantProjectsCreateResponse(rsp *http.Response) (*TenantProjectsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TenantProjectsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseTenantProjectsDestroyResponse parses an HTTP response from a TenantProjectsDestroyWithResponse call
func ParseTenantProjectsDestroyResponse(rsp *http.Response) (*TenantProjectsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TenantProjectsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTenantProjectsRetrieveResponse parses an HTTP response from a TenantProjectsRetrieveWithResponse call
func ParseTenantProjectsRetrieveResponse(rsp *http.Response) (*TenantProjectsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TenantProjectsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTenantProjectsPartialUpdateResponse parses an HTTP response from a TenantProjectsPartialUpdateWithResponse call
func ParseTenantProjectsPartialUpdateResponse(rsp *http.Response) (*TenantProjectsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TenantProjectsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTenantProjectsUpdateResponse parses an HTTP response from a TenantProjectsUpdateWithResponse call
func ParseTenantProjectsUpdateResponse(rsp *http.Response) (*TenantProjectsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TenantProjectsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTenantProjectsServicesRetrieveResponse parses an HTTP response from a TenantProjectsServicesRetrieveWithResponse call
func ParseTenantProjectsServicesRetrieveResponse(rsp *http.Response) (*TenantProjectsServicesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TenantProjectsServicesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTenantUsersListResponse parses an HTTP response from a TenantUsersListWithResponse call
func ParseTenantUsersListResponse(rsp *http.Response) (*TenantUsersListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TenantUsersListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedUserList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTenantUsersCurrentUserRetrieveResponse parses an HTTP response from a TenantUsersCurrentUserRetrieveWithResponse call
func ParseTenantUsersCurrentUserRetrieveResponse(rsp *http.Response) (*TenantUsersCurrentUserRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TenantUsersCurrentUserRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTenantUsersRetrieveResponse parses an HTTP response from a TenantUsersRetrieveWithResponse call
func ParseTenantUsersRetrieveResponse(rsp *http.Response) (*TenantUsersRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TenantUsersRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTenantUsersPartialUpdateResponse parses an HTTP response from a TenantUsersPartialUpdateWithResponse call
func ParseTenantUsersPartialUpdateResponse(rsp *http.Response) (*TenantUsersPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TenantUsersPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTenantUsersUpdateResponse parses an HTTP response from a TenantUsersUpdateWithResponse call
func ParseTenantUsersUpdateResponse(rsp *http.Response) (*TenantUsersUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TenantUsersUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
